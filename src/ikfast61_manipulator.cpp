/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2020-10-28 18:23:19.159462
/// Generated using solver transform6d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKsin(j[4]);
x8=IKcos(j[4]);
x9=IKsin(j[0]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=((1.0)*x9);
x13=((1.0)*x6);
x14=((1.0)*x8);
x15=((1.0)*x5);
x16=((0.392)*x0);
x17=((0.1)*x9);
x18=((0.1)*x2);
x19=((0.425)*x1);
x20=((1.0)*x0);
x21=((0.392)*x9);
x22=(x1*x3);
x23=(x3*x4);
x24=(x0*x4);
x25=(x2*x4);
x26=(x1*x2);
x27=((0.1)*x23);
x28=(x20*x22);
x29=(x12*x22);
x30=(x26+x23);
x31=((((-1.0)*x25))+(((1.0)*x22)));
x32=((((-1.0)*x23))+(((-1.0)*x26)));
x33=(x31*x5);
x34=(x32*x6);
x35=(x28+(((-1.0)*x20*x25)));
x36=((((-1.0)*x12*x25))+x29);
x37=(x20*((x26+x23)));
x38=(x12*((x26+x23)));
x39=(x36*x6);
x40=(((x31*x6))+((x30*x5)));
x41=(x40*x8);
x42=(((x5*(((((-1.0)*x28))+((x2*x24))))))+((x37*x6)));
x43=(((x5*(((((-1.0)*x29))+((x25*x9))))))+((x38*x6)));
x44=((((-1.0)*x14*x42))+((x12*x7)));
x45=((((-1.0)*x14*x43))+(((-1.0)*x20*x7)));
eerot[0]=(((x10*x44))+((x11*(((((-1.0)*x13*x35))+(((-1.0)*x15*x37)))))));
eerot[1]=(((x8*x9))+((x42*x7)));
eerot[2]=(((x11*x44))+((x10*((((x35*x6))+((x37*x5)))))));
eetrans[0]=((((-1.0)*x0*x19))+(((-1.0)*x16*x22))+((x16*x25))+(((0.134)*x9))+((x6*(((((-1.0)*x18*x24))+(((0.1)*x0*x22))))))+((x5*((((x0*x27))+((x0*x1*x18)))))));
eerot[3]=(((x10*x45))+((x11*(((((-1.0)*x13*x36))+(((-1.0)*x15*x38)))))));
eerot[4]=((((-1.0)*x0*x14))+((x43*x7)));
eerot[5]=(((x11*x45))+((x10*((x39+((x38*x5)))))));
eetrans[1]=((((-1.0)*x21*x22))+((x21*x25))+(((-1.0)*x19*x9))+(((-0.134)*x0))+((x6*(((((-1.0)*x17*x25))+((x17*x22))))))+((x5*((((x17*x23))+((x17*x26)))))));
eerot[6]=(((x10*x41))+((x11*((x33+x34)))));
eerot[7]=(x7*(((((-1.0)*x13*x31))+(((-1.0)*x15*x30)))));
eerot[8]=(((x11*x41))+((x10*(((((-1.0)*x34))+(((-1.0)*x33)))))));
eetrans[2]=((0.163)+((x6*((((x1*x18))+x27))))+(((-0.392)*x26))+(((-0.392)*x23))+(((-0.425)*x4))+((x5*((((x18*x4))+(((-0.1)*x22)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r00);
new_r01=r02;
new_r02=((-1.0)*r01);
new_px=((-1.0)*px);
new_r10=((-1.0)*r10);
new_r11=r12;
new_r12=((-1.0)*r11);
new_py=((-1.0)*py);
new_r20=r20;
new_r21=((-1.0)*r22);
new_r22=r21;
new_pz=((-0.163)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x46=((1.0)*px);
IkReal x47=((1.0)*pz);
IkReal x48=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x48))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x47)));
rxp0_2=((((-1.0)*r10*x46))+((py*r00)));
rxp1_0=((((-1.0)*r21*x48))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x47)));
rxp1_2=((((-1.0)*r11*x46))+((py*r01)));
rxp2_0=((((-1.0)*r22*x48))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x47))+((px*r22)));
rxp2_2=((((-1.0)*r12*x46))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x49=((0.2)*npx);
IkReal x50=((0.2)*npy);
IkReal x51=((0.1)*r22);
IkReal x52=((0.1)*r21);
IkReal x53=((-0.1)*r20);
IkReal x54=((-1.0)*r20);
IkReal x55=((-1.0)*rxp0_2);
IkReal x56=((-0.1)*r21);
IkReal x57=((-1.0)*r21);
IkReal x58=((-1.0)*rxp1_2);
IkReal x59=((-1.0)*npx);
IkReal x60=((-1.0)*r22);
IkReal x61=((-1.0)*npz);
matrixinvcoeffs[0]=x53;
matrixinvcoeffs[1]=x49;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x54;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x55;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x53;
matrixinvcoeffs[19]=x49;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x54;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x55;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x56;
matrixinvcoeffs[33]=x50;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x57;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x58;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x56;
matrixinvcoeffs[51]=x50;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x57;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x58;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x60;
matrixinvcoeffs[76]=x51;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x61;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x51;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x58;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x56;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x58;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x52;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x54;
matrixinvcoeffs[133]=x59;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.1)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x54;
matrixinvcoeffs[151]=x59;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x53;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x60;
matrixinvcoeffs[165]=x61;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x51;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x60;
matrixinvcoeffs[183]=x61;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.1)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x57;
matrixinvcoeffs[204]=x52;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x58;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x52;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x59;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x53;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x54;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x53;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x55;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x62=pz*pz;
IkReal x63=pp*pp;
IkReal x64=((0.2)*pz);
IkReal x65=(pp*r21);
IkReal x66=(gclwh13_10*rxp1_2);
IkReal x67=((0.00134)*r22);
IkReal x68=(npx*pz);
IkReal x69=((0.001)*r21);
IkReal x70=(pp*r20);
IkReal x71=(npy*pz);
IkReal x72=((4.0)*gclwh12_11);
IkReal x73=(gclwh10_11*r22);
IkReal x74=((0.00784)*r21);
IkReal x75=(pp*r22);
IkReal x76=(gclwh15_9*r20);
IkReal x77=(gclwh15_1*r20);
IkReal x78=(gclwh12_8*r21);
IkReal x79=((0.01)*r22);
IkReal x80=((0.2)*rxp2_2);
IkReal x81=(gclwh4_3*pp);
IkReal x82=(npz*pz);
IkReal x83=((2.0)*gclwh11_10);
IkReal x84=((0.01)*r21);
IkReal x85=(gclwh2_0*pz);
IkReal x86=(gclwh14_2*pz);
IkReal x87=(gclwh14_11*rxp0_2);
IkReal x88=((0.4)*rxp2_2);
IkReal x89=((0.00784)*r22);
IkReal x90=((1.0)*pz);
IkReal x91=((2.0)*gclwh4_11);
IkReal x92=((0.02)*r21);
IkReal x93=((0.1568)*rxp0_2);
IkReal x94=((0.0066)*rxp1_2);
IkReal x95=(gclwh8_2*r20);
IkReal x96=((0.0066)*rxp2_2);
IkReal x97=((0.01634)*r20);
IkReal x98=((9.045e-5)*r20);
IkReal x99=(gclwh14_8*r20);
IkReal x100=((0.02)*r22);
IkReal x101=((2.0)*gclwh9_10);
IkReal x102=(gclwh12_3*rxp1_2);
IkReal x103=(gclwh13_1*r21);
IkReal x104=((4.0)*gclwh14_11);
IkReal x105=((0.00268)*r20);
IkReal x106=(gclwh10_12*r22);
IkReal x107=((2.0)*gclwh13_10);
IkReal x108=((0.268)*gclwh14_14);
IkReal x109=(gclwh14_3*rxp0_2);
IkReal x110=((0.02)*rxp0_2);
IkReal x111=(gclwh12_14*r21);
IkReal x112=((2.0)*pp);
IkReal x113=((4.0)*gclwh11_10);
IkReal x114=(gclwh8_11*r20);
IkReal x115=((0.0132)*rxp2_2);
IkReal x116=((0.0132)*rxp0_2);
IkReal x117=((0.00817)*r22);
IkReal x118=(gclwh5_1*rxp2_2);
IkReal x119=((0.0268)*rxp2_2);
IkReal x120=(gclwh9_10*r20);
IkReal x121=(gclwh4_2*pz);
IkReal x122=(gclwh14_11*r20);
IkReal x123=((0.2)*rxp1_2);
IkReal x124=(gclwh5_0*rxp2_2);
IkReal x125=((0.1634)*rxp1_2);
IkReal x126=(gclwh13_15*r21);
IkReal x127=((4.0)*gclwh8_11);
IkReal x128=((0.00134)*r20);
IkReal x129=(gclwh3_3*r21);
IkReal x130=(gclwh5_1*r22);
IkReal x131=((0.0268)*rxp1_2);
IkReal x132=(gclwh7_13*r21);
IkReal x133=((2.0)*gclwh7_10);
IkReal x134=((0.0066)*rxp0_2);
IkReal x135=(gclwh13_9*rxp1_2);
IkReal x136=((0.00033)*r21);
IkReal x137=(gclwh2_1*r21);
IkReal x138=(gclwh7_0*pz);
IkReal x139=((0.536)*gclwh14_14);
IkReal x140=(gclwh6_11*rxp1_2);
IkReal x141=((0.17)*rxp2_2);
IkReal x142=((0.0536)*rxp1_2);
IkReal x143=(gclwh10_12*rxp2_2);
IkReal x144=((0.3268)*rxp1_2);
IkReal x145=((4.0)*gclwh9_10);
IkReal x146=((0.8)*rxp2_2);
IkReal x147=((0.04)*r22);
IkReal x148=((0.01634)*r21);
IkReal x149=((0.01)*r20);
IkReal x150=((4.0)*gclwh7_10);
IkReal x151=((0.1568)*rxp1_2);
IkReal x152=((0.2)*rxp0_2);
IkReal x153=((4.0)*gclwh4_11);
IkReal x154=((0.04)*r21);
IkReal x155=(gclwh10_2*r22);
IkReal x156=((0.2)*pp);
IkReal x157=(gclwh13_9*r21);
IkReal x158=((0.17)*rxp0_2);
IkReal x159=((0.268)*gclwh4_14);
IkReal x160=(gclwh12_8*rxp1_2);
IkReal x161=((0.8)*rxp0_2);
IkReal x162=((2.0)*gclwh6_11);
IkReal x163=(gclwh6_12*r21);
IkReal x164=(gclwh1_3*r20);
IkReal x165=((0.02)*rxp2_2);
IkReal x166=((0.0268)*rxp0_2);
IkReal x167=(gclwh8_2*rxp0_2);
IkReal x168=((0.1634)*rxp0_2);
IkReal x169=((2.0)*gclwh12_11);
IkReal x170=(gclwh10_2*rxp2_2);
IkReal x171=((0.1072)*rxp1_2);
IkReal x172=((2.0)*gclwh5_10);
IkReal x173=(gclwh11_0*r22);
IkReal x174=((0.268)*gclwh13_15);
IkReal x175=(gclwh10_2*pz);
IkReal x176=((0.268)*gclwh15_15);
IkReal x177=(gclwh9_0*pz);
IkReal x178=(gclwh4_3*r22);
IkReal x179=((2.0)*gclwh8_11);
IkReal x180=((2.0)*gclwh15_10);
IkReal x181=((0.268)*gclwh5_15);
IkReal x182=(gclwh4_14*rxp2_2);
IkReal x183=(gclwh4_8*r22);
IkReal x184=((0.00268)*r22);
IkReal x185=(gclwh4_3*rxp2_2);
IkReal x186=(gclwh12_3*r21);
IkReal x187=(gclwh9_0*r20);
IkReal x188=((0.00817)*r20);
IkReal x189=((0.3268)*rxp0_2);
IkReal x190=((4.0)*gclwh6_11);
IkReal x191=(gclwh12_11*rxp1_2);
IkReal x192=(gclwh11_0*pz);
IkReal x193=(gclwh5_9*r22);
IkReal x194=(gclwh5_0*pz);
IkReal x195=((0.4)*rxp0_2);
IkReal x196=((0.0132)*rxp1_2);
IkReal x197=((0.00784)*r20);
IkReal x198=((0.1568)*rxp2_2);
IkReal x199=((0.1634)*rxp2_2);
IkReal x200=((0.00675445)*r20);
IkReal x201=((0.536)*gclwh12_14);
IkReal x202=(gclwh15_1*rxp0_2);
IkReal x203=(gclwh13_0*pz);
IkReal x204=(gclwh9_13*r20);
IkReal x205=(gclwh11_13*r22);
IkReal x206=((0.1072)*rxp0_2);
IkReal x207=((0.00066)*r21);
IkReal x208=((0.536)*gclwh4_14);
IkReal x209=(gclwh5_15*rxp2_2);
IkReal x210=((0.00134)*r21);
IkReal x211=(gclwh8_12*r20);
IkReal x212=(gclwh13_1*rxp1_2);
IkReal x213=(gclwh6_2*pz);
IkReal x214=((2.0)*gclwh14_11);
IkReal x215=((0.0536)*rxp0_2);
IkReal x216=((0.268)*gclwh12_14);
IkReal x217=(gclwh12_2*pz);
IkReal x218=(gclwh14_14*x166);
IkReal x219=(gclwh6_5*x210);
IkReal x220=(gclwh4_14*x119);
IkReal x221=(gclwh10_5*x67);
IkReal x222=(gclwh8_5*x128);
IkReal x223=(gclwh12_14*x131);
IkReal x224=((0.02)*x160);
IkReal x225=(gclwh12_11*x123);
IkReal x226=(gclwh4_8*x165);
IkReal x227=(gclwh4_11*x80);
IkReal x228=(gclwh6_11*x84);
IkReal x229=((0.01)*x114);
IkReal x230=((0.01)*x73);
IkReal x231=((0.2)*x87);
IkReal x232=(gclwh14_8*x110);
IkReal x233=((0.02)*x135);
IkReal x234=(gclwh11_10*x79);
IkReal x235=(gclwh15_10*x152);
IkReal x236=((0.01)*x120);
IkReal x237=(gclwh5_9*x165);
IkReal x238=(gclwh7_10*x84);
IkReal x239=(gclwh5_10*x80);
IkReal x240=(gclwh15_9*x110);
IkReal x241=((0.2)*x66);
IkReal x242=(gclwh15_15*x166);
IkReal x243=(gclwh7_7*x210);
IkReal x244=(gclwh13_15*x131);
IkReal x245=(gclwh9_7*x128);
IkReal x246=(gclwh11_7*x67);
IkReal x247=(gclwh5_15*x119);
IkReal x248=(gclwh8_5*x166);
IkReal x249=(gclwh10_5*x119);
IkReal x250=(gclwh14_14*x128);
IkReal x251=((0.00134)*x111);
IkReal x252=(gclwh4_14*x67);
IkReal x253=(gclwh6_5*x131);
IkReal x254=(gclwh12_11*x84);
IkReal x255=(gclwh10_11*x80);
IkReal x256=((0.001)*x183);
IkReal x257=(gclwh4_11*x79);
IkReal x258=(gclwh8_11*x152);
IkReal x259=(gclwh12_8*x69);
IkReal x260=((0.001)*x99);
IkReal x261=(gclwh6_11*x123);
IkReal x262=((0.01)*x122);
IkReal x263=((0.001)*x76);
IkReal x264=(gclwh11_10*x80);
IkReal x265=(gclwh13_10*x84);
IkReal x266=(gclwh5_10*x79);
IkReal x267=(gclwh9_10*x152);
IkReal x268=((0.001)*x193);
IkReal x269=(gclwh13_9*x69);
IkReal x270=(gclwh7_10*x123);
IkReal x271=(gclwh15_10*x149);
IkReal x272=(gclwh5_15*x67);
IkReal x273=((0.00134)*x126);
IkReal x274=(gclwh7_7*x131);
IkReal x275=(gclwh11_7*x119);
IkReal x276=(gclwh9_7*x166);
IkReal x277=(gclwh15_15*x128);
IkReal x278=((0.4)*x87);
IkReal x279=((0.02)*x73);
IkReal x280=((0.02)*x114);
IkReal x281=(gclwh14_14*x215);
IkReal x282=(gclwh12_14*x142);
IkReal x283=((0.0536)*x182);
IkReal x284=(gclwh4_11*x88);
IkReal x285=(gclwh6_11*x92);
IkReal x286=((0.4)*x191);
IkReal x287=(gclwh13_15*x142);
IkReal x288=((0.0536)*x209);
IkReal x289=(gclwh15_15*x215);
IkReal x290=(gclwh11_10*x100);
IkReal x291=(gclwh15_10*x195);
IkReal x292=((0.02)*x120);
IkReal x293=((0.4)*x66);
IkReal x294=(gclwh7_10*x92);
IkReal x295=(gclwh5_10*x88);
IkReal x296=((0.02)*x122);
IkReal x297=((0.4)*x140);
IkReal x298=(gclwh14_14*x105);
IkReal x299=((0.00268)*x111);
IkReal x300=(gclwh4_14*x184);
IkReal x301=(gclwh4_11*x100);
IkReal x302=(gclwh12_11*x92);
IkReal x303=(gclwh10_11*x88);
IkReal x304=(gclwh8_11*x195);
IkReal x305=(gclwh15_9*x68);
IkReal x306=((2.0)*x62);
IkReal x307=((1.0)*x63);
IkReal x308=((0.134)*gclwh6_5*x65);
IkReal x309=((0.268)*gclwh10_5*x82);
IkReal x310=((0.268)*gclwh8_5*x68);
IkReal x311=((0.268)*gclwh6_5*x71);
IkReal x312=((0.134)*gclwh8_5*x70);
IkReal x313=((0.134)*gclwh10_5*x75);
IkReal x314=(gclwh14_2*rxp0_2*x64);
IkReal x315=((2.0)*gclwh10_11*x82);
IkReal x316=(x179*x68);
IkReal x317=(x175*x75);
IkReal x318=(x175*x79);
IkReal x319=(x102*x156);
IkReal x320=(gclwh8_2*pz*x70);
IkReal x321=(x80*x81);
IkReal x322=((0.01)*pz*x95);
IkReal x323=(gclwh12_2*rxp1_2*x64);
IkReal x324=(x109*x156);
IkReal x325=(gclwh4_2*rxp2_2*x64);
IkReal x326=(x162*x71);
IkReal x327=(x213*x84);
IkReal x328=(gclwh13_1*pp*x123);
IkReal x329=(x192*x75);
IkReal x330=(gclwh5_1*pp*x80);
IkReal x331=(x133*x71);
IkReal x332=(gclwh15_0*rxp0_2*x64);
IkReal x333=(x192*x79);
IkReal x334=(x149*x177);
IkReal x335=(x177*x70);
IkReal x336=(gclwh15_1*pp*x152);
IkReal x337=(x82*x83);
IkReal x338=(x101*x68);
IkReal x339=(x124*x64);
IkReal x340=(gclwh13_0*rxp1_2*x64);
IkReal x341=(x138*x84);
IkReal x342=((0.268)*gclwh9_7*x68);
IkReal x343=((0.134)*gclwh7_7*x65);
IkReal x344=((0.268)*gclwh11_7*x82);
IkReal x345=((0.134)*gclwh11_7*x75);
IkReal x346=((0.268)*gclwh7_7*x71);
IkReal x347=((0.134)*gclwh9_7*x70);
IkReal x348=(x216*x71);
IkReal x349=((0.134)*gclwh14_14*x70);
IkReal x350=(x159*x82);
IkReal x351=((0.134)*gclwh12_14*x65);
IkReal x352=(x108*x68);
IkReal x353=((0.134)*gclwh4_14*x75);
IkReal x354=(x70*x86);
IkReal x355=(x149*x86);
IkReal x356=((0.1)*gclwh4_8*x75);
IkReal x357=(x186*x63);
IkReal x358=(gclwh1_2*pz*x149);
IkReal x359=(gclwh3_2*pz*x84);
IkReal x360=((0.1)*gclwh12_8*x65);
IkReal x361=(x129*x63);
IkReal x362=(x164*x63);
IkReal x363=(gclwh6_2*rxp1_2*x64);
IkReal x364=(x214*x68);
IkReal x365=(x178*x63);
IkReal x366=(gclwh14_8*npx*x64);
IkReal x367=(x82*x91);
IkReal x368=(gclwh4_8*npz*x64);
IkReal x369=(gclwh12_8*npy*x64);
IkReal x370=(x170*x64);
IkReal x371=(x121*x79);
IkReal x372=(x169*x71);
IkReal x373=(x167*x64);
IkReal x374=((0.1)*gclwh14_8*x70);
IkReal x375=(x217*x84);
IkReal x376=(x203*x84);
IkReal x377=(gclwh0_0*pz*x149);
IkReal x378=(gclwh11_0*rxp2_2*x64);
IkReal x379=(x84*x85);
IkReal x380=(gclwh13_9*npy*x64);
IkReal x381=(x63*x77);
IkReal x382=(x194*x75);
IkReal x383=(x194*x79);
IkReal x384=(x203*x65);
IkReal x385=(gclwh9_0*rxp0_2*x64);
IkReal x386=((0.1)*gclwh15_9*x70);
IkReal x387=(x180*x68);
IkReal x388=(x137*x63);
IkReal x389=(gclwh5_9*npz*x64);
IkReal x390=(gclwh0_1*r20*x63);
IkReal x391=(gclwh7_0*rxp1_2*x64);
IkReal x392=((0.1)*gclwh5_9*x75);
IkReal x393=(gclwh15_9*npx*x64);
IkReal x394=((0.1)*gclwh13_9*x65);
IkReal x395=(x172*x82);
IkReal x396=(gclwh15_0*pz*x149);
IkReal x397=(x107*x71);
IkReal x398=((0.134)*gclwh13_15*x65);
IkReal x399=(x176*x68);
IkReal x400=((0.134)*gclwh5_15*x75);
IkReal x401=(x181*x82);
IkReal x402=((0.134)*gclwh15_15*x70);
IkReal x403=(x174*x71);
IkReal x404=(x179*x70);
IkReal x405=(x112*x73);
IkReal x406=(x190*x71);
IkReal x407=(x127*x68);
IkReal x408=(x162*x65);
IkReal x409=((4.0)*gclwh10_11*x82);
IkReal x410=(x75*x83);
IkReal x411=(x150*x71);
IkReal x412=(x101*x70);
IkReal x413=(x133*x65);
IkReal x414=(x145*x68);
IkReal x415=(x113*x82);
IkReal x416=(x214*x70);
IkReal x417=(x71*x72);
IkReal x418=(x153*x82);
IkReal x419=(x208*x82);
IkReal x420=(x108*x70);
IkReal x421=(x201*x71);
IkReal x422=(x216*x65);
IkReal x423=(x139*x68);
IkReal x424=(x159*x75);
IkReal x425=(x75*x91);
IkReal x426=(x169*x65);
IkReal x427=(x104*x68);
IkReal x428=(gclwh6_2*npy*x306);
IkReal x429=(gclwh6_2*x65*x90);
IkReal x430=(gclwh10_2*npz*x306);
IkReal x431=(gclwh8_2*npx*x306);
IkReal x432=(gclwh7_0*npy*x306);
IkReal x433=(gclwh9_0*npx*x306);
IkReal x434=(gclwh11_0*npz*x306);
IkReal x435=(gclwh7_0*x65*x90);
IkReal x436=(gclwh12_2*npy*x306);
IkReal x437=(gclwh3_2*npy*x306);
IkReal x438=(gclwh1_2*npx*x306);
IkReal x439=(gclwh14_3*x112*x68);
IkReal x440=(gclwh4_2*npz*x306);
IkReal x441=((2.0)*x81*x82);
IkReal x442=(gclwh12_2*x65*x90);
IkReal x443=(gclwh1_2*x70*x90);
IkReal x444=(gclwh3_3*x112*x71);
IkReal x445=(gclwh4_2*x75*x90);
IkReal x446=(gclwh1_3*x112*x68);
IkReal x447=(gclwh3_2*x65*x90);
IkReal x448=(gclwh12_3*x112*x71);
IkReal x449=(gclwh14_2*npx*x306);
IkReal x450=(gclwh14_3*r20*x307);
IkReal x451=(gclwh0_0*npx*x306);
IkReal x452=(gclwh2_0*npy*x306);
IkReal x453=(gclwh5_1*x112*x82);
IkReal x454=(gclwh13_1*x112*x71);
IkReal x455=(gclwh15_0*npx*x306);
IkReal x456=(gclwh2_1*x112*x71);
IkReal x457=(gclwh0_1*x112*x68);
IkReal x458=(gclwh5_0*npz*x306);
IkReal x459=(gclwh13_0*npy*x306);
IkReal x460=(gclwh0_0*x70*x90);
IkReal x461=(gclwh15_0*x70*x90);
IkReal x462=((1.0)*x65*x85);
IkReal x463=(x103*x307);
IkReal x464=(x130*x307);
IkReal x465=(gclwh15_1*x112*x68);
IkReal x466=(x220+x223);
IkReal x467=(x283+x282);
IkReal x468=(x247+x244);
IkReal x469=(x276+x275);
IkReal x470=(x249+x248);
IkReal x471=(x288+x287);
IkReal x472=(x326+x229+x230+x231);
IkReal x473=(x331+x236+x234+x235);
IkReal x474=(x372+x367+x261+x262);
IkReal x475=(x395+x397+x270+x271);
IkReal x476=(x277+x401+x403+x402);
IkReal x477=(x308+x309+x310+x219);
IkReal x478=(x342+x343+x344+x243);
IkReal x479=(x298+x419+x421+x420);
IkReal x480=(x350+x348+x349+x250);
IkReal x481=(x364+x258+x254+x255+x257);
IkReal x482=(x387+x265+x264+x267+x266);
IkReal x483=(x338+x337+x238+x239+x241);
IkReal x484=(x315+x316+x228+x225+x227);
IkReal x485=(x311+x313+x312+x221+x222);
IkReal x486=(x296+x297+x416+x417+x418);
IkReal x487=(x399+x398+x272+x273+x400);
IkReal x488=(x351+x353+x352+x251+x252);
IkReal x489=(x300+x299+x424+x423+x422);
IkReal x490=(x346+x347+x345+x246+x245);
IkReal x491=(x286+x285+x284+x407+x409+x408);
IkReal x492=(x293+x294+x295+x413+x414+x415);
IkReal x493=(x278+x279+x280+x405+x404+x406);
IkReal x494=(x290+x291+x292+x412+x410+x411);
IkReal x495=(x304+x302+x303+x301+x427+x426+x425);
IkReal x496=(x339+x336+x340+x341+x240+x433+x434+x435);
IkReal x497=(x324+x325+x327+x323+x232+x429+x430+x431);
IkReal x498=(x320+x321+x322+x319+x318+x314+x317+x224+x226+x428);
IkReal x499=(x333+x332+x330+x335+x334+x328+x329+x233+x237+x432);
IkReal x500=(x394+x396+x391+x393+x392+x269+x268+x458+x459+x456+x457+x463+x462+x461+x460+x465+x464);
IkReal x501=(x355+x354+x357+x356+x359+x358+x360+x361+x362+x363+x365+x366+x259+x256+x438+x439+x436+x437+x440+x64);
IkReal x502=(x375+x374+x373+x371+x370+x368+x369+x260+x449+x448+x445+x444+x447+x446+x441+x443+x442+x450);
IkReal x503=(x386+x384+x385+x382+x383+x380+x381+x388+x389+x379+x378+x377+x376+x390+x263+x454+x455+x452+x453+x451+x64);
op[0]=((((-1.0)*gclwh4_8*x199))+(((0.817)*gclwh6_12*x65))+(((-1.0)*x485))+(((0.00817)*x163))+(((-1.634)*gclwh6_12*x71))+(((-1.0)*gclwh12_8*x125))+(((-0.817)*gclwh10_12*x75))+x466+x477+((gclwh14_8*x168))+(((1.634)*gclwh8_12*x68))+(((-0.00817)*x106))+(((-1.0)*gclwh8_12*x188))+(((-1.0)*x218))+(((-0.817)*gclwh8_12*x70))+(((1.634)*gclwh10_12*x82)));
op[1]=((((-0.135089)*x185))+(((0.135089)*x109))+(((-1.0)*x497))+(((-1.0)*x484))+(((-1.0)*gclwh6_11*x65))+x498+x472+((gclwh8_11*x70))+((pp*x73))+(((-0.135089)*x102)));
op[2]=((-0.210112)+(((-1.0)*x491))+x493);
op[3]=((((0.784)*gclwh8_2*x70))+(((-1.0)*gclwh6_2*x74))+(((-1.0)*gclwh12_2*x151))+(((-1.0)*gclwh4_2*x198))+(((0.00784)*x95))+(((-1.568)*gclwh10_2*x82))+(((-1.0)*x467))+(((-1.0)*gclwh14_8*x158))+(((-0.784)*gclwh6_2*x65))+((gclwh4_8*x141))+x281+(((1.568)*gclwh6_2*x71))+(((0.784)*gclwh10_2*x75))+((gclwh14_2*x93))+(((-1.568)*gclwh8_2*x68))+((gclwh10_2*x89))+(((0.17)*x160)));
op[4]=((((-1.0)*gclwh14_8*x134))+(((-0.033)*gclwh8_12*x70))+(((0.066)*gclwh8_12*x68))+(((0.033)*gclwh6_12*x65))+(((-1.0)*x485))+(((-0.033)*gclwh10_12*x75))+(((0.066)*gclwh10_12*x82))+(((-1.0)*x466))+(((-0.00033)*x211))+x218+((gclwh6_12*x136))+((gclwh12_8*x94))+x477+(((-0.00033)*x106))+(((-0.066)*gclwh6_12*x71))+((gclwh4_8*x96)));
op[5]=((((-1.0)*x497))+(((-0.001809)*x102))+(((-1.0)*x472))+(((0.001809)*x109))+x484+x498+(((-1.0)*pp*x73))+((gclwh6_11*x65))+(((-0.001809)*x185))+(((-1.0)*gclwh8_11*x70)));
op[6]=((((-0.135089)*x118))+(((-1.0)*x496))+(((0.135089)*x202))+((gclwh7_10*x65))+(((-1.0)*x473))+(((-0.135089)*x212))+(((-1.0)*gclwh11_10*x75))+x483+x499+(((-1.0)*gclwh9_10*x70)));
op[7]=((((0.00817)*x132))+(((1.634)*gclwh9_13*x68))+(((-1.634)*gclwh7_13*x71))+(((-1.0)*x490))+(((-1.0)*gclwh11_13*x117))+(((-0.817)*gclwh11_13*x75))+((gclwh15_9*x168))+(((-1.0)*gclwh9_13*x188))+x468+x478+(((-1.0)*gclwh5_9*x199))+(((-1.0)*gclwh13_9*x125))+(((-1.0)*x242))+(((1.634)*gclwh11_13*x82))+(((0.817)*gclwh7_13*x65))+(((-0.817)*gclwh9_13*x70)));
op[8]=((((-1.0)*gclwh5_9*x141))+(((-0.784)*gclwh7_0*x65))+(((-1.0)*gclwh7_0*x74))+((gclwh15_9*x158))+(((-1.568)*gclwh11_0*x82))+(((1.568)*gclwh7_0*x71))+(((0.00784)*x187))+((gclwh15_0*x93))+(((-1.568)*gclwh9_0*x68))+(((-1.0)*gclwh13_0*x151))+x471+(((0.784)*gclwh9_0*x70))+(((-0.1568)*x124))+((gclwh11_0*x89))+(((-0.17)*x135))+(((-1.0)*x289))+(((0.784)*gclwh11_0*x75)));
op[9]=((-0.210112)+(((-1.0)*x492))+x494);
op[10]=((((-0.001809)*x212))+(((-1.0)*x496))+((gclwh11_10*x75))+(((-1.0)*x483))+(((-0.001809)*x118))+(((-1.0)*gclwh7_10*x65))+(((0.001809)*x202))+x499+x473+((gclwh9_10*x70)));
op[11]=((((-0.00033)*x204))+(((-0.00033)*x205))+(((0.00033)*x132))+(((-1.0)*x490))+(((-0.066)*gclwh7_13*x71))+(((-1.0)*x468))+((gclwh13_9*x94))+(((-0.033)*gclwh9_13*x70))+x242+x478+((gclwh5_9*x96))+(((0.066)*gclwh11_13*x82))+(((0.033)*gclwh7_13*x65))+(((-0.033)*gclwh11_13*x75))+(((0.066)*gclwh9_13*x68))+(((-1.0)*gclwh15_9*x134)));
op[12]=((((-1.634)*gclwh14_8*x68))+(((1.634)*gclwh4_8*x82))+(((-0.817)*gclwh12_8*x65))+(((-1.0)*x480))+(((-1.0)*gclwh6_12*x125))+(((0.817)*gclwh14_8*x70))+(((-1.0)*gclwh4_8*x117))+(((-0.817)*gclwh4_8*x75))+(((0.00817)*x99))+(((0.1634)*x143))+x488+x470+((gclwh8_12*x168))+(((-0.00817)*x78))+(((1.634)*gclwh12_8*x71))+(((-1.0)*x253)));
op[13]=((-0.685445)+(((0.00675445)*x164))+(((1.35089)*gclwh3_3*x71))+(((-1.0)*gclwh12_11*x65))+(((-0.665445)*gclwh4_3*x75))+(((-1.0)*x481))+(((0.665445)*gclwh14_3*x70))+(((-1.0)*x502))+(((0.00675445)*x129))+(((-0.685445)*gclwh3_3*x65))+(((-0.665445)*gclwh12_3*x65))+(((-1.35089)*gclwh14_3*x68))+(((-0.00675445)*x186))+(((-0.00675445)*x178))+x474+(((-0.685445)*gclwh1_3*x70))+((gclwh14_11*x70))+(((1.35089)*gclwh4_3*x82))+(((1.35089)*gclwh12_3*x71))+x501+((gclwh14_3*x200))+(((1.35089)*gclwh1_3*x68))+(((-1.0)*gclwh4_11*x75)));
op[14]=((-0.089834)+(((-1.0)*x495))+x486);
op[15]=(((gclwh1_2*x197))+(((-1.0)*gclwh8_2*x93))+(((1.568)*gclwh12_2*x71))+(((-1.0)*gclwh4_2*x89))+(((0.85)*gclwh4_8*x75))+(((-1.0)*x489))+(((0.0085)*x78))+((gclwh3_2*x74))+(((-0.784)*gclwh3_2*x65))+(((0.0085)*x183))+(((1.568)*gclwh3_2*x71))+(((-1.7)*gclwh4_8*x82))+(((-0.1568)*x170))+(((-1.568)*gclwh14_2*x68))+(((1.7)*gclwh14_8*x68))+x479+(((-0.784)*gclwh4_2*x75))+(((-0.0085)*x99))+(((-0.784)*gclwh1_2*x70))+(((-1.7)*gclwh12_8*x71))+(((-0.784)*gclwh12_2*x65))+(((-1.0)*gclwh12_2*x74))+(((0.784)*gclwh14_2*x70))+((gclwh6_2*x151))+((gclwh14_2*x197))+(((0.85)*gclwh12_8*x65))+(((1.568)*gclwh1_2*x68))+(((1.568)*gclwh4_2*x82))+(((-0.85)*gclwh14_8*x70)));
op[16]=(((gclwh8_12*x134))+(((-1.0)*x488))+(((-0.00033)*x99))+(((-0.066)*gclwh4_8*x82))+(((-0.066)*gclwh12_8*x71))+((gclwh10_12*x96))+(((-0.033)*gclwh14_8*x70))+(((0.00033)*x78))+(((0.033)*gclwh12_8*x65))+x480+x470+(((0.00033)*x183))+(((0.066)*gclwh14_8*x68))+(((0.033)*gclwh4_8*x75))+(((-1.0)*gclwh6_12*x94))+(((-1.0)*x253)));
op[17]=((0.019045)+(((0.01809)*gclwh12_3*x71))+(((-0.019045)*gclwh3_3*x65))+(((0.01809)*gclwh4_3*x82))+(((-1.0)*x502))+(((-0.019045)*gclwh1_3*x70))+(((-1.0)*x474))+(((0.01809)*gclwh3_3*x71))+(((-0.000955)*gclwh14_3*x70))+(((0.000955)*gclwh12_3*x65))+(((9.045e-5)*x129))+x481+(((-9.045e-5)*x178))+(((-9.045e-5)*x186))+x501+((gclwh1_3*x98))+((gclwh14_3*x98))+(((0.01809)*gclwh1_3*x68))+(((-0.01809)*gclwh14_3*x68))+(((0.000955)*gclwh4_3*x75))+((gclwh12_11*x65))+(((-1.0)*gclwh14_11*x70))+((gclwh4_11*x75)));
op[18]=((0.685445)+(((0.665445)*gclwh13_1*x65))+(((-1.0)*x482))+((gclwh0_1*x200))+(((-0.00675445)*x77))+(((1.35089)*gclwh2_1*x71))+(((-1.0)*x500))+(((0.00675445)*x130))+(((0.00675445)*x137))+(((-0.685445)*gclwh2_1*x65))+(((1.35089)*gclwh0_1*x68))+(((0.665445)*gclwh5_1*x75))+(((-0.685445)*gclwh0_1*x70))+(((-1.0)*gclwh5_10*x75))+(((0.00675445)*x103))+x475+(((-1.35089)*gclwh13_1*x71))+x503+(((-1.0)*gclwh13_10*x65))+((gclwh15_10*x70))+(((1.35089)*gclwh15_1*x68))+(((-0.665445)*gclwh15_1*x70))+(((-1.35089)*gclwh5_1*x82)));
op[19]=((((-0.817)*gclwh15_9*x70))+(((0.00817)*x157))+((gclwh7_13*x125))+(((-1.0)*x487))+(((0.817)*gclwh13_9*x65))+(((-1.0)*gclwh9_13*x168))+((gclwh5_9*x117))+(((-1.0)*x469))+(((-1.634)*gclwh13_9*x71))+x274+(((-1.0)*gclwh11_13*x199))+x476+(((1.634)*x305))+(((-1.634)*gclwh5_9*x82))+(((0.817)*gclwh5_9*x75))+(((-0.00817)*x76)));
op[20]=((((-0.85)*gclwh15_9*x70))+((gclwh11_0*x198))+(((-1.7)*gclwh13_9*x71))+(((-1.7)*gclwh5_9*x82))+(((-0.784)*gclwh15_0*x70))+(((0.784)*gclwh5_0*x75))+(((1.568)*gclwh15_0*x68))+(((1.7)*x305))+(((0.0085)*x193))+(((-1.568)*gclwh13_0*x71))+(((-0.536)*gclwh15_15*x68))+(((0.0085)*x157))+(((-1.568)*gclwh5_0*x82))+(((0.784)*gclwh13_0*x65))+((gclwh2_0*x74))+((gclwh5_0*x89))+(((-1.0)*gclwh15_0*x197))+(((-1.0)*x181*x75))+(((-1.0)*x174*x65))+((gclwh13_0*x74))+(((-0.0085)*x76))+(((0.85)*gclwh13_9*x65))+(((-1.0)*gclwh7_0*x151))+(((-0.784)*gclwh2_0*x65))+(((1.568)*gclwh2_0*x71))+(((0.536)*gclwh13_15*x71))+(((0.536)*gclwh5_15*x82))+(((0.85)*gclwh5_9*x75))+(((1.568)*gclwh0_0*x68))+((gclwh0_0*x197))+(((-0.00268)*x126))+(((-0.784)*gclwh0_0*x70))+((gclwh9_0*x93))+(((-1.0)*gclwh5_15*x184))+((gclwh15_15*x105))+((x176*x70)));
op[21]=((-0.089834)+(((-4.0)*gclwh5_10*x82))+((x172*x75))+((gclwh9_10*x195))+(((-0.4)*gclwh7_10*rxp1_2))+((gclwh5_10*x100))+(((-4.0)*gclwh13_10*x71))+(((4.0)*gclwh15_10*x68))+((gclwh11_10*x88))+(((-0.02)*gclwh15_10*r20))+((gclwh13_10*x92))+((x107*x65))+(((-1.0)*x180*x70)));
op[22]=((-0.019045)+((gclwh13_10*x65))+(((-9.045e-5)*x77))+(((-1.0)*x500))+(((-0.019045)*gclwh0_1*x70))+(((-0.000955)*gclwh5_1*x75))+(((9.045e-5)*x103))+(((-1.0)*x475))+((gclwh0_1*x98))+((gclwh5_10*x75))+(((0.000955)*gclwh15_1*x70))+(((0.01809)*gclwh15_1*x68))+(((9.045e-5)*x130))+(((9.045e-5)*x137))+(((-0.01809)*gclwh13_1*x71))+x482+(((-0.01809)*gclwh5_1*x82))+(((0.01809)*gclwh0_1*x68))+x503+(((0.01809)*gclwh2_1*x71))+(((-0.000955)*gclwh13_1*x65))+(((-0.019045)*gclwh2_1*x65))+(((-1.0)*gclwh15_10*x70)));
op[23]=((((-0.00033)*x193))+(((0.066)*gclwh5_9*x82))+(((0.033)*gclwh15_9*x70))+(((-1.0)*x476))+(((-0.033)*gclwh5_9*x75))+(((-1.0)*x469))+(((0.00033)*x76))+(((-0.066)*x305))+x274+(((-1.0)*gclwh11_13*x96))+x487+(((0.066)*gclwh13_9*x71))+(((-1.0)*gclwh9_13*x134))+((gclwh7_13*x94))+(((-0.033)*gclwh13_9*x65))+(((-1.0)*gclwh13_9*x136)));
op[24]=((-0.437912)+(((-1.0)*x491))+x493);
op[25]=((((-1.0)*gclwh12_2*x144))+(((0.01634)*x95))+(((-0.3268)*gclwh4_2*rxp2_2))+(((-1.634)*gclwh6_2*x65))+(((-1.0)*x467))+(((-1.0)*gclwh6_2*x148))+(((-3.268)*gclwh10_2*x82))+(((1.634)*gclwh8_2*x70))+x281+(((0.01634)*x155))+(((1.634)*gclwh10_2*x75))+(((3.268)*gclwh6_2*x71))+((gclwh14_2*x189))+(((-3.268)*gclwh8_2*x68)));
op[26]=((((3.136)*gclwh6_12*x71))+(((1.568)*gclwh8_12*x70))+(((-0.01568)*x163))+(((-3.136)*gclwh8_12*x68))+((gclwh14_14*x206))+(((0.01568)*x106))+(((-1.568)*gclwh6_12*x65))+(((-1.0)*gclwh12_14*x171))+(((0.01568)*x211))+(((-3.136)*gclwh10_12*x82))+(((-0.1072)*x182))+(((1.568)*gclwh10_12*x75)));
op[27]=((((-0.8)*x87))+(((8.0)*gclwh8_11*x68))+(((-1.0)*x127*x70))+(((-0.04)*x73))+(((-0.04)*x114))+(((-4.0)*pp*x73))+(((0.8)*x191))+(((8.0)*gclwh10_11*x82))+((gclwh4_11*x146))+(((-8.0)*gclwh6_11*x71))+((x190*x65))+((gclwh6_11*x154)));
op[28]=((-0.017688)+(((-1.0)*x493))+x491);
op[29]=((((-0.132)*gclwh8_2*x68))+(((-1.0)*gclwh6_2*x207))+(((-1.0)*gclwh12_2*x196))+(((0.066)*gclwh8_2*x70))+(((-1.0)*gclwh4_2*x115))+(((0.00066)*x155))+((gclwh14_2*x116))+(((0.132)*gclwh6_2*x71))+(((-0.132)*gclwh10_2*x82))+x467+(((0.00066)*x95))+(((0.066)*gclwh10_2*x75))+(((-1.0)*x281))+(((-0.066)*gclwh6_2*x65)));
op[30]=((((3.268)*gclwh7_0*x71))+(((-0.3268)*x124))+(((-1.634)*gclwh7_0*x65))+(((1.634)*gclwh11_0*x75))+(((-3.268)*gclwh11_0*x82))+((gclwh15_0*x189))+(((0.01634)*x173))+x471+(((-1.0)*gclwh13_0*x144))+(((-1.0)*gclwh7_0*x148))+(((-1.0)*x289))+(((1.634)*gclwh9_0*x70))+((gclwh9_0*x97))+(((-3.268)*gclwh9_0*x68)));
op[31]=((-0.437912)+(((-1.0)*x492))+x494);
op[32]=((((-1.0)*x150*x65))+(((-1.0)*gclwh5_10*x146))+((gclwh11_10*x147))+((gclwh15_10*x161))+(((-0.8)*x66))+(((8.0)*gclwh7_10*x71))+(((0.04)*x120))+(((-8.0)*gclwh9_10*x68))+(((-1.0)*gclwh7_10*x154))+(((-8.0)*gclwh11_10*x82))+((x113*x75))+((x145*x70)));
op[33]=((((-0.01568)*x132))+((gclwh15_15*x206))+(((3.136)*gclwh7_13*x71))+(((-3.136)*gclwh11_13*x82))+(((1.568)*gclwh11_13*x75))+(((0.01568)*x205))+(((0.01568)*x204))+(((-0.1072)*x209))+(((-1.568)*gclwh7_13*x65))+(((-1.0)*gclwh13_15*x171))+(((-3.136)*gclwh9_13*x68))+(((1.568)*gclwh9_13*x70)));
op[34]=((((0.00066)*x187))+(((-1.0)*x471))+(((0.066)*gclwh11_0*x75))+((gclwh15_0*x116))+(((0.066)*gclwh9_0*x70))+(((0.00066)*x173))+(((-1.0)*gclwh5_0*x115))+(((-0.066)*gclwh7_0*x65))+x289+(((-0.132)*gclwh9_0*x68))+(((-1.0)*gclwh13_0*x196))+(((0.132)*gclwh7_0*x71))+(((-1.0)*gclwh7_0*x207))+(((-0.132)*gclwh11_0*x82)));
op[35]=((-0.017688)+(((-1.0)*x494))+x492);
op[36]=((1.299066)+(((-1.0)*x495))+x486);
op[37]=((((3.268)*gclwh12_2*x71))+(((-1.0)*x489))+(((-1.0)*gclwh12_2*x148))+(((3.268)*gclwh3_2*x71))+(((-0.3268)*x170))+(((-3.268)*gclwh14_2*x68))+(((3.268)*gclwh1_2*x68))+(((-0.3268)*x167))+((gclwh1_2*x97))+(((-1.634)*gclwh3_2*x65))+x479+(((-1.634)*gclwh4_2*x75))+((gclwh14_2*x97))+(((-1.634)*gclwh1_2*x70))+(((-0.01634)*gclwh4_2*r22))+(((3.268)*gclwh4_2*x82))+((gclwh3_2*x148))+(((1.634)*gclwh14_2*x70))+(((-1.634)*gclwh12_2*x65))+((gclwh6_2*x144)));
op[38]=((((0.3136)*gclwh6_12*rxp1_2))+(((-0.00536)*gclwh4_14*r22))+(((-0.3136)*x143))+(((-1.072)*gclwh14_14*x68))+((x139*x70))+(((-0.3136)*gclwh8_12*rxp0_2))+(((-1.0)*x208*x75))+(((-0.00536)*x111))+(((-1.0)*x201*x65))+(((1.072)*gclwh4_14*x82))+(((0.00536)*gclwh14_14*r20))+(((1.072)*gclwh12_14*x71)));
op[39]=((-0.03602)+((gclwh10_11*x146))+(((-0.8)*x140))+((x153*x75))+(((-0.04)*x122))+(((-8.0)*gclwh12_11*x71))+(((-8.0)*gclwh4_11*x82))+(((8.0)*gclwh14_11*x68))+((gclwh12_11*x154))+((gclwh4_11*x147))+((gclwh8_11*x161))+(((-1.0)*x104*x70))+((x65*x72)));
op[40]=((0.033734)+(((-1.0)*x486))+x495);
IkReal x504=pz*pz;
IkReal x505=pp*pp;
IkReal x506=((0.2)*pz);
IkReal x507=(pp*r21);
IkReal x508=((0.2)*rxp1_2);
IkReal x509=((0.00134)*r22);
IkReal x510=((0.066)*pz);
IkReal x511=(gclwh14_8*npx);
IkReal x512=((0.001)*r21);
IkReal x513=(pp*r20);
IkReal x514=(gclwh13_10*r21);
IkReal x515=(gclwh5_0*r22);
IkReal x516=((0.0132)*rxp2_2);
IkReal x517=((2.0)*pz);
IkReal x518=(gclwh7_10*npy);
IkReal x519=((0.02)*r22);
IkReal x520=((0.00784)*r21);
IkReal x521=(gclwh15_9*r20);
IkReal x522=(gclwh15_1*r20);
IkReal x523=(gclwh12_8*r21);
IkReal x524=((0.01)*r22);
IkReal x525=(gclwh6_12*npy);
IkReal x526=((0.2)*rxp2_2);
IkReal x527=(gclwh4_3*pp);
IkReal x528=(npz*pz);
IkReal x529=(gclwh2_0*pz);
IkReal x530=((0.01)*r21);
IkReal x531=(gclwh14_2*pz);
IkReal x532=((0.2)*rxp0_2);
IkReal x533=(gclwh8_2*pz);
IkReal x534=((0.00784)*r22);
IkReal x535=((1.0)*pz);
IkReal x536=(gclwh9_13*rxp0_2);
IkReal x537=(npx*pz);
IkReal x538=((0.1568)*rxp0_2);
IkReal x539=(npy*pz);
IkReal x540=((0.784)*pp);
IkReal x541=((0.0066)*rxp1_2);
IkReal x542=((0.536)*gclwh15_15);
IkReal x543=(pp*r22);
IkReal x544=((0.0066)*rxp2_2);
IkReal x545=((0.536)*gclwh5_15);
IkReal x546=(gclwh12_8*npy);
IkReal x547=((9.045e-5)*r20);
IkReal x548=(gclwh14_8*r20);
IkReal x549=(gclwh4_2*pz);
IkReal x550=(gclwh12_3*rxp1_2);
IkReal x551=(gclwh13_1*r21);
IkReal x552=((0.0132)*rxp1_2);
IkReal x553=(gclwh15_15*r20);
IkReal x554=((0.268)*gclwh14_14);
IkReal x555=((0.135089)*rxp0_2);
IkReal x556=((0.02)*rxp0_2);
IkReal x557=(gclwh12_14*r21);
IkReal x558=((0.00066)*r21);
IkReal x559=(gclwh5_1*pp);
IkReal x560=(gclwh8_11*r20);
IkReal x561=((0.02)*r21);
IkReal x562=((0.00817)*r22);
IkReal x563=(gclwh7_0*rxp1_2);
IkReal x564=((0.001809)*rxp2_2);
IkReal x565=(gclwh4_14*rxp2_2);
IkReal x566=((4.0)*gclwh15_10);
IkReal x567=((0.00066)*r20);
IkReal x568=(gclwh9_10*rxp0_2);
IkReal x569=(gclwh14_11*r20);
IkReal x570=((0.00033)*r22);
IkReal x571=((0.1634)*rxp1_2);
IkReal x572=(gclwh13_15*r21);
IkReal x573=((0.00134)*r20);
IkReal x574=(gclwh3_3*r21);
IkReal x575=(gclwh5_1*r22);
IkReal x576=(gclwh7_13*r21);
IkReal x577=(gclwh13_9*rxp1_2);
IkReal x578=((0.00033)*r21);
IkReal x579=(gclwh7_0*pz);
IkReal x580=(gclwh14_8*rxp0_2);
IkReal x581=((0.17)*rxp2_2);
IkReal x582=((0.0536)*rxp1_2);
IkReal x583=((0.1634)*rxp2_2);
IkReal x584=((0.1568)*rxp2_2);
IkReal x585=((0.01)*r20);
IkReal x586=((0.01634)*r21);
IkReal x587=(gclwh7_10*rxp1_2);
IkReal x588=(gclwh12_3*pp);
IkReal x589=(gclwh13_9*r21);
IkReal x590=((0.268)*gclwh4_14);
IkReal x591=(gclwh12_8*rxp1_2);
IkReal x592=((0.4)*rxp2_2);
IkReal x593=((0.0132)*rxp0_2);
IkReal x594=((0.00784)*r20);
IkReal x595=(gclwh1_3*r20);
IkReal x596=(gclwh14_3*pp);
IkReal x597=((0.02)*rxp2_2);
IkReal x598=((0.0268)*rxp0_2);
IkReal x599=(gclwh15_9*rxp0_2);
IkReal x600=((0.1568)*rxp1_2);
IkReal x601=((0.0268)*rxp1_2);
IkReal x602=((0.536)*gclwh13_15);
IkReal x603=(gclwh2_1*r21);
IkReal x604=((0.02)*r20);
IkReal x605=((0.4)*rxp1_2);
IkReal x606=((0.01634)*r20);
IkReal x607=((0.268)*gclwh13_15);
IkReal x608=(gclwh10_2*pz);
IkReal x609=(gclwh15_0*pz);
IkReal x610=((0.268)*gclwh15_15);
IkReal x611=(gclwh5_15*r22);
IkReal x612=(gclwh8_12*rxp0_2);
IkReal x613=(gclwh9_0*pz);
IkReal x614=(gclwh4_3*r22);
IkReal x615=((0.268)*gclwh5_15);
IkReal x616=((0.0268)*rxp2_2);
IkReal x617=(gclwh4_8*r22);
IkReal x618=((1.634)*pz);
IkReal x619=((4.0)*gclwh5_10);
IkReal x620=(npx*pp);
IkReal x621=((4.0)*gclwh13_10);
IkReal x622=(gclwh12_3*r21);
IkReal x623=(gclwh4_2*r22);
IkReal x624=((0.00817)*r20);
IkReal x625=((1.568)*npx);
IkReal x626=(gclwh0_1*r20);
IkReal x627=(npy*pp);
IkReal x628=(gclwh13_9*npy);
IkReal x629=(gclwh11_0*pz);
IkReal x630=(gclwh5_9*r22);
IkReal x631=((0.4)*rxp0_2);
IkReal x632=((0.135089)*rxp2_2);
IkReal x633=(gclwh13_0*pz);
IkReal x634=(gclwh14_3*r20);
IkReal x635=((0.00033)*r20);
IkReal x636=((0.00134)*r21);
IkReal x637=(gclwh13_1*rxp1_2);
IkReal x638=(gclwh6_2*pz);
IkReal x639=((0.0536)*rxp0_2);
IkReal x640=((0.001809)*rxp0_2);
IkReal x641=((0.268)*gclwh12_14);
IkReal x642=(gclwh12_2*pz);
IkReal x643=((0.00268)*x611);
IkReal x644=((0.00268)*x572);
IkReal x645=((0.00268)*x553);
IkReal x646=((0.4)*x587);
IkReal x647=(gclwh15_10*x604);
IkReal x648=((0.4)*x568);
IkReal x649=(gclwh5_10*x519);
IkReal x650=(gclwh11_10*x592);
IkReal x651=((0.02)*x514);
IkReal x652=((0.0268)*x565);
IkReal x653=(gclwh6_5*x636);
IkReal x654=(gclwh12_14*x601);
IkReal x655=(gclwh14_14*x598);
IkReal x656=(gclwh10_5*x509);
IkReal x657=(gclwh8_5*x573);
IkReal x658=((0.01)*x560);
IkReal x659=((0.02)*x591);
IkReal x660=(gclwh10_11*x524);
IkReal x661=(gclwh14_11*x532);
IkReal x662=(gclwh4_8*x597);
IkReal x663=(gclwh14_8*x556);
IkReal x664=(gclwh12_11*x508);
IkReal x665=(gclwh4_11*x526);
IkReal x666=(gclwh6_11*x530);
IkReal x667=((0.02)*x577);
IkReal x668=(gclwh7_10*x530);
IkReal x669=(gclwh5_10*x526);
IkReal x670=(gclwh5_9*x597);
IkReal x671=(gclwh13_10*x508);
IkReal x672=(gclwh11_10*x524);
IkReal x673=(gclwh15_10*x532);
IkReal x674=(gclwh9_10*x585);
IkReal x675=(gclwh15_9*x556);
IkReal x676=(gclwh13_15*x601);
IkReal x677=(gclwh5_15*x616);
IkReal x678=(gclwh7_7*x636);
IkReal x679=(gclwh15_15*x598);
IkReal x680=(gclwh9_7*x573);
IkReal x681=(gclwh11_7*x509);
IkReal x682=((0.00268)*x557);
IkReal x683=((0.00268)*gclwh4_14*r22);
IkReal x684=((0.00268)*gclwh14_14*r20);
IkReal x685=((0.00134)*x557);
IkReal x686=(gclwh8_5*x598);
IkReal x687=(gclwh10_5*x616);
IkReal x688=(gclwh4_14*x509);
IkReal x689=(gclwh6_5*x601);
IkReal x690=(gclwh14_14*x573);
IkReal x691=((0.001)*x617);
IkReal x692=(gclwh6_11*x508);
IkReal x693=((0.01)*x569);
IkReal x694=(gclwh12_8*x512);
IkReal x695=(gclwh12_11*x530);
IkReal x696=(gclwh10_11*x526);
IkReal x697=((0.001)*x548);
IkReal x698=(gclwh4_11*x524);
IkReal x699=(gclwh8_11*x532);
IkReal x700=((0.001)*x521);
IkReal x701=(gclwh7_10*x508);
IkReal x702=(gclwh15_10*x585);
IkReal x703=((0.001)*x630);
IkReal x704=(gclwh11_10*x526);
IkReal x705=(gclwh13_9*x512);
IkReal x706=((0.01)*x514);
IkReal x707=(gclwh5_10*x524);
IkReal x708=(gclwh9_10*x532);
IkReal x709=((0.00134)*x553);
IkReal x710=(gclwh7_7*x601);
IkReal x711=(gclwh11_7*x616);
IkReal x712=(gclwh5_15*x509);
IkReal x713=((0.00134)*x572);
IkReal x714=(gclwh9_7*x598);
IkReal x715=(gclwh15_9*x537);
IkReal x716=((2.0)*x504);
IkReal x717=((1.0)*x505);
IkReal x718=(x507*x607);
IkReal x719=(x543*x615);
IkReal x720=(x537*x542);
IkReal x721=(x513*x610);
IkReal x722=(x528*x545);
IkReal x723=(x539*x602);
IkReal x724=((2.0)*gclwh15_10*x513);
IkReal x725=(x528*x619);
IkReal x726=(x539*x621);
IkReal x727=((2.0)*gclwh13_10*x507);
IkReal x728=(x537*x566);
IkReal x729=((2.0)*gclwh5_10*x543);
IkReal x730=((0.134)*gclwh6_5*x507);
IkReal x731=((0.268)*gclwh10_5*x528);
IkReal x732=((0.268)*gclwh8_5*x537);
IkReal x733=((0.268)*gclwh6_5*x539);
IkReal x734=((0.134)*gclwh8_5*x513);
IkReal x735=((0.134)*gclwh10_5*x543);
IkReal x736=(gclwh14_2*rxp0_2*x506);
IkReal x737=(gclwh6_11*npy*x517);
IkReal x738=(x543*x608);
IkReal x739=(x524*x608);
IkReal x740=(x508*x588);
IkReal x741=(x513*x533);
IkReal x742=(x526*x527);
IkReal x743=(x533*x585);
IkReal x744=(gclwh12_2*rxp1_2*x506);
IkReal x745=(x532*x596);
IkReal x746=(gclwh4_2*rxp2_2*x506);
IkReal x747=(gclwh10_11*npz*x517);
IkReal x748=(x530*x638);
IkReal x749=(gclwh8_11*npx*x517);
IkReal x750=(gclwh11_10*npz*x517);
IkReal x751=(gclwh9_10*npx*x517);
IkReal x752=(gclwh13_1*pp*x508);
IkReal x753=(x543*x629);
IkReal x754=(x526*x559);
IkReal x755=(gclwh15_0*rxp0_2*x506);
IkReal x756=(x524*x629);
IkReal x757=(x585*x613);
IkReal x758=(x513*x613);
IkReal x759=(gclwh15_1*pp*x532);
IkReal x760=(gclwh5_0*rxp2_2*x506);
IkReal x761=(gclwh13_0*rxp1_2*x506);
IkReal x762=(x530*x579);
IkReal x763=(x517*x518);
IkReal x764=((0.268)*gclwh9_7*x537);
IkReal x765=((0.134)*gclwh7_7*x507);
IkReal x766=((0.268)*gclwh11_7*x528);
IkReal x767=((0.134)*gclwh11_7*x543);
IkReal x768=((0.268)*gclwh7_7*x539);
IkReal x769=((0.134)*gclwh9_7*x513);
IkReal x770=(x507*x641);
IkReal x771=((0.536)*gclwh14_14*x537);
IkReal x772=(x543*x590);
IkReal x773=((0.536)*gclwh4_14*x528);
IkReal x774=(x513*x554);
IkReal x775=((0.536)*gclwh12_14*x539);
IkReal x776=((0.134)*gclwh12_14*x507);
IkReal x777=(x537*x554);
IkReal x778=((0.134)*gclwh4_14*x543);
IkReal x779=(x539*x641);
IkReal x780=((0.134)*gclwh14_14*x513);
IkReal x781=(x528*x590);
IkReal x782=(x513*x531);
IkReal x783=(x531*x585);
IkReal x784=((0.1)*gclwh4_8*x543);
IkReal x785=(x505*x622);
IkReal x786=(gclwh1_2*pz*x585);
IkReal x787=(gclwh3_2*pz*x530);
IkReal x788=(gclwh4_11*npz*x517);
IkReal x789=((0.1)*gclwh12_8*x507);
IkReal x790=(x505*x574);
IkReal x791=(x505*x595);
IkReal x792=(gclwh6_2*rxp1_2*x506);
IkReal x793=(x505*x614);
IkReal x794=(gclwh12_11*npy*x517);
IkReal x795=(x506*x511);
IkReal x796=(gclwh4_8*npz*x506);
IkReal x797=(gclwh14_11*npx*x517);
IkReal x798=(x506*x546);
IkReal x799=(gclwh10_2*rxp2_2*x506);
IkReal x800=(x524*x549);
IkReal x801=(gclwh8_2*rxp0_2*x506);
IkReal x802=((0.1)*gclwh14_8*x513);
IkReal x803=(x530*x642);
IkReal x804=(x530*x633);
IkReal x805=(gclwh0_0*pz*x585);
IkReal x806=(gclwh11_0*rxp2_2*x506);
IkReal x807=(x529*x530);
IkReal x808=(x506*x628);
IkReal x809=(x505*x522);
IkReal x810=(pp*pz*x515);
IkReal x811=((0.01)*pz*x515);
IkReal x812=(x507*x633);
IkReal x813=(gclwh9_0*rxp0_2*x506);
IkReal x814=((0.1)*gclwh15_9*x513);
IkReal x815=(x505*x603);
IkReal x816=(gclwh5_10*npz*x517);
IkReal x817=(gclwh13_10*npy*x517);
IkReal x818=(gclwh5_9*npz*x506);
IkReal x819=(x505*x626);
IkReal x820=(x506*x563);
IkReal x821=((0.1)*gclwh5_9*x543);
IkReal x822=(gclwh15_9*npx*x506);
IkReal x823=((0.1)*gclwh13_9*x507);
IkReal x824=(gclwh15_10*npx*x517);
IkReal x825=(x585*x609);
IkReal x826=(x528*x615);
IkReal x827=((0.134)*gclwh15_15*x513);
IkReal x828=(x539*x607);
IkReal x829=((0.134)*gclwh13_15*x507);
IkReal x830=(x537*x610);
IkReal x831=((0.134)*gclwh5_15*x543);
IkReal x832=(gclwh6_2*npy*x716);
IkReal x833=(gclwh6_2*x507*x535);
IkReal x834=(gclwh10_2*npz*x716);
IkReal x835=(gclwh8_2*npx*x716);
IkReal x836=(gclwh7_0*npy*x716);
IkReal x837=(gclwh9_0*npx*x716);
IkReal x838=(gclwh11_0*npz*x716);
IkReal x839=(gclwh7_0*x507*x535);
IkReal x840=(gclwh12_2*npy*x716);
IkReal x841=(gclwh3_2*npy*x716);
IkReal x842=(gclwh1_2*npx*x716);
IkReal x843=(npx*x517*x596);
IkReal x844=(gclwh4_2*npz*x716);
IkReal x845=(npz*x517*x527);
IkReal x846=(gclwh12_2*x507*x535);
IkReal x847=(gclwh1_2*x513*x535);
IkReal x848=(gclwh3_3*x517*x627);
IkReal x849=(gclwh4_2*x535*x543);
IkReal x850=(gclwh1_3*x517*x620);
IkReal x851=(gclwh3_2*x507*x535);
IkReal x852=(npy*x517*x588);
IkReal x853=(gclwh14_2*npx*x716);
IkReal x854=(x634*x717);
IkReal x855=(gclwh0_0*npx*x716);
IkReal x856=(gclwh2_0*npy*x716);
IkReal x857=(npz*x517*x559);
IkReal x858=(gclwh13_1*x517*x627);
IkReal x859=(gclwh15_0*npx*x716);
IkReal x860=(gclwh2_1*x517*x627);
IkReal x861=(gclwh0_1*x517*x620);
IkReal x862=(gclwh5_0*npz*x716);
IkReal x863=(gclwh13_0*npy*x716);
IkReal x864=(gclwh0_0*x513*x535);
IkReal x865=(gclwh15_0*x513*x535);
IkReal x866=((1.0)*x507*x529);
IkReal x867=(x551*x717);
IkReal x868=(x575*x717);
IkReal x869=(gclwh15_1*x517*x620);
IkReal x870=(x687+x686);
IkReal x871=(x676+x677);
IkReal x872=(x711+x714);
IkReal x873=(x652+x654);
IkReal x874=(x658+x661+x660+x737);
IkReal x875=(x672+x673+x674+x763);
IkReal x876=(x702+x701+x816+x817);
IkReal x877=(x692+x693+x794+x788);
IkReal x878=(x645+x721+x722+x723);
IkReal x879=(x709+x828+x827+x826);
IkReal x880=(x653+x732+x731+x730);
IkReal x881=(x684+x773+x775+x774);
IkReal x882=(x690+x779+x780+x781);
IkReal x883=(x678+x764+x765+x766);
IkReal x884=(x695+x696+x698+x699+x797);
IkReal x885=(x708+x706+x707+x704+x824);
IkReal x886=(x669+x668+x671+x751+x750);
IkReal x887=(x665+x664+x666+x747+x749);
IkReal x888=(x647+x646+x724+x725+x726);
IkReal x889=(x683+x682+x772+x771+x770);
IkReal x890=(x656+x657+x735+x734+x733);
IkReal x891=(x713+x712+x829+x830+x831);
IkReal x892=(x681+x680+x768+x769+x767);
IkReal x893=(x688+x685+x777+x776+x778);
IkReal x894=(x644+x643+x719+x718+x720);
IkReal x895=(x649+x648+x650+x651+x727+x728+x729);
IkReal x896=(x675+x759+x760+x761+x762+x837+x838+x839);
IkReal x897=(x663+x746+x744+x745+x748+x834+x835+x833);
IkReal x898=(x667+x670+x755+x754+x757+x756+x753+x752+x758+x836);
IkReal x899=(x659+x662+x736+x739+x738+x742+x743+x740+x741+x832);
IkReal x900=(x703+x705+x869+x868+x867+x866+x865+x864+x863+x862+x861+x860+x823+x822+x821+x820+x825);
IkReal x901=(x506+x694+x691+x791+x790+x793+x792+x795+x782+x783+x786+x787+x784+x785+x789+x841+x840+x843+x842+x844);
IkReal x902=(x697+x796+x799+x798+x852+x853+x850+x851+x854+x845+x847+x846+x849+x848+x801+x800+x803+x802);
IkReal x903=(x506+x700+x856+x857+x855+x858+x859+x818+x819+x814+x815+x812+x813+x810+x811+x809+x808+x805+x804+x807+x806);
op[41]=((((-1.0)*gclwh10_2*x516))+((gclwh1_2*x567))+(((0.132)*gclwh1_2*x537))+((gclwh14_2*x567))+(((-0.132)*npx*x531))+(((-0.066)*gclwh12_2*x507))+(((-1.0)*x881))+(((0.132)*gclwh3_2*x539))+(((-0.066)*gclwh3_2*x507))+(((-0.066)*gclwh4_2*x543))+((gclwh6_2*x552))+(((0.132)*gclwh12_2*x539))+((gclwh3_2*x558))+(((-0.066)*gclwh1_2*x513))+(((-1.0)*gclwh8_2*x593))+(((0.132)*gclwh4_2*x528))+x889+(((-1.0)*gclwh12_2*x558))+(((-0.00066)*x623))+(((0.066)*gclwh14_2*x513)));
op[42]=((((0.3268)*gclwh11_0*rxp2_2))+(((0.3268)*gclwh9_0*rxp0_2))+(((-3.268)*gclwh5_0*x528))+(((1.634)*gclwh13_0*x507))+((gclwh13_0*x586))+(((-1.0)*x894))+(((3.268)*gclwh15_0*x537))+((gclwh2_0*x586))+(((-3.268)*gclwh13_0*x539))+(((3.268)*npy*x529))+(((-1.634)*gclwh15_0*x513))+(((3.268)*gclwh0_0*x537))+(((-1.634)*gclwh2_0*x507))+x878+(((-1.634)*gclwh0_0*x513))+(((1.634)*pp*x515))+(((0.01634)*x515))+(((-0.3268)*x563))+(((-1.0)*gclwh15_0*x606))+((gclwh0_0*x606)));
op[43]=((1.299066)+(((-1.0)*x888))+x895);
op[44]=((0.03602)+(((-0.8)*x587))+((x543*x619))+(((0.04)*x514))+(((-1.0)*x513*x566))+((x507*x621))+(((0.04)*gclwh5_10*r22))+(((0.8)*gclwh11_10*rxp2_2))+(((8.0)*gclwh15_10*x537))+(((-8.0)*gclwh5_10*x528))+(((-8.0)*gclwh13_10*x539))+(((0.8)*x568))+(((-0.04)*gclwh15_10*r20)));
op[45]=((((-1.072)*gclwh5_15*x528))+(((-0.00536)*x553))+(((-1.072)*gclwh13_15*x539))+(((1.072)*gclwh15_15*x537))+(((0.3136)*x536))+((x543*x545))+(((0.00536)*x611))+(((-1.0)*x513*x542))+((x507*x602))+(((0.3136)*gclwh11_13*rxp2_2))+(((0.00536)*x572))+(((-0.3136)*gclwh7_13*rxp1_2)));
op[46]=(((gclwh9_0*x593))+(((-0.066)*gclwh0_0*x513))+(((-1.0)*gclwh7_0*x552))+(((-0.066)*gclwh15_0*x513))+((gclwh2_0*x558))+((gclwh13_0*x558))+(((0.066)*pp*x515))+(((-0.132)*gclwh5_0*x528))+(((0.066)*gclwh13_0*x507))+((gclwh0_0*x567))+((gclwh11_0*x516))+(((-0.066)*gclwh2_0*x507))+(((0.132)*npy*x529))+(((-0.132)*gclwh13_0*x539))+(((0.132)*gclwh15_0*x537))+x894+(((0.132)*gclwh0_0*x537))+(((-1.0)*gclwh15_0*x567))+(((-1.0)*x878))+(((0.00066)*x515)));
op[47]=((0.033734)+(((-1.0)*x895))+x888);
op[48]=((((-1.0)*gclwh12_8*x571))+(((0.1634)*x580))+(((0.817)*gclwh8_12*x513))+((x525*x618))+((gclwh8_12*x624))+(((-1.0)*x890))+(((0.817)*gclwh10_12*x543))+(((-0.00817)*gclwh6_12*r21))+((gclwh10_12*x562))+x655+(((-1.634)*gclwh8_12*x537))+(((-0.817)*gclwh6_12*x507))+x880+(((-1.634)*gclwh10_12*x528))+(((-1.0)*gclwh4_8*x583))+(((-1.0)*x873)));
op[49]=((((-1.0)*gclwh8_11*x513))+(((-1.0)*x897))+(((-1.0)*gclwh4_3*x632))+(((-1.0)*gclwh10_11*x543))+((gclwh14_3*x555))+(((-0.135089)*x550))+((gclwh6_11*x507))+x887+x899+(((-1.0)*x874)));
op[50]=((0.210112)+((gclwh12_11*x605))+(((2.0)*gclwh6_11*x507))+(((-0.02)*x560))+(((-1.0)*gclwh10_11*x519))+(((-2.0)*gclwh10_11*x543))+(((-4.0)*gclwh6_11*x539))+(((4.0)*gclwh8_11*x537))+((gclwh6_11*x561))+(((-2.0)*gclwh8_11*x513))+((gclwh4_11*x592))+(((4.0)*gclwh10_11*x528))+(((-1.0)*gclwh14_11*x631)));
op[51]=((((0.0536)*x565))+((gclwh4_8*x581))+((gclwh12_14*x582))+(((-1.568)*gclwh6_2*x539))+(((-1.0)*gclwh10_2*x534))+(((-0.784)*gclwh8_2*x513))+(((1.568)*gclwh10_2*x528))+(((0.784)*gclwh6_2*x507))+(((-1.0)*gclwh14_14*x639))+((gclwh6_2*x520))+((gclwh12_2*x600))+(((-1.0)*gclwh14_2*x538))+(((-1.0)*gclwh10_2*r22*x540))+((x533*x625))+(((-1.0)*gclwh8_2*x594))+(((0.17)*x591))+((gclwh4_2*x584))+(((-0.17)*x580)));
op[52]=((((-1.0)*gclwh6_12*x578))+((gclwh12_8*x541))+(((-0.033)*gclwh6_12*x507))+((gclwh8_12*x635))+(((-1.0)*x890))+(((-1.0)*x655))+(((-0.0066)*x580))+(((0.033)*gclwh10_12*x543))+(((0.033)*gclwh8_12*x513))+((x510*x525))+((gclwh10_12*x570))+x873+x880+(((-1.0)*gclwh10_12*npz*x510))+(((-1.0)*gclwh8_12*npx*x510))+((gclwh4_8*x544)));
op[53]=((((-1.0)*gclwh4_3*x564))+(((-1.0)*gclwh6_11*x507))+(((-1.0)*x897))+((gclwh8_11*x513))+(((-1.0)*x887))+((gclwh14_3*x640))+x874+x899+((gclwh10_11*x543))+(((-0.001809)*x550)));
op[54]=((((-1.0)*x896))+(((-1.0)*x886))+(((-0.135089)*x637))+(((-1.0)*gclwh7_10*x507))+((gclwh11_10*x543))+((gclwh9_10*x513))+(((-1.0)*gclwh5_1*x632))+x875+x898+((gclwh15_1*x555)));
op[55]=(((gclwh11_13*x562))+(((-1.0)*gclwh5_9*x583))+(((0.817)*gclwh9_13*x513))+(((1.634)*gclwh7_13*x539))+(((-1.0)*x892))+((gclwh9_13*x624))+(((-0.00817)*x576))+(((-1.634)*gclwh11_13*x528))+(((0.817)*gclwh11_13*x543))+x679+(((0.1634)*x599))+(((-1.0)*gclwh13_9*x571))+x883+(((-1.634)*gclwh9_13*x537))+(((-0.817)*gclwh7_13*x507))+(((-1.0)*x871)));
op[56]=(((gclwh5_0*x584))+(((-1.0)*gclwh5_9*x581))+((gclwh15_15*x639))+(((-1.0)*gclwh9_0*x594))+(((-1.0)*gclwh15_0*x538))+(((1.568)*gclwh9_0*x537))+(((0.784)*gclwh7_0*x507))+(((-0.0536)*gclwh5_15*rxp2_2))+(((-1.568)*gclwh7_0*x539))+(((-1.0)*gclwh11_0*r22*x540))+((gclwh7_0*x520))+(((-0.784)*gclwh9_0*x513))+((gclwh13_0*x600))+(((0.17)*x599))+(((-1.0)*gclwh11_0*x534))+(((-0.17)*x577))+(((1.568)*gclwh11_0*x528))+(((-1.0)*gclwh13_15*x582)));
op[57]=((0.210112)+(((-1.0)*gclwh9_10*x604))+((gclwh7_10*x561))+(((-1.0)*gclwh11_10*x519))+(((4.0)*gclwh11_10*x528))+(((2.0)*gclwh7_10*x507))+((gclwh5_10*x592))+(((-2.0)*gclwh9_10*x513))+((gclwh13_10*x605))+(((-1.0)*gclwh15_10*x631))+(((4.0)*gclwh9_10*x537))+(((-2.0)*gclwh11_10*x543))+(((-4.0)*pz*x518)));
op[58]=((((-1.0)*gclwh9_10*x513))+((gclwh15_1*x640))+((gclwh7_10*x507))+(((-1.0)*x896))+(((-1.0)*gclwh5_1*x564))+(((-1.0)*gclwh11_10*x543))+x886+x898+(((-0.001809)*x637))+(((-1.0)*x875)));
op[59]=(((gclwh7_13*npy*x510))+(((-0.0066)*x599))+(((-1.0)*gclwh9_13*npx*x510))+(((0.033)*gclwh9_13*x513))+(((-1.0)*x892))+((gclwh13_9*x541))+(((-0.00033)*x576))+((gclwh9_13*x635))+(((0.033)*gclwh11_13*x543))+((gclwh11_13*x570))+x871+x883+(((-0.033)*gclwh7_13*x507))+((gclwh5_9*x544))+(((-1.0)*gclwh11_13*npz*x510))+(((-1.0)*x679)));
op[60]=((((-1.0)*gclwh10_12*x583))+(((-0.1634)*x612))+(((0.817)*gclwh14_8*x513))+((gclwh6_12*x571))+(((-1.0)*x511*x618))+(((-1.0)*x689))+(((1.634)*gclwh12_8*x539))+(((-0.00817)*x523))+(((-1.0)*x893))+(((0.00817)*x548))+(((-0.817)*gclwh4_8*x543))+(((1.634)*gclwh4_8*x528))+(((-1.0)*gclwh4_8*x562))+x870+x882+(((-0.817)*gclwh12_8*x507)));
op[61]=((0.685445)+(((-0.665445)*gclwh12_3*x507))+(((0.665445)*gclwh14_3*x513))+(((-0.00675445)*x622))+(((-1.35089)*gclwh14_3*x537))+(((-1.0)*x902))+(((-0.00675445)*x614))+(((0.00675445)*x634))+(((0.00675445)*x574))+(((1.35089)*gclwh4_3*x528))+(((0.00675445)*x595))+(((-0.685445)*gclwh1_3*x513))+(((1.35089)*gclwh1_3*x537))+(((1.35089)*gclwh12_3*x539))+((gclwh4_11*x543))+((gclwh12_11*x507))+(((1.35089)*gclwh3_3*x539))+(((-0.665445)*r22*x527))+x884+x901+(((-0.685445)*gclwh3_3*x507))+(((-1.0)*gclwh14_11*x513))+(((-1.0)*x877)));
op[62]=((0.089834)+(((-0.02)*x569))+((gclwh10_11*x592))+(((-1.0)*gclwh6_11*x605))+(((-4.0)*gclwh12_11*x539))+((gclwh4_11*x519))+((gclwh8_11*x631))+((gclwh12_11*x561))+(((-2.0)*gclwh14_11*x513))+(((2.0)*gclwh4_11*x543))+(((4.0)*gclwh14_11*x537))+(((-4.0)*gclwh4_11*x528))+(((2.0)*gclwh12_11*x507)));
op[63]=((((-1.568)*gclwh3_2*x539))+(((0.85)*gclwh4_8*x543))+((x531*x625))+(((0.784)*gclwh3_2*x507))+(((0.784)*gclwh1_2*x513))+(((-1.568)*gclwh4_2*x528))+(((-1.7)*gclwh12_8*x539))+(((-1.568)*gclwh12_2*x539))+(((-0.784)*gclwh14_2*x513))+(((-1.0)*gclwh14_2*x594))+(((-1.0)*gclwh6_2*x600))+(((-1.0)*gclwh1_2*x594))+(((-1.0)*gclwh3_2*x520))+(((-1.0)*x881))+(((0.0085)*x617))+(((-0.85)*gclwh14_8*x513))+(((0.85)*gclwh12_8*x507))+(((1.7)*pz*x511))+(((-0.0085)*x548))+((gclwh12_2*x520))+((gclwh8_2*x538))+((gclwh10_2*x584))+(((0.0085)*x523))+((x540*x623))+(((-1.7)*gclwh4_8*x528))+x889+((gclwh4_2*x534))+(((-1.568)*gclwh1_2*x537))+(((0.784)*gclwh12_2*x507)));
op[64]=((((-0.033)*gclwh14_8*x513))+((x510*x511))+(((0.033)*gclwh4_8*x543))+(((-1.0)*x689))+(((0.00033)*x523))+((gclwh4_8*x570))+(((-1.0)*x882))+(((0.033)*gclwh12_8*x507))+(((-0.00033)*x548))+(((-1.0)*gclwh4_8*npz*x510))+x870+x893+(((-1.0)*x510*x546))+(((-1.0)*gclwh10_12*x544))+((gclwh6_12*x541))+(((-0.0066)*x612)));
op[65]=((-0.019045)+(((0.01809)*gclwh3_3*x539))+(((-1.0)*gclwh12_11*x507))+(((0.000955)*r22*x527))+(((-0.01809)*gclwh14_3*x537))+(((-1.0)*x902))+(((0.01809)*gclwh1_3*x537))+(((-1.0)*x884))+(((-1.0)*gclwh4_11*x543))+(((-9.045e-5)*x614))+(((0.01809)*gclwh12_3*x539))+((gclwh14_3*x547))+(((9.045e-5)*x574))+(((0.01809)*gclwh4_3*x528))+((gclwh14_11*x513))+(((-9.045e-5)*x622))+(((-0.019045)*gclwh3_3*x507))+x877+x901+(((-0.019045)*gclwh1_3*x513))+((gclwh1_3*x547))+(((-0.000955)*gclwh14_3*x513))+(((0.000955)*gclwh12_3*x507)));
op[66]=((-0.685445)+(((0.00675445)*x551))+(((0.00675445)*x603))+(((1.35089)*gclwh15_1*x537))+(((-1.0)*x900))+(((0.665445)*gclwh13_1*x507))+(((0.00675445)*x626))+(((0.00675445)*x575))+((gclwh5_10*x543))+(((-0.665445)*gclwh15_1*x513))+(((1.35089)*gclwh2_1*x539))+(((-1.35089)*gclwh13_1*x539))+(((-0.685445)*gclwh0_1*x513))+(((1.35089)*gclwh0_1*x537))+(((-0.685445)*gclwh2_1*x507))+(((0.665445)*gclwh5_1*x543))+x885+((gclwh13_10*x507))+(((-0.00675445)*x522))+x903+(((-1.0)*gclwh15_10*x513))+(((-1.35089)*gclwh5_1*x528))+(((-1.0)*x876)));
op[67]=((((0.1634)*x536))+((gclwh5_9*x562))+(((0.817)*gclwh5_9*x543))+(((-1.634)*gclwh13_9*x539))+(((-0.00817)*x521))+(((-1.634)*gclwh5_9*x528))+(((0.00817)*x589))+((gclwh11_13*x583))+(((-0.817)*gclwh15_9*x513))+(((1.634)*x715))+(((-1.0)*gclwh7_13*x571))+x710+x891+(((0.817)*gclwh13_9*x507))+(((-1.0)*x879))+(((-1.0)*x872)));
op[68]=((((1.568)*gclwh5_0*x528))+(((0.85)*gclwh5_9*x543))+(((0.85)*gclwh13_9*x507))+(((0.784)*gclwh0_0*x513))+(((-0.784)*gclwh13_0*x507))+(((-1.568)*npy*x529))+(((-1.0)*gclwh11_0*x584))+(((-1.0)*gclwh2_0*x520))+(((-1.568)*gclwh0_0*x537))+(((-1.0)*gclwh0_0*x594))+(((-1.568)*gclwh15_0*x537))+(((-1.0)*gclwh9_0*x538))+(((-1.0)*x515*x540))+(((-0.85)*gclwh15_9*x513))+(((0.784)*gclwh2_0*x507))+((gclwh15_0*x594))+(((-0.0085)*x521))+(((0.1568)*x563))+x894+(((0.0085)*x589))+(((0.784)*gclwh15_0*x513))+(((1.568)*gclwh13_0*x539))+(((-1.7)*gclwh13_9*x539))+(((0.0085)*x630))+(((-1.0)*gclwh13_0*x520))+(((-0.00784)*x515))+(((1.7)*x715))+(((-1.7)*gclwh5_9*x528))+(((-1.0)*x878)));
op[69]=((0.089834)+(((-1.0)*x895))+x888);
op[70]=((0.019045)+(((0.01809)*gclwh2_1*x539))+((gclwh0_1*x547))+(((0.01809)*gclwh0_1*x537))+(((-0.019045)*gclwh0_1*x513))+(((-1.0)*x900))+(((0.000955)*gclwh15_1*x513))+(((-1.0)*gclwh5_10*x543))+(((9.045e-5)*x603))+(((-1.0)*x885))+(((-0.000955)*gclwh13_1*x507))+(((-0.01809)*gclwh5_1*x528))+((gclwh15_10*x513))+(((9.045e-5)*x575))+(((-0.01809)*gclwh13_1*x539))+(((0.01809)*gclwh15_1*x537))+x876+(((-1.0)*gclwh13_10*x507))+(((-0.019045)*gclwh2_1*x507))+(((-9.045e-5)*x522))+x903+(((9.045e-5)*x551))+(((-0.000955)*gclwh5_1*x543)));
op[71]=((((-0.033)*gclwh5_9*x543))+(((0.0066)*x536))+(((-0.033)*gclwh13_9*x507))+(((0.00033)*x521))+((x510*x628))+(((-1.0)*x891))+(((-1.0)*gclwh5_9*x570))+(((-1.0)*gclwh7_13*x541))+(((-1.0)*gclwh15_9*npx*x510))+(((0.033)*gclwh15_9*x513))+((gclwh11_13*x544))+x710+(((-1.0)*gclwh13_9*x578))+x879+((gclwh5_9*npz*x510))+(((-1.0)*x872)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x904=htj1*htj1;
CheckValue<IkReal> x905=IKPowWithIntegerCheck(((1.0)+x904),-1);
if(!x905.valid){
continue;
}
cj1array[numsolutions]=((x905.value)*(((1.0)+(((-1.0)*x904)))));
CheckValue<IkReal> x906=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x906.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x906.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x907=htj2*htj2;
CheckValue<IkReal> x908=IKPowWithIntegerCheck(((1.0)+x907),-1);
if(!x908.valid){
continue;
}
cj2array[numsolutions]=((x908.value)*(((1.0)+(((-1.0)*x907)))));
CheckValue<IkReal> x909=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x909.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x909.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x910=htj3*htj3;
CheckValue<IkReal> x911=IKPowWithIntegerCheck(((1.0)+x910),-1);
if(!x911.valid){
continue;
}
cj3array[numsolutions]=((x911.value)*(((1.0)+(((-1.0)*x910)))));
CheckValue<IkReal> x912=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x912.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x912.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x913=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x913);
rxp1_0=(pz*r11);
rxp1_1=(r01*x913);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x914=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x914);
rxp1_0=(pz*r11);
rxp1_1=(r01*x914);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x915=IKPowWithIntegerCheck(r22,-1);
if(!x915.valid){
continue;
}
CheckValue<IkReal> x916=IKPowWithIntegerCheck(sj3,-1);
if(!x916.valid){
continue;
}
sj4array[0]=((x915.value)*(x916.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x917=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x917);
rxp1_0=(pz*r11);
rxp1_1=(r01*x917);
IkReal x918=((16.0)*sj4);
IkReal x919=(cj1*cj2);
IkReal x920=((4.0)*sj3);
IkReal x921=((8.0)*sj4);
IkReal x922=((4.0)*cj4);
IkReal x923=(sj1*sj2);
IkReal x924=((4.0)*sj4);
IkReal x925=(cj3*r02);
IkReal x926=((16.0)*sj3);
IkReal x927=((8.0)*sj3);
IkReal x928=((12.0)*cj4);
IkReal x929=((12.0)*sj4);
IkReal x930=(cj3*r12);
IkReal x931=(r11*x920);
IkReal x932=(r01*x920);
IkReal x933=(r01*x923);
IkReal x934=(cj3*cj4*r01);
IkReal x935=(cj3*cj4*r11);
IkReal x936=(cj3*r10*x922);
IkReal x937=(x929*x930);
IkReal x938=(cj3*r00*x922);
IkReal x939=(x925*x929);
IkReal x940=(r00*x923*x924);
IkReal x941=(r02*x923*x928);
IkReal x942=(r00*x919*x924);
IkReal x943=(r02*x919*x928);
IkReal x944=(r10*x923*x924);
IkReal x945=(r12*x919*x928);
IkReal x946=(r12*x923*x928);
IkReal x947=(r10*x919*x924);
IkReal x948=(x931+x942);
IkReal x949=(x932+x944);
IkReal x950=(x936+x940);
IkReal x951=(x937+x943);
IkReal x952=(x938+x947);
IkReal x953=(x939+x946);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*x924*x930))+(((-1.0)*r02*x919*x922))+((r02*x922*x923))+(((-1.0)*x950))+x948)))))+(((0.5)*(IKabs(((((-1.0)*r10*x926))+((r01*x918*x919))+(((-1.0)*x918*x933))+(((-16.0)*x935)))))))+(((0.5)*(IKabs(((((-1.0)*x950))+(((-1.0)*x951))+x948+x941)))))+(IKabs(((((-1.0)*r10*x927))+(((-8.0)*x935))+((r01*x919*x921))+(((-1.0)*x921*x933)))))+(((0.5)*(IKabs((((r11*x918*x923))+(((-16.0)*x934))+(((-1.0)*r00*x926))+(((-1.0)*r11*x918*x919)))))))+(((0.5)*(IKabs(((((-1.0)*r12*x922*x923))+(((-1.0)*x924*x925))+(((-1.0)*x952))+x949+((r12*x919*x922)))))))+(((0.5)*(IKabs(((((-1.0)*x953))+(((-1.0)*x952))+x949+x945)))))+(IKabs(((((-1.0)*r11*x919*x921))+(((-8.0)*x934))+((r11*x921*x923))+(((-1.0)*r00*x927)))))+(((0.5)*(IKabs(((((-1.0)*x949))+(((-1.0)*x953))+x952+x945)))))+(((0.5)*(IKabs(((((-1.0)*x948))+(((-1.0)*x951))+x950+x941))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x954=(r10*sj3);
IkReal x955=(r01*sj4);
IkReal x956=(cj1*cj2);
IkReal x957=(cj3*cj4);
IkReal x958=(sj1*sj2);
IkReal x959=(cj4*r02);
IkReal x960=((4.0)*r11*sj3);
IkReal x961=(cj3*r12*sj4);
IkReal x962=((4.0)*r00*sj4);
IkReal x963=((4.0)*r10*x957);
IkReal x964=((12.0)*x961);
IkReal x965=((4.0)*x961);
IkReal x966=(x956*x962);
IkReal x967=(x958*x962);
IkReal x968=((12.0)*x958*x959);
IkReal x969=((12.0)*x956*x959);
IkReal x970=((4.0)*x958*x959);
IkReal x971=((4.0)*x956*x959);
IkReal x972=(x960+x966);
IkReal x973=(x963+x967);
IkReal x974=(x971+x965);
IkReal x975=(x964+x969);
IkReal x976=((((-8.0)*x954))+(((8.0)*x955*x956))+(((-8.0)*x955*x958))+(((-8.0)*r11*x957)));
op[0]=(x970+x972+(((-1.0)*x974))+(((-1.0)*x973)));
op[1]=x976;
op[2]=(x972+x968+(((-1.0)*x975))+(((-1.0)*x973)));
op[3]=((((-16.0)*r11*x957))+(((16.0)*x955*x956))+(((-16.0)*x954))+(((-16.0)*x955*x958)));
op[4]=(x973+x968+(((-1.0)*x975))+(((-1.0)*x972)));
op[5]=x976;
op[6]=(x970+x973+(((-1.0)*x974))+(((-1.0)*x972)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x977=(cj1*cj2);
IkReal x978=((4.0)*cj4);
IkReal x979=(sj1*sj2);
IkReal x980=((4.0)*sj4);
IkReal x981=(r00*sj3);
IkReal x982=(cj3*r02);
IkReal x983=((4.0)*r01*sj3);
IkReal x984=((16.0)*r11*sj4);
IkReal x985=(cj3*cj4*r01);
IkReal x986=((12.0)*cj4*r12);
IkReal x987=((8.0)*r11*sj4);
IkReal x988=(cj3*r00*x978);
IkReal x989=((12.0)*sj4*x982);
IkReal x990=(x980*x982);
IkReal x991=(r10*x977*x980);
IkReal x992=(r10*x979*x980);
IkReal x993=(x977*x986);
IkReal x994=(x979*x986);
IkReal x995=(r12*x977*x978);
IkReal x996=(r12*x978*x979);
IkReal x997=(x992+x983);
IkReal x998=(x991+x988);
IkReal x999=(x990+x996);
IkReal x1000=(x994+x989);
IkReal x1001=(((x979*x987))+(((-8.0)*x981))+(((-8.0)*x985))+(((-1.0)*x977*x987)));
j5evalpoly[0]=((((htj5*htj5)*(((((-1.0)*x1000))+(((-1.0)*x997))+x993+x998))))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x1000))+(((-1.0)*x998))+x993+x997))))+(((-1.0)*x997))+(((-1.0)*x999))+((x1001*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5)*(((((-16.0)*x981))+(((-16.0)*x985))+((x979*x984))+(((-1.0)*x977*x984))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-1.0)*x998))+(((-1.0)*x999))+x997+x995))))+((htj5*x1001))+x995+x998);
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1002=(cj5*sj4);
IkReal x1003=(sj4*sj5);
if( IKabs((((r01*x1003))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1002)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1003))+((cj4*r12))+((r10*x1002)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1003))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1002))))+IKsqr(((((-1.0)*r11*x1003))+((cj4*r12))+((r10*x1002))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1003))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x1002))), ((((-1.0)*r11*x1003))+((cj4*r12))+((r10*x1002))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1004=IKcos(j0);
IkReal x1005=IKsin(j0);
IkReal x1006=(r02*sj4);
IkReal x1007=((0.1)*sj5);
IkReal x1008=(cj5*r11);
IkReal x1009=((1.0)*sj3);
IkReal x1010=(r12*sj4);
IkReal x1011=((1.0)*cj3);
IkReal x1012=(r11*sj5);
IkReal x1013=(cj3*cj4);
IkReal x1014=((1.0)*sj2);
IkReal x1015=(cj5*r01);
IkReal x1016=(r01*sj5);
IkReal x1017=(sj1*sj2);
IkReal x1018=(cj1*cj2);
IkReal x1019=(r00*sj5);
IkReal x1020=((1.0)*cj2);
IkReal x1021=(r10*sj5);
IkReal x1022=((1.0)*cj4);
IkReal x1023=(cj4*cj5*r00);
IkReal x1024=(cj1*x1004);
IkReal x1025=(cj4*cj5*r10);
IkReal x1026=((0.392)*x1005);
IkReal x1027=((1.0)*x1005);
IkReal x1028=(cj1*x1005);
IkReal x1029=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r12*x1022))+x1004+((sj4*x1012))+(((-1.0)*r10*x1029)));
evalcond[1]=(((sj4*x1016))+(((-1.0)*x1027))+(((-1.0)*r00*x1029))+(((-1.0)*r02*x1022)));
evalcond[2]=((((0.392)*x1004*x1018))+(((-0.392)*x1004*x1017))+(((-1.0)*px))+(((0.425)*x1024))+(((-0.134)*x1005))+(((-1.0)*r00*x1007))+(((-0.1)*x1015)));
evalcond[3]=((((-1.0)*r10*x1007))+(((0.134)*x1004))+(((-1.0)*py))+((x1018*x1026))+(((0.425)*x1028))+(((-1.0)*x1017*x1026))+(((-0.1)*x1008)));
evalcond[4]=(((cj3*x1006))+(((-1.0)*x1004*x1018))+((x1013*x1016))+((sj3*x1015))+((sj3*x1019))+((x1004*x1017))+(((-1.0)*x1011*x1023)));
evalcond[5]=(((cj3*x1010))+(((-1.0)*x1018*x1027))+((sj3*x1008))+((x1012*x1013))+((x1005*x1017))+(((-1.0)*x1011*x1025))+((sj3*x1021)));
evalcond[6]=((((-1.0)*sj1*x1004*x1020))+(((-1.0)*cj4*x1009*x1016))+((cj3*x1019))+((cj3*x1015))+(((-1.0)*x1006*x1009))+(((-1.0)*x1014*x1024))+((sj3*x1023)));
evalcond[7]=(((cj3*x1008))+(((-1.0)*sj1*x1005*x1020))+(((-1.0)*x1009*x1010))+(((-1.0)*cj4*x1009*x1012))+(((-1.0)*x1014*x1028))+((sj3*x1025))+((cj3*x1021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1030=IKPowWithIntegerCheck(cj3,-1);
if(!x1030.valid){
continue;
}
CheckValue<IkReal> x1031=IKPowWithIntegerCheck(r22,-1);
if(!x1031.valid){
continue;
}
sj4array[0]=((-1.0)*(x1030.value)*(x1031.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1032=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1032);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1032);
IkReal x1033=((16.0)*sj4);
IkReal x1034=(cj1*cj2);
IkReal x1035=((4.0)*sj3);
IkReal x1036=((8.0)*sj4);
IkReal x1037=((4.0)*cj4);
IkReal x1038=(sj1*sj2);
IkReal x1039=((4.0)*sj4);
IkReal x1040=(cj3*r02);
IkReal x1041=((16.0)*sj3);
IkReal x1042=((8.0)*sj3);
IkReal x1043=((12.0)*cj4);
IkReal x1044=((12.0)*sj4);
IkReal x1045=(cj3*r12);
IkReal x1046=(r11*x1035);
IkReal x1047=(r01*x1035);
IkReal x1048=(r01*x1038);
IkReal x1049=(cj3*cj4*r01);
IkReal x1050=(cj3*cj4*r11);
IkReal x1051=(cj3*r10*x1037);
IkReal x1052=(x1044*x1045);
IkReal x1053=(cj3*r00*x1037);
IkReal x1054=(x1040*x1044);
IkReal x1055=(r00*x1038*x1039);
IkReal x1056=(r02*x1038*x1043);
IkReal x1057=(r00*x1034*x1039);
IkReal x1058=(r02*x1034*x1043);
IkReal x1059=(r10*x1038*x1039);
IkReal x1060=(r12*x1034*x1043);
IkReal x1061=(r12*x1038*x1043);
IkReal x1062=(r10*x1034*x1039);
IkReal x1063=(x1057+x1046);
IkReal x1064=(x1059+x1047);
IkReal x1065=(x1051+x1055);
IkReal x1066=(x1052+x1058);
IkReal x1067=(x1053+x1062);
IkReal x1068=(x1054+x1061);
j5eval[0]=((((0.5)*(IKabs((x1056+x1063+(((-1.0)*x1066))+(((-1.0)*x1065)))))))+(((0.5)*(IKabs((x1064+(((-1.0)*r12*x1037*x1038))+(((-1.0)*x1039*x1040))+((r12*x1034*x1037))+(((-1.0)*x1067)))))))+(((0.5)*(IKabs((x1060+x1067+(((-1.0)*x1068))+(((-1.0)*x1064)))))))+(((0.5)*(IKabs((x1060+x1064+(((-1.0)*x1068))+(((-1.0)*x1067)))))))+(((0.5)*(IKabs(((((-1.0)*r10*x1041))+(((-1.0)*x1033*x1048))+(((-16.0)*x1050))+((r01*x1033*x1034)))))))+(((0.5)*(IKabs((((r02*x1037*x1038))+x1063+(((-1.0)*x1039*x1045))+(((-1.0)*r02*x1034*x1037))+(((-1.0)*x1065)))))))+(IKabs(((((-1.0)*r00*x1042))+(((-8.0)*x1049))+((r11*x1036*x1038))+(((-1.0)*r11*x1034*x1036)))))+(((0.5)*(IKabs(((((-1.0)*r00*x1041))+((r11*x1033*x1038))+(((-1.0)*r11*x1033*x1034))+(((-16.0)*x1049)))))))+(IKabs(((((-8.0)*x1050))+(((-1.0)*r10*x1042))+((r01*x1034*x1036))+(((-1.0)*x1036*x1048)))))+(((0.5)*(IKabs((x1056+x1065+(((-1.0)*x1066))+(((-1.0)*x1063))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1069=(r10*sj3);
IkReal x1070=(r01*sj4);
IkReal x1071=(cj1*cj2);
IkReal x1072=(cj3*cj4);
IkReal x1073=(sj1*sj2);
IkReal x1074=(cj4*r02);
IkReal x1075=((4.0)*r11*sj3);
IkReal x1076=(cj3*r12*sj4);
IkReal x1077=((4.0)*r00*sj4);
IkReal x1078=((4.0)*r10*x1072);
IkReal x1079=((12.0)*x1076);
IkReal x1080=((4.0)*x1076);
IkReal x1081=(x1071*x1077);
IkReal x1082=(x1073*x1077);
IkReal x1083=((12.0)*x1073*x1074);
IkReal x1084=((12.0)*x1071*x1074);
IkReal x1085=((4.0)*x1073*x1074);
IkReal x1086=((4.0)*x1071*x1074);
IkReal x1087=(x1075+x1081);
IkReal x1088=(x1078+x1082);
IkReal x1089=(x1086+x1080);
IkReal x1090=(x1079+x1084);
IkReal x1091=((((-8.0)*x1070*x1073))+(((8.0)*x1070*x1071))+(((-8.0)*x1069))+(((-8.0)*r11*x1072)));
op[0]=(x1087+x1085+(((-1.0)*x1088))+(((-1.0)*x1089)));
op[1]=x1091;
op[2]=(x1087+x1083+(((-1.0)*x1090))+(((-1.0)*x1088)));
op[3]=((((16.0)*x1070*x1071))+(((-16.0)*r11*x1072))+(((-16.0)*x1069))+(((-16.0)*x1070*x1073)));
op[4]=(x1083+x1088+(((-1.0)*x1090))+(((-1.0)*x1087)));
op[5]=x1091;
op[6]=(x1085+x1088+(((-1.0)*x1087))+(((-1.0)*x1089)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1092=(cj1*cj2);
IkReal x1093=((4.0)*cj4);
IkReal x1094=(sj1*sj2);
IkReal x1095=((4.0)*sj4);
IkReal x1096=(r00*sj3);
IkReal x1097=(cj3*r02);
IkReal x1098=((4.0)*r01*sj3);
IkReal x1099=((16.0)*r11*sj4);
IkReal x1100=(cj3*cj4*r01);
IkReal x1101=((12.0)*cj4*r12);
IkReal x1102=((8.0)*r11*sj4);
IkReal x1103=(cj3*r00*x1093);
IkReal x1104=((12.0)*sj4*x1097);
IkReal x1105=(x1095*x1097);
IkReal x1106=(r10*x1092*x1095);
IkReal x1107=(r10*x1094*x1095);
IkReal x1108=(x1092*x1101);
IkReal x1109=(x1094*x1101);
IkReal x1110=(r12*x1092*x1093);
IkReal x1111=(r12*x1093*x1094);
IkReal x1112=(x1107+x1098);
IkReal x1113=(x1106+x1103);
IkReal x1114=(x1105+x1111);
IkReal x1115=(x1104+x1109);
IkReal x1116=(((x1094*x1102))+(((-1.0)*x1092*x1102))+(((-8.0)*x1096))+(((-8.0)*x1100)));
j5evalpoly[0]=((((htj5*htj5)*((x1108+x1113+(((-1.0)*x1115))+(((-1.0)*x1112))))))+x1110+x1113+((x1116*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5)*(((((-16.0)*x1100))+((x1094*x1099))+(((-16.0)*x1096))+(((-1.0)*x1092*x1099))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1110+x1112+(((-1.0)*x1114))+(((-1.0)*x1113))))))+(((htj5*htj5*htj5*htj5)*((x1108+x1112+(((-1.0)*x1115))+(((-1.0)*x1113))))))+(((-1.0)*x1114))+(((-1.0)*x1112))+((htj5*x1116)));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1117=(cj5*sj4);
IkReal x1118=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1118))+(((-1.0)*r00*x1117)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1118))+((cj4*r12))+((r10*x1117)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1118))+(((-1.0)*r00*x1117))))+IKsqr(((((-1.0)*r11*x1118))+((cj4*r12))+((r10*x1117))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1118))+(((-1.0)*r00*x1117))), ((((-1.0)*r11*x1118))+((cj4*r12))+((r10*x1117))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1119=IKcos(j0);
IkReal x1120=IKsin(j0);
IkReal x1121=(r02*sj4);
IkReal x1122=((0.1)*sj5);
IkReal x1123=(cj5*r11);
IkReal x1124=((1.0)*sj3);
IkReal x1125=(r12*sj4);
IkReal x1126=((1.0)*cj3);
IkReal x1127=(r11*sj5);
IkReal x1128=(cj3*cj4);
IkReal x1129=((1.0)*sj2);
IkReal x1130=(cj5*r01);
IkReal x1131=(r01*sj5);
IkReal x1132=(sj1*sj2);
IkReal x1133=(cj1*cj2);
IkReal x1134=(r00*sj5);
IkReal x1135=((1.0)*cj2);
IkReal x1136=(r10*sj5);
IkReal x1137=((1.0)*cj4);
IkReal x1138=(cj4*cj5*r00);
IkReal x1139=(cj1*x1119);
IkReal x1140=(cj4*cj5*r10);
IkReal x1141=((0.392)*x1120);
IkReal x1142=((1.0)*x1120);
IkReal x1143=(cj1*x1120);
IkReal x1144=((1.0)*cj5*sj4);
evalcond[0]=(x1119+(((-1.0)*r12*x1137))+((sj4*x1127))+(((-1.0)*r10*x1144)));
evalcond[1]=((((-1.0)*r00*x1144))+((sj4*x1131))+(((-1.0)*x1142))+(((-1.0)*r02*x1137)));
evalcond[2]=((((-0.1)*x1130))+(((-1.0)*px))+(((0.425)*x1139))+(((-0.134)*x1120))+(((0.392)*x1119*x1133))+(((-1.0)*r00*x1122))+(((-0.392)*x1119*x1132)));
evalcond[3]=((((-0.1)*x1123))+(((0.425)*x1143))+(((-1.0)*x1132*x1141))+(((-1.0)*r10*x1122))+(((-1.0)*py))+((x1133*x1141))+(((0.134)*x1119)));
evalcond[4]=(((x1119*x1132))+(((-1.0)*x1119*x1133))+(((-1.0)*x1126*x1138))+((x1128*x1131))+((sj3*x1130))+((sj3*x1134))+((cj3*x1121)));
evalcond[5]=(((x1127*x1128))+((x1120*x1132))+(((-1.0)*x1133*x1142))+((sj3*x1123))+(((-1.0)*x1126*x1140))+((sj3*x1136))+((cj3*x1125)));
evalcond[6]=(((cj3*x1130))+((cj3*x1134))+(((-1.0)*x1121*x1124))+(((-1.0)*sj1*x1119*x1135))+(((-1.0)*cj4*x1124*x1131))+((sj3*x1138))+(((-1.0)*x1129*x1139)));
evalcond[7]=(((cj3*x1136))+(((-1.0)*x1129*x1143))+(((-1.0)*sj1*x1120*x1135))+((sj3*x1140))+(((-1.0)*cj4*x1124*x1127))+(((-1.0)*x1124*x1125))+((cj3*x1123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1145=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1145);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1145);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1146=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1146);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1146);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1147=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1147);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1147);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1148=IKPowWithIntegerCheck(r22,-1);
if(!x1148.valid){
continue;
}
sj4array[0]=((-1.0)*(x1148.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1149=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1149);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1149);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1151 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1151.valid){
continue;
}
IkReal x1150=x1151.value;
j5array[0]=((-1.0)*x1150);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1150)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1152=(cj5*sj4);
IkReal x1153=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1152))+((r01*x1153)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1153))+((r10*x1152)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1152))+((r01*x1153))))+IKsqr(((((-1.0)*r11*x1153))+((r10*x1152))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1152))+((r01*x1153))), ((((-1.0)*r11*x1153))+((r10*x1152))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1154=IKcos(j0);
IkReal x1155=IKsin(j0);
IkReal x1156=((0.1)*sj5);
IkReal x1157=(cj5*r11);
IkReal x1158=(cj5*r01);
IkReal x1159=(sj4*sj5);
IkReal x1160=((0.425)*cj1);
IkReal x1161=((1.0)*cj1*sj2);
IkReal x1162=((1.0)*cj2*sj1);
IkReal x1163=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r10*x1163))+x1154+((r11*x1159)));
evalcond[1]=((((-1.0)*x1155))+(((-1.0)*r00*x1163))+((r01*x1159)));
evalcond[2]=(((r00*sj5))+x1158+(((-1.0)*x1154*x1161))+(((-1.0)*x1154*x1162)));
evalcond[3]=(x1157+((r10*sj5))+(((-1.0)*x1155*x1162))+(((-1.0)*x1155*x1161)));
evalcond[4]=((((-1.0)*r00*x1156))+(((-0.134)*x1155))+((x1154*x1160))+(((-1.0)*px))+(((-0.1)*x1158)));
evalcond[5]=((((0.134)*x1154))+((x1155*x1160))+(((-1.0)*py))+(((-0.1)*x1157))+(((-1.0)*r10*x1156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1164=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1164);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1164);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1165=IKPowWithIntegerCheck(r22,-1);
if(!x1165.valid){
continue;
}
sj4array[0]=((x1165.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1166=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1166);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1166);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1168 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1168.valid){
continue;
}
IkReal x1167=x1168.value;
j5array[0]=((-1.0)*x1167);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1167)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1169=(cj5*sj4);
IkReal x1170=(sj4*sj5);
if( IKabs((((r01*x1170))+(((-1.0)*r00*x1169)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1169))+(((-1.0)*r11*x1170)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1170))+(((-1.0)*r00*x1169))))+IKsqr((((r10*x1169))+(((-1.0)*r11*x1170))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1170))+(((-1.0)*r00*x1169))), (((r10*x1169))+(((-1.0)*r11*x1170))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1171=IKcos(j0);
IkReal x1172=IKsin(j0);
IkReal x1173=(r00*sj5);
IkReal x1174=(cj5*r11);
IkReal x1175=(sj4*sj5);
IkReal x1176=(r10*sj5);
IkReal x1177=((0.425)*cj1);
IkReal x1178=((1.0)*cj5);
IkReal x1179=((1.0)*cj1*sj2);
IkReal x1180=((1.0)*cj2*sj1);
evalcond[0]=(x1171+(((-1.0)*r10*sj4*x1178))+((r11*x1175)));
evalcond[1]=((((-1.0)*r00*sj4*x1178))+((r01*x1175))+(((-1.0)*x1172)));
evalcond[2]=((((-0.1)*cj5*r01))+(((-1.0)*px))+(((-0.134)*x1172))+(((-0.1)*x1173))+((x1171*x1177)));
evalcond[3]=((((-1.0)*py))+((x1172*x1177))+(((0.134)*x1171))+(((-0.1)*x1176))+(((-0.1)*x1174)));
evalcond[4]=((((-1.0)*x1171*x1180))+(((-1.0)*x1171*x1179))+(((-1.0)*r01*x1178))+(((-1.0)*x1173)));
evalcond[5]=((((-1.0)*x1172*x1179))+(((-1.0)*x1172*x1180))+(((-1.0)*x1176))+(((-1.0)*x1174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1181=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1181);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1181);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1182=IKPowWithIntegerCheck(r22,-1);
if(!x1182.valid){
continue;
}
sj4array[0]=((x1182.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1183=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1183);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1183);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1185 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1185.valid){
continue;
}
IkReal x1184=x1185.value;
j5array[0]=((-1.0)*x1184);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1184)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1186=(cj5*sj4);
IkReal x1187=(sj4*sj5);
if( IKabs((((r01*x1187))+(((-1.0)*r00*x1186)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1186))+(((-1.0)*r11*x1187)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1187))+(((-1.0)*r00*x1186))))+IKsqr((((r10*x1186))+(((-1.0)*r11*x1187))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1187))+(((-1.0)*r00*x1186))), (((r10*x1186))+(((-1.0)*r11*x1187))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1188=IKcos(j0);
IkReal x1189=IKsin(j0);
IkReal x1190=((0.1)*sj5);
IkReal x1191=(sj1*sj2);
IkReal x1192=(cj5*r11);
IkReal x1193=(cj5*r01);
IkReal x1194=(sj4*sj5);
IkReal x1195=(cj1*cj2);
IkReal x1196=((0.392)*x1189);
IkReal x1197=(cj1*x1188);
IkReal x1198=((1.0)*x1189);
IkReal x1199=((1.0)*cj5*sj4);
evalcond[0]=(x1188+(((-1.0)*r10*x1199))+((r11*x1194)));
evalcond[1]=((((-1.0)*r00*x1199))+((r01*x1194))+(((-1.0)*x1198)));
evalcond[2]=(((r00*sj5))+x1193+((x1188*x1191))+(((-1.0)*x1188*x1195)));
evalcond[3]=(x1192+((r10*sj5))+(((-1.0)*x1195*x1198))+((x1189*x1191)));
evalcond[4]=((((-1.0)*r00*x1190))+(((-0.1)*x1193))+(((0.425)*x1197))+(((-1.0)*px))+(((0.392)*x1188*x1195))+(((-0.134)*x1189))+(((-0.392)*x1188*x1191)));
evalcond[5]=((((0.134)*x1188))+(((-1.0)*x1191*x1196))+((x1195*x1196))+(((-0.1)*x1192))+(((-1.0)*r10*x1190))+(((-1.0)*py))+(((0.425)*cj1*x1189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1200=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1200);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1200);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1201=IKPowWithIntegerCheck(r22,-1);
if(!x1201.valid){
continue;
}
sj4array[0]=((-1.0)*(x1201.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1202=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1202);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1202);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1204 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1204.valid){
continue;
}
IkReal x1203=x1204.value;
j5array[0]=((-1.0)*x1203);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1203)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1205=(cj5*sj4);
IkReal x1206=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1205))+((r01*x1206)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1205))+(((-1.0)*r11*x1206)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1205))+((r01*x1206))))+IKsqr((((r10*x1205))+(((-1.0)*r11*x1206))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1205))+((r01*x1206))), (((r10*x1205))+(((-1.0)*r11*x1206))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1207=IKcos(j0);
IkReal x1208=IKsin(j0);
IkReal x1209=((0.1)*sj5);
IkReal x1210=(sj1*sj2);
IkReal x1211=(cj5*r11);
IkReal x1212=(sj4*sj5);
IkReal x1213=(cj1*cj2);
IkReal x1214=((1.0)*sj5);
IkReal x1215=((1.0)*cj5);
IkReal x1216=((0.425)*cj1);
IkReal x1217=((0.392)*x1208);
IkReal x1218=((0.392)*x1207);
IkReal x1219=((1.0)*x1208);
evalcond[0]=(x1207+((r11*x1212))+(((-1.0)*r10*sj4*x1215)));
evalcond[1]=(((r01*x1212))+(((-1.0)*x1219))+(((-1.0)*r00*sj4*x1215)));
evalcond[2]=((((-1.0)*x1207*x1213))+((x1207*x1210))+(((-1.0)*r00*x1214))+(((-1.0)*r01*x1215)));
evalcond[3]=((((-1.0)*x1213*x1219))+(((-1.0)*r10*x1214))+((x1208*x1210))+(((-1.0)*x1211)));
evalcond[4]=(((x1213*x1218))+(((-0.1)*cj5*r01))+((x1207*x1216))+(((-1.0)*px))+(((-1.0)*r00*x1209))+(((-1.0)*x1210*x1218))+(((-0.134)*x1208)));
evalcond[5]=((((-0.1)*x1211))+((x1213*x1217))+(((-1.0)*r10*x1209))+(((-1.0)*py))+(((0.134)*x1207))+(((-1.0)*x1210*x1217))+((x1208*x1216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1220=IKPowWithIntegerCheck(r22,-1);
if(!x1220.valid){
continue;
}
CheckValue<IkReal> x1221=IKPowWithIntegerCheck(sj3,-1);
if(!x1221.valid){
continue;
}
sj4array[0]=((x1220.value)*(x1221.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1222=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1222);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1222);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1223=((4.0)*r01);
IkReal x1224=((16.0)*r00);
IkReal x1225=(cj3*sj2);
IkReal x1226=((8.0)*r00);
IkReal x1227=(cj2*cj3);
IkReal x1228=(cj4*r01);
IkReal x1229=((16.0)*cj1);
IkReal x1230=((8.0)*sj1);
IkReal x1231=((16.0)*sj1);
IkReal x1232=((8.0)*cj1);
IkReal x1233=(sj2*sj3);
IkReal x1234=(cj2*sj3);
IkReal x1235=(sj1*x1234);
IkReal x1236=((4.0)*cj4*r00);
IkReal x1237=(((sj1*x1233*x1236))+((x1223*x1235))+((sj1*x1223*x1225))+((cj1*x1223*x1233)));
IkReal x1238=(((sj1*x1227*x1236))+((cj1*x1225*x1236))+((cj1*x1223*x1227))+((cj1*x1234*x1236)));
IkReal x1239=(x1238+(((-1.0)*x1237)));
IkReal x1240=(((sj1*x1225*x1226))+((x1227*x1228*x1230))+(((-1.0)*cj1*x1226*x1227))+((x1225*x1228*x1232))+((x1226*x1235))+(((-1.0)*x1228*x1230*x1233))+((x1228*x1232*x1234))+((cj1*x1226*x1233)));
IkReal x1241=(x1237+(((-1.0)*x1238)));
op[0]=x1239;
op[1]=x1240;
op[2]=x1239;
op[3]=(((x1228*x1229*x1234))+((cj1*x1224*x1233))+((x1227*x1228*x1231))+((sj1*x1224*x1225))+((x1225*x1228*x1229))+((x1224*x1235))+(((-1.0)*cj1*x1224*x1227))+(((-1.0)*x1228*x1231*x1233)));
op[4]=x1241;
op[5]=x1240;
op[6]=x1241;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1242=(cj5*sj4);
IkReal x1243=(sj4*sj5);
if( IKabs((((r01*x1243))+(((-1.0)*r00*x1242)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1243))+((r10*x1242)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1243))+(((-1.0)*r00*x1242))))+IKsqr(((((-1.0)*r11*x1243))+((r10*x1242))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1243))+(((-1.0)*r00*x1242))), ((((-1.0)*r11*x1243))+((r10*x1242))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1244=IKcos(j0);
IkReal x1245=IKsin(j0);
IkReal x1246=((0.1)*sj5);
IkReal x1247=((0.392)*sj1);
IkReal x1248=(cj5*r11);
IkReal x1249=((1.0)*cj3);
IkReal x1250=((0.425)*cj1);
IkReal x1251=((1.0)*cj1);
IkReal x1252=(r11*sj5);
IkReal x1253=(cj5*r01);
IkReal x1254=(r01*sj5);
IkReal x1255=(cj3*cj4);
IkReal x1256=(r00*sj5);
IkReal x1257=((1.0)*sj1);
IkReal x1258=(r10*sj5);
IkReal x1259=(sj2*x1245);
IkReal x1260=(cj4*cj5*r00);
IkReal x1261=(sj2*x1244);
IkReal x1262=(cj4*cj5*r10);
IkReal x1263=((1.0)*cj4*sj3);
IkReal x1264=((0.392)*cj1*cj2);
IkReal x1265=(cj2*x1244);
IkReal x1266=((1.0)*cj5*sj4);
IkReal x1267=(cj2*x1245);
evalcond[0]=((((-1.0)*r10*x1266))+x1244+((sj4*x1252)));
evalcond[1]=(((sj4*x1254))+(((-1.0)*x1245))+(((-1.0)*r00*x1266)));
evalcond[2]=((((-1.0)*x1249*x1260))+((sj1*x1261))+((x1254*x1255))+(((-1.0)*x1251*x1265))+((sj3*x1256))+((sj3*x1253)));
evalcond[3]=((((-1.0)*x1249*x1262))+((sj1*x1259))+((sj3*x1248))+((x1252*x1255))+(((-1.0)*x1251*x1267))+((sj3*x1258)));
evalcond[4]=(((cj3*x1256))+((cj3*x1253))+(((-1.0)*x1257*x1265))+(((-1.0)*x1254*x1263))+(((-1.0)*x1251*x1261))+((sj3*x1260)));
evalcond[5]=(((cj3*x1258))+(((-1.0)*x1252*x1263))+(((-1.0)*x1257*x1267))+(((-1.0)*x1251*x1259))+((sj3*x1262))+((cj3*x1248)));
evalcond[6]=(((x1244*x1264))+(((-1.0)*x1247*x1261))+(((-1.0)*px))+(((-0.134)*x1245))+(((-0.1)*x1253))+(((-1.0)*r00*x1246))+((x1244*x1250)));
evalcond[7]=(((x1245*x1264))+((x1245*x1250))+(((-1.0)*x1247*x1259))+(((-0.1)*x1248))+(((-1.0)*py))+(((-1.0)*r10*x1246))+(((0.134)*x1244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1268=IKPowWithIntegerCheck(cj3,-1);
if(!x1268.valid){
continue;
}
CheckValue<IkReal> x1269=IKPowWithIntegerCheck(r22,-1);
if(!x1269.valid){
continue;
}
sj4array[0]=((-1.0)*(x1268.value)*(x1269.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1270=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1270);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1270);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1271=((4.0)*r01);
IkReal x1272=((16.0)*r00);
IkReal x1273=(cj3*sj2);
IkReal x1274=((8.0)*r00);
IkReal x1275=(cj2*cj3);
IkReal x1276=(cj4*r01);
IkReal x1277=((16.0)*cj1);
IkReal x1278=((8.0)*sj1);
IkReal x1279=((16.0)*sj1);
IkReal x1280=((8.0)*cj1);
IkReal x1281=(sj2*sj3);
IkReal x1282=(cj2*sj3);
IkReal x1283=(sj1*x1282);
IkReal x1284=((4.0)*cj4*r00);
IkReal x1285=(((sj1*x1281*x1284))+((sj1*x1271*x1273))+((cj1*x1271*x1281))+((x1271*x1283)));
IkReal x1286=(((sj1*x1275*x1284))+((cj1*x1273*x1284))+((cj1*x1282*x1284))+((cj1*x1271*x1275)));
IkReal x1287=(x1286+(((-1.0)*x1285)));
IkReal x1288=(((cj1*x1274*x1281))+((x1273*x1276*x1280))+(((-1.0)*cj1*x1274*x1275))+(((-1.0)*x1276*x1278*x1281))+((sj1*x1273*x1274))+((x1274*x1283))+((x1275*x1276*x1278))+((x1276*x1280*x1282)));
IkReal x1289=(x1285+(((-1.0)*x1286)));
op[0]=x1287;
op[1]=x1288;
op[2]=x1287;
op[3]=((((-1.0)*cj1*x1272*x1275))+((x1273*x1276*x1277))+((cj1*x1272*x1281))+(((-1.0)*x1276*x1279*x1281))+((x1272*x1283))+((x1276*x1277*x1282))+((sj1*x1272*x1273))+((x1275*x1276*x1279)));
op[4]=x1289;
op[5]=x1288;
op[6]=x1289;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000001000000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1290=(cj5*sj4);
IkReal x1291=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1290))+((r01*x1291)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1290))+(((-1.0)*r11*x1291)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1290))+((r01*x1291))))+IKsqr((((r10*x1290))+(((-1.0)*r11*x1291))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1290))+((r01*x1291))), (((r10*x1290))+(((-1.0)*r11*x1291))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1292=IKcos(j0);
IkReal x1293=IKsin(j0);
IkReal x1294=((0.1)*sj5);
IkReal x1295=((0.392)*sj1);
IkReal x1296=(cj5*r11);
IkReal x1297=((1.0)*cj3);
IkReal x1298=((0.425)*cj1);
IkReal x1299=((1.0)*cj1);
IkReal x1300=(r11*sj5);
IkReal x1301=(cj5*r01);
IkReal x1302=(r01*sj5);
IkReal x1303=(cj3*cj4);
IkReal x1304=(r00*sj5);
IkReal x1305=((1.0)*sj1);
IkReal x1306=(r10*sj5);
IkReal x1307=(sj2*x1293);
IkReal x1308=(cj4*cj5*r00);
IkReal x1309=(sj2*x1292);
IkReal x1310=(cj4*cj5*r10);
IkReal x1311=((1.0)*cj4*sj3);
IkReal x1312=((0.392)*cj1*cj2);
IkReal x1313=(cj2*x1292);
IkReal x1314=((1.0)*cj5*sj4);
IkReal x1315=(cj2*x1293);
evalcond[0]=(x1292+((sj4*x1300))+(((-1.0)*r10*x1314)));
evalcond[1]=((((-1.0)*r00*x1314))+(((-1.0)*x1293))+((sj4*x1302)));
evalcond[2]=(((sj3*x1304))+((sj3*x1301))+(((-1.0)*x1299*x1313))+(((-1.0)*x1297*x1308))+((x1302*x1303))+((sj1*x1309)));
evalcond[3]=(((sj3*x1296))+((sj3*x1306))+((x1300*x1303))+(((-1.0)*x1299*x1315))+(((-1.0)*x1297*x1310))+((sj1*x1307)));
evalcond[4]=(((sj3*x1308))+(((-1.0)*x1299*x1309))+(((-1.0)*x1305*x1313))+((cj3*x1304))+((cj3*x1301))+(((-1.0)*x1302*x1311)));
evalcond[5]=(((sj3*x1310))+(((-1.0)*x1300*x1311))+((cj3*x1296))+(((-1.0)*x1299*x1307))+(((-1.0)*x1305*x1315))+((cj3*x1306)));
evalcond[6]=((((-1.0)*r00*x1294))+((x1292*x1312))+(((-0.134)*x1293))+(((-1.0)*px))+(((-0.1)*x1301))+(((-1.0)*x1295*x1309))+((x1292*x1298)));
evalcond[7]=((((0.134)*x1292))+((x1293*x1312))+((x1293*x1298))+(((-1.0)*py))+(((-0.1)*x1296))+(((-1.0)*x1295*x1307))+(((-1.0)*r10*x1294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1318 = IKatan2WithCheck(IkReal(((-0.1)*r21)),IkReal(((-0.1)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1318.valid){
continue;
}
IkReal x1316=((1.0)*(x1318.value));
if((((((0.01)*(r20*r20)))+(((0.01)*(r21*r21))))) < -0.00001)
continue;
CheckValue<IkReal> x1319=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.01)*(r20*r20)))+(((0.01)*(r21*r21)))))),-1);
if(!x1319.valid){
continue;
}
if( (((-1.0)*(x1319.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1319.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1317=((-1.0)*(IKasin(((-1.0)*(x1319.value)*(((((-0.392)*cj1*sj2))+(((-0.392)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))))))));
j5array[0]=((((-1.0)*x1316))+(((-1.0)*x1317)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1316))+(((1.0)*x1317)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1320=cj5*cj5;
IkReal x1321=r21*r21;
IkReal x1322=(sj3*x1320);
IkReal x1323=(((sj3*(r22*r22)))+(((-1.0)*x1321*x1322))+((sj3*x1321))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((x1322*(r20*r20))));
j4eval[0]=x1323;
j4eval[1]=IKsign(x1323);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1324=cj5*cj5;
IkReal x1325=r21*r21;
IkReal x1326=((1.0)*cj3);
IkReal x1327=(cj3*x1324);
IkReal x1328=((((-1.0)*x1324*x1326*(r20*r20)))+(((-1.0)*x1326*(r22*r22)))+(((-1.0)*x1325*x1326))+((x1325*x1327))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1328;
j4eval[1]=IKsign(x1328);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1329=cj1*cj1;
IkReal x1330=cj2*cj2;
IkReal x1331=(cj2*x1329);
IkReal x1332=(cj1*sj1*sj2);
IkReal x1333=(x1329*x1330);
j0eval[0]=((6.36549089425466)+x1329+(((12.3585920403546)*x1331))+(((-5.69949185861059)*x1330))+(((-11.3989837172212)*cj2*x1332))+(((11.3989837172212)*x1333))+(((-12.3585920403546)*x1332)));
j0eval[1]=IKsign(((42905.0)+(((76832.0)*x1333))+(((6740.25)*x1329))+(((-83300.0)*x1332))+(((-38416.0)*x1330))+(((-76832.0)*cj2*x1332))+(((83300.0)*x1331))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1334=((1.0)*cj5);
IkReal x1335=((1.0)*sj5);
IkReal x1336=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1336;
j0eval[1]=((IKabs(((((-1.0)*r10*x1335))+(((-1.0)*r11*x1334)))))+(IKabs(((((-1.0)*r00*x1335))+(((-1.0)*r01*x1334))))));
j0eval[2]=IKsign(x1336);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1337=cj5*cj5;
IkReal x1338=r21*r21;
IkReal x1339=(sj1*sj2);
IkReal x1340=(r21*sj5);
IkReal x1341=(cj5*r20);
IkReal x1342=(cj1*cj2);
IkReal x1343=((((-1.0)*x1337*x1338))+x1338+((x1337*(r20*r20)))+(r22*r22)+(((-2.0)*x1340*x1341)));
j4eval[0]=x1343;
j4eval[1]=IKsign(x1343);
j4eval[2]=((IKabs(((((-1.0)*x1339*x1341))+((x1339*x1340))+((x1341*x1342))+(((-1.0)*x1340*x1342)))))+(IKabs((((r22*x1339))+(((-1.0)*r22*x1342))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1344=IKcos(j0);
IkReal x1345=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.134)*x1345))+(((0.425)*x1344)));
evalcond[1]=((((0.134)*x1344))+(((-1.0)*py))+(((0.425)*x1345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1346=((1.0)*cj5);
IkReal x1347=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1346)));
j4eval[0]=x1347;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1346))))));
j4eval[2]=IKsign(x1347);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1348=((1.0)*cj5);
IkReal x1349=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1348)));
j4eval[0]=x1349;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1348))))));
j4eval[2]=IKsign(x1349);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1350=cj5*cj5;
IkReal x1351=((1.0)*sj5);
IkReal x1352=(cj5*r20);
IkReal x1353=(r11*r21);
IkReal x1354=(x1353+(((-1.0)*r11*x1351*x1352))+((r10*r20*x1350))+(((-1.0)*cj5*r10*r21*x1351))+(((-1.0)*x1350*x1353))+((r12*r22)));
j4eval[0]=x1354;
j4eval[1]=IKsign(x1354);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1351))+((cj0*x1352)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1355=cj5*cj5;
IkReal x1356=((1.0)*sj5);
IkReal x1357=(cj5*r20);
IkReal x1358=(r11*r21);
CheckValue<IkReal> x1359=IKPowWithIntegerCheck(IKsign((x1358+((r10*r20*x1355))+(((-1.0)*cj5*r10*r21*x1356))+((r12*r22))+(((-1.0)*r11*x1356*x1357))+(((-1.0)*x1355*x1358)))),-1);
if(!x1359.valid){
continue;
}
CheckValue<IkReal> x1360 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1356))+((cj0*x1357)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1359.value)))+(x1360.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1361=IKsin(j4);
IkReal x1362=IKcos(j4);
IkReal x1363=((1.0)*sj0);
IkReal x1364=(cj5*r00);
IkReal x1365=(r11*sj5);
IkReal x1366=(cj5*r10);
IkReal x1367=(r21*sj5);
IkReal x1368=(cj5*r20);
IkReal x1369=(r01*sj5);
IkReal x1370=((1.0)*x1362);
IkReal x1371=((1.0)*x1361);
evalcond[0]=(((x1361*x1367))+(((-1.0)*r22*x1370))+(((-1.0)*x1368*x1371)));
evalcond[1]=((((-1.0)*r22*x1371))+(((-1.0)*x1367*x1370))+((x1362*x1368)));
evalcond[2]=(cj0+((x1361*x1365))+(((-1.0)*r12*x1370))+(((-1.0)*x1366*x1371)));
evalcond[3]=(((x1361*x1369))+(((-1.0)*r02*x1370))+(((-1.0)*x1364*x1371))+(((-1.0)*x1363)));
evalcond[4]=((((-1.0)*r02*x1371))+(((-1.0)*x1369*x1370))+(((-1.0)*cj0))+((x1362*x1364)));
evalcond[5]=((((-1.0)*x1365*x1370))+(((-1.0)*r12*x1371))+((x1362*x1366))+(((-1.0)*x1363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1372=((1.0)*cj5);
CheckValue<IkReal> x1373=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1372)))),-1);
if(!x1373.valid){
continue;
}
CheckValue<IkReal> x1374 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1372))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1373.value)))+(x1374.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1375=IKsin(j4);
IkReal x1376=IKcos(j4);
IkReal x1377=((1.0)*sj0);
IkReal x1378=(cj5*r00);
IkReal x1379=(r11*sj5);
IkReal x1380=(cj5*r10);
IkReal x1381=(r21*sj5);
IkReal x1382=(cj5*r20);
IkReal x1383=(r01*sj5);
IkReal x1384=((1.0)*x1376);
IkReal x1385=((1.0)*x1375);
evalcond[0]=((((-1.0)*x1382*x1385))+((x1375*x1381))+(((-1.0)*r22*x1384)));
evalcond[1]=(((x1376*x1382))+(((-1.0)*x1381*x1384))+(((-1.0)*r22*x1385)));
evalcond[2]=((((-1.0)*r12*x1384))+((x1375*x1379))+cj0+(((-1.0)*x1380*x1385)));
evalcond[3]=((((-1.0)*r02*x1384))+(((-1.0)*x1377))+((x1375*x1383))+(((-1.0)*x1378*x1385)));
evalcond[4]=(((x1376*x1378))+(((-1.0)*x1383*x1384))+(((-1.0)*r02*x1385))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1385))+(((-1.0)*x1377))+((x1376*x1380))+(((-1.0)*x1379*x1384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1386=((1.0)*cj5);
CheckValue<IkReal> x1387 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1386))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1387.valid){
continue;
}
CheckValue<IkReal> x1388=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1386)))),-1);
if(!x1388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1387.value)+(((1.5707963267949)*(x1388.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1389=IKsin(j4);
IkReal x1390=IKcos(j4);
IkReal x1391=((1.0)*sj0);
IkReal x1392=(cj5*r00);
IkReal x1393=(r11*sj5);
IkReal x1394=(cj5*r10);
IkReal x1395=(r21*sj5);
IkReal x1396=(cj5*r20);
IkReal x1397=(r01*sj5);
IkReal x1398=((1.0)*x1390);
IkReal x1399=((1.0)*x1389);
evalcond[0]=((((-1.0)*x1396*x1399))+(((-1.0)*r22*x1398))+((x1389*x1395)));
evalcond[1]=((((-1.0)*x1395*x1398))+((x1390*x1396))+(((-1.0)*r22*x1399)));
evalcond[2]=((((-1.0)*r12*x1398))+cj0+(((-1.0)*x1394*x1399))+((x1389*x1393)));
evalcond[3]=((((-1.0)*x1392*x1399))+(((-1.0)*r02*x1398))+((x1389*x1397))+(((-1.0)*x1391)));
evalcond[4]=((((-1.0)*r02*x1399))+(((-1.0)*x1397*x1398))+((x1390*x1392))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1399))+(((-1.0)*x1393*x1398))+((x1390*x1394))+(((-1.0)*x1391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1400=IKcos(j0);
IkReal x1401=IKsin(j0);
evalcond[0]=((((-0.134)*x1401))+(((-1.0)*px))+(((0.425)*x1400)));
evalcond[1]=((((-1.0)*py))+(((0.425)*x1401))+(((0.134)*x1400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1402=((1.0)*cj5);
IkReal x1403=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1402)));
j4eval[0]=x1403;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1402)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1403);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1404=cj5*cj5;
IkReal x1405=((1.0)*r21);
IkReal x1406=(cj5*sj5);
IkReal x1407=((1.0)*r20);
IkReal x1408=((((-1.0)*r01*x1406*x1407))+(((-1.0)*r00*x1405*x1406))+((r01*r21))+((r00*r20*x1404))+((r02*r22))+(((-1.0)*r01*x1404*x1405)));
j4eval[0]=x1408;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1407))))));
j4eval[2]=IKsign(x1408);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1409=cj5*cj5;
IkReal x1410=(r21*sj5);
IkReal x1411=(r11*r21);
IkReal x1412=((1.0)*cj5*r20);
IkReal x1413=(((r10*r20*x1409))+(((-1.0)*cj5*r10*x1410))+((r12*r22))+(((-1.0)*r11*sj5*x1412))+x1411+(((-1.0)*x1409*x1411)));
j4eval[0]=x1413;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1412))+((sj0*x1410))))));
j4eval[2]=IKsign(x1413);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1414=cj5*cj5;
IkReal x1415=(r21*sj5);
IkReal x1416=(r11*r21);
IkReal x1417=((1.0)*cj5*r20);
CheckValue<IkReal> x1418 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1417))+((sj0*x1415)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1418.valid){
continue;
}
CheckValue<IkReal> x1419=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1414*x1416))+(((-1.0)*cj5*r10*x1415))+((r12*r22))+(((-1.0)*r11*sj5*x1417))+((r10*r20*x1414))+x1416)),-1);
if(!x1419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1418.value)+(((1.5707963267949)*(x1419.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1420=IKsin(j4);
IkReal x1421=IKcos(j4);
IkReal x1422=(r11*sj5);
IkReal x1423=(cj5*r00);
IkReal x1424=(cj5*r10);
IkReal x1425=(r21*sj5);
IkReal x1426=(cj5*r20);
IkReal x1427=(r01*sj5);
IkReal x1428=((1.0)*x1421);
IkReal x1429=((1.0)*x1420);
evalcond[0]=((((-1.0)*x1426*x1429))+((x1420*x1425))+(((-1.0)*r22*x1428)));
evalcond[1]=((((-1.0)*x1425*x1428))+(((-1.0)*r22*x1429))+((x1421*x1426)));
evalcond[2]=(((x1420*x1422))+cj0+(((-1.0)*x1424*x1429))+(((-1.0)*r12*x1428)));
evalcond[3]=(cj0+(((-1.0)*x1427*x1428))+(((-1.0)*r02*x1429))+((x1421*x1423)));
evalcond[4]=(sj0+(((-1.0)*r12*x1429))+(((-1.0)*x1422*x1428))+((x1421*x1424)));
evalcond[5]=((((-1.0)*sj0))+((x1420*x1427))+(((-1.0)*x1423*x1429))+(((-1.0)*r02*x1428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1430=cj5*cj5;
IkReal x1431=((1.0)*r21);
IkReal x1432=(cj5*sj5);
IkReal x1433=((1.0)*r20);
CheckValue<IkReal> x1434=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1432*x1433))+(((-1.0)*r01*x1430*x1431))+(((-1.0)*r00*x1431*x1432))+((r01*r21))+((r00*r20*x1430))+((r02*r22)))),-1);
if(!x1434.valid){
continue;
}
CheckValue<IkReal> x1435 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1433)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1434.value)))+(x1435.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1436=IKsin(j4);
IkReal x1437=IKcos(j4);
IkReal x1438=(r11*sj5);
IkReal x1439=(cj5*r00);
IkReal x1440=(cj5*r10);
IkReal x1441=(r21*sj5);
IkReal x1442=(cj5*r20);
IkReal x1443=(r01*sj5);
IkReal x1444=((1.0)*x1437);
IkReal x1445=((1.0)*x1436);
evalcond[0]=((((-1.0)*r22*x1444))+((x1436*x1441))+(((-1.0)*x1442*x1445)));
evalcond[1]=(((x1437*x1442))+(((-1.0)*r22*x1445))+(((-1.0)*x1441*x1444)));
evalcond[2]=(((x1436*x1438))+cj0+(((-1.0)*r12*x1444))+(((-1.0)*x1440*x1445)));
evalcond[3]=(cj0+((x1437*x1439))+(((-1.0)*r02*x1445))+(((-1.0)*x1443*x1444)));
evalcond[4]=(((x1437*x1440))+sj0+(((-1.0)*x1438*x1444))+(((-1.0)*r12*x1445)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1439*x1445))+((x1436*x1443))+(((-1.0)*r02*x1444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1446=((1.0)*cj5);
CheckValue<IkReal> x1447=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1446))+(((-1.0)*r00*sj5)))),-1);
if(!x1447.valid){
continue;
}
CheckValue<IkReal> x1448 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1446)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1447.value)))+(x1448.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1449=IKsin(j4);
IkReal x1450=IKcos(j4);
IkReal x1451=(r11*sj5);
IkReal x1452=(cj5*r00);
IkReal x1453=(cj5*r10);
IkReal x1454=(r21*sj5);
IkReal x1455=(cj5*r20);
IkReal x1456=(r01*sj5);
IkReal x1457=((1.0)*x1450);
IkReal x1458=((1.0)*x1449);
evalcond[0]=((((-1.0)*r22*x1457))+(((-1.0)*x1455*x1458))+((x1449*x1454)));
evalcond[1]=((((-1.0)*r22*x1458))+((x1450*x1455))+(((-1.0)*x1454*x1457)));
evalcond[2]=(cj0+(((-1.0)*x1453*x1458))+((x1449*x1451))+(((-1.0)*r12*x1457)));
evalcond[3]=(cj0+((x1450*x1452))+(((-1.0)*r02*x1458))+(((-1.0)*x1456*x1457)));
evalcond[4]=(sj0+((x1450*x1453))+(((-1.0)*x1451*x1457))+(((-1.0)*r12*x1458)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1457))+(((-1.0)*x1452*x1458))+((x1449*x1456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1459=((1.0)*cj5);
IkReal x1460=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1459)));
j4eval[0]=x1460;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1459))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1460);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1461=((1.0)*cj5);
IkReal x1462=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1461)));
j4eval[0]=x1462;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1461)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1462);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1463=cj5*cj5;
IkReal x1464=((1.0)*sj5);
IkReal x1465=(cj5*r20);
IkReal x1466=(r11*r21);
IkReal x1467=((((-1.0)*cj5*r10*r21*x1464))+((r12*r22))+((r10*r20*x1463))+(((-1.0)*x1463*x1466))+x1466+(((-1.0)*r11*x1464*x1465)));
j4eval[0]=x1467;
j4eval[1]=IKsign(x1467);
j4eval[2]=((IKabs((((cj0*x1465))+(((-1.0)*cj0*r21*x1464)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1468=cj5*cj5;
IkReal x1469=((1.0)*sj5);
IkReal x1470=(cj5*r20);
IkReal x1471=(r11*r21);
CheckValue<IkReal> x1472=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1469*x1470))+(((-1.0)*cj5*r10*r21*x1469))+((r12*r22))+((r10*r20*x1468))+x1471+(((-1.0)*x1468*x1471)))),-1);
if(!x1472.valid){
continue;
}
CheckValue<IkReal> x1473 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1469))+((cj0*x1470)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1472.value)))+(x1473.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1474=IKsin(j4);
IkReal x1475=IKcos(j4);
IkReal x1476=((1.0)*sj0);
IkReal x1477=(cj5*r00);
IkReal x1478=(r11*sj5);
IkReal x1479=(cj5*r10);
IkReal x1480=(r21*sj5);
IkReal x1481=(cj5*r20);
IkReal x1482=(r01*sj5);
IkReal x1483=((1.0)*x1475);
IkReal x1484=((1.0)*x1474);
evalcond[0]=((((-1.0)*x1481*x1484))+((x1474*x1480))+(((-1.0)*r22*x1483)));
evalcond[1]=((((-1.0)*x1480*x1483))+(((-1.0)*r22*x1484))+((x1475*x1481)));
evalcond[2]=((((-1.0)*x1479*x1484))+cj0+(((-1.0)*r12*x1483))+((x1474*x1478)));
evalcond[3]=((((-1.0)*r02*x1483))+((x1474*x1482))+(((-1.0)*x1476))+(((-1.0)*x1477*x1484)));
evalcond[4]=((((-1.0)*x1482*x1483))+(((-1.0)*r02*x1484))+((x1475*x1477))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1484))+(((-1.0)*x1476))+((x1475*x1479))+(((-1.0)*x1478*x1483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1485=((1.0)*cj5);
CheckValue<IkReal> x1486=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1485))+(((-1.0)*r10*sj5)))),-1);
if(!x1486.valid){
continue;
}
CheckValue<IkReal> x1487 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1485))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1486.value)))+(x1487.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1488=IKsin(j4);
IkReal x1489=IKcos(j4);
IkReal x1490=((1.0)*sj0);
IkReal x1491=(cj5*r00);
IkReal x1492=(r11*sj5);
IkReal x1493=(cj5*r10);
IkReal x1494=(r21*sj5);
IkReal x1495=(cj5*r20);
IkReal x1496=(r01*sj5);
IkReal x1497=((1.0)*x1489);
IkReal x1498=((1.0)*x1488);
evalcond[0]=((((-1.0)*x1495*x1498))+(((-1.0)*r22*x1497))+((x1488*x1494)));
evalcond[1]=((((-1.0)*x1494*x1497))+((x1489*x1495))+(((-1.0)*r22*x1498)));
evalcond[2]=((((-1.0)*r12*x1497))+cj0+(((-1.0)*x1493*x1498))+((x1488*x1492)));
evalcond[3]=((((-1.0)*x1490))+(((-1.0)*r02*x1497))+(((-1.0)*x1491*x1498))+((x1488*x1496)));
evalcond[4]=(((x1489*x1491))+(((-1.0)*x1496*x1497))+(((-1.0)*r02*x1498))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1498))+((x1489*x1493))+(((-1.0)*x1490))+(((-1.0)*x1492*x1497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1499=((1.0)*cj5);
CheckValue<IkReal> x1500=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1499))+(((-1.0)*r00*sj5)))),-1);
if(!x1500.valid){
continue;
}
CheckValue<IkReal> x1501 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1499)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1500.value)))+(x1501.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1502=IKsin(j4);
IkReal x1503=IKcos(j4);
IkReal x1504=((1.0)*sj0);
IkReal x1505=(cj5*r00);
IkReal x1506=(r11*sj5);
IkReal x1507=(cj5*r10);
IkReal x1508=(r21*sj5);
IkReal x1509=(cj5*r20);
IkReal x1510=(r01*sj5);
IkReal x1511=((1.0)*x1503);
IkReal x1512=((1.0)*x1502);
evalcond[0]=((((-1.0)*r22*x1511))+(((-1.0)*x1509*x1512))+((x1502*x1508)));
evalcond[1]=((((-1.0)*r22*x1512))+((x1503*x1509))+(((-1.0)*x1508*x1511)));
evalcond[2]=(cj0+(((-1.0)*x1507*x1512))+((x1502*x1506))+(((-1.0)*r12*x1511)));
evalcond[3]=((((-1.0)*x1504))+(((-1.0)*r02*x1511))+((x1502*x1510))+(((-1.0)*x1505*x1512)));
evalcond[4]=((((-1.0)*x1510*x1511))+(((-1.0)*r02*x1512))+((x1503*x1505))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1504))+(((-1.0)*x1506*x1511))+((x1503*x1507))+(((-1.0)*r12*x1512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1513=((1.0)*cj5);
IkReal x1514=((((-1.0)*r01*x1513))+(((-1.0)*r00*sj5)));
j4eval[0]=x1514;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1513))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1514);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1515=cj5*cj5;
IkReal x1516=((1.0)*r21);
IkReal x1517=(cj5*sj5);
IkReal x1518=((1.0)*r20);
IkReal x1519=((((-1.0)*r01*x1517*x1518))+((r01*r21))+(((-1.0)*r00*x1516*x1517))+(((-1.0)*r01*x1515*x1516))+((r02*r22))+((r00*r20*x1515)));
j4eval[0]=x1519;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1518)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1519);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1520=cj5*cj5;
IkReal x1521=(r21*sj5);
IkReal x1522=(r11*r21);
IkReal x1523=((1.0)*cj5*r20);
IkReal x1524=(((r12*r22))+(((-1.0)*x1520*x1522))+(((-1.0)*r11*sj5*x1523))+x1522+(((-1.0)*cj5*r10*x1521))+((r10*r20*x1520)));
j4eval[0]=x1524;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1523))+((sj0*x1521))))));
j4eval[2]=IKsign(x1524);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1525=cj5*cj5;
IkReal x1526=(r21*sj5);
IkReal x1527=(r11*r21);
IkReal x1528=((1.0)*cj5*r20);
CheckValue<IkReal> x1529=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1525*x1527))+((r12*r22))+(((-1.0)*r11*sj5*x1528))+x1527+(((-1.0)*cj5*r10*x1526))+((r10*r20*x1525)))),-1);
if(!x1529.valid){
continue;
}
CheckValue<IkReal> x1530 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1528))+((sj0*x1526)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1529.value)))+(x1530.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1531=IKsin(j4);
IkReal x1532=IKcos(j4);
IkReal x1533=(r11*sj5);
IkReal x1534=(cj5*r00);
IkReal x1535=(cj5*r10);
IkReal x1536=(r21*sj5);
IkReal x1537=(cj5*r20);
IkReal x1538=(r01*sj5);
IkReal x1539=((1.0)*x1532);
IkReal x1540=((1.0)*x1531);
evalcond[0]=((((-1.0)*r22*x1539))+((x1531*x1536))+(((-1.0)*x1537*x1540)));
evalcond[1]=((((-1.0)*r22*x1540))+((x1532*x1537))+(((-1.0)*x1536*x1539)));
evalcond[2]=((((-1.0)*x1535*x1540))+(((-1.0)*r12*x1539))+cj0+((x1531*x1533)));
evalcond[3]=((((-1.0)*r02*x1540))+cj0+((x1532*x1534))+(((-1.0)*x1538*x1539)));
evalcond[4]=(sj0+((x1532*x1535))+(((-1.0)*x1533*x1539))+(((-1.0)*r12*x1540)));
evalcond[5]=((((-1.0)*sj0))+((x1531*x1538))+(((-1.0)*r02*x1539))+(((-1.0)*x1534*x1540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1541=cj5*cj5;
IkReal x1542=((1.0)*r21);
IkReal x1543=(cj5*sj5);
IkReal x1544=((1.0)*r20);
CheckValue<IkReal> x1545 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1545.valid){
continue;
}
CheckValue<IkReal> x1546=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1543*x1544))+(((-1.0)*r00*x1542*x1543))+((r01*r21))+((r00*r20*x1541))+(((-1.0)*r01*x1541*x1542))+((r02*r22)))),-1);
if(!x1546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1545.value)+(((1.5707963267949)*(x1546.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1547=IKsin(j4);
IkReal x1548=IKcos(j4);
IkReal x1549=(r11*sj5);
IkReal x1550=(cj5*r00);
IkReal x1551=(cj5*r10);
IkReal x1552=(r21*sj5);
IkReal x1553=(cj5*r20);
IkReal x1554=(r01*sj5);
IkReal x1555=((1.0)*x1548);
IkReal x1556=((1.0)*x1547);
evalcond[0]=(((x1547*x1552))+(((-1.0)*r22*x1555))+(((-1.0)*x1553*x1556)));
evalcond[1]=((((-1.0)*r22*x1556))+(((-1.0)*x1552*x1555))+((x1548*x1553)));
evalcond[2]=(cj0+((x1547*x1549))+(((-1.0)*r12*x1555))+(((-1.0)*x1551*x1556)));
evalcond[3]=(cj0+(((-1.0)*r02*x1556))+((x1548*x1550))+(((-1.0)*x1554*x1555)));
evalcond[4]=(sj0+(((-1.0)*x1549*x1555))+(((-1.0)*r12*x1556))+((x1548*x1551)));
evalcond[5]=((((-1.0)*sj0))+((x1547*x1554))+(((-1.0)*r02*x1555))+(((-1.0)*x1550*x1556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1557=((1.0)*cj5);
CheckValue<IkReal> x1558=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1557)))),-1);
if(!x1558.valid){
continue;
}
CheckValue<IkReal> x1559 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1557)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1558.value)))+(x1559.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1560=IKsin(j4);
IkReal x1561=IKcos(j4);
IkReal x1562=(r11*sj5);
IkReal x1563=(cj5*r00);
IkReal x1564=(cj5*r10);
IkReal x1565=(r21*sj5);
IkReal x1566=(cj5*r20);
IkReal x1567=(r01*sj5);
IkReal x1568=((1.0)*x1561);
IkReal x1569=((1.0)*x1560);
evalcond[0]=(((x1560*x1565))+(((-1.0)*x1566*x1569))+(((-1.0)*r22*x1568)));
evalcond[1]=((((-1.0)*x1565*x1568))+(((-1.0)*r22*x1569))+((x1561*x1566)));
evalcond[2]=(((x1560*x1562))+cj0+(((-1.0)*x1564*x1569))+(((-1.0)*r12*x1568)));
evalcond[3]=((((-1.0)*r02*x1569))+cj0+(((-1.0)*x1567*x1568))+((x1561*x1563)));
evalcond[4]=(sj0+(((-1.0)*x1562*x1568))+((x1561*x1564))+(((-1.0)*r12*x1569)));
evalcond[5]=(((x1560*x1567))+(((-1.0)*sj0))+(((-1.0)*r02*x1568))+(((-1.0)*x1563*x1569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1570=IKcos(j0);
IkReal x1571=IKsin(j0);
evalcond[0]=((((-0.425)*x1570))+(((-0.134)*x1571))+(((-1.0)*px)));
evalcond[1]=((((-0.425)*x1571))+(((0.134)*x1570))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1572=((1.0)*cj5);
IkReal x1573=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1572)));
j4eval[0]=x1573;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1572))))));
j4eval[2]=IKsign(x1573);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1574=cj5*cj5;
IkReal x1575=((1.0)*r21);
IkReal x1576=(cj5*sj5);
IkReal x1577=((1.0)*r20);
IkReal x1578=((((-1.0)*r00*x1575*x1576))+((r01*r21))+((r00*r20*x1574))+(((-1.0)*r01*x1574*x1575))+((r02*r22))+(((-1.0)*r01*x1576*x1577)));
j4eval[0]=x1578;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1577))))));
j4eval[2]=IKsign(x1578);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1579=cj5*cj5;
IkReal x1580=(r21*sj5);
IkReal x1581=(r11*r21);
IkReal x1582=((1.0)*cj5*r20);
IkReal x1583=((((-1.0)*cj5*r10*x1580))+(((-1.0)*x1579*x1581))+((r12*r22))+x1581+(((-1.0)*r11*sj5*x1582))+((r10*r20*x1579)));
j4eval[0]=x1583;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1582))+((sj0*x1580))))));
j4eval[2]=IKsign(x1583);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1584=cj5*cj5;
IkReal x1585=(r21*sj5);
IkReal x1586=(r11*r21);
IkReal x1587=((1.0)*cj5*r20);
CheckValue<IkReal> x1588 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1587))+((sj0*x1585)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1588.valid){
continue;
}
CheckValue<IkReal> x1589=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x1585))+((r10*r20*x1584))+(((-1.0)*x1584*x1586))+((r12*r22))+x1586+(((-1.0)*r11*sj5*x1587)))),-1);
if(!x1589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1588.value)+(((1.5707963267949)*(x1589.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1590=IKsin(j4);
IkReal x1591=IKcos(j4);
IkReal x1592=(r11*sj5);
IkReal x1593=(cj5*r00);
IkReal x1594=(cj5*r10);
IkReal x1595=(r21*sj5);
IkReal x1596=(cj5*r20);
IkReal x1597=(r01*sj5);
IkReal x1598=((1.0)*x1591);
IkReal x1599=((1.0)*x1590);
evalcond[0]=(((x1590*x1595))+(((-1.0)*r22*x1598))+(((-1.0)*x1596*x1599)));
evalcond[1]=((((-1.0)*x1595*x1598))+((x1591*x1596))+(((-1.0)*r22*x1599)));
evalcond[2]=(((x1590*x1592))+cj0+(((-1.0)*x1594*x1599))+(((-1.0)*r12*x1598)));
evalcond[3]=(cj0+(((-1.0)*r02*x1599))+((x1591*x1593))+(((-1.0)*x1597*x1598)));
evalcond[4]=(sj0+(((-1.0)*x1592*x1598))+((x1591*x1594))+(((-1.0)*r12*x1599)));
evalcond[5]=((((-1.0)*sj0))+((x1590*x1597))+(((-1.0)*x1593*x1599))+(((-1.0)*r02*x1598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1600=cj5*cj5;
IkReal x1601=((1.0)*r21);
IkReal x1602=(cj5*sj5);
IkReal x1603=((1.0)*r20);
CheckValue<IkReal> x1604 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1603)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1604.valid){
continue;
}
CheckValue<IkReal> x1605=IKPowWithIntegerCheck(IKsign((((r00*r20*x1600))+((r01*r21))+(((-1.0)*r01*x1602*x1603))+(((-1.0)*r01*x1600*x1601))+(((-1.0)*r00*x1601*x1602))+((r02*r22)))),-1);
if(!x1605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1604.value)+(((1.5707963267949)*(x1605.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1606=IKsin(j4);
IkReal x1607=IKcos(j4);
IkReal x1608=(r11*sj5);
IkReal x1609=(cj5*r00);
IkReal x1610=(cj5*r10);
IkReal x1611=(r21*sj5);
IkReal x1612=(cj5*r20);
IkReal x1613=(r01*sj5);
IkReal x1614=((1.0)*x1607);
IkReal x1615=((1.0)*x1606);
evalcond[0]=((((-1.0)*r22*x1614))+((x1606*x1611))+(((-1.0)*x1612*x1615)));
evalcond[1]=((((-1.0)*x1611*x1614))+(((-1.0)*r22*x1615))+((x1607*x1612)));
evalcond[2]=((((-1.0)*r12*x1614))+cj0+(((-1.0)*x1610*x1615))+((x1606*x1608)));
evalcond[3]=(cj0+(((-1.0)*r02*x1615))+((x1607*x1609))+(((-1.0)*x1613*x1614)));
evalcond[4]=((((-1.0)*r12*x1615))+sj0+((x1607*x1610))+(((-1.0)*x1608*x1614)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1614))+(((-1.0)*x1609*x1615))+((x1606*x1613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1616=((1.0)*cj5);
CheckValue<IkReal> x1617=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1616))+(((-1.0)*r00*sj5)))),-1);
if(!x1617.valid){
continue;
}
CheckValue<IkReal> x1618 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1617.value)))+(x1618.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1619=IKsin(j4);
IkReal x1620=IKcos(j4);
IkReal x1621=(r11*sj5);
IkReal x1622=(cj5*r00);
IkReal x1623=(cj5*r10);
IkReal x1624=(r21*sj5);
IkReal x1625=(cj5*r20);
IkReal x1626=(r01*sj5);
IkReal x1627=((1.0)*x1620);
IkReal x1628=((1.0)*x1619);
evalcond[0]=((((-1.0)*x1625*x1628))+(((-1.0)*r22*x1627))+((x1619*x1624)));
evalcond[1]=(((x1620*x1625))+(((-1.0)*r22*x1628))+(((-1.0)*x1624*x1627)));
evalcond[2]=((((-1.0)*r12*x1627))+cj0+(((-1.0)*x1623*x1628))+((x1619*x1621)));
evalcond[3]=(((x1620*x1622))+cj0+(((-1.0)*r02*x1628))+(((-1.0)*x1626*x1627)));
evalcond[4]=((((-1.0)*r12*x1628))+((x1620*x1623))+sj0+(((-1.0)*x1621*x1627)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1627))+(((-1.0)*x1622*x1628))+((x1619*x1626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1629=IKcos(j0);
IkReal x1630=IKsin(j0);
evalcond[0]=((((-0.134)*x1630))+(((-1.0)*px))+(((-0.425)*x1629)));
evalcond[1]=((((-1.0)*py))+(((-0.425)*x1630))+(((0.134)*x1629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1631=((1.0)*cj5);
IkReal x1632=((((-1.0)*r01*x1631))+(((-1.0)*r00*sj5)));
j4eval[0]=x1632;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1631))))));
j4eval[2]=IKsign(x1632);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1633=((1.0)*cj5);
IkReal x1634=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1633)));
j4eval[0]=x1634;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1633))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1634);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1635=cj5*cj5;
IkReal x1636=((1.0)*sj5);
IkReal x1637=(cj5*r20);
IkReal x1638=(r11*r21);
IkReal x1639=(x1638+(((-1.0)*cj5*r10*r21*x1636))+(((-1.0)*x1635*x1638))+((r12*r22))+((r10*r20*x1635))+(((-1.0)*r11*x1636*x1637)));
j4eval[0]=x1639;
j4eval[1]=IKsign(x1639);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1636))+((cj0*x1637))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1640=cj5*cj5;
IkReal x1641=((1.0)*sj5);
IkReal x1642=(cj5*r20);
IkReal x1643=(r11*r21);
CheckValue<IkReal> x1644=IKPowWithIntegerCheck(IKsign((x1643+(((-1.0)*cj5*r10*r21*x1641))+((r12*r22))+(((-1.0)*r11*x1641*x1642))+((r10*r20*x1640))+(((-1.0)*x1640*x1643)))),-1);
if(!x1644.valid){
continue;
}
CheckValue<IkReal> x1645 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1641))+((cj0*x1642)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1644.value)))+(x1645.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1646=IKsin(j4);
IkReal x1647=IKcos(j4);
IkReal x1648=((1.0)*sj0);
IkReal x1649=(cj5*r00);
IkReal x1650=(r11*sj5);
IkReal x1651=(cj5*r10);
IkReal x1652=(r21*sj5);
IkReal x1653=(cj5*r20);
IkReal x1654=(r01*sj5);
IkReal x1655=((1.0)*x1647);
IkReal x1656=((1.0)*x1646);
evalcond[0]=((((-1.0)*r22*x1655))+(((-1.0)*x1653*x1656))+((x1646*x1652)));
evalcond[1]=((((-1.0)*x1652*x1655))+(((-1.0)*r22*x1656))+((x1647*x1653)));
evalcond[2]=(cj0+(((-1.0)*r12*x1655))+((x1646*x1650))+(((-1.0)*x1651*x1656)));
evalcond[3]=(((x1646*x1654))+(((-1.0)*x1648))+(((-1.0)*x1649*x1656))+(((-1.0)*r02*x1655)));
evalcond[4]=((((-1.0)*x1654*x1655))+((x1647*x1649))+(((-1.0)*r02*x1656))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1650*x1655))+((x1647*x1651))+(((-1.0)*r12*x1656))+(((-1.0)*x1648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1657=((1.0)*cj5);
CheckValue<IkReal> x1658=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1657)))),-1);
if(!x1658.valid){
continue;
}
CheckValue<IkReal> x1659 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1657))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1658.value)))+(x1659.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1660=IKsin(j4);
IkReal x1661=IKcos(j4);
IkReal x1662=((1.0)*sj0);
IkReal x1663=(cj5*r00);
IkReal x1664=(r11*sj5);
IkReal x1665=(cj5*r10);
IkReal x1666=(r21*sj5);
IkReal x1667=(cj5*r20);
IkReal x1668=(r01*sj5);
IkReal x1669=((1.0)*x1661);
IkReal x1670=((1.0)*x1660);
evalcond[0]=(((x1660*x1666))+(((-1.0)*x1667*x1670))+(((-1.0)*r22*x1669)));
evalcond[1]=(((x1661*x1667))+(((-1.0)*x1666*x1669))+(((-1.0)*r22*x1670)));
evalcond[2]=(((x1660*x1664))+cj0+(((-1.0)*r12*x1669))+(((-1.0)*x1665*x1670)));
evalcond[3]=(((x1660*x1668))+(((-1.0)*x1663*x1670))+(((-1.0)*x1662))+(((-1.0)*r02*x1669)));
evalcond[4]=((((-1.0)*r02*x1670))+(((-1.0)*x1668*x1669))+((x1661*x1663))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1670))+(((-1.0)*x1662))+((x1661*x1665))+(((-1.0)*x1664*x1669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1671=((1.0)*cj5);
CheckValue<IkReal> x1672 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1671)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1672.valid){
continue;
}
CheckValue<IkReal> x1673=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1671)))),-1);
if(!x1673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1672.value)+(((1.5707963267949)*(x1673.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1674=IKsin(j4);
IkReal x1675=IKcos(j4);
IkReal x1676=((1.0)*sj0);
IkReal x1677=(cj5*r00);
IkReal x1678=(r11*sj5);
IkReal x1679=(cj5*r10);
IkReal x1680=(r21*sj5);
IkReal x1681=(cj5*r20);
IkReal x1682=(r01*sj5);
IkReal x1683=((1.0)*x1675);
IkReal x1684=((1.0)*x1674);
evalcond[0]=((((-1.0)*x1681*x1684))+(((-1.0)*r22*x1683))+((x1674*x1680)));
evalcond[1]=(((x1675*x1681))+(((-1.0)*r22*x1684))+(((-1.0)*x1680*x1683)));
evalcond[2]=((((-1.0)*r12*x1683))+((x1674*x1678))+cj0+(((-1.0)*x1679*x1684)));
evalcond[3]=((((-1.0)*x1677*x1684))+((x1674*x1682))+(((-1.0)*r02*x1683))+(((-1.0)*x1676)));
evalcond[4]=(((x1675*x1677))+(((-1.0)*x1682*x1683))+(((-1.0)*r02*x1684))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1684))+((x1675*x1679))+(((-1.0)*x1678*x1683))+(((-1.0)*x1676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1685=((1.0)*cj5);
IkReal x1686=((((-1.0)*r01*x1685))+(((-1.0)*r00*sj5)));
j4eval[0]=x1686;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1685)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1686);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1687=cj5*cj5;
IkReal x1688=((1.0)*r21);
IkReal x1689=(cj5*sj5);
IkReal x1690=((1.0)*r20);
IkReal x1691=(((r01*r21))+(((-1.0)*r00*x1688*x1689))+((r00*r20*x1687))+(((-1.0)*r01*x1687*x1688))+((r02*r22))+(((-1.0)*r01*x1689*x1690)));
j4eval[0]=x1691;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x1690))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1691);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1692=cj5*cj5;
IkReal x1693=(r21*sj5);
IkReal x1694=(r11*r21);
IkReal x1695=((1.0)*cj5*r20);
IkReal x1696=((((-1.0)*x1692*x1694))+x1694+((r12*r22))+(((-1.0)*r11*sj5*x1695))+((r10*r20*x1692))+(((-1.0)*cj5*r10*x1693)));
j4eval[0]=x1696;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1695))+((sj0*x1693))))));
j4eval[2]=IKsign(x1696);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1697=cj5*cj5;
IkReal x1698=(r21*sj5);
IkReal x1699=(r11*r21);
IkReal x1700=((1.0)*cj5*r20);
CheckValue<IkReal> x1701 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1698))+(((-1.0)*sj0*x1700)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1701.valid){
continue;
}
CheckValue<IkReal> x1702=IKPowWithIntegerCheck(IKsign((x1699+((r12*r22))+(((-1.0)*r11*sj5*x1700))+(((-1.0)*x1697*x1699))+((r10*r20*x1697))+(((-1.0)*cj5*r10*x1698)))),-1);
if(!x1702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1701.value)+(((1.5707963267949)*(x1702.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1703=IKsin(j4);
IkReal x1704=IKcos(j4);
IkReal x1705=(r11*sj5);
IkReal x1706=(cj5*r00);
IkReal x1707=(cj5*r10);
IkReal x1708=(r21*sj5);
IkReal x1709=(cj5*r20);
IkReal x1710=(r01*sj5);
IkReal x1711=((1.0)*x1704);
IkReal x1712=((1.0)*x1703);
evalcond[0]=((((-1.0)*x1709*x1712))+((x1703*x1708))+(((-1.0)*r22*x1711)));
evalcond[1]=((((-1.0)*x1708*x1711))+((x1704*x1709))+(((-1.0)*r22*x1712)));
evalcond[2]=(cj0+(((-1.0)*x1707*x1712))+((x1703*x1705))+(((-1.0)*r12*x1711)));
evalcond[3]=((((-1.0)*x1710*x1711))+cj0+((x1704*x1706))+(((-1.0)*r02*x1712)));
evalcond[4]=(sj0+((x1704*x1707))+(((-1.0)*x1705*x1711))+(((-1.0)*r12*x1712)));
evalcond[5]=((((-1.0)*sj0))+((x1703*x1710))+(((-1.0)*r02*x1711))+(((-1.0)*x1706*x1712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1713=cj5*cj5;
IkReal x1714=((1.0)*r21);
IkReal x1715=(cj5*sj5);
IkReal x1716=((1.0)*r20);
CheckValue<IkReal> x1717=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1714*x1715))+((r00*r20*x1713))+((r01*r21))+(((-1.0)*r01*x1715*x1716))+((r02*r22))+(((-1.0)*r01*x1713*x1714)))),-1);
if(!x1717.valid){
continue;
}
CheckValue<IkReal> x1718 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1716)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1717.value)))+(x1718.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1719=IKsin(j4);
IkReal x1720=IKcos(j4);
IkReal x1721=(r11*sj5);
IkReal x1722=(cj5*r00);
IkReal x1723=(cj5*r10);
IkReal x1724=(r21*sj5);
IkReal x1725=(cj5*r20);
IkReal x1726=(r01*sj5);
IkReal x1727=((1.0)*x1720);
IkReal x1728=((1.0)*x1719);
evalcond[0]=((((-1.0)*r22*x1727))+(((-1.0)*x1725*x1728))+((x1719*x1724)));
evalcond[1]=((((-1.0)*r22*x1728))+((x1720*x1725))+(((-1.0)*x1724*x1727)));
evalcond[2]=(cj0+(((-1.0)*r12*x1727))+(((-1.0)*x1723*x1728))+((x1719*x1721)));
evalcond[3]=(cj0+(((-1.0)*x1726*x1727))+((x1720*x1722))+(((-1.0)*r02*x1728)));
evalcond[4]=(sj0+(((-1.0)*r12*x1728))+((x1720*x1723))+(((-1.0)*x1721*x1727)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1722*x1728))+((x1719*x1726))+(((-1.0)*r02*x1727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1729=((1.0)*cj5);
CheckValue<IkReal> x1730 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1729)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1730.valid){
continue;
}
CheckValue<IkReal> x1731=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1729))+(((-1.0)*r00*sj5)))),-1);
if(!x1731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1730.value)+(((1.5707963267949)*(x1731.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1732=IKsin(j4);
IkReal x1733=IKcos(j4);
IkReal x1734=(r11*sj5);
IkReal x1735=(cj5*r00);
IkReal x1736=(cj5*r10);
IkReal x1737=(r21*sj5);
IkReal x1738=(cj5*r20);
IkReal x1739=(r01*sj5);
IkReal x1740=((1.0)*x1733);
IkReal x1741=((1.0)*x1732);
evalcond[0]=((((-1.0)*x1738*x1741))+(((-1.0)*r22*x1740))+((x1732*x1737)));
evalcond[1]=((((-1.0)*r22*x1741))+(((-1.0)*x1737*x1740))+((x1733*x1738)));
evalcond[2]=((((-1.0)*r12*x1740))+cj0+(((-1.0)*x1736*x1741))+((x1732*x1734)));
evalcond[3]=(cj0+(((-1.0)*x1739*x1740))+((x1733*x1735))+(((-1.0)*r02*x1741)));
evalcond[4]=((((-1.0)*r12*x1741))+sj0+(((-1.0)*x1734*x1740))+((x1733*x1736)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1735*x1741))+((x1732*x1739))+(((-1.0)*r02*x1740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1742=((1.0)*cj5);
IkReal x1743=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1742)));
j4eval[0]=x1743;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1742))))));
j4eval[2]=IKsign(x1743);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1744=((1.0)*cj5);
IkReal x1745=((((-1.0)*r11*x1744))+(((-1.0)*r10*sj5)));
j4eval[0]=x1745;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1744)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1745);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1746=cj5*cj5;
IkReal x1747=((1.0)*sj5);
IkReal x1748=(cj5*r20);
IkReal x1749=(r11*r21);
IkReal x1750=(((r10*r20*x1746))+(((-1.0)*cj5*r10*r21*x1747))+x1749+(((-1.0)*x1746*x1749))+((r12*r22))+(((-1.0)*r11*x1747*x1748)));
j4eval[0]=x1750;
j4eval[1]=IKsign(x1750);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1747))+((cj0*x1748))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1751=cj5*cj5;
IkReal x1752=((1.0)*sj5);
IkReal x1753=(cj5*r20);
IkReal x1754=(r11*r21);
CheckValue<IkReal> x1755=IKPowWithIntegerCheck(IKsign((((r10*r20*x1751))+(((-1.0)*cj5*r10*r21*x1752))+x1754+((r12*r22))+(((-1.0)*r11*x1752*x1753))+(((-1.0)*x1751*x1754)))),-1);
if(!x1755.valid){
continue;
}
CheckValue<IkReal> x1756 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1752))+((cj0*x1753)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1755.value)))+(x1756.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1757=IKsin(j4);
IkReal x1758=IKcos(j4);
IkReal x1759=((1.0)*sj0);
IkReal x1760=(cj5*r00);
IkReal x1761=(r11*sj5);
IkReal x1762=(cj5*r10);
IkReal x1763=(r21*sj5);
IkReal x1764=(cj5*r20);
IkReal x1765=(r01*sj5);
IkReal x1766=((1.0)*x1758);
IkReal x1767=((1.0)*x1757);
evalcond[0]=(((x1757*x1763))+(((-1.0)*x1764*x1767))+(((-1.0)*r22*x1766)));
evalcond[1]=((((-1.0)*x1763*x1766))+((x1758*x1764))+(((-1.0)*r22*x1767)));
evalcond[2]=((((-1.0)*x1762*x1767))+cj0+((x1757*x1761))+(((-1.0)*r12*x1766)));
evalcond[3]=((((-1.0)*r02*x1766))+((x1757*x1765))+(((-1.0)*x1760*x1767))+(((-1.0)*x1759)));
evalcond[4]=((((-1.0)*r02*x1767))+(((-1.0)*x1765*x1766))+((x1758*x1760))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1761*x1766))+(((-1.0)*r12*x1767))+((x1758*x1762))+(((-1.0)*x1759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1768=((1.0)*cj5);
CheckValue<IkReal> x1769 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1768))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1769.valid){
continue;
}
CheckValue<IkReal> x1770=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1768)))),-1);
if(!x1770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1769.value)+(((1.5707963267949)*(x1770.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1771=IKsin(j4);
IkReal x1772=IKcos(j4);
IkReal x1773=((1.0)*sj0);
IkReal x1774=(cj5*r00);
IkReal x1775=(r11*sj5);
IkReal x1776=(cj5*r10);
IkReal x1777=(r21*sj5);
IkReal x1778=(cj5*r20);
IkReal x1779=(r01*sj5);
IkReal x1780=((1.0)*x1772);
IkReal x1781=((1.0)*x1771);
evalcond[0]=((((-1.0)*r22*x1780))+((x1771*x1777))+(((-1.0)*x1778*x1781)));
evalcond[1]=((((-1.0)*r22*x1781))+(((-1.0)*x1777*x1780))+((x1772*x1778)));
evalcond[2]=(cj0+((x1771*x1775))+(((-1.0)*r12*x1780))+(((-1.0)*x1776*x1781)));
evalcond[3]=(((x1771*x1779))+(((-1.0)*x1774*x1781))+(((-1.0)*x1773))+(((-1.0)*r02*x1780)));
evalcond[4]=((((-1.0)*x1779*x1780))+((x1772*x1774))+(((-1.0)*r02*x1781))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1775*x1780))+(((-1.0)*r12*x1781))+(((-1.0)*x1773))+((x1772*x1776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1782=((1.0)*cj5);
CheckValue<IkReal> x1783 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1782))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1783.valid){
continue;
}
CheckValue<IkReal> x1784=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1782))+(((-1.0)*r00*sj5)))),-1);
if(!x1784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1783.value)+(((1.5707963267949)*(x1784.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1785=IKsin(j4);
IkReal x1786=IKcos(j4);
IkReal x1787=((1.0)*sj0);
IkReal x1788=(cj5*r00);
IkReal x1789=(r11*sj5);
IkReal x1790=(cj5*r10);
IkReal x1791=(r21*sj5);
IkReal x1792=(cj5*r20);
IkReal x1793=(r01*sj5);
IkReal x1794=((1.0)*x1786);
IkReal x1795=((1.0)*x1785);
evalcond[0]=((((-1.0)*x1792*x1795))+(((-1.0)*r22*x1794))+((x1785*x1791)));
evalcond[1]=((((-1.0)*r22*x1795))+((x1786*x1792))+(((-1.0)*x1791*x1794)));
evalcond[2]=((((-1.0)*x1790*x1795))+cj0+(((-1.0)*r12*x1794))+((x1785*x1789)));
evalcond[3]=((((-1.0)*x1787))+(((-1.0)*x1788*x1795))+((x1785*x1793))+(((-1.0)*r02*x1794)));
evalcond[4]=((((-1.0)*x1793*x1794))+((x1786*x1788))+(((-1.0)*r02*x1795))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1787))+(((-1.0)*r12*x1795))+(((-1.0)*x1789*x1794))+((x1786*x1790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1796=(sj1*sj2);
IkReal x1797=(r00*sj5);
IkReal x1798=(cj1*cj2);
IkReal x1799=(cj5*r01);
IkReal x1800=((212.5)*cj1);
IkReal x1801=((500.0)*px);
CheckValue<IkReal> x1802=IKPowWithIntegerCheck(((((-67.0)*x1798))+(((67.0)*x1796))),-1);
if(!x1802.valid){
continue;
}
CheckValue<IkReal> x1803=IKPowWithIntegerCheck((x1796+(((-1.0)*x1798))),-1);
if(!x1803.valid){
continue;
}
if( IKabs(((x1802.value)*((((x1798*x1801))+(((-1.0)*x1797*x1800))+(((-1.0)*x1799*x1800))+(((-1.0)*x1796*x1801))+(((-146.0)*x1797*x1798))+(((-146.0)*x1798*x1799))+(((146.0)*x1796*x1799))+(((146.0)*x1796*x1797)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1803.value)*(((((-1.0)*x1799))+(((-1.0)*x1797)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1802.value)*((((x1798*x1801))+(((-1.0)*x1797*x1800))+(((-1.0)*x1799*x1800))+(((-1.0)*x1796*x1801))+(((-146.0)*x1797*x1798))+(((-146.0)*x1798*x1799))+(((146.0)*x1796*x1799))+(((146.0)*x1796*x1797))))))+IKsqr(((x1803.value)*(((((-1.0)*x1799))+(((-1.0)*x1797))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1802.value)*((((x1798*x1801))+(((-1.0)*x1797*x1800))+(((-1.0)*x1799*x1800))+(((-1.0)*x1796*x1801))+(((-146.0)*x1797*x1798))+(((-146.0)*x1798*x1799))+(((146.0)*x1796*x1799))+(((146.0)*x1796*x1797))))), ((x1803.value)*(((((-1.0)*x1799))+(((-1.0)*x1797))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1804=IKcos(j0);
IkReal x1805=IKsin(j0);
IkReal x1806=((0.1)*sj5);
IkReal x1807=(cj5*r11);
IkReal x1808=(cj5*r01);
IkReal x1809=(sj1*sj2);
IkReal x1810=(cj1*cj2);
IkReal x1811=((0.392)*x1805);
IkReal x1812=(cj1*x1804);
evalcond[0]=(((r00*sj5))+(((-1.0)*x1804*x1810))+x1808+((x1804*x1809)));
evalcond[1]=(((r10*sj5))+(((-1.0)*x1805*x1810))+x1807+((x1805*x1809)));
evalcond[2]=((((-1.0)*r00*x1806))+(((0.392)*x1804*x1810))+(((-0.392)*x1804*x1809))+(((-1.0)*px))+(((0.425)*x1812))+(((-0.1)*x1808))+(((-0.134)*x1805)));
evalcond[3]=((((-1.0)*r10*x1806))+(((-1.0)*x1809*x1811))+(((-1.0)*py))+(((0.425)*cj1*x1805))+(((-0.1)*x1807))+((x1810*x1811))+(((0.134)*x1804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1813=((1.0)*cj5);
IkReal x1814=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1813)));
j4eval[0]=x1814;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1813))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1814);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1815=((1.0)*cj5);
IkReal x1816=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1815)));
j4eval[0]=x1816;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1815))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1816);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1817=((1.0)*sj0);
IkReal x1818=((1.0)*cj0);
IkReal x1819=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1819;
j4eval[1]=((IKabs(((((-1.0)*r02*x1818))+(((-1.0)*r12*x1817)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x1817))+(((-1.0)*r01*sj5*x1818))))));
j4eval[2]=IKsign(x1819);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1820=((-1.0)*r20);
IkReal x1822 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1822)==0){
continue;
}
IkReal x1821=pow(x1822,-0.5);
CheckValue<IkReal> x1823 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1820),IKFAST_ATAN2_MAGTHRESH);
if(!x1823.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1823.value));
IkReal gconst79=(r21*x1821);
IkReal gconst80=(x1820*x1821);
CheckValue<IkReal> x1824 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1824.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1824.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1825=((-1.0)*r20);
IkReal x1826=x1821;
CheckValue<IkReal> x1828 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1825),IKFAST_ATAN2_MAGTHRESH);
if(!x1828.valid){
continue;
}
IkReal x1827=((-1.0)*(x1828.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1827;
IkReal gconst78=x1827;
IkReal gconst79=(r21*x1826);
IkReal gconst80=(x1825*x1826);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1829=((-1.0)*r20);
IkReal x1830=x1821;
CheckValue<IkReal> x1832 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1829),IKFAST_ATAN2_MAGTHRESH);
if(!x1832.valid){
continue;
}
IkReal x1831=((-1.0)*(x1832.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1831;
IkReal gconst78=x1831;
IkReal gconst79=(r21*x1830);
IkReal gconst80=(x1829*x1830);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1833=((-1.0)*r20);
IkReal x1834=x1821;
CheckValue<IkReal> x1836 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1833),IKFAST_ATAN2_MAGTHRESH);
if(!x1836.valid){
continue;
}
IkReal x1835=((-1.0)*(x1836.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1835;
IkReal gconst78=x1835;
IkReal gconst79=(r21*x1834);
IkReal gconst80=(x1833*x1834);
IkReal x1837=r22*r22;
CheckValue<IkReal> x1840=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1837))),-1);
if(!x1840.valid){
continue;
}
IkReal x1838=x1840.value;
IkReal x1839=((((2.0)*x1838*(r20*r20)*(r21*r21)))+((x1838*(r21*r21*r21*r21)))+((x1838*(r20*r20*r20*r20)))+x1837);
j4eval[0]=x1839;
j4eval[1]=IKsign(x1839);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1841=(sj1*sj2);
IkReal x1842=(gconst80*r20);
IkReal x1843=(gconst79*r21);
IkReal x1844=(cj1*cj2);
CheckValue<IkReal> x1845 = IKatan2WithCheck(IkReal((((r22*x1841))+(((-1.0)*r22*x1844)))),IkReal((((x1842*x1844))+((x1841*x1843))+(((-1.0)*x1841*x1842))+(((-1.0)*x1843*x1844)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1845.valid){
continue;
}
CheckValue<IkReal> x1846=IKPowWithIntegerCheck(IKsign(((((-2.0)*x1842*x1843))+(r22*r22)+(x1842*x1842)+(x1843*x1843))),-1);
if(!x1846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1845.value)+(((1.5707963267949)*(x1846.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1847=IKsin(j4);
IkReal x1848=IKcos(j4);
IkReal x1849=(gconst79*r01);
IkReal x1850=(gconst79*r21);
IkReal x1851=((1.0)*cj2);
IkReal x1852=(gconst79*r11);
IkReal x1853=((1.0)*sj0);
IkReal x1854=(cj1*sj2);
IkReal x1855=((1.0)*x1848);
IkReal x1856=(gconst80*x1848);
IkReal x1857=((1.0)*x1847);
IkReal x1858=(gconst80*x1857);
evalcond[0]=(((x1847*x1850))+(((-1.0)*r22*x1855))+(((-1.0)*r20*x1858)));
evalcond[1]=(cj0+((x1847*x1852))+(((-1.0)*r12*x1855))+(((-1.0)*r10*x1858)));
evalcond[2]=(((x1847*x1849))+(((-1.0)*r00*x1858))+(((-1.0)*r02*x1855))+(((-1.0)*x1853)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x1857))+(((-1.0)*x1850*x1855))+((r20*x1856))+(((-1.0)*cj1*x1851)));
evalcond[4]=((((-1.0)*x1849*x1855))+((r00*x1856))+(((-1.0)*r02*x1857))+(((-1.0)*cj0*sj1*x1851))+(((-1.0)*cj0*x1854)));
evalcond[5]=((((-1.0)*sj0*sj1*x1851))+((r10*x1856))+(((-1.0)*x1852*x1855))+(((-1.0)*r12*x1857))+(((-1.0)*x1853*x1854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1859=((1.0)*gconst80);
CheckValue<IkReal> x1860 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*r20*sj0*x1859)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1860.valid){
continue;
}
CheckValue<IkReal> x1861=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1859))+(((-1.0)*gconst79*r10)))),-1);
if(!x1861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1860.value)+(((1.5707963267949)*(x1861.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1862=IKsin(j4);
IkReal x1863=IKcos(j4);
IkReal x1864=(gconst79*r01);
IkReal x1865=(gconst79*r21);
IkReal x1866=((1.0)*cj2);
IkReal x1867=(gconst79*r11);
IkReal x1868=((1.0)*sj0);
IkReal x1869=(cj1*sj2);
IkReal x1870=((1.0)*x1863);
IkReal x1871=(gconst80*x1863);
IkReal x1872=((1.0)*x1862);
IkReal x1873=(gconst80*x1872);
evalcond[0]=((((-1.0)*r22*x1870))+((x1862*x1865))+(((-1.0)*r20*x1873)));
evalcond[1]=(cj0+(((-1.0)*r10*x1873))+((x1862*x1867))+(((-1.0)*r12*x1870)));
evalcond[2]=((((-1.0)*r02*x1870))+((x1862*x1864))+(((-1.0)*r00*x1873))+(((-1.0)*x1868)));
evalcond[3]=((((-1.0)*r22*x1872))+((sj1*sj2))+((r20*x1871))+(((-1.0)*cj1*x1866))+(((-1.0)*x1865*x1870)));
evalcond[4]=((((-1.0)*r02*x1872))+(((-1.0)*x1864*x1870))+(((-1.0)*cj0*x1869))+(((-1.0)*cj0*sj1*x1866))+((r00*x1871)));
evalcond[5]=((((-1.0)*x1867*x1870))+(((-1.0)*r12*x1872))+((r10*x1871))+(((-1.0)*x1868*x1869))+(((-1.0)*sj0*sj1*x1866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1874=((1.0)*gconst80);
CheckValue<IkReal> x1875=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1874))+(((-1.0)*gconst79*r00)))),-1);
if(!x1875.valid){
continue;
}
CheckValue<IkReal> x1876 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1874))+((cj0*gconst79*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1875.value)))+(x1876.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1877=IKsin(j4);
IkReal x1878=IKcos(j4);
IkReal x1879=(gconst79*r01);
IkReal x1880=(gconst79*r21);
IkReal x1881=((1.0)*cj2);
IkReal x1882=(gconst79*r11);
IkReal x1883=((1.0)*sj0);
IkReal x1884=(cj1*sj2);
IkReal x1885=((1.0)*x1878);
IkReal x1886=(gconst80*x1878);
IkReal x1887=((1.0)*x1877);
IkReal x1888=(gconst80*x1887);
evalcond[0]=(((x1877*x1880))+(((-1.0)*r22*x1885))+(((-1.0)*r20*x1888)));
evalcond[1]=(((x1877*x1882))+cj0+(((-1.0)*r12*x1885))+(((-1.0)*r10*x1888)));
evalcond[2]=(((x1877*x1879))+(((-1.0)*r02*x1885))+(((-1.0)*r00*x1888))+(((-1.0)*x1883)));
evalcond[3]=((((-1.0)*x1880*x1885))+((r20*x1886))+(((-1.0)*cj1*x1881))+(((-1.0)*r22*x1887))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x1879*x1885))+(((-1.0)*cj0*sj1*x1881))+(((-1.0)*cj0*x1884))+(((-1.0)*r02*x1887))+((r00*x1886)));
evalcond[5]=((((-1.0)*x1882*x1885))+(((-1.0)*x1883*x1884))+(((-1.0)*sj0*sj1*x1881))+(((-1.0)*r12*x1887))+((r10*x1886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1889=((-1.0)*r21);
IkReal x1891 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1891)==0){
continue;
}
IkReal x1890=pow(x1891,-0.5);
CheckValue<IkReal> x1892 = IKatan2WithCheck(IkReal(x1889),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1892.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1892.value))));
IkReal gconst82=(x1889*x1890);
IkReal gconst83=((1.0)*r20*x1890);
CheckValue<IkReal> x1893 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1893.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1893.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1894=((-1.0)*r21);
CheckValue<IkReal> x1897 = IKatan2WithCheck(IkReal(x1894),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1897.valid){
continue;
}
IkReal x1895=((1.0)*(x1897.value));
IkReal x1896=x1890;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1895)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1895)));
IkReal gconst82=(x1894*x1896);
IkReal gconst83=((1.0)*r20*x1896);
IkReal x1898=r22*r22;
IkReal x1899=((1.0)*x1898);
CheckValue<IkReal> x1903=IKPowWithIntegerCheck(((-1.0)+x1898),-1);
if(!x1903.valid){
continue;
}
IkReal x1900=x1903.value;
if((((1.0)+(((-1.0)*x1899)))) < -0.00001)
continue;
IkReal x1901=IKsqrt(((1.0)+(((-1.0)*x1899))));
IkReal x1902=(cj0*x1900*x1901);
j4eval[0]=((IKabs(((((-1.0)*x1899*x1902))+x1902)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1904=((-1.0)*r21);
CheckValue<IkReal> x1907 = IKatan2WithCheck(IkReal(x1904),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1907.valid){
continue;
}
IkReal x1905=((1.0)*(x1907.value));
IkReal x1906=x1890;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1905)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1905)));
IkReal gconst82=(x1904*x1906);
IkReal gconst83=((1.0)*r20*x1906);
IkReal x1908=r22*r22;
IkReal x1909=((1.0)*x1908);
CheckValue<IkReal> x1913=IKPowWithIntegerCheck(((-1.0)+x1908),-1);
if(!x1913.valid){
continue;
}
IkReal x1910=x1913.value;
if((((1.0)+(((-1.0)*x1909)))) < -0.00001)
continue;
IkReal x1911=IKsqrt(((1.0)+(((-1.0)*x1909))));
IkReal x1912=(sj0*x1910*x1911);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x1912+(((-1.0)*x1909*x1912))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1914=((-1.0)*r21);
CheckValue<IkReal> x1917 = IKatan2WithCheck(IkReal(x1914),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1917.valid){
continue;
}
IkReal x1915=((1.0)*(x1917.value));
IkReal x1916=x1890;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1915)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1915)));
IkReal gconst82=(x1914*x1916);
IkReal gconst83=((1.0)*r20*x1916);
IkReal x1918=r22*r22;
IkReal x1919=(r12*sj0);
IkReal x1920=(cj0*r02);
CheckValue<IkReal> x1924=IKPowWithIntegerCheck(((-1.0)+x1918),-1);
if(!x1924.valid){
continue;
}
IkReal x1921=x1924.value;
if((((1.0)+(((-1.0)*x1918)))) < -0.00001)
continue;
IkReal x1922=IKsqrt(((1.0)+(((-1.0)*x1918))));
IkReal x1923=(r22*x1921*x1922);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x1920))+(((-1.0)*x1919)))))+(IKabs((((x1919*x1923))+((x1920*x1923))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1925=((1.0)*sj0);
IkReal x1926=((1.0)*cj0);
CheckValue<IkReal> x1927=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1927.valid){
continue;
}
CheckValue<IkReal> x1928 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x1925))+(((-1.0)*r02*x1926)))),IkReal(((((-1.0)*gconst82*r11*x1925))+((gconst83*r10*sj0))+((cj0*gconst83*r00))+(((-1.0)*gconst82*r01*x1926)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1927.value)))+(x1928.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1929=IKsin(j4);
IkReal x1930=IKcos(j4);
IkReal x1931=(gconst82*r11);
IkReal x1932=((1.0)*cj2);
IkReal x1933=((1.0)*sj0);
IkReal x1934=(cj1*sj2);
IkReal x1935=((1.0)*x1930);
IkReal x1936=(gconst83*x1930);
IkReal x1937=(gconst82*x1929);
IkReal x1938=((1.0)*x1929);
evalcond[0]=((((-1.0)*r22*x1935))+((r21*x1937))+(((-1.0)*gconst83*r20*x1938)));
evalcond[1]=(cj0+(((-1.0)*r12*x1935))+((x1929*x1931))+(((-1.0)*gconst83*r10*x1938)));
evalcond[2]=((((-1.0)*gconst83*r00*x1938))+((r01*x1937))+(((-1.0)*r02*x1935))+(((-1.0)*x1933)));
evalcond[3]=((((-1.0)*cj1*x1932))+((sj1*sj2))+(((-1.0)*r22*x1938))+(((-1.0)*gconst82*r21*x1935))+((r20*x1936)));
evalcond[4]=(((r00*x1936))+(((-1.0)*cj0*x1934))+(((-1.0)*gconst82*r01*x1935))+(((-1.0)*cj0*sj1*x1932))+(((-1.0)*r02*x1938)));
evalcond[5]=((((-1.0)*x1933*x1934))+(((-1.0)*r12*x1938))+(((-1.0)*x1931*x1935))+((r10*x1936))+(((-1.0)*sj0*sj1*x1932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1939=((1.0)*gconst83);
CheckValue<IkReal> x1940 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x1939)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1940.valid){
continue;
}
CheckValue<IkReal> x1941=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1939)))),-1);
if(!x1941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1940.value)+(((1.5707963267949)*(x1941.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1942=IKsin(j4);
IkReal x1943=IKcos(j4);
IkReal x1944=(gconst82*r11);
IkReal x1945=((1.0)*cj2);
IkReal x1946=((1.0)*sj0);
IkReal x1947=(cj1*sj2);
IkReal x1948=((1.0)*x1943);
IkReal x1949=(gconst83*x1943);
IkReal x1950=(gconst82*x1942);
IkReal x1951=((1.0)*x1942);
evalcond[0]=((((-1.0)*r22*x1948))+((r21*x1950))+(((-1.0)*gconst83*r20*x1951)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1951))+(((-1.0)*r12*x1948))+((x1942*x1944)));
evalcond[2]=((((-1.0)*x1946))+(((-1.0)*r02*x1948))+((r01*x1950))+(((-1.0)*gconst83*r00*x1951)));
evalcond[3]=((((-1.0)*r22*x1951))+((r20*x1949))+(((-1.0)*gconst82*r21*x1948))+((sj1*sj2))+(((-1.0)*cj1*x1945)));
evalcond[4]=((((-1.0)*cj0*x1947))+(((-1.0)*r02*x1951))+(((-1.0)*gconst82*r01*x1948))+((r00*x1949))+(((-1.0)*cj0*sj1*x1945)));
evalcond[5]=((((-1.0)*sj0*sj1*x1945))+((r10*x1949))+(((-1.0)*x1944*x1948))+(((-1.0)*x1946*x1947))+(((-1.0)*r12*x1951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1952=((1.0)*gconst83);
CheckValue<IkReal> x1953 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1952))+((cj0*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1953.valid){
continue;
}
CheckValue<IkReal> x1954=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r00))+(((-1.0)*r01*x1952)))),-1);
if(!x1954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1953.value)+(((1.5707963267949)*(x1954.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1955=IKsin(j4);
IkReal x1956=IKcos(j4);
IkReal x1957=(gconst82*r11);
IkReal x1958=((1.0)*cj2);
IkReal x1959=((1.0)*sj0);
IkReal x1960=(cj1*sj2);
IkReal x1961=((1.0)*x1956);
IkReal x1962=(gconst83*x1956);
IkReal x1963=(gconst82*x1955);
IkReal x1964=((1.0)*x1955);
evalcond[0]=((((-1.0)*r22*x1961))+((r21*x1963))+(((-1.0)*gconst83*r20*x1964)));
evalcond[1]=(cj0+((x1955*x1957))+(((-1.0)*gconst83*r10*x1964))+(((-1.0)*r12*x1961)));
evalcond[2]=((((-1.0)*x1959))+(((-1.0)*r02*x1961))+((r01*x1963))+(((-1.0)*gconst83*r00*x1964)));
evalcond[3]=(((r20*x1962))+(((-1.0)*r22*x1964))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1961))+(((-1.0)*cj1*x1958)));
evalcond[4]=((((-1.0)*cj0*x1960))+(((-1.0)*cj0*sj1*x1958))+(((-1.0)*r02*x1964))+((r00*x1962))+(((-1.0)*gconst82*r01*x1961)));
evalcond[5]=((((-1.0)*x1957*x1961))+(((-1.0)*x1959*x1960))+((r10*x1962))+(((-1.0)*r12*x1964))+(((-1.0)*sj0*sj1*x1958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1965=((-1.0)*r10);
IkReal x1967 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1967)==0){
continue;
}
IkReal x1966=pow(x1967,-0.5);
CheckValue<IkReal> x1968 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1965),IKFAST_ATAN2_MAGTHRESH);
if(!x1968.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1968.value));
IkReal gconst85=(r11*x1966);
IkReal gconst86=(x1965*x1966);
CheckValue<IkReal> x1969 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1969.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1969.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1970=((-1.0)*r10);
IkReal x1971=x1966;
CheckValue<IkReal> x1973 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1970),IKFAST_ATAN2_MAGTHRESH);
if(!x1973.valid){
continue;
}
IkReal x1972=((-1.0)*(x1973.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1972;
IkReal gconst84=x1972;
IkReal gconst85=(r11*x1971);
IkReal gconst86=(x1970*x1971);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1974=((1.0)*sj0);
IkReal x1975=((1.0)*gconst85);
CheckValue<IkReal> x1976 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1974)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x1975))+(((-1.0)*gconst85*r11*x1974))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1976.valid){
continue;
}
CheckValue<IkReal> x1977=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1975)))),-1);
if(!x1977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1976.value)+(((1.5707963267949)*(x1977.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1978=IKsin(j4);
IkReal x1979=IKcos(j4);
IkReal x1980=(gconst85*r21);
IkReal x1981=(gconst86*r00);
IkReal x1982=(gconst86*r10);
IkReal x1983=((1.0)*cj2);
IkReal x1984=(gconst85*r11);
IkReal x1985=(gconst85*r01);
IkReal x1986=((1.0)*sj0);
IkReal x1987=(gconst86*r20);
IkReal x1988=(cj1*sj2);
IkReal x1989=((1.0)*x1979);
IkReal x1990=((1.0)*x1978);
evalcond[0]=(((x1978*x1980))+(((-1.0)*x1987*x1990))+(((-1.0)*r22*x1989)));
evalcond[1]=(cj0+(((-1.0)*x1982*x1990))+((x1978*x1984))+(((-1.0)*r12*x1989)));
evalcond[2]=((((-1.0)*x1986))+(((-1.0)*r02*x1989))+(((-1.0)*x1981*x1990))+((x1978*x1985)));
evalcond[3]=((((-1.0)*x1980*x1989))+((sj1*sj2))+((x1979*x1987))+(((-1.0)*cj1*x1983))+(((-1.0)*r22*x1990)));
evalcond[4]=((((-1.0)*x1985*x1989))+(((-1.0)*r02*x1990))+((x1979*x1981))+(((-1.0)*cj0*sj1*x1983))+(((-1.0)*cj0*x1988)));
evalcond[5]=((((-1.0)*x1986*x1988))+(((-1.0)*x1984*x1989))+((x1979*x1982))+(((-1.0)*sj0*sj1*x1983))+(((-1.0)*r12*x1990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1991=((1.0)*gconst86);
CheckValue<IkReal> x1992=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1991))+(((-1.0)*gconst85*r00)))),-1);
if(!x1992.valid){
continue;
}
CheckValue<IkReal> x1993 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1991))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1992.value)))+(x1993.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1994=IKsin(j4);
IkReal x1995=IKcos(j4);
IkReal x1996=(gconst85*r21);
IkReal x1997=(gconst86*r00);
IkReal x1998=(gconst86*r10);
IkReal x1999=((1.0)*cj2);
IkReal x2000=(gconst85*r11);
IkReal x2001=(gconst85*r01);
IkReal x2002=((1.0)*sj0);
IkReal x2003=(gconst86*r20);
IkReal x2004=(cj1*sj2);
IkReal x2005=((1.0)*x1995);
IkReal x2006=((1.0)*x1994);
evalcond[0]=((((-1.0)*r22*x2005))+(((-1.0)*x2003*x2006))+((x1994*x1996)));
evalcond[1]=((((-1.0)*x1998*x2006))+cj0+(((-1.0)*r12*x2005))+((x1994*x2000)));
evalcond[2]=(((x1994*x2001))+(((-1.0)*r02*x2005))+(((-1.0)*x2002))+(((-1.0)*x1997*x2006)));
evalcond[3]=((((-1.0)*r22*x2006))+((sj1*sj2))+((x1995*x2003))+(((-1.0)*x1996*x2005))+(((-1.0)*cj1*x1999)));
evalcond[4]=((((-1.0)*cj0*sj1*x1999))+((x1995*x1997))+(((-1.0)*x2001*x2005))+(((-1.0)*r02*x2006))+(((-1.0)*cj0*x2004)));
evalcond[5]=((((-1.0)*sj0*sj1*x1999))+(((-1.0)*r12*x2006))+(((-1.0)*x2002*x2004))+((x1995*x1998))+(((-1.0)*x2000*x2005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2007=((-1.0)*r11);
IkReal x2009 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2009)==0){
continue;
}
IkReal x2008=pow(x2009,-0.5);
CheckValue<IkReal> x2010 = IKatan2WithCheck(IkReal(x2007),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2010.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2010.value))));
IkReal gconst88=(x2007*x2008);
IkReal gconst89=((1.0)*r10*x2008);
CheckValue<IkReal> x2011 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2011.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2011.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2012=((-1.0)*r11);
CheckValue<IkReal> x2015 = IKatan2WithCheck(IkReal(x2012),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2015.valid){
continue;
}
IkReal x2013=((1.0)*(x2015.value));
IkReal x2014=x2008;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2013)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2013)));
IkReal gconst88=(x2012*x2014);
IkReal gconst89=((1.0)*r10*x2014);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2016=((-1.0)*r11);
CheckValue<IkReal> x2019 = IKatan2WithCheck(IkReal(x2016),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2019.valid){
continue;
}
IkReal x2017=((1.0)*(x2019.value));
IkReal x2018=x2008;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2017)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2017)));
IkReal gconst88=(x2016*x2018);
IkReal gconst89=((1.0)*r10*x2018);
IkReal x2020=r12*r12;
IkReal x2021=((1.0)*sj0);
IkReal x2022=(cj0*r02);
IkReal x2023=x2008;
j4eval[0]=((IKabs(((((-1.0)*x2021*x2023))+((sj0*x2020*x2023))+((r12*x2022*x2023)))))+(IKabs(((((-1.0)*r12*x2021))+(((-1.0)*x2022))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2024=((-1.0)*r11);
CheckValue<IkReal> x2027 = IKatan2WithCheck(IkReal(x2024),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2027.valid){
continue;
}
IkReal x2025=((1.0)*(x2027.value));
IkReal x2026=x2008;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2025)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2025)));
IkReal gconst88=(x2024*x2026);
IkReal gconst89=((1.0)*r10*x2026);
IkReal x2028=r12*r12;
IkReal x2029=(cj1*cj2*r22);
IkReal x2030=(r22*sj1*sj2);
CheckValue<IkReal> x2034=IKPowWithIntegerCheck(((-1.0)+x2028),-1);
if(!x2034.valid){
continue;
}
IkReal x2031=x2034.value;
if((((1.0)+(((-1.0)*x2028)))) < -0.00001)
continue;
IkReal x2032=IKsqrt(((1.0)+(((-1.0)*x2028))));
IkReal x2033=(r12*x2031*x2032);
j4eval[0]=((IKabs((((x2029*x2033))+(((-1.0)*x2030*x2033)))))+(IKabs((x2030+(((-1.0)*x2029))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2035=(cj1*cj2);
IkReal x2036=(gconst89*r20);
IkReal x2037=(gconst88*r21);
IkReal x2038=(sj1*sj2);
CheckValue<IkReal> x2039=IKPowWithIntegerCheck(IKsign(((x2036*x2036)+(r22*r22)+(((-2.0)*x2036*x2037))+(x2037*x2037))),-1);
if(!x2039.valid){
continue;
}
CheckValue<IkReal> x2040 = IKatan2WithCheck(IkReal((((r22*x2038))+(((-1.0)*r22*x2035)))),IkReal(((((-1.0)*x2035*x2037))+((x2035*x2036))+(((-1.0)*x2036*x2038))+((x2037*x2038)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2039.value)))+(x2040.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2041=IKsin(j4);
IkReal x2042=IKcos(j4);
IkReal x2043=((1.0)*sj0);
IkReal x2044=((1.0)*cj2);
IkReal x2045=(gconst89*r20);
IkReal x2046=(gconst89*r10);
IkReal x2047=(gconst89*r00);
IkReal x2048=(cj1*sj2);
IkReal x2049=((1.0)*x2042);
IkReal x2050=((1.0)*x2041);
IkReal x2051=(gconst88*x2041);
evalcond[0]=((((-1.0)*r22*x2049))+(((-1.0)*x2045*x2050))+((r21*x2051)));
evalcond[1]=(((r11*x2051))+cj0+(((-1.0)*x2046*x2050))+(((-1.0)*r12*x2049)));
evalcond[2]=(((r01*x2051))+(((-1.0)*x2043))+(((-1.0)*r02*x2049))+(((-1.0)*x2047*x2050)));
evalcond[3]=(((x2042*x2045))+(((-1.0)*r22*x2050))+((sj1*sj2))+(((-1.0)*cj1*x2044))+(((-1.0)*gconst88*r21*x2049)));
evalcond[4]=((((-1.0)*cj0*x2048))+((x2042*x2047))+(((-1.0)*r02*x2050))+(((-1.0)*cj0*sj1*x2044))+(((-1.0)*gconst88*r01*x2049)));
evalcond[5]=((((-1.0)*cj2*sj1*x2043))+((x2042*x2046))+(((-1.0)*r12*x2050))+(((-1.0)*x2043*x2048))+(((-1.0)*gconst88*r11*x2049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2052=((1.0)*sj0);
IkReal x2053=((1.0)*cj0);
CheckValue<IkReal> x2054 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2052))+(((-1.0)*r02*x2053)))),IkReal(((((-1.0)*gconst88*r01*x2053))+(((-1.0)*gconst88*r11*x2052))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2054.valid){
continue;
}
CheckValue<IkReal> x2055=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2054.value)+(((1.5707963267949)*(x2055.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2056=IKsin(j4);
IkReal x2057=IKcos(j4);
IkReal x2058=((1.0)*sj0);
IkReal x2059=((1.0)*cj2);
IkReal x2060=(gconst89*r20);
IkReal x2061=(gconst89*r10);
IkReal x2062=(gconst89*r00);
IkReal x2063=(cj1*sj2);
IkReal x2064=((1.0)*x2057);
IkReal x2065=((1.0)*x2056);
IkReal x2066=(gconst88*x2056);
evalcond[0]=(((r21*x2066))+(((-1.0)*r22*x2064))+(((-1.0)*x2060*x2065)));
evalcond[1]=((((-1.0)*r12*x2064))+cj0+((r11*x2066))+(((-1.0)*x2061*x2065)));
evalcond[2]=((((-1.0)*r02*x2064))+(((-1.0)*x2062*x2065))+((r01*x2066))+(((-1.0)*x2058)));
evalcond[3]=((((-1.0)*gconst88*r21*x2064))+(((-1.0)*cj1*x2059))+(((-1.0)*r22*x2065))+((sj1*sj2))+((x2057*x2060)));
evalcond[4]=((((-1.0)*cj0*x2063))+(((-1.0)*r02*x2065))+((x2057*x2062))+(((-1.0)*gconst88*r01*x2064))+(((-1.0)*cj0*sj1*x2059)));
evalcond[5]=((((-1.0)*r12*x2065))+(((-1.0)*x2058*x2063))+(((-1.0)*cj2*sj1*x2058))+((x2057*x2061))+(((-1.0)*gconst88*r11*x2064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2067=((1.0)*gconst89);
CheckValue<IkReal> x2068 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2067))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2068.valid){
continue;
}
CheckValue<IkReal> x2069=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2067))+(((-1.0)*gconst88*r00)))),-1);
if(!x2069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2068.value)+(((1.5707963267949)*(x2069.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2070=IKsin(j4);
IkReal x2071=IKcos(j4);
IkReal x2072=((1.0)*sj0);
IkReal x2073=((1.0)*cj2);
IkReal x2074=(gconst89*r20);
IkReal x2075=(gconst89*r10);
IkReal x2076=(gconst89*r00);
IkReal x2077=(cj1*sj2);
IkReal x2078=((1.0)*x2071);
IkReal x2079=((1.0)*x2070);
IkReal x2080=(gconst88*x2070);
evalcond[0]=((((-1.0)*r22*x2078))+(((-1.0)*x2074*x2079))+((r21*x2080)));
evalcond[1]=(cj0+(((-1.0)*r12*x2078))+((r11*x2080))+(((-1.0)*x2075*x2079)));
evalcond[2]=((((-1.0)*r02*x2078))+(((-1.0)*x2076*x2079))+(((-1.0)*x2072))+((r01*x2080)));
evalcond[3]=((((-1.0)*gconst88*r21*x2078))+(((-1.0)*r22*x2079))+((sj1*sj2))+((x2071*x2074))+(((-1.0)*cj1*x2073)));
evalcond[4]=((((-1.0)*r02*x2079))+((x2071*x2076))+(((-1.0)*cj0*sj1*x2073))+(((-1.0)*gconst88*r01*x2078))+(((-1.0)*cj0*x2077)));
evalcond[5]=((((-1.0)*r12*x2079))+((x2071*x2075))+(((-1.0)*gconst88*r11*x2078))+(((-1.0)*x2072*x2077))+(((-1.0)*cj2*sj1*x2072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2081=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2081;
j4eval[1]=IKsign(x2081);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2082=((1.0)*cj5);
IkReal x2083=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2082)));
j4eval[0]=x2083;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x2082))+((r21*sj5))))));
j4eval[2]=IKsign(x2083);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2084=cj5*cj5;
IkReal x2085=r11*r11;
IkReal x2086=(r11*sj5);
IkReal x2087=(cj5*r10);
IkReal x2088=((r12*r12)+(((-1.0)*x2084*x2085))+x2085+((x2084*(r10*r10)))+(((-2.0)*x2086*x2087)));
j4eval[0]=x2088;
j4eval[1]=IKsign(x2088);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2086))+x2087))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2089=cj5*cj5;
IkReal x2090=r11*r11;
IkReal x2091=(cj5*r10);
IkReal x2092=(r11*sj5);
CheckValue<IkReal> x2093=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2090+((x2089*(r10*r10)))+(((-2.0)*x2091*x2092))+(((-1.0)*x2089*x2090)))),-1);
if(!x2093.valid){
continue;
}
CheckValue<IkReal> x2094 = IKatan2WithCheck(IkReal((x2091+(((-1.0)*x2092)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2093.value)))+(x2094.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2095=IKsin(j4);
IkReal x2096=IKcos(j4);
IkReal x2097=(cj5*r10);
IkReal x2098=(r01*sj5);
IkReal x2099=((1.0)*cj2);
IkReal x2100=(cj5*r00);
IkReal x2101=(cj5*r20);
IkReal x2102=((1.0)*x2096);
IkReal x2103=((1.0)*x2095);
IkReal x2104=(sj5*x2095);
evalcond[0]=((((-1.0)*r22*x2102))+((r21*x2104))+(((-1.0)*x2101*x2103)));
evalcond[1]=((((-1.0)*r02*x2102))+(((-1.0)*x2100*x2103))+((x2095*x2098)));
evalcond[2]=((((-1.0)*r12*x2103))+((x2096*x2097))+(((-1.0)*r11*sj5*x2102)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2102))+((r11*x2104))+(((-1.0)*x2097*x2103)));
evalcond[4]=((((-1.0)*r22*x2103))+((sj1*sj2))+(((-1.0)*r21*sj5*x2102))+(((-1.0)*cj1*x2099))+((x2096*x2101)));
evalcond[5]=((((-1.0)*r02*x2103))+(((-1.0)*cj1*sj2))+((x2096*x2100))+(((-1.0)*x2098*x2102))+(((-1.0)*sj1*x2099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2105=((1.0)*cj5);
CheckValue<IkReal> x2106=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2105)))),-1);
if(!x2106.valid){
continue;
}
CheckValue<IkReal> x2107 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2105)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2106.value)))+(x2107.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2108=IKsin(j4);
IkReal x2109=IKcos(j4);
IkReal x2110=(cj5*r10);
IkReal x2111=(r01*sj5);
IkReal x2112=((1.0)*cj2);
IkReal x2113=(cj5*r00);
IkReal x2114=(cj5*r20);
IkReal x2115=((1.0)*x2109);
IkReal x2116=((1.0)*x2108);
IkReal x2117=(sj5*x2108);
evalcond[0]=((((-1.0)*x2114*x2116))+((r21*x2117))+(((-1.0)*r22*x2115)));
evalcond[1]=((((-1.0)*r02*x2115))+((x2108*x2111))+(((-1.0)*x2113*x2116)));
evalcond[2]=(((x2109*x2110))+(((-1.0)*r11*sj5*x2115))+(((-1.0)*r12*x2116)));
evalcond[3]=((1.0)+(((-1.0)*x2110*x2116))+(((-1.0)*r12*x2115))+((r11*x2117)));
evalcond[4]=(((x2109*x2114))+(((-1.0)*r21*sj5*x2115))+((sj1*sj2))+(((-1.0)*r22*x2116))+(((-1.0)*cj1*x2112)));
evalcond[5]=(((x2109*x2113))+(((-1.0)*sj1*x2112))+(((-1.0)*cj1*sj2))+(((-1.0)*x2111*x2115))+(((-1.0)*r02*x2116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2118=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2118.valid){
continue;
}
CheckValue<IkReal> x2119 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2118.value)))+(x2119.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2120=IKsin(j4);
IkReal x2121=IKcos(j4);
IkReal x2122=(cj5*r10);
IkReal x2123=(r01*sj5);
IkReal x2124=((1.0)*cj2);
IkReal x2125=(cj5*r00);
IkReal x2126=(cj5*r20);
IkReal x2127=((1.0)*x2121);
IkReal x2128=((1.0)*x2120);
IkReal x2129=(sj5*x2120);
evalcond[0]=((((-1.0)*r22*x2127))+((r21*x2129))+(((-1.0)*x2126*x2128)));
evalcond[1]=((((-1.0)*x2125*x2128))+(((-1.0)*r02*x2127))+((x2120*x2123)));
evalcond[2]=(((x2121*x2122))+(((-1.0)*r12*x2128))+(((-1.0)*r11*sj5*x2127)));
evalcond[3]=((1.0)+(((-1.0)*x2122*x2128))+((r11*x2129))+(((-1.0)*r12*x2127)));
evalcond[4]=((((-1.0)*r22*x2128))+((sj1*sj2))+(((-1.0)*cj1*x2124))+((x2121*x2126))+(((-1.0)*r21*sj5*x2127)));
evalcond[5]=((((-1.0)*r02*x2128))+(((-1.0)*cj1*sj2))+((x2121*x2125))+(((-1.0)*sj1*x2124))+(((-1.0)*x2123*x2127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2130=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2130;
j4eval[1]=IKsign(x2130);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2131=((1.0)*cj5);
IkReal x2132=((((-1.0)*r21*x2131))+(((-1.0)*r20*sj5)));
j4eval[0]=x2132;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2131))))));
j4eval[2]=IKsign(x2132);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2133=cj5*cj5;
IkReal x2134=r11*r11;
IkReal x2135=(cj5*r10);
IkReal x2136=(r11*sj5);
IkReal x2137=((((2.0)*x2135*x2136))+(((-1.0)*(r12*r12)))+(((-1.0)*x2133*(r10*r10)))+(((-1.0)*x2134))+((x2133*x2134)));
j4eval[0]=x2137;
j4eval[1]=((IKabs(r12))+(IKabs((x2135+(((-1.0)*x2136))))));
j4eval[2]=IKsign(x2137);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2138=cj5*cj5;
IkReal x2139=r11*r11;
IkReal x2140=(cj5*r10);
IkReal x2141=(r11*sj5);
CheckValue<IkReal> x2142=IKPowWithIntegerCheck(IKsign(((((2.0)*x2140*x2141))+(((-1.0)*(r12*r12)))+((x2138*x2139))+(((-1.0)*x2139))+(((-1.0)*x2138*(r10*r10))))),-1);
if(!x2142.valid){
continue;
}
CheckValue<IkReal> x2143 = IKatan2WithCheck(IkReal(((((-1.0)*x2141))+x2140)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2142.value)))+(x2143.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2144=IKsin(j4);
IkReal x2145=IKcos(j4);
IkReal x2146=(cj5*r10);
IkReal x2147=(r01*sj5);
IkReal x2148=(cj5*r00);
IkReal x2149=(cj5*r20);
IkReal x2150=((1.0)*x2145);
IkReal x2151=((1.0)*x2144);
IkReal x2152=(sj5*x2144);
evalcond[0]=((((-1.0)*x2149*x2151))+(((-1.0)*r22*x2150))+((r21*x2152)));
evalcond[1]=((((-1.0)*x2148*x2151))+(((-1.0)*r02*x2150))+((x2144*x2147)));
evalcond[2]=(((x2145*x2146))+(((-1.0)*r11*sj5*x2150))+(((-1.0)*r12*x2151)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2150))+(((-1.0)*x2146*x2151))+((r11*x2152)));
evalcond[4]=(((cj2*sj1))+((x2145*x2148))+((cj1*sj2))+(((-1.0)*r02*x2151))+(((-1.0)*x2147*x2150)));
evalcond[5]=(((x2145*x2149))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2151))+(((-1.0)*r21*sj5*x2150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2153=((1.0)*cj5);
CheckValue<IkReal> x2154 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x2153))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2154.valid){
continue;
}
CheckValue<IkReal> x2155=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2153))+(((-1.0)*r20*sj5)))),-1);
if(!x2155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2154.value)+(((1.5707963267949)*(x2155.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2156=IKsin(j4);
IkReal x2157=IKcos(j4);
IkReal x2158=(cj5*r10);
IkReal x2159=(r01*sj5);
IkReal x2160=(cj5*r00);
IkReal x2161=(cj5*r20);
IkReal x2162=((1.0)*x2157);
IkReal x2163=((1.0)*x2156);
IkReal x2164=(sj5*x2156);
evalcond[0]=(((r21*x2164))+(((-1.0)*x2161*x2163))+(((-1.0)*r22*x2162)));
evalcond[1]=((((-1.0)*x2160*x2163))+((x2156*x2159))+(((-1.0)*r02*x2162)));
evalcond[2]=((((-1.0)*r11*sj5*x2162))+(((-1.0)*r12*x2163))+((x2157*x2158)));
evalcond[3]=((-1.0)+(((-1.0)*x2158*x2163))+(((-1.0)*r12*x2162))+((r11*x2164)));
evalcond[4]=(((cj2*sj1))+((x2157*x2160))+((cj1*sj2))+(((-1.0)*x2159*x2162))+(((-1.0)*r02*x2163)));
evalcond[5]=(((x2157*x2161))+(((-1.0)*r21*sj5*x2162))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2165 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2165.valid){
continue;
}
CheckValue<IkReal> x2166=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2165.value)+(((1.5707963267949)*(x2166.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2167=IKsin(j4);
IkReal x2168=IKcos(j4);
IkReal x2169=(cj5*r10);
IkReal x2170=(r01*sj5);
IkReal x2171=(cj5*r00);
IkReal x2172=(cj5*r20);
IkReal x2173=((1.0)*x2168);
IkReal x2174=((1.0)*x2167);
IkReal x2175=(sj5*x2167);
evalcond[0]=(((r21*x2175))+(((-1.0)*x2172*x2174))+(((-1.0)*r22*x2173)));
evalcond[1]=((((-1.0)*x2171*x2174))+(((-1.0)*r02*x2173))+((x2167*x2170)));
evalcond[2]=(((x2168*x2169))+(((-1.0)*r11*sj5*x2173))+(((-1.0)*r12*x2174)));
evalcond[3]=((-1.0)+((r11*x2175))+(((-1.0)*x2169*x2174))+(((-1.0)*r12*x2173)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2170*x2173))+((cj1*sj2))+(((-1.0)*r02*x2174))+((x2168*x2171)));
evalcond[5]=((((-1.0)*r21*sj5*x2173))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2168*x2172))+(((-1.0)*r22*x2174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2176=((-1.0)*r00);
IkReal x2178 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2178)==0){
continue;
}
IkReal x2177=pow(x2178,-0.5);
CheckValue<IkReal> x2179 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2176),IKFAST_ATAN2_MAGTHRESH);
if(!x2179.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2179.value));
IkReal gconst91=(r01*x2177);
IkReal gconst92=(x2176*x2177);
CheckValue<IkReal> x2180 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2180.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2180.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2181=((-1.0)*r00);
IkReal x2182=x2177;
CheckValue<IkReal> x2184 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2181),IKFAST_ATAN2_MAGTHRESH);
if(!x2184.valid){
continue;
}
IkReal x2183=((-1.0)*(x2184.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2183;
IkReal gconst90=x2183;
IkReal gconst91=(r01*x2182);
IkReal gconst92=(x2181*x2182);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2185=((1.0)*sj0);
IkReal x2186=((1.0)*cj0);
CheckValue<IkReal> x2187 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2186))+(((-1.0)*r12*x2185)))),IkReal((((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x2185))+(((-1.0)*gconst91*r01*x2186)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2187.valid){
continue;
}
CheckValue<IkReal> x2188=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2187.value)+(((1.5707963267949)*(x2188.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2189=IKsin(j4);
IkReal x2190=IKcos(j4);
IkReal x2191=((1.0)*cj2);
IkReal x2192=(gconst92*r00);
IkReal x2193=(gconst92*r20);
IkReal x2194=((1.0)*sj0);
IkReal x2195=(gconst92*r10);
IkReal x2196=(cj1*sj2);
IkReal x2197=((1.0)*x2190);
IkReal x2198=(gconst91*x2189);
IkReal x2199=((1.0)*x2189);
evalcond[0]=((((-1.0)*x2193*x2199))+((r21*x2198))+(((-1.0)*r22*x2197)));
evalcond[1]=((((-1.0)*x2195*x2199))+cj0+((r11*x2198))+(((-1.0)*r12*x2197)));
evalcond[2]=((((-1.0)*x2192*x2199))+(((-1.0)*r02*x2197))+(((-1.0)*x2194))+((r01*x2198)));
evalcond[3]=((((-1.0)*gconst91*r21*x2197))+((sj1*sj2))+((x2190*x2193))+(((-1.0)*r22*x2199))+(((-1.0)*cj1*x2191)));
evalcond[4]=((((-1.0)*cj0*sj1*x2191))+((x2190*x2192))+(((-1.0)*r02*x2199))+(((-1.0)*cj0*x2196))+(((-1.0)*gconst91*r01*x2197)));
evalcond[5]=((((-1.0)*sj0*sj1*x2191))+(((-1.0)*x2194*x2196))+((x2190*x2195))+(((-1.0)*r12*x2199))+(((-1.0)*gconst91*r11*x2197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2200=((1.0)*gconst92);
CheckValue<IkReal> x2201 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2200))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2201.valid){
continue;
}
CheckValue<IkReal> x2202=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2200)))),-1);
if(!x2202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2201.value)+(((1.5707963267949)*(x2202.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2203=IKsin(j4);
IkReal x2204=IKcos(j4);
IkReal x2205=((1.0)*cj2);
IkReal x2206=(gconst92*r00);
IkReal x2207=(gconst92*r20);
IkReal x2208=((1.0)*sj0);
IkReal x2209=(gconst92*r10);
IkReal x2210=(cj1*sj2);
IkReal x2211=((1.0)*x2204);
IkReal x2212=(gconst91*x2203);
IkReal x2213=((1.0)*x2203);
evalcond[0]=((((-1.0)*x2207*x2213))+(((-1.0)*r22*x2211))+((r21*x2212)));
evalcond[1]=(cj0+(((-1.0)*r12*x2211))+((r11*x2212))+(((-1.0)*x2209*x2213)));
evalcond[2]=(((r01*x2212))+(((-1.0)*x2208))+(((-1.0)*x2206*x2213))+(((-1.0)*r02*x2211)));
evalcond[3]=((((-1.0)*cj1*x2205))+(((-1.0)*r22*x2213))+((sj1*sj2))+((x2204*x2207))+(((-1.0)*gconst91*r21*x2211)));
evalcond[4]=(((x2204*x2206))+(((-1.0)*gconst91*r01*x2211))+(((-1.0)*cj0*sj1*x2205))+(((-1.0)*r02*x2213))+(((-1.0)*cj0*x2210)));
evalcond[5]=((((-1.0)*x2208*x2210))+(((-1.0)*r12*x2213))+((x2204*x2209))+(((-1.0)*gconst91*r11*x2211))+(((-1.0)*sj0*sj1*x2205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2214=((-1.0)*r01);
IkReal x2216 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2216)==0){
continue;
}
IkReal x2215=pow(x2216,-0.5);
CheckValue<IkReal> x2217 = IKatan2WithCheck(IkReal(x2214),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2217.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2217.value))));
IkReal gconst94=(x2214*x2215);
IkReal gconst95=((1.0)*r00*x2215);
CheckValue<IkReal> x2218 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2218.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2218.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2219=((-1.0)*r01);
CheckValue<IkReal> x2222 = IKatan2WithCheck(IkReal(x2219),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2222.valid){
continue;
}
IkReal x2220=((1.0)*(x2222.value));
IkReal x2221=x2215;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2220)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2220)));
IkReal gconst94=(x2219*x2221);
IkReal gconst95=((1.0)*r00*x2221);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2223=((-1.0)*r01);
CheckValue<IkReal> x2226 = IKatan2WithCheck(IkReal(x2223),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2226.valid){
continue;
}
IkReal x2224=((1.0)*(x2226.value));
IkReal x2225=x2215;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2224)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2224)));
IkReal gconst94=(x2223*x2225);
IkReal gconst95=((1.0)*r00*x2225);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2227=((-1.0)*r01);
CheckValue<IkReal> x2230 = IKatan2WithCheck(IkReal(x2227),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2230.valid){
continue;
}
IkReal x2228=((1.0)*(x2230.value));
IkReal x2229=x2215;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2228)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2228)));
IkReal gconst94=(x2227*x2229);
IkReal gconst95=((1.0)*r00*x2229);
IkReal x2231=r02*r02;
IkReal x2232=(r12*sj0);
IkReal x2233=((1.0)*cj0);
IkReal x2234=x2215;
j4eval[0]=((IKabs((((cj0*x2231*x2234))+(((-1.0)*x2233*x2234))+((r02*x2232*x2234)))))+(IKabs(((((-1.0)*r02*x2233))+(((-1.0)*x2232))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2235=((1.0)*sj0);
IkReal x2236=((1.0)*cj0);
CheckValue<IkReal> x2237=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2237.valid){
continue;
}
CheckValue<IkReal> x2238 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2236))+(((-1.0)*r12*x2235)))),IkReal(((((-1.0)*gconst94*r11*x2235))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r01*x2236))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2237.value)))+(x2238.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2239=IKsin(j4);
IkReal x2240=IKcos(j4);
IkReal x2241=(gconst94*r11);
IkReal x2242=((1.0)*cj2);
IkReal x2243=(gconst94*r21);
IkReal x2244=((1.0)*sj0);
IkReal x2245=(gconst94*r01);
IkReal x2246=(cj1*sj2);
IkReal x2247=((1.0)*x2240);
IkReal x2248=(gconst95*x2240);
IkReal x2249=((1.0)*x2239);
IkReal x2250=(gconst95*x2249);
evalcond[0]=((((-1.0)*r22*x2247))+((x2239*x2243))+(((-1.0)*r20*x2250)));
evalcond[1]=(cj0+(((-1.0)*r10*x2250))+(((-1.0)*r12*x2247))+((x2239*x2241)));
evalcond[2]=((((-1.0)*r02*x2247))+(((-1.0)*r00*x2250))+(((-1.0)*x2244))+((x2239*x2245)));
evalcond[3]=((((-1.0)*r22*x2249))+((sj1*sj2))+((r20*x2248))+(((-1.0)*x2243*x2247))+(((-1.0)*cj1*x2242)));
evalcond[4]=((((-1.0)*r02*x2249))+(((-1.0)*cj0*x2246))+((r00*x2248))+(((-1.0)*x2245*x2247))+(((-1.0)*cj0*sj1*x2242)));
evalcond[5]=(((r10*x2248))+(((-1.0)*sj0*sj1*x2242))+(((-1.0)*x2241*x2247))+(((-1.0)*x2244*x2246))+(((-1.0)*r12*x2249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2251=((1.0)*gconst95);
CheckValue<IkReal> x2252 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2251)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2252.valid){
continue;
}
CheckValue<IkReal> x2253=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2251)))),-1);
if(!x2253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2252.value)+(((1.5707963267949)*(x2253.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2254=IKsin(j4);
IkReal x2255=IKcos(j4);
IkReal x2256=(gconst94*r11);
IkReal x2257=((1.0)*cj2);
IkReal x2258=(gconst94*r21);
IkReal x2259=((1.0)*sj0);
IkReal x2260=(gconst94*r01);
IkReal x2261=(cj1*sj2);
IkReal x2262=((1.0)*x2255);
IkReal x2263=(gconst95*x2255);
IkReal x2264=((1.0)*x2254);
IkReal x2265=(gconst95*x2264);
evalcond[0]=(((x2254*x2258))+(((-1.0)*r20*x2265))+(((-1.0)*r22*x2262)));
evalcond[1]=(cj0+((x2254*x2256))+(((-1.0)*r10*x2265))+(((-1.0)*r12*x2262)));
evalcond[2]=((((-1.0)*r00*x2265))+(((-1.0)*x2259))+((x2254*x2260))+(((-1.0)*r02*x2262)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2258*x2262))+(((-1.0)*r22*x2264))+((r20*x2263))+(((-1.0)*cj1*x2257)));
evalcond[4]=(((r00*x2263))+(((-1.0)*x2260*x2262))+(((-1.0)*cj0*sj1*x2257))+(((-1.0)*r02*x2264))+(((-1.0)*cj0*x2261)));
evalcond[5]=((((-1.0)*x2256*x2262))+(((-1.0)*sj0*sj1*x2257))+(((-1.0)*x2259*x2261))+((r10*x2263))+(((-1.0)*r12*x2264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2266=((1.0)*gconst95);
CheckValue<IkReal> x2267=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2266)))),-1);
if(!x2267.valid){
continue;
}
CheckValue<IkReal> x2268 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2266))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2267.value)))+(x2268.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2269=IKsin(j4);
IkReal x2270=IKcos(j4);
IkReal x2271=(gconst94*r11);
IkReal x2272=((1.0)*cj2);
IkReal x2273=(gconst94*r21);
IkReal x2274=((1.0)*sj0);
IkReal x2275=(gconst94*r01);
IkReal x2276=(cj1*sj2);
IkReal x2277=((1.0)*x2270);
IkReal x2278=(gconst95*x2270);
IkReal x2279=((1.0)*x2269);
IkReal x2280=(gconst95*x2279);
evalcond[0]=(((x2269*x2273))+(((-1.0)*r22*x2277))+(((-1.0)*r20*x2280)));
evalcond[1]=(cj0+(((-1.0)*r10*x2280))+((x2269*x2271))+(((-1.0)*r12*x2277)));
evalcond[2]=(((x2269*x2275))+(((-1.0)*r02*x2277))+(((-1.0)*x2274))+(((-1.0)*r00*x2280)));
evalcond[3]=((((-1.0)*cj1*x2272))+(((-1.0)*x2273*x2277))+((sj1*sj2))+(((-1.0)*r22*x2279))+((r20*x2278)));
evalcond[4]=(((r00*x2278))+(((-1.0)*cj0*sj1*x2272))+(((-1.0)*x2275*x2277))+(((-1.0)*r02*x2279))+(((-1.0)*cj0*x2276)));
evalcond[5]=((((-1.0)*x2274*x2276))+(((-1.0)*sj0*sj1*x2272))+((r10*x2278))+(((-1.0)*r12*x2279))+(((-1.0)*x2271*x2277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2281=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2281;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2281);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2282=((1.0)*cj5);
IkReal x2283=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2282)));
j4eval[0]=x2283;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2282))))));
j4eval[2]=IKsign(x2283);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2284=cj5*cj5;
IkReal x2285=r01*r01;
IkReal x2286=(r01*sj5);
IkReal x2287=(cj5*r00);
IkReal x2288=((((-1.0)*(r02*r02)))+(((-1.0)*x2285))+(((2.0)*x2286*x2287))+(((-1.0)*x2284*(r00*r00)))+((x2284*x2285)));
j4eval[0]=x2288;
j4eval[1]=IKsign(x2288);
j4eval[2]=((IKabs(r02))+(IKabs((x2287+(((-1.0)*x2286))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2289=cj5*cj5;
IkReal x2290=r01*r01;
IkReal x2291=(r01*sj5);
IkReal x2292=(cj5*r00);
CheckValue<IkReal> x2293 = IKatan2WithCheck(IkReal((x2292+(((-1.0)*x2291)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2293.valid){
continue;
}
CheckValue<IkReal> x2294=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2289*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x2290))+((x2289*x2290))+(((2.0)*x2291*x2292)))),-1);
if(!x2294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2293.value)+(((1.5707963267949)*(x2294.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2295=IKsin(j4);
IkReal x2296=IKcos(j4);
IkReal x2297=(cj5*r10);
IkReal x2298=(r01*sj5);
IkReal x2299=((1.0)*cj2);
IkReal x2300=(cj5*r00);
IkReal x2301=(cj5*r20);
IkReal x2302=((1.0)*x2296);
IkReal x2303=((1.0)*x2295);
IkReal x2304=(sj5*x2295);
evalcond[0]=((((-1.0)*x2301*x2303))+(((-1.0)*r22*x2302))+((r21*x2304)));
evalcond[1]=(((r11*x2304))+(((-1.0)*x2297*x2303))+(((-1.0)*r12*x2302)));
evalcond[2]=(((x2296*x2300))+(((-1.0)*x2298*x2302))+(((-1.0)*r02*x2303)));
evalcond[3]=((-1.0)+(((-1.0)*x2300*x2303))+((x2295*x2298))+(((-1.0)*r02*x2302)));
evalcond[4]=((((-1.0)*r22*x2303))+((sj1*sj2))+(((-1.0)*r21*sj5*x2302))+((x2296*x2301))+(((-1.0)*cj1*x2299)));
evalcond[5]=(((x2296*x2297))+(((-1.0)*r11*sj5*x2302))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2299))+(((-1.0)*r12*x2303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2305=((1.0)*cj5);
CheckValue<IkReal> x2306 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2305))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2306.valid){
continue;
}
CheckValue<IkReal> x2307=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2305))+(((-1.0)*r10*sj5)))),-1);
if(!x2307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2306.value)+(((1.5707963267949)*(x2307.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2308=IKsin(j4);
IkReal x2309=IKcos(j4);
IkReal x2310=(cj5*r10);
IkReal x2311=(r01*sj5);
IkReal x2312=((1.0)*cj2);
IkReal x2313=(cj5*r00);
IkReal x2314=(cj5*r20);
IkReal x2315=((1.0)*x2309);
IkReal x2316=((1.0)*x2308);
IkReal x2317=(sj5*x2308);
evalcond[0]=((((-1.0)*r22*x2315))+((r21*x2317))+(((-1.0)*x2314*x2316)));
evalcond[1]=(((r11*x2317))+(((-1.0)*x2310*x2316))+(((-1.0)*r12*x2315)));
evalcond[2]=((((-1.0)*x2311*x2315))+((x2309*x2313))+(((-1.0)*r02*x2316)));
evalcond[3]=((-1.0)+((x2308*x2311))+(((-1.0)*x2313*x2316))+(((-1.0)*r02*x2315)));
evalcond[4]=((((-1.0)*r22*x2316))+((sj1*sj2))+((x2309*x2314))+(((-1.0)*cj1*x2312))+(((-1.0)*r21*sj5*x2315)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2315))+((x2309*x2310))+(((-1.0)*r12*x2316))+(((-1.0)*sj1*x2312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2318=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2318.valid){
continue;
}
CheckValue<IkReal> x2319 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2318.value)))+(x2319.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2320=IKsin(j4);
IkReal x2321=IKcos(j4);
IkReal x2322=(cj5*r10);
IkReal x2323=(r01*sj5);
IkReal x2324=((1.0)*cj2);
IkReal x2325=(cj5*r00);
IkReal x2326=(cj5*r20);
IkReal x2327=((1.0)*x2321);
IkReal x2328=((1.0)*x2320);
IkReal x2329=(sj5*x2320);
evalcond[0]=((((-1.0)*r22*x2327))+((r21*x2329))+(((-1.0)*x2326*x2328)));
evalcond[1]=(((r11*x2329))+(((-1.0)*x2322*x2328))+(((-1.0)*r12*x2327)));
evalcond[2]=(((x2321*x2325))+(((-1.0)*x2323*x2327))+(((-1.0)*r02*x2328)));
evalcond[3]=((-1.0)+((x2320*x2323))+(((-1.0)*x2325*x2328))+(((-1.0)*r02*x2327)));
evalcond[4]=((((-1.0)*r22*x2328))+((x2321*x2326))+((sj1*sj2))+(((-1.0)*cj1*x2324))+(((-1.0)*r21*sj5*x2327)));
evalcond[5]=(((x2321*x2322))+(((-1.0)*r11*sj5*x2327))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2328))+(((-1.0)*sj1*x2324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2330=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2330;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2330);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2331=((1.0)*cj5);
IkReal x2332=((((-1.0)*r21*x2331))+(((-1.0)*r20*sj5)));
j4eval[0]=x2332;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2331))+((r11*sj5))))));
j4eval[2]=IKsign(x2332);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2333=cj5*cj5;
IkReal x2334=r01*r01;
IkReal x2335=(cj5*r00);
IkReal x2336=(r01*sj5);
IkReal x2337=(x2334+((x2333*(r00*r00)))+(((-2.0)*x2335*x2336))+(r02*r02)+(((-1.0)*x2333*x2334)));
j4eval[0]=x2337;
j4eval[1]=((IKabs((x2335+(((-1.0)*x2336)))))+(IKabs(r02)));
j4eval[2]=IKsign(x2337);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2338=cj5*cj5;
IkReal x2339=r01*r01;
IkReal x2340=(r01*sj5);
IkReal x2341=(cj5*r00);
CheckValue<IkReal> x2342=IKPowWithIntegerCheck(IKsign((x2339+(r02*r02)+((x2338*(r00*r00)))+(((-1.0)*x2338*x2339))+(((-2.0)*x2340*x2341)))),-1);
if(!x2342.valid){
continue;
}
CheckValue<IkReal> x2343 = IKatan2WithCheck(IkReal((x2341+(((-1.0)*x2340)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2342.value)))+(x2343.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2344=IKsin(j4);
IkReal x2345=IKcos(j4);
IkReal x2346=(cj5*r10);
IkReal x2347=(r01*sj5);
IkReal x2348=(cj5*r00);
IkReal x2349=(cj5*r20);
IkReal x2350=((1.0)*x2345);
IkReal x2351=((1.0)*x2344);
IkReal x2352=(sj5*x2344);
evalcond[0]=((((-1.0)*r22*x2350))+((r21*x2352))+(((-1.0)*x2349*x2351)));
evalcond[1]=((((-1.0)*x2346*x2351))+((r11*x2352))+(((-1.0)*r12*x2350)));
evalcond[2]=((((-1.0)*x2347*x2350))+((x2345*x2348))+(((-1.0)*r02*x2351)));
evalcond[3]=((1.0)+(((-1.0)*x2348*x2351))+((x2344*x2347))+(((-1.0)*r02*x2350)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2350))+((cj1*sj2))+((x2345*x2346))+(((-1.0)*r12*x2351)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2345*x2349))+(((-1.0)*r22*x2351))+(((-1.0)*r21*sj5*x2350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2353=((1.0)*cj5);
CheckValue<IkReal> x2354 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x2353)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2354.valid){
continue;
}
CheckValue<IkReal> x2355=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2353))+(((-1.0)*r20*sj5)))),-1);
if(!x2355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2354.value)+(((1.5707963267949)*(x2355.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2356=IKsin(j4);
IkReal x2357=IKcos(j4);
IkReal x2358=(cj5*r10);
IkReal x2359=(r01*sj5);
IkReal x2360=(cj5*r00);
IkReal x2361=(cj5*r20);
IkReal x2362=((1.0)*x2357);
IkReal x2363=((1.0)*x2356);
IkReal x2364=(sj5*x2356);
evalcond[0]=((((-1.0)*x2361*x2363))+(((-1.0)*r22*x2362))+((r21*x2364)));
evalcond[1]=(((r11*x2364))+(((-1.0)*x2358*x2363))+(((-1.0)*r12*x2362)));
evalcond[2]=((((-1.0)*x2359*x2362))+((x2357*x2360))+(((-1.0)*r02*x2363)));
evalcond[3]=((1.0)+((x2356*x2359))+(((-1.0)*x2360*x2363))+(((-1.0)*r02*x2362)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2362))+((x2357*x2358))+((cj1*sj2))+(((-1.0)*r12*x2363)));
evalcond[5]=((((-1.0)*r21*sj5*x2362))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2363))+((x2357*x2361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2365 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2365.valid){
continue;
}
CheckValue<IkReal> x2366=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2366.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2365.value)+(((1.5707963267949)*(x2366.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2367=IKsin(j4);
IkReal x2368=IKcos(j4);
IkReal x2369=(cj5*r10);
IkReal x2370=(r01*sj5);
IkReal x2371=(cj5*r00);
IkReal x2372=(cj5*r20);
IkReal x2373=((1.0)*x2368);
IkReal x2374=((1.0)*x2367);
IkReal x2375=(sj5*x2367);
evalcond[0]=((((-1.0)*x2372*x2374))+(((-1.0)*r22*x2373))+((r21*x2375)));
evalcond[1]=((((-1.0)*x2369*x2374))+(((-1.0)*r12*x2373))+((r11*x2375)));
evalcond[2]=(((x2368*x2371))+(((-1.0)*r02*x2374))+(((-1.0)*x2370*x2373)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2373))+((x2367*x2370))+(((-1.0)*x2371*x2374)));
evalcond[4]=((((-1.0)*r11*sj5*x2373))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x2374))+((x2368*x2369)));
evalcond[5]=(((x2368*x2372))+(((-1.0)*r21*sj5*x2373))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2376=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2376);
rxp1_1=(px*r21);
rxp1_2=(r11*x2376);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2377=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2377);
rxp1_1=(px*r21);
rxp1_2=(r11*x2377);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2378=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2378);
rxp1_1=(px*r21);
rxp1_2=(r11*x2378);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2381=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2381.valid){
continue;
}
IkReal x2379=x2381.value;
IkReal x2380=(sj0*x2379);
cj4array[0]=(((cj2*sj1*x2380))+((cj1*sj2*x2380)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2382=IKsin(j4);
IkReal x2383=IKcos(j4);
IkReal x2384=(cj5*r20);
IkReal x2385=(r21*sj5);
IkReal x2386=((1.0)*x2382);
IkReal x2387=((1.0)*x2383);
evalcond[0]=((-1.0)*r02*x2382);
evalcond[1]=((((-1.0)*r02*x2387))+(((-1.0)*sj0)));
evalcond[2]=(((x2382*x2385))+(((-1.0)*x2384*x2386)));
evalcond[3]=(((r11*sj5*x2382))+(((-1.0)*cj5*r10*x2386)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2383*x2384))+(((-1.0)*x2385*x2387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2389=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2389.valid){
continue;
}
IkReal x2388=x2389.value;
cj4array[0]=((((-1.0)*sj1*sj2*x2388))+((cj1*cj2*x2388)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2390=IKsin(j4);
IkReal x2391=IKcos(j4);
IkReal x2392=(r11*sj5);
IkReal x2393=((1.0)*sj0);
IkReal x2394=((1.0)*x2391);
IkReal x2395=((1.0)*cj5*x2390);
evalcond[0]=((-1.0)*r02*x2390);
evalcond[1]=((((-1.0)*r02*x2394))+(((-1.0)*x2393)));
evalcond[2]=((((-1.0)*r20*x2395))+((r21*sj5*x2390)));
evalcond[3]=((((-1.0)*r10*x2395))+((x2390*x2392)));
evalcond[4]=((((-1.0)*cj1*sj2*x2393))+(((-1.0)*cj2*sj1*x2393))+((cj5*r10*x2391))+(((-1.0)*x2392*x2394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2396=IKPowWithIntegerCheck(r02,-1);
if(!x2396.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2396.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2397=IKsin(j4);
IkReal x2398=IKcos(j4);
IkReal x2399=((1.0)*sj0);
IkReal x2400=(cj5*x2398);
IkReal x2401=(sj5*x2397);
IkReal x2402=((1.0)*sj5*x2398);
IkReal x2403=((1.0)*cj5*x2397);
evalcond[0]=((-1.0)*r02*x2397);
evalcond[1]=(((r21*x2401))+(((-1.0)*r20*x2403)));
evalcond[2]=(((r11*x2401))+(((-1.0)*r10*x2403)));
evalcond[3]=(((r20*x2400))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x2402)));
evalcond[4]=(((r10*x2400))+(((-1.0)*cj1*sj2*x2399))+(((-1.0)*cj2*sj1*x2399))+(((-1.0)*r11*x2402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2404=((1.0)*sj0);
IkReal x2405=((1.0)*cj0);
CheckValue<IkReal> x2406 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2405))+(((-1.0)*r12*x2404)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2405))+(((-1.0)*r11*sj5*x2404)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2406.valid){
continue;
}
CheckValue<IkReal> x2407=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2406.value)+(((1.5707963267949)*(x2407.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2408=IKsin(j4);
IkReal x2409=IKcos(j4);
IkReal x2410=(cj5*r10);
IkReal x2411=(r01*sj5);
IkReal x2412=((1.0)*cj2);
IkReal x2413=(cj5*r00);
IkReal x2414=((1.0)*sj0);
IkReal x2415=(cj5*r20);
IkReal x2416=(cj1*sj2);
IkReal x2417=((1.0)*x2409);
IkReal x2418=((1.0)*x2408);
IkReal x2419=(sj5*x2408);
evalcond[0]=(((r21*x2419))+(((-1.0)*x2415*x2418))+(((-1.0)*r22*x2417)));
evalcond[1]=(((r11*x2419))+cj0+(((-1.0)*r12*x2417))+(((-1.0)*x2410*x2418)));
evalcond[2]=(((x2408*x2411))+(((-1.0)*r02*x2417))+(((-1.0)*x2414))+(((-1.0)*x2413*x2418)));
evalcond[3]=(((x2409*x2415))+((sj1*sj2))+(((-1.0)*r21*sj5*x2417))+(((-1.0)*cj1*x2412))+(((-1.0)*r22*x2418)));
evalcond[4]=((((-1.0)*cj0*x2416))+(((-1.0)*cj0*sj1*x2412))+((x2409*x2413))+(((-1.0)*x2411*x2417))+(((-1.0)*r02*x2418)));
evalcond[5]=((((-1.0)*x2414*x2416))+(((-1.0)*r12*x2418))+((x2409*x2410))+(((-1.0)*sj0*sj1*x2412))+(((-1.0)*r11*sj5*x2417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2420=((1.0)*cj5);
CheckValue<IkReal> x2421=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2420)))),-1);
if(!x2421.valid){
continue;
}
CheckValue<IkReal> x2422 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2420))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2421.value)))+(x2422.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2423=IKsin(j4);
IkReal x2424=IKcos(j4);
IkReal x2425=(cj5*r10);
IkReal x2426=(r01*sj5);
IkReal x2427=((1.0)*cj2);
IkReal x2428=(cj5*r00);
IkReal x2429=((1.0)*sj0);
IkReal x2430=(cj5*r20);
IkReal x2431=(cj1*sj2);
IkReal x2432=((1.0)*x2424);
IkReal x2433=((1.0)*x2423);
IkReal x2434=(sj5*x2423);
evalcond[0]=((((-1.0)*r22*x2432))+(((-1.0)*x2430*x2433))+((r21*x2434)));
evalcond[1]=((((-1.0)*x2425*x2433))+((r11*x2434))+cj0+(((-1.0)*r12*x2432)));
evalcond[2]=(((x2423*x2426))+(((-1.0)*r02*x2432))+(((-1.0)*x2428*x2433))+(((-1.0)*x2429)));
evalcond[3]=((((-1.0)*r22*x2433))+((x2424*x2430))+(((-1.0)*r21*sj5*x2432))+((sj1*sj2))+(((-1.0)*cj1*x2427)));
evalcond[4]=((((-1.0)*cj0*x2431))+(((-1.0)*x2426*x2432))+(((-1.0)*cj0*sj1*x2427))+(((-1.0)*r02*x2433))+((x2424*x2428)));
evalcond[5]=((((-1.0)*x2429*x2431))+((x2424*x2425))+(((-1.0)*r11*sj5*x2432))+(((-1.0)*sj0*sj1*x2427))+(((-1.0)*r12*x2433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2435=((1.0)*cj5);
CheckValue<IkReal> x2436 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2435)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2436.valid){
continue;
}
CheckValue<IkReal> x2437=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2435)))),-1);
if(!x2437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2436.value)+(((1.5707963267949)*(x2437.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2438=IKsin(j4);
IkReal x2439=IKcos(j4);
IkReal x2440=(cj5*r10);
IkReal x2441=(r01*sj5);
IkReal x2442=((1.0)*cj2);
IkReal x2443=(cj5*r00);
IkReal x2444=((1.0)*sj0);
IkReal x2445=(cj5*r20);
IkReal x2446=(cj1*sj2);
IkReal x2447=((1.0)*x2439);
IkReal x2448=((1.0)*x2438);
IkReal x2449=(sj5*x2438);
evalcond[0]=((((-1.0)*x2445*x2448))+(((-1.0)*r22*x2447))+((r21*x2449)));
evalcond[1]=(cj0+(((-1.0)*r12*x2447))+((r11*x2449))+(((-1.0)*x2440*x2448)));
evalcond[2]=((((-1.0)*x2443*x2448))+(((-1.0)*x2444))+(((-1.0)*r02*x2447))+((x2438*x2441)));
evalcond[3]=((((-1.0)*r21*sj5*x2447))+((sj1*sj2))+((x2439*x2445))+(((-1.0)*cj1*x2442))+(((-1.0)*r22*x2448)));
evalcond[4]=((((-1.0)*cj0*x2446))+(((-1.0)*cj0*sj1*x2442))+(((-1.0)*x2441*x2447))+((x2439*x2443))+(((-1.0)*r02*x2448)));
evalcond[5]=((((-1.0)*r11*sj5*x2447))+(((-1.0)*x2444*x2446))+(((-1.0)*r12*x2448))+((x2439*x2440))+(((-1.0)*sj0*sj1*x2442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2450=cj5*cj5;
IkReal x2451=r21*r21;
IkReal x2452=(sj1*sj2);
IkReal x2453=(r21*sj5);
IkReal x2454=(cj1*cj2);
IkReal x2455=(cj5*r20);
CheckValue<IkReal> x2456 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2454))+((r22*x2452)))),IkReal(((((-1.0)*x2452*x2455))+(((-1.0)*x2453*x2454))+((x2452*x2453))+((x2454*x2455)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2456.valid){
continue;
}
CheckValue<IkReal> x2457=IKPowWithIntegerCheck(IKsign((x2451+(((-1.0)*x2450*x2451))+(r22*r22)+(((-2.0)*x2453*x2455))+((x2450*(r20*r20))))),-1);
if(!x2457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2456.value)+(((1.5707963267949)*(x2457.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2458=IKsin(j4);
IkReal x2459=IKcos(j4);
IkReal x2460=(r21*sj5);
IkReal x2461=(cj5*r20);
IkReal x2462=((1.0)*x2459);
IkReal x2463=((1.0)*x2458);
evalcond[0]=(((x2458*x2460))+(((-1.0)*r22*x2462))+(((-1.0)*x2461*x2463)));
evalcond[1]=((((-1.0)*r22*x2463))+((x2459*x2461))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x2460*x2462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2464=(cj5*sj4);
IkReal x2465=(sj4*sj5);
if( IKabs((((r01*x2465))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2464)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2465))+((r10*x2464))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2465))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2464))))+IKsqr(((((-1.0)*r11*x2465))+((r10*x2464))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x2465))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2464))), ((((-1.0)*r11*x2465))+((r10*x2464))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2466=IKcos(j0);
IkReal x2467=IKsin(j0);
IkReal x2468=(cj4*cj5);
IkReal x2469=((0.1)*sj5);
IkReal x2470=((0.392)*sj1);
IkReal x2471=(cj5*r11);
IkReal x2472=(cj5*r01);
IkReal x2473=((1.0)*cj1);
IkReal x2474=(r11*sj5);
IkReal x2475=((1.0)*sj4);
IkReal x2476=((0.392)*cj2);
IkReal x2477=((1.0)*sj1);
IkReal x2478=((1.0)*cj4);
IkReal x2479=(r01*sj5);
IkReal x2480=(sj2*x2467);
IkReal x2481=(sj2*x2466);
IkReal x2482=(cj1*x2466);
IkReal x2483=(cj2*x2466);
IkReal x2484=(cj1*x2467);
IkReal x2485=(cj2*x2467);
evalcond[0]=(x2466+(((-1.0)*cj5*r10*x2475))+(((-1.0)*r12*x2478))+((sj4*x2474)));
evalcond[1]=(((sj4*x2479))+(((-1.0)*x2467))+(((-1.0)*cj5*r00*x2475))+(((-1.0)*r02*x2478)));
evalcond[2]=(((r00*sj5))+x2472+(((-1.0)*x2473*x2483))+((sj1*x2481)));
evalcond[3]=(x2471+((r10*sj5))+(((-1.0)*x2473*x2485))+((sj1*x2480)));
evalcond[4]=((((-1.0)*x2477*x2483))+(((-1.0)*x2473*x2481))+(((-1.0)*x2478*x2479))+(((-1.0)*r02*x2475))+((r00*x2468)));
evalcond[5]=((((-1.0)*r12*x2475))+(((-1.0)*x2477*x2485))+(((-1.0)*x2474*x2478))+(((-1.0)*x2473*x2480))+((r10*x2468)));
evalcond[6]=(((x2476*x2482))+(((-0.1)*x2472))+(((-1.0)*r00*x2469))+(((-0.134)*x2467))+(((-1.0)*px))+(((0.425)*x2482))+(((-1.0)*x2470*x2481)));
evalcond[7]=(((x2476*x2484))+(((-0.1)*x2471))+(((-1.0)*py))+(((0.134)*x2466))+(((0.425)*x2484))+(((-1.0)*r10*x2469))+(((-1.0)*x2470*x2480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2486=((1.0)*cj5);
IkReal x2487=((1.0)*sj5);
CheckValue<IkReal> x2488 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x2487))+(((-1.0)*r11*x2486)))),IkReal(((((-1.0)*r00*x2487))+(((-1.0)*r01*x2486)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2488.valid){
continue;
}
CheckValue<IkReal> x2489=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2489.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2488.value)+(((1.5707963267949)*(x2489.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2490=IKcos(j0);
IkReal x2491=IKsin(j0);
IkReal x2492=((0.1)*sj5);
IkReal x2493=(cj5*r11);
IkReal x2494=(cj5*r01);
IkReal x2495=(sj1*sj2);
IkReal x2496=(cj1*cj2);
IkReal x2497=((0.392)*x2491);
IkReal x2498=(cj1*x2490);
evalcond[0]=(((r00*sj5))+x2494+((x2490*x2495))+(((-1.0)*x2490*x2496)));
evalcond[1]=(x2493+((r10*sj5))+(((-1.0)*x2491*x2496))+((x2491*x2495)));
evalcond[2]=((((0.392)*x2490*x2496))+(((-0.134)*x2491))+(((-1.0)*r00*x2492))+(((-1.0)*px))+(((-0.1)*x2494))+(((-0.392)*x2490*x2495))+(((0.425)*x2498)));
evalcond[3]=((((-1.0)*x2495*x2497))+((x2496*x2497))+(((-1.0)*r10*x2492))+(((0.425)*cj1*x2491))+(((-1.0)*py))+(((-0.1)*x2493))+(((0.134)*x2490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2499=((1.0)*cj5);
IkReal x2500=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2499)));
j4eval[0]=x2500;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2499)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2500);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2501=((1.0)*cj5);
IkReal x2502=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2501)));
j4eval[0]=x2502;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x2501))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x2502);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2503=((1.0)*sj0);
IkReal x2504=((1.0)*cj0);
IkReal x2505=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2505;
j4eval[1]=((IKabs(((((-1.0)*r02*x2504))+(((-1.0)*r12*x2503)))))+(IKabs(((((-1.0)*r01*sj5*x2504))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x2503))))));
j4eval[2]=IKsign(x2505);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2506=((-1.0)*r20);
IkReal x2508 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2508)==0){
continue;
}
IkReal x2507=pow(x2508,-0.5);
CheckValue<IkReal> x2509 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2506),IKFAST_ATAN2_MAGTHRESH);
if(!x2509.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2509.value));
IkReal gconst79=(r21*x2507);
IkReal gconst80=(x2506*x2507);
CheckValue<IkReal> x2510 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2510.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2510.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2511=((-1.0)*r20);
IkReal x2512=x2507;
CheckValue<IkReal> x2514 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2511),IKFAST_ATAN2_MAGTHRESH);
if(!x2514.valid){
continue;
}
IkReal x2513=((-1.0)*(x2514.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2513;
IkReal gconst78=x2513;
IkReal gconst79=(r21*x2512);
IkReal gconst80=(x2511*x2512);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2515=((-1.0)*r20);
IkReal x2516=x2507;
CheckValue<IkReal> x2518 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2515),IKFAST_ATAN2_MAGTHRESH);
if(!x2518.valid){
continue;
}
IkReal x2517=((-1.0)*(x2518.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2517;
IkReal gconst78=x2517;
IkReal gconst79=(r21*x2516);
IkReal gconst80=(x2515*x2516);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2519=((-1.0)*r20);
IkReal x2520=x2507;
CheckValue<IkReal> x2522 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2519),IKFAST_ATAN2_MAGTHRESH);
if(!x2522.valid){
continue;
}
IkReal x2521=((-1.0)*(x2522.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2521;
IkReal gconst78=x2521;
IkReal gconst79=(r21*x2520);
IkReal gconst80=(x2519*x2520);
IkReal x2523=r22*r22;
CheckValue<IkReal> x2526=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2523))),-1);
if(!x2526.valid){
continue;
}
IkReal x2524=x2526.value;
IkReal x2525=(x2523+(((2.0)*x2524*(r20*r20)*(r21*r21)))+((x2524*(r21*r21*r21*r21)))+((x2524*(r20*r20*r20*r20))));
j4eval[0]=x2525;
j4eval[1]=IKsign(x2525);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2527=(sj1*sj2);
IkReal x2528=(gconst80*r20);
IkReal x2529=(gconst79*r21);
IkReal x2530=(cj1*cj2);
CheckValue<IkReal> x2531=IKPowWithIntegerCheck(IKsign(((x2528*x2528)+(r22*r22)+(x2529*x2529)+(((-2.0)*x2528*x2529)))),-1);
if(!x2531.valid){
continue;
}
CheckValue<IkReal> x2532 = IKatan2WithCheck(IkReal((((r22*x2527))+(((-1.0)*r22*x2530)))),IkReal((((x2527*x2529))+(((-1.0)*x2527*x2528))+(((-1.0)*x2529*x2530))+((x2528*x2530)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2531.value)))+(x2532.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2533=IKsin(j4);
IkReal x2534=IKcos(j4);
IkReal x2535=(gconst79*r01);
IkReal x2536=(gconst79*r21);
IkReal x2537=((1.0)*cj2);
IkReal x2538=(gconst79*r11);
IkReal x2539=((1.0)*sj0);
IkReal x2540=(cj1*sj2);
IkReal x2541=((1.0)*x2534);
IkReal x2542=(gconst80*x2534);
IkReal x2543=((1.0)*x2533);
IkReal x2544=(gconst80*x2543);
evalcond[0]=((((-1.0)*r20*x2544))+((x2533*x2536))+(((-1.0)*r22*x2541)));
evalcond[1]=((((-1.0)*r12*x2541))+(((-1.0)*r10*x2544))+cj0+((x2533*x2538)));
evalcond[2]=((((-1.0)*x2539))+((x2533*x2535))+(((-1.0)*r00*x2544))+(((-1.0)*r02*x2541)));
evalcond[3]=((((-1.0)*x2536*x2541))+((sj1*sj2))+((r20*x2542))+(((-1.0)*r22*x2543))+(((-1.0)*cj1*x2537)));
evalcond[4]=((((-1.0)*cj0*sj1*x2537))+((r00*x2542))+(((-1.0)*x2535*x2541))+(((-1.0)*cj0*x2540))+(((-1.0)*r02*x2543)));
evalcond[5]=((((-1.0)*r12*x2543))+(((-1.0)*sj0*sj1*x2537))+(((-1.0)*x2539*x2540))+(((-1.0)*x2538*x2541))+((r10*x2542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2545=((1.0)*gconst80);
CheckValue<IkReal> x2546=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2545))+(((-1.0)*gconst79*r10)))),-1);
if(!x2546.valid){
continue;
}
CheckValue<IkReal> x2547 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*r20*sj0*x2545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2546.value)))+(x2547.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2548=IKsin(j4);
IkReal x2549=IKcos(j4);
IkReal x2550=(gconst79*r01);
IkReal x2551=(gconst79*r21);
IkReal x2552=((1.0)*cj2);
IkReal x2553=(gconst79*r11);
IkReal x2554=((1.0)*sj0);
IkReal x2555=(cj1*sj2);
IkReal x2556=((1.0)*x2549);
IkReal x2557=(gconst80*x2549);
IkReal x2558=((1.0)*x2548);
IkReal x2559=(gconst80*x2558);
evalcond[0]=((((-1.0)*r20*x2559))+((x2548*x2551))+(((-1.0)*r22*x2556)));
evalcond[1]=(cj0+(((-1.0)*r12*x2556))+((x2548*x2553))+(((-1.0)*r10*x2559)));
evalcond[2]=(((x2548*x2550))+(((-1.0)*r02*x2556))+(((-1.0)*r00*x2559))+(((-1.0)*x2554)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2552))+((r20*x2557))+(((-1.0)*x2551*x2556))+(((-1.0)*r22*x2558)));
evalcond[4]=((((-1.0)*cj0*sj1*x2552))+(((-1.0)*x2550*x2556))+(((-1.0)*cj0*x2555))+((r00*x2557))+(((-1.0)*r02*x2558)));
evalcond[5]=((((-1.0)*x2554*x2555))+(((-1.0)*r12*x2558))+(((-1.0)*sj0*sj1*x2552))+(((-1.0)*x2553*x2556))+((r10*x2557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2560=((1.0)*gconst80);
CheckValue<IkReal> x2561 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x2560)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2561.valid){
continue;
}
CheckValue<IkReal> x2562=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2560))+(((-1.0)*gconst79*r00)))),-1);
if(!x2562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2561.value)+(((1.5707963267949)*(x2562.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2563=IKsin(j4);
IkReal x2564=IKcos(j4);
IkReal x2565=(gconst79*r01);
IkReal x2566=(gconst79*r21);
IkReal x2567=((1.0)*cj2);
IkReal x2568=(gconst79*r11);
IkReal x2569=((1.0)*sj0);
IkReal x2570=(cj1*sj2);
IkReal x2571=((1.0)*x2564);
IkReal x2572=(gconst80*x2564);
IkReal x2573=((1.0)*x2563);
IkReal x2574=(gconst80*x2573);
evalcond[0]=(((x2563*x2566))+(((-1.0)*r20*x2574))+(((-1.0)*r22*x2571)));
evalcond[1]=((((-1.0)*r10*x2574))+(((-1.0)*r12*x2571))+cj0+((x2563*x2568)));
evalcond[2]=((((-1.0)*x2569))+((x2563*x2565))+(((-1.0)*r02*x2571))+(((-1.0)*r00*x2574)));
evalcond[3]=((((-1.0)*cj1*x2567))+(((-1.0)*x2566*x2571))+((sj1*sj2))+((r20*x2572))+(((-1.0)*r22*x2573)));
evalcond[4]=((((-1.0)*cj0*x2570))+(((-1.0)*cj0*sj1*x2567))+((r00*x2572))+(((-1.0)*r02*x2573))+(((-1.0)*x2565*x2571)));
evalcond[5]=((((-1.0)*x2569*x2570))+((r10*x2572))+(((-1.0)*r12*x2573))+(((-1.0)*x2568*x2571))+(((-1.0)*sj0*sj1*x2567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2575=((-1.0)*r21);
IkReal x2577 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2577)==0){
continue;
}
IkReal x2576=pow(x2577,-0.5);
CheckValue<IkReal> x2578 = IKatan2WithCheck(IkReal(x2575),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2578.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2578.value))));
IkReal gconst82=(x2575*x2576);
IkReal gconst83=((1.0)*r20*x2576);
CheckValue<IkReal> x2579 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2579.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2579.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2580=((-1.0)*r21);
CheckValue<IkReal> x2583 = IKatan2WithCheck(IkReal(x2580),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2583.valid){
continue;
}
IkReal x2581=((1.0)*(x2583.value));
IkReal x2582=x2576;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2581)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2581)));
IkReal gconst82=(x2580*x2582);
IkReal gconst83=((1.0)*r20*x2582);
IkReal x2584=r22*r22;
IkReal x2585=((1.0)*x2584);
CheckValue<IkReal> x2589=IKPowWithIntegerCheck(((-1.0)+x2584),-1);
if(!x2589.valid){
continue;
}
IkReal x2586=x2589.value;
if((((1.0)+(((-1.0)*x2585)))) < -0.00001)
continue;
IkReal x2587=IKsqrt(((1.0)+(((-1.0)*x2585))));
IkReal x2588=(cj0*x2586*x2587);
j4eval[0]=((IKabs((x2588+(((-1.0)*x2585*x2588)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2590=((-1.0)*r21);
CheckValue<IkReal> x2593 = IKatan2WithCheck(IkReal(x2590),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2593.valid){
continue;
}
IkReal x2591=((1.0)*(x2593.value));
IkReal x2592=x2576;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2591)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2591)));
IkReal gconst82=(x2590*x2592);
IkReal gconst83=((1.0)*r20*x2592);
IkReal x2594=r22*r22;
IkReal x2595=((1.0)*x2594);
CheckValue<IkReal> x2599=IKPowWithIntegerCheck(((-1.0)+x2594),-1);
if(!x2599.valid){
continue;
}
IkReal x2596=x2599.value;
if((((1.0)+(((-1.0)*x2595)))) < -0.00001)
continue;
IkReal x2597=IKsqrt(((1.0)+(((-1.0)*x2595))));
IkReal x2598=(sj0*x2596*x2597);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2598+(((-1.0)*x2595*x2598))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2600=((-1.0)*r21);
CheckValue<IkReal> x2603 = IKatan2WithCheck(IkReal(x2600),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2603.valid){
continue;
}
IkReal x2601=((1.0)*(x2603.value));
IkReal x2602=x2576;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2601)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2601)));
IkReal gconst82=(x2600*x2602);
IkReal gconst83=((1.0)*r20*x2602);
IkReal x2604=r22*r22;
IkReal x2605=(r12*sj0);
IkReal x2606=(cj0*r02);
CheckValue<IkReal> x2610=IKPowWithIntegerCheck(((-1.0)+x2604),-1);
if(!x2610.valid){
continue;
}
IkReal x2607=x2610.value;
if((((1.0)+(((-1.0)*x2604)))) < -0.00001)
continue;
IkReal x2608=IKsqrt(((1.0)+(((-1.0)*x2604))));
IkReal x2609=(r22*x2607*x2608);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x2605))+(((-1.0)*x2606)))))+(IKabs((((x2606*x2609))+((x2605*x2609))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2611=((1.0)*sj0);
IkReal x2612=((1.0)*cj0);
CheckValue<IkReal> x2613=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2613.valid){
continue;
}
CheckValue<IkReal> x2614 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2611))+(((-1.0)*r02*x2612)))),IkReal(((((-1.0)*gconst82*r01*x2612))+(((-1.0)*gconst82*r11*x2611))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2613.value)))+(x2614.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2615=IKsin(j4);
IkReal x2616=IKcos(j4);
IkReal x2617=(gconst82*r11);
IkReal x2618=((1.0)*cj2);
IkReal x2619=((1.0)*sj0);
IkReal x2620=(cj1*sj2);
IkReal x2621=((1.0)*x2616);
IkReal x2622=(gconst83*x2616);
IkReal x2623=(gconst82*x2615);
IkReal x2624=((1.0)*x2615);
evalcond[0]=((((-1.0)*gconst83*r20*x2624))+(((-1.0)*r22*x2621))+((r21*x2623)));
evalcond[1]=((((-1.0)*gconst83*r10*x2624))+cj0+(((-1.0)*r12*x2621))+((x2615*x2617)));
evalcond[2]=(((r01*x2623))+(((-1.0)*gconst83*r00*x2624))+(((-1.0)*r02*x2621))+(((-1.0)*x2619)));
evalcond[3]=(((r20*x2622))+(((-1.0)*gconst82*r21*x2621))+((sj1*sj2))+(((-1.0)*r22*x2624))+(((-1.0)*cj1*x2618)));
evalcond[4]=(((r00*x2622))+(((-1.0)*gconst82*r01*x2621))+(((-1.0)*cj0*x2620))+(((-1.0)*cj0*sj1*x2618))+(((-1.0)*r02*x2624)));
evalcond[5]=((((-1.0)*x2619*x2620))+(((-1.0)*x2617*x2621))+(((-1.0)*r12*x2624))+(((-1.0)*sj0*sj1*x2618))+((r10*x2622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2625=((1.0)*gconst83);
CheckValue<IkReal> x2626 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2625))+((gconst82*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2626.valid){
continue;
}
CheckValue<IkReal> x2627=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2625))+(((-1.0)*gconst82*r10)))),-1);
if(!x2627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2626.value)+(((1.5707963267949)*(x2627.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2628=IKsin(j4);
IkReal x2629=IKcos(j4);
IkReal x2630=(gconst82*r11);
IkReal x2631=((1.0)*cj2);
IkReal x2632=((1.0)*sj0);
IkReal x2633=(cj1*sj2);
IkReal x2634=((1.0)*x2629);
IkReal x2635=(gconst83*x2629);
IkReal x2636=(gconst82*x2628);
IkReal x2637=((1.0)*x2628);
evalcond[0]=(((r21*x2636))+(((-1.0)*gconst83*r20*x2637))+(((-1.0)*r22*x2634)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x2637))+((x2628*x2630))+(((-1.0)*r12*x2634)));
evalcond[2]=((((-1.0)*r02*x2634))+(((-1.0)*gconst83*r00*x2637))+(((-1.0)*x2632))+((r01*x2636)));
evalcond[3]=((((-1.0)*cj1*x2631))+((sj1*sj2))+((r20*x2635))+(((-1.0)*gconst82*r21*x2634))+(((-1.0)*r22*x2637)));
evalcond[4]=((((-1.0)*cj0*sj1*x2631))+(((-1.0)*r02*x2637))+(((-1.0)*gconst82*r01*x2634))+((r00*x2635))+(((-1.0)*cj0*x2633)));
evalcond[5]=((((-1.0)*sj0*sj1*x2631))+((r10*x2635))+(((-1.0)*x2632*x2633))+(((-1.0)*r12*x2637))+(((-1.0)*x2630*x2634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2638=((1.0)*gconst83);
CheckValue<IkReal> x2639=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2638))+(((-1.0)*gconst82*r00)))),-1);
if(!x2639.valid){
continue;
}
CheckValue<IkReal> x2640 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2638)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2640.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2639.value)))+(x2640.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2641=IKsin(j4);
IkReal x2642=IKcos(j4);
IkReal x2643=(gconst82*r11);
IkReal x2644=((1.0)*cj2);
IkReal x2645=((1.0)*sj0);
IkReal x2646=(cj1*sj2);
IkReal x2647=((1.0)*x2642);
IkReal x2648=(gconst83*x2642);
IkReal x2649=(gconst82*x2641);
IkReal x2650=((1.0)*x2641);
evalcond[0]=((((-1.0)*gconst83*r20*x2650))+(((-1.0)*r22*x2647))+((r21*x2649)));
evalcond[1]=((((-1.0)*r12*x2647))+cj0+(((-1.0)*gconst83*r10*x2650))+((x2641*x2643)));
evalcond[2]=((((-1.0)*r02*x2647))+((r01*x2649))+(((-1.0)*x2645))+(((-1.0)*gconst83*r00*x2650)));
evalcond[3]=((((-1.0)*r22*x2650))+(((-1.0)*cj1*x2644))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2647))+((r20*x2648)));
evalcond[4]=((((-1.0)*r02*x2650))+(((-1.0)*cj0*sj1*x2644))+(((-1.0)*gconst82*r01*x2647))+((r00*x2648))+(((-1.0)*cj0*x2646)));
evalcond[5]=((((-1.0)*r12*x2650))+(((-1.0)*x2645*x2646))+((r10*x2648))+(((-1.0)*sj0*sj1*x2644))+(((-1.0)*x2643*x2647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2651=((-1.0)*r10);
IkReal x2653 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2653)==0){
continue;
}
IkReal x2652=pow(x2653,-0.5);
CheckValue<IkReal> x2654 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2651),IKFAST_ATAN2_MAGTHRESH);
if(!x2654.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2654.value));
IkReal gconst85=(r11*x2652);
IkReal gconst86=(x2651*x2652);
CheckValue<IkReal> x2655 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2655.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2655.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2656=((-1.0)*r10);
IkReal x2657=x2652;
CheckValue<IkReal> x2659 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2656),IKFAST_ATAN2_MAGTHRESH);
if(!x2659.valid){
continue;
}
IkReal x2658=((-1.0)*(x2659.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2658;
IkReal gconst84=x2658;
IkReal gconst85=(r11*x2657);
IkReal gconst86=(x2656*x2657);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2660=((1.0)*sj0);
IkReal x2661=((1.0)*gconst85);
CheckValue<IkReal> x2662=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2661)))),-1);
if(!x2662.valid){
continue;
}
CheckValue<IkReal> x2663 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2660))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x2661))+(((-1.0)*gconst85*r11*x2660))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2663.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2662.value)))+(x2663.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2664=IKsin(j4);
IkReal x2665=IKcos(j4);
IkReal x2666=(gconst85*r21);
IkReal x2667=(gconst86*r00);
IkReal x2668=(gconst86*r10);
IkReal x2669=((1.0)*cj2);
IkReal x2670=(gconst85*r11);
IkReal x2671=(gconst85*r01);
IkReal x2672=((1.0)*sj0);
IkReal x2673=(gconst86*r20);
IkReal x2674=(cj1*sj2);
IkReal x2675=((1.0)*x2665);
IkReal x2676=((1.0)*x2664);
evalcond[0]=((((-1.0)*x2673*x2676))+((x2664*x2666))+(((-1.0)*r22*x2675)));
evalcond[1]=((((-1.0)*r12*x2675))+cj0+((x2664*x2670))+(((-1.0)*x2668*x2676)));
evalcond[2]=(((x2664*x2671))+(((-1.0)*r02*x2675))+(((-1.0)*x2672))+(((-1.0)*x2667*x2676)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2669))+(((-1.0)*x2666*x2675))+(((-1.0)*r22*x2676))+((x2665*x2673)));
evalcond[4]=((((-1.0)*cj0*x2674))+(((-1.0)*cj0*sj1*x2669))+(((-1.0)*r02*x2676))+(((-1.0)*x2671*x2675))+((x2665*x2667)));
evalcond[5]=((((-1.0)*r12*x2676))+(((-1.0)*x2670*x2675))+(((-1.0)*sj0*sj1*x2669))+(((-1.0)*x2672*x2674))+((x2665*x2668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2677=((1.0)*gconst86);
CheckValue<IkReal> x2678 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst85*r21))+(((-1.0)*cj0*r20*x2677)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2678.valid){
continue;
}
CheckValue<IkReal> x2679=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2677))+(((-1.0)*gconst85*r00)))),-1);
if(!x2679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2678.value)+(((1.5707963267949)*(x2679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2680=IKsin(j4);
IkReal x2681=IKcos(j4);
IkReal x2682=(gconst85*r21);
IkReal x2683=(gconst86*r00);
IkReal x2684=(gconst86*r10);
IkReal x2685=((1.0)*cj2);
IkReal x2686=(gconst85*r11);
IkReal x2687=(gconst85*r01);
IkReal x2688=((1.0)*sj0);
IkReal x2689=(gconst86*r20);
IkReal x2690=(cj1*sj2);
IkReal x2691=((1.0)*x2681);
IkReal x2692=((1.0)*x2680);
evalcond[0]=((((-1.0)*r22*x2691))+(((-1.0)*x2689*x2692))+((x2680*x2682)));
evalcond[1]=(cj0+(((-1.0)*x2684*x2692))+(((-1.0)*r12*x2691))+((x2680*x2686)));
evalcond[2]=((((-1.0)*x2683*x2692))+(((-1.0)*r02*x2691))+(((-1.0)*x2688))+((x2680*x2687)));
evalcond[3]=((((-1.0)*cj1*x2685))+(((-1.0)*x2682*x2691))+((sj1*sj2))+(((-1.0)*r22*x2692))+((x2681*x2689)));
evalcond[4]=((((-1.0)*cj0*x2690))+(((-1.0)*r02*x2692))+((x2681*x2683))+(((-1.0)*x2687*x2691))+(((-1.0)*cj0*sj1*x2685)));
evalcond[5]=((((-1.0)*x2688*x2690))+(((-1.0)*x2686*x2691))+((x2681*x2684))+(((-1.0)*r12*x2692))+(((-1.0)*sj0*sj1*x2685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2693=((-1.0)*r11);
IkReal x2695 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2695)==0){
continue;
}
IkReal x2694=pow(x2695,-0.5);
CheckValue<IkReal> x2696 = IKatan2WithCheck(IkReal(x2693),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2696.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2696.value))));
IkReal gconst88=(x2693*x2694);
IkReal gconst89=((1.0)*r10*x2694);
CheckValue<IkReal> x2697 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2697.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2697.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2698=((-1.0)*r11);
CheckValue<IkReal> x2701 = IKatan2WithCheck(IkReal(x2698),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2701.valid){
continue;
}
IkReal x2699=((1.0)*(x2701.value));
IkReal x2700=x2694;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2699)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2699)));
IkReal gconst88=(x2698*x2700);
IkReal gconst89=((1.0)*r10*x2700);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2702=((-1.0)*r11);
CheckValue<IkReal> x2705 = IKatan2WithCheck(IkReal(x2702),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2705.valid){
continue;
}
IkReal x2703=((1.0)*(x2705.value));
IkReal x2704=x2694;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2703)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2703)));
IkReal gconst88=(x2702*x2704);
IkReal gconst89=((1.0)*r10*x2704);
IkReal x2706=r12*r12;
IkReal x2707=((1.0)*sj0);
IkReal x2708=(cj0*r02);
IkReal x2709=x2694;
j4eval[0]=((IKabs(((((-1.0)*x2707*x2709))+((r12*x2708*x2709))+((sj0*x2706*x2709)))))+(IKabs(((((-1.0)*r12*x2707))+(((-1.0)*x2708))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2710=((-1.0)*r11);
CheckValue<IkReal> x2713 = IKatan2WithCheck(IkReal(x2710),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2713.valid){
continue;
}
IkReal x2711=((1.0)*(x2713.value));
IkReal x2712=x2694;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2711)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2711)));
IkReal gconst88=(x2710*x2712);
IkReal gconst89=((1.0)*r10*x2712);
IkReal x2714=r12*r12;
IkReal x2715=(cj1*cj2*r22);
IkReal x2716=(r22*sj1*sj2);
CheckValue<IkReal> x2720=IKPowWithIntegerCheck(((-1.0)+x2714),-1);
if(!x2720.valid){
continue;
}
IkReal x2717=x2720.value;
if((((1.0)+(((-1.0)*x2714)))) < -0.00001)
continue;
IkReal x2718=IKsqrt(((1.0)+(((-1.0)*x2714))));
IkReal x2719=(r12*x2717*x2718);
j4eval[0]=((IKabs((x2716+(((-1.0)*x2715)))))+(IKabs(((((-1.0)*x2716*x2719))+((x2715*x2719))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2721=(cj1*cj2);
IkReal x2722=(gconst89*r20);
IkReal x2723=(gconst88*r21);
IkReal x2724=(sj1*sj2);
CheckValue<IkReal> x2725 = IKatan2WithCheck(IkReal((((r22*x2724))+(((-1.0)*r22*x2721)))),IkReal(((((-1.0)*x2722*x2724))+((x2721*x2722))+(((-1.0)*x2721*x2723))+((x2723*x2724)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2725.valid){
continue;
}
CheckValue<IkReal> x2726=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x2722*x2723))+(x2722*x2722)+(x2723*x2723))),-1);
if(!x2726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2725.value)+(((1.5707963267949)*(x2726.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2727=IKsin(j4);
IkReal x2728=IKcos(j4);
IkReal x2729=((1.0)*sj0);
IkReal x2730=((1.0)*cj2);
IkReal x2731=(gconst89*r20);
IkReal x2732=(gconst89*r10);
IkReal x2733=(gconst89*r00);
IkReal x2734=(cj1*sj2);
IkReal x2735=((1.0)*x2728);
IkReal x2736=((1.0)*x2727);
IkReal x2737=(gconst88*x2727);
evalcond[0]=((((-1.0)*x2731*x2736))+((r21*x2737))+(((-1.0)*r22*x2735)));
evalcond[1]=(cj0+(((-1.0)*r12*x2735))+(((-1.0)*x2732*x2736))+((r11*x2737)));
evalcond[2]=((((-1.0)*x2733*x2736))+((r01*x2737))+(((-1.0)*r02*x2735))+(((-1.0)*x2729)));
evalcond[3]=(((sj1*sj2))+((x2728*x2731))+(((-1.0)*r22*x2736))+(((-1.0)*gconst88*r21*x2735))+(((-1.0)*cj1*x2730)));
evalcond[4]=((((-1.0)*cj0*sj1*x2730))+(((-1.0)*cj0*x2734))+((x2728*x2733))+(((-1.0)*r02*x2736))+(((-1.0)*gconst88*r01*x2735)));
evalcond[5]=((((-1.0)*cj2*sj1*x2729))+((x2728*x2732))+(((-1.0)*r12*x2736))+(((-1.0)*gconst88*r11*x2735))+(((-1.0)*x2729*x2734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2738=((1.0)*sj0);
IkReal x2739=((1.0)*cj0);
CheckValue<IkReal> x2740 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2739))+(((-1.0)*r12*x2738)))),IkReal((((cj0*gconst89*r00))+(((-1.0)*gconst88*r01*x2739))+(((-1.0)*gconst88*r11*x2738))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2740.valid){
continue;
}
CheckValue<IkReal> x2741=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2740.value)+(((1.5707963267949)*(x2741.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2742=IKsin(j4);
IkReal x2743=IKcos(j4);
IkReal x2744=((1.0)*sj0);
IkReal x2745=((1.0)*cj2);
IkReal x2746=(gconst89*r20);
IkReal x2747=(gconst89*r10);
IkReal x2748=(gconst89*r00);
IkReal x2749=(cj1*sj2);
IkReal x2750=((1.0)*x2743);
IkReal x2751=((1.0)*x2742);
IkReal x2752=(gconst88*x2742);
evalcond[0]=((((-1.0)*r22*x2750))+((r21*x2752))+(((-1.0)*x2746*x2751)));
evalcond[1]=(((r11*x2752))+cj0+(((-1.0)*r12*x2750))+(((-1.0)*x2747*x2751)));
evalcond[2]=((((-1.0)*x2748*x2751))+((r01*x2752))+(((-1.0)*x2744))+(((-1.0)*r02*x2750)));
evalcond[3]=((((-1.0)*r22*x2751))+((x2743*x2746))+(((-1.0)*gconst88*r21*x2750))+((sj1*sj2))+(((-1.0)*cj1*x2745)));
evalcond[4]=((((-1.0)*gconst88*r01*x2750))+((x2743*x2748))+(((-1.0)*cj0*x2749))+(((-1.0)*r02*x2751))+(((-1.0)*cj0*sj1*x2745)));
evalcond[5]=((((-1.0)*gconst88*r11*x2750))+(((-1.0)*x2744*x2749))+((x2743*x2747))+(((-1.0)*cj2*sj1*x2744))+(((-1.0)*r12*x2751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2753=((1.0)*gconst89);
CheckValue<IkReal> x2754=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2753))+(((-1.0)*gconst88*r00)))),-1);
if(!x2754.valid){
continue;
}
CheckValue<IkReal> x2755 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2753))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2754.value)))+(x2755.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2756=IKsin(j4);
IkReal x2757=IKcos(j4);
IkReal x2758=((1.0)*sj0);
IkReal x2759=((1.0)*cj2);
IkReal x2760=(gconst89*r20);
IkReal x2761=(gconst89*r10);
IkReal x2762=(gconst89*r00);
IkReal x2763=(cj1*sj2);
IkReal x2764=((1.0)*x2757);
IkReal x2765=((1.0)*x2756);
IkReal x2766=(gconst88*x2756);
evalcond[0]=((((-1.0)*x2760*x2765))+((r21*x2766))+(((-1.0)*r22*x2764)));
evalcond[1]=(cj0+(((-1.0)*r12*x2764))+(((-1.0)*x2761*x2765))+((r11*x2766)));
evalcond[2]=(((r01*x2766))+(((-1.0)*x2762*x2765))+(((-1.0)*r02*x2764))+(((-1.0)*x2758)));
evalcond[3]=(((x2757*x2760))+(((-1.0)*gconst88*r21*x2764))+((sj1*sj2))+(((-1.0)*cj1*x2759))+(((-1.0)*r22*x2765)));
evalcond[4]=(((x2757*x2762))+(((-1.0)*cj0*x2763))+(((-1.0)*gconst88*r01*x2764))+(((-1.0)*r02*x2765))+(((-1.0)*cj0*sj1*x2759)));
evalcond[5]=((((-1.0)*r12*x2765))+((x2757*x2761))+(((-1.0)*cj2*sj1*x2758))+(((-1.0)*x2758*x2763))+(((-1.0)*gconst88*r11*x2764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2767=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2767;
j4eval[1]=IKsign(x2767);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2768=((1.0)*cj5);
IkReal x2769=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2768)));
j4eval[0]=x2769;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2768))))));
j4eval[2]=IKsign(x2769);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2770=cj5*cj5;
IkReal x2771=r11*r11;
IkReal x2772=(r11*sj5);
IkReal x2773=(cj5*r10);
IkReal x2774=(x2771+((x2770*(r10*r10)))+(r12*r12)+(((-2.0)*x2772*x2773))+(((-1.0)*x2770*x2771)));
j4eval[0]=x2774;
j4eval[1]=IKsign(x2774);
j4eval[2]=((IKabs(r12))+(IKabs((x2773+(((-1.0)*x2772))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2775=cj5*cj5;
IkReal x2776=r11*r11;
IkReal x2777=(cj5*r10);
IkReal x2778=(r11*sj5);
CheckValue<IkReal> x2779 = IKatan2WithCheck(IkReal((x2777+(((-1.0)*x2778)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2779.valid){
continue;
}
CheckValue<IkReal> x2780=IKPowWithIntegerCheck(IKsign((x2776+(((-1.0)*x2775*x2776))+(r12*r12)+((x2775*(r10*r10)))+(((-2.0)*x2777*x2778)))),-1);
if(!x2780.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2779.value)+(((1.5707963267949)*(x2780.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2781=IKsin(j4);
IkReal x2782=IKcos(j4);
IkReal x2783=(cj5*r10);
IkReal x2784=(r01*sj5);
IkReal x2785=((1.0)*cj2);
IkReal x2786=(cj5*r00);
IkReal x2787=(cj5*r20);
IkReal x2788=((1.0)*x2782);
IkReal x2789=((1.0)*x2781);
IkReal x2790=(sj5*x2781);
evalcond[0]=((((-1.0)*x2787*x2789))+((r21*x2790))+(((-1.0)*r22*x2788)));
evalcond[1]=(((x2781*x2784))+(((-1.0)*x2786*x2789))+(((-1.0)*r02*x2788)));
evalcond[2]=((((-1.0)*r12*x2789))+((x2782*x2783))+(((-1.0)*r11*sj5*x2788)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2788))+(((-1.0)*x2783*x2789))+((r11*x2790)));
evalcond[4]=((((-1.0)*cj1*x2785))+(((-1.0)*r21*sj5*x2788))+((sj1*sj2))+((x2782*x2787))+(((-1.0)*r22*x2789)));
evalcond[5]=((((-1.0)*x2784*x2788))+(((-1.0)*sj1*x2785))+(((-1.0)*cj1*sj2))+((x2782*x2786))+(((-1.0)*r02*x2789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2791=((1.0)*cj5);
CheckValue<IkReal> x2792=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2791)))),-1);
if(!x2792.valid){
continue;
}
CheckValue<IkReal> x2793 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x2791))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2792.value)))+(x2793.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2794=IKsin(j4);
IkReal x2795=IKcos(j4);
IkReal x2796=(cj5*r10);
IkReal x2797=(r01*sj5);
IkReal x2798=((1.0)*cj2);
IkReal x2799=(cj5*r00);
IkReal x2800=(cj5*r20);
IkReal x2801=((1.0)*x2795);
IkReal x2802=((1.0)*x2794);
IkReal x2803=(sj5*x2794);
evalcond[0]=((((-1.0)*x2800*x2802))+(((-1.0)*r22*x2801))+((r21*x2803)));
evalcond[1]=(((x2794*x2797))+(((-1.0)*x2799*x2802))+(((-1.0)*r02*x2801)));
evalcond[2]=(((x2795*x2796))+(((-1.0)*r12*x2802))+(((-1.0)*r11*sj5*x2801)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2801))+(((-1.0)*x2796*x2802))+((r11*x2803)));
evalcond[4]=((((-1.0)*r21*sj5*x2801))+((sj1*sj2))+(((-1.0)*r22*x2802))+((x2795*x2800))+(((-1.0)*cj1*x2798)));
evalcond[5]=((((-1.0)*sj1*x2798))+((x2795*x2799))+(((-1.0)*cj1*sj2))+(((-1.0)*x2797*x2801))+(((-1.0)*r02*x2802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2804=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2804.valid){
continue;
}
CheckValue<IkReal> x2805 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2804.value)))+(x2805.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2806=IKsin(j4);
IkReal x2807=IKcos(j4);
IkReal x2808=(cj5*r10);
IkReal x2809=(r01*sj5);
IkReal x2810=((1.0)*cj2);
IkReal x2811=(cj5*r00);
IkReal x2812=(cj5*r20);
IkReal x2813=((1.0)*x2807);
IkReal x2814=((1.0)*x2806);
IkReal x2815=(sj5*x2806);
evalcond[0]=((((-1.0)*x2812*x2814))+((r21*x2815))+(((-1.0)*r22*x2813)));
evalcond[1]=((((-1.0)*r02*x2813))+((x2806*x2809))+(((-1.0)*x2811*x2814)));
evalcond[2]=((((-1.0)*r12*x2814))+(((-1.0)*r11*sj5*x2813))+((x2807*x2808)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2813))+((r11*x2815))+(((-1.0)*x2808*x2814)));
evalcond[4]=((((-1.0)*cj1*x2810))+((sj1*sj2))+(((-1.0)*r22*x2814))+(((-1.0)*r21*sj5*x2813))+((x2807*x2812)));
evalcond[5]=((((-1.0)*r02*x2814))+(((-1.0)*x2809*x2813))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2810))+((x2807*x2811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2816=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2816;
j4eval[1]=IKsign(x2816);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2817=((1.0)*cj5);
IkReal x2818=((((-1.0)*r21*x2817))+(((-1.0)*r20*sj5)));
j4eval[0]=x2818;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x2817)))))+(IKabs(r02)));
j4eval[2]=IKsign(x2818);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2819=cj5*cj5;
IkReal x2820=r11*r11;
IkReal x2821=(cj5*r10);
IkReal x2822=(r11*sj5);
IkReal x2823=(((x2819*x2820))+(((-1.0)*x2819*(r10*r10)))+(((-1.0)*x2820))+(((-1.0)*(r12*r12)))+(((2.0)*x2821*x2822)));
j4eval[0]=x2823;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2822))+x2821))));
j4eval[2]=IKsign(x2823);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2824=cj5*cj5;
IkReal x2825=r11*r11;
IkReal x2826=(cj5*r10);
IkReal x2827=(r11*sj5);
CheckValue<IkReal> x2828=IKPowWithIntegerCheck(IKsign((((x2824*x2825))+(((-1.0)*x2825))+(((-1.0)*(r12*r12)))+(((-1.0)*x2824*(r10*r10)))+(((2.0)*x2826*x2827)))),-1);
if(!x2828.valid){
continue;
}
CheckValue<IkReal> x2829 = IKatan2WithCheck(IkReal(((((-1.0)*x2827))+x2826)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2828.value)))+(x2829.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2830=IKsin(j4);
IkReal x2831=IKcos(j4);
IkReal x2832=(cj5*r10);
IkReal x2833=(r01*sj5);
IkReal x2834=(cj5*r00);
IkReal x2835=(cj5*r20);
IkReal x2836=((1.0)*x2831);
IkReal x2837=((1.0)*x2830);
IkReal x2838=(sj5*x2830);
evalcond[0]=((((-1.0)*r22*x2836))+(((-1.0)*x2835*x2837))+((r21*x2838)));
evalcond[1]=((((-1.0)*x2834*x2837))+((x2830*x2833))+(((-1.0)*r02*x2836)));
evalcond[2]=(((x2831*x2832))+(((-1.0)*r12*x2837))+(((-1.0)*r11*sj5*x2836)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2836))+(((-1.0)*x2832*x2837))+((r11*x2838)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2831*x2834))+(((-1.0)*x2833*x2836))+(((-1.0)*r02*x2837)));
evalcond[5]=((((-1.0)*r21*sj5*x2836))+((x2831*x2835))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2839=((1.0)*cj5);
CheckValue<IkReal> x2840 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x2839))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2840.valid){
continue;
}
CheckValue<IkReal> x2841=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2839))+(((-1.0)*r20*sj5)))),-1);
if(!x2841.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2840.value)+(((1.5707963267949)*(x2841.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2842=IKsin(j4);
IkReal x2843=IKcos(j4);
IkReal x2844=(cj5*r10);
IkReal x2845=(r01*sj5);
IkReal x2846=(cj5*r00);
IkReal x2847=(cj5*r20);
IkReal x2848=((1.0)*x2843);
IkReal x2849=((1.0)*x2842);
IkReal x2850=(sj5*x2842);
evalcond[0]=(((r21*x2850))+(((-1.0)*r22*x2848))+(((-1.0)*x2847*x2849)));
evalcond[1]=((((-1.0)*x2846*x2849))+((x2842*x2845))+(((-1.0)*r02*x2848)));
evalcond[2]=((((-1.0)*r12*x2849))+((x2843*x2844))+(((-1.0)*r11*sj5*x2848)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2848))+((r11*x2850))+(((-1.0)*x2844*x2849)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2845*x2848))+((cj1*sj2))+((x2843*x2846))+(((-1.0)*r02*x2849)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2843*x2847))+(((-1.0)*r22*x2849))+(((-1.0)*r21*sj5*x2848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2851 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2851.valid){
continue;
}
CheckValue<IkReal> x2852=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2851.value)+(((1.5707963267949)*(x2852.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2853=IKsin(j4);
IkReal x2854=IKcos(j4);
IkReal x2855=(cj5*r10);
IkReal x2856=(r01*sj5);
IkReal x2857=(cj5*r00);
IkReal x2858=(cj5*r20);
IkReal x2859=((1.0)*x2854);
IkReal x2860=((1.0)*x2853);
IkReal x2861=(sj5*x2853);
evalcond[0]=(((r21*x2861))+(((-1.0)*x2858*x2860))+(((-1.0)*r22*x2859)));
evalcond[1]=((((-1.0)*x2857*x2860))+((x2853*x2856))+(((-1.0)*r02*x2859)));
evalcond[2]=((((-1.0)*r11*sj5*x2859))+(((-1.0)*r12*x2860))+((x2854*x2855)));
evalcond[3]=((-1.0)+(((-1.0)*x2855*x2860))+(((-1.0)*r12*x2859))+((r11*x2861)));
evalcond[4]=((((-1.0)*r02*x2860))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2856*x2859))+((x2854*x2857)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2860))+(((-1.0)*r21*sj5*x2859))+((x2854*x2858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2862=((-1.0)*r00);
IkReal x2864 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2864)==0){
continue;
}
IkReal x2863=pow(x2864,-0.5);
CheckValue<IkReal> x2865 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2862),IKFAST_ATAN2_MAGTHRESH);
if(!x2865.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2865.value));
IkReal gconst91=(r01*x2863);
IkReal gconst92=(x2862*x2863);
CheckValue<IkReal> x2866 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2866.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2866.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2867=((-1.0)*r00);
IkReal x2868=x2863;
CheckValue<IkReal> x2870 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2867),IKFAST_ATAN2_MAGTHRESH);
if(!x2870.valid){
continue;
}
IkReal x2869=((-1.0)*(x2870.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2869;
IkReal gconst90=x2869;
IkReal gconst91=(r01*x2868);
IkReal gconst92=(x2867*x2868);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2871=((1.0)*sj0);
IkReal x2872=((1.0)*cj0);
CheckValue<IkReal> x2873=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2873.valid){
continue;
}
CheckValue<IkReal> x2874 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2872))+(((-1.0)*r12*x2871)))),IkReal(((((-1.0)*gconst91*r11*x2871))+((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2872)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2873.value)))+(x2874.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2875=IKsin(j4);
IkReal x2876=IKcos(j4);
IkReal x2877=((1.0)*cj2);
IkReal x2878=(gconst92*r00);
IkReal x2879=(gconst92*r20);
IkReal x2880=((1.0)*sj0);
IkReal x2881=(gconst92*r10);
IkReal x2882=(cj1*sj2);
IkReal x2883=((1.0)*x2876);
IkReal x2884=(gconst91*x2875);
IkReal x2885=((1.0)*x2875);
evalcond[0]=((((-1.0)*r22*x2883))+((r21*x2884))+(((-1.0)*x2879*x2885)));
evalcond[1]=(cj0+((r11*x2884))+(((-1.0)*r12*x2883))+(((-1.0)*x2881*x2885)));
evalcond[2]=((((-1.0)*r02*x2883))+((r01*x2884))+(((-1.0)*x2878*x2885))+(((-1.0)*x2880)));
evalcond[3]=((((-1.0)*gconst91*r21*x2883))+(((-1.0)*r22*x2885))+((x2876*x2879))+(((-1.0)*cj1*x2877))+((sj1*sj2)));
evalcond[4]=(((x2876*x2878))+(((-1.0)*cj0*sj1*x2877))+(((-1.0)*r02*x2885))+(((-1.0)*cj0*x2882))+(((-1.0)*gconst91*r01*x2883)));
evalcond[5]=((((-1.0)*sj0*sj1*x2877))+(((-1.0)*gconst91*r11*x2883))+((x2876*x2881))+(((-1.0)*x2880*x2882))+(((-1.0)*r12*x2885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2886=((1.0)*gconst92);
CheckValue<IkReal> x2887 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2886))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2887.valid){
continue;
}
CheckValue<IkReal> x2888=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2886))+(((-1.0)*gconst91*r10)))),-1);
if(!x2888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2887.value)+(((1.5707963267949)*(x2888.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2889=IKsin(j4);
IkReal x2890=IKcos(j4);
IkReal x2891=((1.0)*cj2);
IkReal x2892=(gconst92*r00);
IkReal x2893=(gconst92*r20);
IkReal x2894=((1.0)*sj0);
IkReal x2895=(gconst92*r10);
IkReal x2896=(cj1*sj2);
IkReal x2897=((1.0)*x2890);
IkReal x2898=(gconst91*x2889);
IkReal x2899=((1.0)*x2889);
evalcond[0]=((((-1.0)*r22*x2897))+((r21*x2898))+(((-1.0)*x2893*x2899)));
evalcond[1]=(cj0+(((-1.0)*x2895*x2899))+((r11*x2898))+(((-1.0)*r12*x2897)));
evalcond[2]=((((-1.0)*r02*x2897))+(((-1.0)*x2892*x2899))+((r01*x2898))+(((-1.0)*x2894)));
evalcond[3]=((((-1.0)*r22*x2899))+((x2890*x2893))+(((-1.0)*gconst91*r21*x2897))+((sj1*sj2))+(((-1.0)*cj1*x2891)));
evalcond[4]=(((x2890*x2892))+(((-1.0)*r02*x2899))+(((-1.0)*cj0*sj1*x2891))+(((-1.0)*cj0*x2896))+(((-1.0)*gconst91*r01*x2897)));
evalcond[5]=((((-1.0)*sj0*sj1*x2891))+((x2890*x2895))+(((-1.0)*gconst91*r11*x2897))+(((-1.0)*x2894*x2896))+(((-1.0)*r12*x2899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2900=((-1.0)*r01);
IkReal x2902 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2902)==0){
continue;
}
IkReal x2901=pow(x2902,-0.5);
CheckValue<IkReal> x2903 = IKatan2WithCheck(IkReal(x2900),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2903.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2903.value))));
IkReal gconst94=(x2900*x2901);
IkReal gconst95=((1.0)*r00*x2901);
CheckValue<IkReal> x2904 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2904.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2904.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2905=((-1.0)*r01);
CheckValue<IkReal> x2908 = IKatan2WithCheck(IkReal(x2905),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2908.valid){
continue;
}
IkReal x2906=((1.0)*(x2908.value));
IkReal x2907=x2901;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2906)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2906)));
IkReal gconst94=(x2905*x2907);
IkReal gconst95=((1.0)*r00*x2907);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2909=((-1.0)*r01);
CheckValue<IkReal> x2912 = IKatan2WithCheck(IkReal(x2909),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2912.valid){
continue;
}
IkReal x2910=((1.0)*(x2912.value));
IkReal x2911=x2901;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2910)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2910)));
IkReal gconst94=(x2909*x2911);
IkReal gconst95=((1.0)*r00*x2911);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2913=((-1.0)*r01);
CheckValue<IkReal> x2916 = IKatan2WithCheck(IkReal(x2913),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2916.valid){
continue;
}
IkReal x2914=((1.0)*(x2916.value));
IkReal x2915=x2901;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2914)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2914)));
IkReal gconst94=(x2913*x2915);
IkReal gconst95=((1.0)*r00*x2915);
IkReal x2917=r02*r02;
IkReal x2918=(r12*sj0);
IkReal x2919=((1.0)*cj0);
IkReal x2920=x2901;
j4eval[0]=((IKabs(((((-1.0)*x2918))+(((-1.0)*r02*x2919)))))+(IKabs((((cj0*x2917*x2920))+(((-1.0)*x2919*x2920))+((r02*x2918*x2920))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2921=((1.0)*sj0);
IkReal x2922=((1.0)*cj0);
CheckValue<IkReal> x2923=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2923.valid){
continue;
}
CheckValue<IkReal> x2924 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2922))+(((-1.0)*r12*x2921)))),IkReal(((((-1.0)*gconst94*r01*x2922))+(((-1.0)*gconst94*r11*x2921))+((gconst95*r10*sj0))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2923.value)))+(x2924.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2925=IKsin(j4);
IkReal x2926=IKcos(j4);
IkReal x2927=(gconst94*r11);
IkReal x2928=((1.0)*cj2);
IkReal x2929=(gconst94*r21);
IkReal x2930=((1.0)*sj0);
IkReal x2931=(gconst94*r01);
IkReal x2932=(cj1*sj2);
IkReal x2933=((1.0)*x2926);
IkReal x2934=(gconst95*x2926);
IkReal x2935=((1.0)*x2925);
IkReal x2936=(gconst95*x2935);
evalcond[0]=((((-1.0)*r20*x2936))+((x2925*x2929))+(((-1.0)*r22*x2933)));
evalcond[1]=(((x2925*x2927))+cj0+(((-1.0)*r12*x2933))+(((-1.0)*r10*x2936)));
evalcond[2]=(((x2925*x2931))+(((-1.0)*x2930))+(((-1.0)*r00*x2936))+(((-1.0)*r02*x2933)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2929*x2933))+((r20*x2934))+(((-1.0)*cj1*x2928))+(((-1.0)*r22*x2935)));
evalcond[4]=((((-1.0)*x2931*x2933))+(((-1.0)*cj0*x2932))+(((-1.0)*cj0*sj1*x2928))+((r00*x2934))+(((-1.0)*r02*x2935)));
evalcond[5]=((((-1.0)*x2930*x2932))+((r10*x2934))+(((-1.0)*x2927*x2933))+(((-1.0)*sj0*sj1*x2928))+(((-1.0)*r12*x2935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2937=((1.0)*gconst95);
CheckValue<IkReal> x2938=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2937)))),-1);
if(!x2938.valid){
continue;
}
CheckValue<IkReal> x2939 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2937)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2938.value)))+(x2939.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2940=IKsin(j4);
IkReal x2941=IKcos(j4);
IkReal x2942=(gconst94*r11);
IkReal x2943=((1.0)*cj2);
IkReal x2944=(gconst94*r21);
IkReal x2945=((1.0)*sj0);
IkReal x2946=(gconst94*r01);
IkReal x2947=(cj1*sj2);
IkReal x2948=((1.0)*x2941);
IkReal x2949=(gconst95*x2941);
IkReal x2950=((1.0)*x2940);
IkReal x2951=(gconst95*x2950);
evalcond[0]=((((-1.0)*r20*x2951))+((x2940*x2944))+(((-1.0)*r22*x2948)));
evalcond[1]=((((-1.0)*r12*x2948))+(((-1.0)*r10*x2951))+cj0+((x2940*x2942)));
evalcond[2]=((((-1.0)*r02*x2948))+((x2940*x2946))+(((-1.0)*x2945))+(((-1.0)*r00*x2951)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2943))+(((-1.0)*r22*x2950))+((r20*x2949))+(((-1.0)*x2944*x2948)));
evalcond[4]=((((-1.0)*r02*x2950))+(((-1.0)*cj0*x2947))+((r00*x2949))+(((-1.0)*x2946*x2948))+(((-1.0)*cj0*sj1*x2943)));
evalcond[5]=(((r10*x2949))+(((-1.0)*x2942*x2948))+(((-1.0)*r12*x2950))+(((-1.0)*x2945*x2947))+(((-1.0)*sj0*sj1*x2943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2952=((1.0)*gconst95);
CheckValue<IkReal> x2953=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2952)))),-1);
if(!x2953.valid){
continue;
}
CheckValue<IkReal> x2954 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2952))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2953.value)))+(x2954.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2955=IKsin(j4);
IkReal x2956=IKcos(j4);
IkReal x2957=(gconst94*r11);
IkReal x2958=((1.0)*cj2);
IkReal x2959=(gconst94*r21);
IkReal x2960=((1.0)*sj0);
IkReal x2961=(gconst94*r01);
IkReal x2962=(cj1*sj2);
IkReal x2963=((1.0)*x2956);
IkReal x2964=(gconst95*x2956);
IkReal x2965=((1.0)*x2955);
IkReal x2966=(gconst95*x2965);
evalcond[0]=((((-1.0)*r20*x2966))+(((-1.0)*r22*x2963))+((x2955*x2959)));
evalcond[1]=(cj0+(((-1.0)*r10*x2966))+(((-1.0)*r12*x2963))+((x2955*x2957)));
evalcond[2]=(((x2955*x2961))+(((-1.0)*r00*x2966))+(((-1.0)*r02*x2963))+(((-1.0)*x2960)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2959*x2963))+(((-1.0)*r22*x2965))+((r20*x2964))+(((-1.0)*cj1*x2958)));
evalcond[4]=((((-1.0)*cj0*sj1*x2958))+(((-1.0)*r02*x2965))+(((-1.0)*cj0*x2962))+((r00*x2964))+(((-1.0)*x2961*x2963)));
evalcond[5]=((((-1.0)*x2957*x2963))+(((-1.0)*sj0*sj1*x2958))+((r10*x2964))+(((-1.0)*x2960*x2962))+(((-1.0)*r12*x2965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2967=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2967;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2967);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2968=((1.0)*cj5);
IkReal x2969=((((-1.0)*r11*x2968))+(((-1.0)*r10*sj5)));
j4eval[0]=x2969;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2968))))));
j4eval[2]=IKsign(x2969);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2970=cj5*cj5;
IkReal x2971=r01*r01;
IkReal x2972=(r01*sj5);
IkReal x2973=(cj5*r00);
IkReal x2974=(((x2970*x2971))+(((-1.0)*x2971))+(((-1.0)*(r02*r02)))+(((2.0)*x2972*x2973))+(((-1.0)*x2970*(r00*r00))));
j4eval[0]=x2974;
j4eval[1]=IKsign(x2974);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2972))+x2973))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2975=cj5*cj5;
IkReal x2976=r01*r01;
IkReal x2977=(r01*sj5);
IkReal x2978=(cj5*r00);
CheckValue<IkReal> x2979 = IKatan2WithCheck(IkReal(((((-1.0)*x2977))+x2978)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2979.valid){
continue;
}
CheckValue<IkReal> x2980=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2976))+(((-1.0)*(r02*r02)))+(((2.0)*x2977*x2978))+((x2975*x2976))+(((-1.0)*x2975*(r00*r00))))),-1);
if(!x2980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2979.value)+(((1.5707963267949)*(x2980.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2981=IKsin(j4);
IkReal x2982=IKcos(j4);
IkReal x2983=(cj5*r10);
IkReal x2984=(r01*sj5);
IkReal x2985=((1.0)*cj2);
IkReal x2986=(cj5*r00);
IkReal x2987=(cj5*r20);
IkReal x2988=((1.0)*x2982);
IkReal x2989=((1.0)*x2981);
IkReal x2990=(sj5*x2981);
evalcond[0]=((((-1.0)*x2987*x2989))+(((-1.0)*r22*x2988))+((r21*x2990)));
evalcond[1]=((((-1.0)*r12*x2988))+(((-1.0)*x2983*x2989))+((r11*x2990)));
evalcond[2]=((((-1.0)*x2984*x2988))+((x2982*x2986))+(((-1.0)*r02*x2989)));
evalcond[3]=((-1.0)+((x2981*x2984))+(((-1.0)*r02*x2988))+(((-1.0)*x2986*x2989)));
evalcond[4]=((((-1.0)*r21*sj5*x2988))+(((-1.0)*cj1*x2985))+((sj1*sj2))+(((-1.0)*r22*x2989))+((x2982*x2987)));
evalcond[5]=((((-1.0)*r12*x2989))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2985))+((x2982*x2983))+(((-1.0)*r11*sj5*x2988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2991=((1.0)*cj5);
CheckValue<IkReal> x2992 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2991)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2992.valid){
continue;
}
CheckValue<IkReal> x2993=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2991)))),-1);
if(!x2993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2992.value)+(((1.5707963267949)*(x2993.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2994=IKsin(j4);
IkReal x2995=IKcos(j4);
IkReal x2996=(cj5*r10);
IkReal x2997=(r01*sj5);
IkReal x2998=((1.0)*cj2);
IkReal x2999=(cj5*r00);
IkReal x3000=(cj5*r20);
IkReal x3001=((1.0)*x2995);
IkReal x3002=((1.0)*x2994);
IkReal x3003=(sj5*x2994);
evalcond[0]=((((-1.0)*r22*x3001))+(((-1.0)*x3000*x3002))+((r21*x3003)));
evalcond[1]=((((-1.0)*x2996*x3002))+(((-1.0)*r12*x3001))+((r11*x3003)));
evalcond[2]=((((-1.0)*x2997*x3001))+((x2995*x2999))+(((-1.0)*r02*x3002)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3001))+((x2994*x2997))+(((-1.0)*x2999*x3002)));
evalcond[4]=((((-1.0)*r22*x3002))+(((-1.0)*r21*sj5*x3001))+((sj1*sj2))+((x2995*x3000))+(((-1.0)*cj1*x2998)));
evalcond[5]=(((x2995*x2996))+(((-1.0)*sj1*x2998))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x3001))+(((-1.0)*r12*x3002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3004=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3004.valid){
continue;
}
CheckValue<IkReal> x3005 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3004.value)))+(x3005.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3006=IKsin(j4);
IkReal x3007=IKcos(j4);
IkReal x3008=(cj5*r10);
IkReal x3009=(r01*sj5);
IkReal x3010=((1.0)*cj2);
IkReal x3011=(cj5*r00);
IkReal x3012=(cj5*r20);
IkReal x3013=((1.0)*x3007);
IkReal x3014=((1.0)*x3006);
IkReal x3015=(sj5*x3006);
evalcond[0]=((((-1.0)*r22*x3013))+((r21*x3015))+(((-1.0)*x3012*x3014)));
evalcond[1]=((((-1.0)*r12*x3013))+((r11*x3015))+(((-1.0)*x3008*x3014)));
evalcond[2]=((((-1.0)*r02*x3014))+((x3007*x3011))+(((-1.0)*x3009*x3013)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3013))+(((-1.0)*x3011*x3014))+((x3006*x3009)));
evalcond[4]=((((-1.0)*r22*x3014))+(((-1.0)*r21*sj5*x3013))+((sj1*sj2))+(((-1.0)*cj1*x3010))+((x3007*x3012)));
evalcond[5]=((((-1.0)*r11*sj5*x3013))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x3014))+((x3007*x3008))+(((-1.0)*sj1*x3010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3016=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3016;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3016);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3017=((1.0)*cj5);
IkReal x3018=((((-1.0)*r21*x3017))+(((-1.0)*r20*sj5)));
j4eval[0]=x3018;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x3017))+((r11*sj5))))));
j4eval[2]=IKsign(x3018);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3019=cj5*cj5;
IkReal x3020=r01*r01;
IkReal x3021=(cj5*r00);
IkReal x3022=(r01*sj5);
IkReal x3023=((((-2.0)*x3021*x3022))+x3020+((x3019*(r00*r00)))+(r02*r02)+(((-1.0)*x3019*x3020)));
j4eval[0]=x3023;
j4eval[1]=((IKabs(r02))+(IKabs((x3021+(((-1.0)*x3022))))));
j4eval[2]=IKsign(x3023);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3024=cj5*cj5;
IkReal x3025=r01*r01;
IkReal x3026=(r01*sj5);
IkReal x3027=(cj5*r00);
CheckValue<IkReal> x3028=IKPowWithIntegerCheck(IKsign((x3025+(((-2.0)*x3026*x3027))+(((-1.0)*x3024*x3025))+((x3024*(r00*r00)))+(r02*r02))),-1);
if(!x3028.valid){
continue;
}
CheckValue<IkReal> x3029 = IKatan2WithCheck(IkReal((x3027+(((-1.0)*x3026)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3028.value)))+(x3029.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3030=IKsin(j4);
IkReal x3031=IKcos(j4);
IkReal x3032=(cj5*r10);
IkReal x3033=(r01*sj5);
IkReal x3034=(cj5*r00);
IkReal x3035=(cj5*r20);
IkReal x3036=((1.0)*x3031);
IkReal x3037=((1.0)*x3030);
IkReal x3038=(sj5*x3030);
evalcond[0]=((((-1.0)*x3035*x3037))+((r21*x3038))+(((-1.0)*r22*x3036)));
evalcond[1]=(((r11*x3038))+(((-1.0)*r12*x3036))+(((-1.0)*x3032*x3037)));
evalcond[2]=((((-1.0)*r02*x3037))+(((-1.0)*x3033*x3036))+((x3031*x3034)));
evalcond[3]=((1.0)+((x3030*x3033))+(((-1.0)*r02*x3036))+(((-1.0)*x3034*x3037)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x3037))+((x3031*x3032))+(((-1.0)*r11*sj5*x3036)));
evalcond[5]=((((-1.0)*r21*sj5*x3036))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x3037))+((x3031*x3035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3039=((1.0)*cj5);
CheckValue<IkReal> x3040 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x3039)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3040.valid){
continue;
}
CheckValue<IkReal> x3041=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3039))+(((-1.0)*r20*sj5)))),-1);
if(!x3041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3040.value)+(((1.5707963267949)*(x3041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3042=IKsin(j4);
IkReal x3043=IKcos(j4);
IkReal x3044=(cj5*r10);
IkReal x3045=(r01*sj5);
IkReal x3046=(cj5*r00);
IkReal x3047=(cj5*r20);
IkReal x3048=((1.0)*x3043);
IkReal x3049=((1.0)*x3042);
IkReal x3050=(sj5*x3042);
evalcond[0]=((((-1.0)*r22*x3048))+((r21*x3050))+(((-1.0)*x3047*x3049)));
evalcond[1]=((((-1.0)*r12*x3048))+((r11*x3050))+(((-1.0)*x3044*x3049)));
evalcond[2]=(((x3043*x3046))+(((-1.0)*x3045*x3048))+(((-1.0)*r02*x3049)));
evalcond[3]=((1.0)+((x3042*x3045))+(((-1.0)*x3046*x3049))+(((-1.0)*r02*x3048)));
evalcond[4]=(((x3043*x3044))+((cj2*sj1))+(((-1.0)*r12*x3049))+((cj1*sj2))+(((-1.0)*r11*sj5*x3048)));
evalcond[5]=(((x3043*x3047))+(((-1.0)*r22*x3049))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3051 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3051.valid){
continue;
}
CheckValue<IkReal> x3052=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3051.value)+(((1.5707963267949)*(x3052.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3053=IKsin(j4);
IkReal x3054=IKcos(j4);
IkReal x3055=(cj5*r10);
IkReal x3056=(r01*sj5);
IkReal x3057=(cj5*r00);
IkReal x3058=(cj5*r20);
IkReal x3059=((1.0)*x3054);
IkReal x3060=((1.0)*x3053);
IkReal x3061=(sj5*x3053);
evalcond[0]=((((-1.0)*x3058*x3060))+(((-1.0)*r22*x3059))+((r21*x3061)));
evalcond[1]=(((r11*x3061))+(((-1.0)*x3055*x3060))+(((-1.0)*r12*x3059)));
evalcond[2]=((((-1.0)*x3056*x3059))+(((-1.0)*r02*x3060))+((x3054*x3057)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3059))+((x3053*x3056))+(((-1.0)*x3057*x3060)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x3060))+((x3054*x3055))+(((-1.0)*r11*sj5*x3059)));
evalcond[5]=((((-1.0)*r22*x3060))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3059))+((x3054*x3058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3062=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3062);
rxp1_1=(px*r21);
rxp1_2=(r11*x3062);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3063=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3063);
rxp1_1=(px*r21);
rxp1_2=(r11*x3063);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3064=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3064);
rxp1_1=(px*r21);
rxp1_2=(r11*x3064);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3067=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3067.valid){
continue;
}
IkReal x3065=x3067.value;
IkReal x3066=(sj0*x3065);
cj4array[0]=(((cj2*sj1*x3066))+((cj1*sj2*x3066)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3068=IKsin(j4);
IkReal x3069=IKcos(j4);
IkReal x3070=(cj5*r20);
IkReal x3071=(r21*sj5);
IkReal x3072=((1.0)*x3068);
IkReal x3073=((1.0)*x3069);
evalcond[0]=((-1.0)*r02*x3068);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x3073)));
evalcond[2]=(((x3068*x3071))+(((-1.0)*x3070*x3072)));
evalcond[3]=((((-1.0)*cj5*r10*x3072))+((r11*sj5*x3068)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3071*x3073))+((x3069*x3070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3075=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3075.valid){
continue;
}
IkReal x3074=x3075.value;
cj4array[0]=(((cj1*cj2*x3074))+(((-1.0)*sj1*sj2*x3074)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3076=IKsin(j4);
IkReal x3077=IKcos(j4);
IkReal x3078=(r11*sj5);
IkReal x3079=((1.0)*sj0);
IkReal x3080=((1.0)*x3077);
IkReal x3081=((1.0)*cj5*x3076);
evalcond[0]=((-1.0)*r02*x3076);
evalcond[1]=((((-1.0)*x3079))+(((-1.0)*r02*x3080)));
evalcond[2]=((((-1.0)*r20*x3081))+((r21*sj5*x3076)));
evalcond[3]=(((x3076*x3078))+(((-1.0)*r10*x3081)));
evalcond[4]=((((-1.0)*x3078*x3080))+(((-1.0)*cj1*sj2*x3079))+(((-1.0)*cj2*sj1*x3079))+((cj5*r10*x3077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3082=IKPowWithIntegerCheck(r02,-1);
if(!x3082.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3082.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3083=IKsin(j4);
IkReal x3084=IKcos(j4);
IkReal x3085=((1.0)*sj0);
IkReal x3086=(cj5*x3084);
IkReal x3087=(sj5*x3083);
IkReal x3088=((1.0)*sj5*x3084);
IkReal x3089=((1.0)*cj5*x3083);
evalcond[0]=((-1.0)*r02*x3083);
evalcond[1]=((((-1.0)*r20*x3089))+((r21*x3087)));
evalcond[2]=(((r11*x3087))+(((-1.0)*r10*x3089)));
evalcond[3]=((((-1.0)*r21*x3088))+((r20*x3086))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=(((r10*x3086))+(((-1.0)*cj1*sj2*x3085))+(((-1.0)*cj2*sj1*x3085))+(((-1.0)*r11*x3088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3090=((1.0)*sj0);
IkReal x3091=((1.0)*cj0);
CheckValue<IkReal> x3092 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3091))+(((-1.0)*r12*x3090)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x3091))+(((-1.0)*r11*sj5*x3090)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3092.valid){
continue;
}
CheckValue<IkReal> x3093=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3092.value)+(((1.5707963267949)*(x3093.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3094=IKsin(j4);
IkReal x3095=IKcos(j4);
IkReal x3096=(cj5*r10);
IkReal x3097=(r01*sj5);
IkReal x3098=((1.0)*cj2);
IkReal x3099=(cj5*r00);
IkReal x3100=((1.0)*sj0);
IkReal x3101=(cj5*r20);
IkReal x3102=(cj1*sj2);
IkReal x3103=((1.0)*x3095);
IkReal x3104=((1.0)*x3094);
IkReal x3105=(sj5*x3094);
evalcond[0]=(((r21*x3105))+(((-1.0)*r22*x3103))+(((-1.0)*x3101*x3104)));
evalcond[1]=(((r11*x3105))+cj0+(((-1.0)*r12*x3103))+(((-1.0)*x3096*x3104)));
evalcond[2]=((((-1.0)*x3100))+(((-1.0)*x3099*x3104))+(((-1.0)*r02*x3103))+((x3094*x3097)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x3098))+((x3095*x3101))+(((-1.0)*r22*x3104))+(((-1.0)*r21*sj5*x3103)));
evalcond[4]=((((-1.0)*cj0*sj1*x3098))+(((-1.0)*x3097*x3103))+((x3095*x3099))+(((-1.0)*r02*x3104))+(((-1.0)*cj0*x3102)));
evalcond[5]=((((-1.0)*r12*x3104))+(((-1.0)*x3100*x3102))+(((-1.0)*sj0*sj1*x3098))+(((-1.0)*r11*sj5*x3103))+((x3095*x3096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3106=((1.0)*cj5);
CheckValue<IkReal> x3107=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3106)))),-1);
if(!x3107.valid){
continue;
}
CheckValue<IkReal> x3108 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3106))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3107.value)))+(x3108.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3109=IKsin(j4);
IkReal x3110=IKcos(j4);
IkReal x3111=(cj5*r10);
IkReal x3112=(r01*sj5);
IkReal x3113=((1.0)*cj2);
IkReal x3114=(cj5*r00);
IkReal x3115=((1.0)*sj0);
IkReal x3116=(cj5*r20);
IkReal x3117=(cj1*sj2);
IkReal x3118=((1.0)*x3110);
IkReal x3119=((1.0)*x3109);
IkReal x3120=(sj5*x3109);
evalcond[0]=(((r21*x3120))+(((-1.0)*r22*x3118))+(((-1.0)*x3116*x3119)));
evalcond[1]=(cj0+(((-1.0)*r12*x3118))+((r11*x3120))+(((-1.0)*x3111*x3119)));
evalcond[2]=((((-1.0)*x3114*x3119))+(((-1.0)*r02*x3118))+(((-1.0)*x3115))+((x3109*x3112)));
evalcond[3]=((((-1.0)*cj1*x3113))+((sj1*sj2))+((x3110*x3116))+(((-1.0)*r22*x3119))+(((-1.0)*r21*sj5*x3118)));
evalcond[4]=((((-1.0)*r02*x3119))+(((-1.0)*cj0*x3117))+((x3110*x3114))+(((-1.0)*cj0*sj1*x3113))+(((-1.0)*x3112*x3118)));
evalcond[5]=((((-1.0)*x3115*x3117))+(((-1.0)*r12*x3119))+(((-1.0)*sj0*sj1*x3113))+(((-1.0)*r11*sj5*x3118))+((x3110*x3111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3121=((1.0)*cj5);
CheckValue<IkReal> x3122 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3121))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3122.valid){
continue;
}
CheckValue<IkReal> x3123=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3121)))),-1);
if(!x3123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3122.value)+(((1.5707963267949)*(x3123.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3124=IKsin(j4);
IkReal x3125=IKcos(j4);
IkReal x3126=(cj5*r10);
IkReal x3127=(r01*sj5);
IkReal x3128=((1.0)*cj2);
IkReal x3129=(cj5*r00);
IkReal x3130=((1.0)*sj0);
IkReal x3131=(cj5*r20);
IkReal x3132=(cj1*sj2);
IkReal x3133=((1.0)*x3125);
IkReal x3134=((1.0)*x3124);
IkReal x3135=(sj5*x3124);
evalcond[0]=((((-1.0)*x3131*x3134))+((r21*x3135))+(((-1.0)*r22*x3133)));
evalcond[1]=(cj0+(((-1.0)*r12*x3133))+((r11*x3135))+(((-1.0)*x3126*x3134)));
evalcond[2]=((((-1.0)*r02*x3133))+((x3124*x3127))+(((-1.0)*x3129*x3134))+(((-1.0)*x3130)));
evalcond[3]=((((-1.0)*r21*sj5*x3133))+((x3125*x3131))+((sj1*sj2))+(((-1.0)*cj1*x3128))+(((-1.0)*r22*x3134)));
evalcond[4]=((((-1.0)*cj0*sj1*x3128))+(((-1.0)*r02*x3134))+((x3125*x3129))+(((-1.0)*cj0*x3132))+(((-1.0)*x3127*x3133)));
evalcond[5]=((((-1.0)*x3130*x3132))+((x3125*x3126))+(((-1.0)*r12*x3134))+(((-1.0)*r11*sj5*x3133))+(((-1.0)*sj0*sj1*x3128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3136=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x3136;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x3136);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3137=r21*r21;
IkReal x3138=cj5*cj5;
IkReal x3139=(sj1*sj2);
IkReal x3140=(r21*sj5);
IkReal x3141=(cj5*r20);
IkReal x3142=(cj1*cj2);
IkReal x3143=((((-1.0)*x3138*(r20*r20)))+(((2.0)*x3140*x3141))+(((-1.0)*x3137))+((x3137*x3138))+(((-1.0)*(r22*r22))));
j4eval[0]=x3143;
j4eval[1]=((IKabs(((((-1.0)*x3140*x3142))+(((-1.0)*x3139*x3141))+((x3139*x3140))+((x3141*x3142)))))+(IKabs(((((-1.0)*r22*x3142))+((r22*x3139))))));
j4eval[2]=IKsign(x3143);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3144=IKcos(j0);
IkReal x3145=IKsin(j0);
evalcond[0]=((((0.425)*x3144))+(((-0.134)*x3145))+(((-1.0)*px)));
evalcond[1]=((((0.425)*x3145))+(((-1.0)*py))+(((0.134)*x3144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3146=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3146;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3146);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3147=((1.0)*cj5);
IkReal x3148=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3147)));
j4eval[0]=x3148;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3147)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3148);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3149=((1.0)*cj5);
IkReal x3150=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3149)));
j4eval[0]=x3150;
j4eval[1]=IKsign(x3150);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3149))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3151=((1.0)*cj5);
CheckValue<IkReal> x3152 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3151)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3152.valid){
continue;
}
CheckValue<IkReal> x3153=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3151)))),-1);
if(!x3153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3152.value)+(((1.5707963267949)*(x3153.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3154=IKcos(j4);
IkReal x3155=IKsin(j4);
IkReal x3156=((1.0)*sj0);
IkReal x3157=(cj5*r00);
IkReal x3158=(cj5*r10);
IkReal x3159=(cj5*r20);
IkReal x3160=((1.0)*x3154);
IkReal x3161=((1.0)*x3155);
IkReal x3162=(sj5*x3154);
IkReal x3163=(sj5*x3155);
evalcond[0]=(((r22*x3155))+(((-1.0)*x3159*x3160))+((r21*x3162)));
evalcond[1]=((((-1.0)*x3159*x3161))+((r21*x3163))+(((-1.0)*r22*x3160)));
evalcond[2]=((((-1.0)*r12*x3160))+cj0+((r11*x3163))+(((-1.0)*x3158*x3161)));
evalcond[3]=((((-1.0)*x3157*x3160))+((r02*x3155))+((r01*x3162))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3156))+((r11*x3162))+(((-1.0)*x3158*x3160))+((r12*x3155)));
evalcond[5]=((((-1.0)*x3156))+(((-1.0)*x3157*x3161))+((r01*x3163))+(((-1.0)*r02*x3160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3164=((1.0)*cj5);
CheckValue<IkReal> x3165=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3164)))),-1);
if(!x3165.valid){
continue;
}
CheckValue<IkReal> x3166 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3164)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3165.value)))+(x3166.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3167=IKcos(j4);
IkReal x3168=IKsin(j4);
IkReal x3169=((1.0)*sj0);
IkReal x3170=(cj5*r00);
IkReal x3171=(cj5*r10);
IkReal x3172=(cj5*r20);
IkReal x3173=((1.0)*x3167);
IkReal x3174=((1.0)*x3168);
IkReal x3175=(sj5*x3167);
IkReal x3176=(sj5*x3168);
evalcond[0]=(((r22*x3168))+((r21*x3175))+(((-1.0)*x3172*x3173)));
evalcond[1]=(((r21*x3176))+(((-1.0)*x3172*x3174))+(((-1.0)*r22*x3173)));
evalcond[2]=(((r11*x3176))+cj0+(((-1.0)*r12*x3173))+(((-1.0)*x3171*x3174)));
evalcond[3]=(((r02*x3168))+((r01*x3175))+(((-1.0)*x3170*x3173))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3175))+((r12*x3168))+(((-1.0)*x3171*x3173))+(((-1.0)*x3169)));
evalcond[5]=(((r01*x3176))+(((-1.0)*x3170*x3174))+(((-1.0)*r02*x3173))+(((-1.0)*x3169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3177 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3177.valid){
continue;
}
CheckValue<IkReal> x3178=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3177.value)+(((1.5707963267949)*(x3178.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3179=IKcos(j4);
IkReal x3180=IKsin(j4);
IkReal x3181=((1.0)*sj0);
IkReal x3182=(cj5*r00);
IkReal x3183=(cj5*r10);
IkReal x3184=(cj5*r20);
IkReal x3185=((1.0)*x3179);
IkReal x3186=((1.0)*x3180);
IkReal x3187=(sj5*x3179);
IkReal x3188=(sj5*x3180);
evalcond[0]=(((r22*x3180))+(((-1.0)*x3184*x3185))+((r21*x3187)));
evalcond[1]=((((-1.0)*x3184*x3186))+(((-1.0)*r22*x3185))+((r21*x3188)));
evalcond[2]=((((-1.0)*x3183*x3186))+cj0+((r11*x3188))+(((-1.0)*r12*x3185)));
evalcond[3]=(((r01*x3187))+(((-1.0)*x3182*x3185))+(((-1.0)*cj0))+((r02*x3180)));
evalcond[4]=((((-1.0)*x3183*x3185))+((r12*x3180))+((r11*x3187))+(((-1.0)*x3181)));
evalcond[5]=((((-1.0)*r02*x3185))+((r01*x3188))+(((-1.0)*x3182*x3186))+(((-1.0)*x3181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.67478761815078)*px))+(((2.14018460980658)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.67478761815078)*py))+(((2.14018460980658)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.67478761815078)*px))+(((2.14018460980658)*py))))+IKsqr(((((0.67478761815078)*py))+(((2.14018460980658)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.67478761815078)*px))+(((2.14018460980658)*py))), ((((0.67478761815078)*py))+(((2.14018460980658)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3189=IKcos(j0);
IkReal x3190=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.134)*x3190))+(((0.425)*x3189)));
evalcond[1]=((((0.134)*x3189))+(((-1.0)*py))+(((0.425)*x3190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3191=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3191;
j4eval[1]=IKsign(x3191);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3192=((1.0)*cj5);
IkReal x3193=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3192)));
j4eval[0]=x3193;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3192)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3193);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3194=cj5*cj5;
IkReal x3195=((1.0)*r20);
IkReal x3196=(r01*r21);
IkReal x3197=(r21*sj5);
IkReal x3198=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3197))+((x3194*x3196))+(((-1.0)*r00*x3194*x3195))+(((-1.0)*x3196)));
j4eval[0]=x3198;
j4eval[1]=((IKabs((((cj0*x3197))+(((-1.0)*cj0*cj5*x3195)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3198);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3199=cj5*cj5;
IkReal x3200=((1.0)*r20);
IkReal x3201=(r01*r21);
IkReal x3202=(r21*sj5);
CheckValue<IkReal> x3203 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3202))+(((-1.0)*cj0*cj5*x3200)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3203.valid){
continue;
}
CheckValue<IkReal> x3204=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3199*x3201))+(((-1.0)*x3201))+((cj5*r00*x3202))+(((-1.0)*r00*x3199*x3200)))),-1);
if(!x3204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3203.value)+(((1.5707963267949)*(x3204.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3205=IKcos(j4);
IkReal x3206=IKsin(j4);
IkReal x3207=(cj5*r00);
IkReal x3208=(cj5*r10);
IkReal x3209=(cj5*r20);
IkReal x3210=((1.0)*x3205);
IkReal x3211=((1.0)*x3206);
IkReal x3212=(sj5*x3205);
IkReal x3213=(sj5*x3206);
evalcond[0]=(((r22*x3206))+(((-1.0)*x3209*x3210))+((r21*x3212)));
evalcond[1]=((((-1.0)*x3209*x3211))+((r21*x3213))+(((-1.0)*r22*x3210)));
evalcond[2]=(cj0+((r01*x3212))+((r02*x3206))+(((-1.0)*x3207*x3210)));
evalcond[3]=(sj0+((r12*x3206))+((r11*x3212))+(((-1.0)*x3208*x3210)));
evalcond[4]=(cj0+((r11*x3213))+(((-1.0)*r12*x3210))+(((-1.0)*x3208*x3211)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3213))+(((-1.0)*r02*x3210))+(((-1.0)*x3207*x3211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3214=((1.0)*cj5);
CheckValue<IkReal> x3215 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3214)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3215.valid){
continue;
}
CheckValue<IkReal> x3216=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3214)))),-1);
if(!x3216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3215.value)+(((1.5707963267949)*(x3216.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3217=IKcos(j4);
IkReal x3218=IKsin(j4);
IkReal x3219=(cj5*r00);
IkReal x3220=(cj5*r10);
IkReal x3221=(cj5*r20);
IkReal x3222=((1.0)*x3217);
IkReal x3223=((1.0)*x3218);
IkReal x3224=(sj5*x3217);
IkReal x3225=(sj5*x3218);
evalcond[0]=(((r22*x3218))+((r21*x3224))+(((-1.0)*x3221*x3222)));
evalcond[1]=(((r21*x3225))+(((-1.0)*r22*x3222))+(((-1.0)*x3221*x3223)));
evalcond[2]=(cj0+((r01*x3224))+(((-1.0)*x3219*x3222))+((r02*x3218)));
evalcond[3]=(sj0+((r11*x3224))+((r12*x3218))+(((-1.0)*x3220*x3222)));
evalcond[4]=(cj0+((r11*x3225))+(((-1.0)*x3220*x3223))+(((-1.0)*r12*x3222)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3222))+((r01*x3225))+(((-1.0)*x3219*x3223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3226 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3226.valid){
continue;
}
CheckValue<IkReal> x3227=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3226.value)+(((1.5707963267949)*(x3227.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3228=IKcos(j4);
IkReal x3229=IKsin(j4);
IkReal x3230=(cj5*r00);
IkReal x3231=(cj5*r10);
IkReal x3232=(cj5*r20);
IkReal x3233=((1.0)*x3228);
IkReal x3234=((1.0)*x3229);
IkReal x3235=(sj5*x3228);
IkReal x3236=(sj5*x3229);
evalcond[0]=((((-1.0)*x3232*x3233))+((r22*x3229))+((r21*x3235)));
evalcond[1]=((((-1.0)*x3232*x3234))+(((-1.0)*r22*x3233))+((r21*x3236)));
evalcond[2]=(cj0+((r02*x3229))+((r01*x3235))+(((-1.0)*x3230*x3233)));
evalcond[3]=(((r12*x3229))+sj0+(((-1.0)*x3231*x3233))+((r11*x3235)));
evalcond[4]=(cj0+(((-1.0)*x3231*x3234))+((r11*x3236))+(((-1.0)*r12*x3233)));
evalcond[5]=((((-1.0)*r02*x3233))+(((-1.0)*sj0))+((r01*x3236))+(((-1.0)*x3230*x3234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3237=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3237;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3237);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3238=((1.0)*cj5);
IkReal x3239=((((-1.0)*r01*x3238))+(((-1.0)*r00*sj5)));
j4eval[0]=x3239;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3238)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3239);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3240=((1.0)*cj5);
IkReal x3241=((((-1.0)*r01*x3240))+(((-1.0)*r00*sj5)));
j4eval[0]=x3241;
j4eval[1]=IKsign(x3241);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3240))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3242=((1.0)*cj5);
CheckValue<IkReal> x3243=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3242))+(((-1.0)*r00*sj5)))),-1);
if(!x3243.valid){
continue;
}
CheckValue<IkReal> x3244 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3242)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3244.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3243.value)))+(x3244.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3245=IKcos(j4);
IkReal x3246=IKsin(j4);
IkReal x3247=((1.0)*sj0);
IkReal x3248=(cj5*r00);
IkReal x3249=(cj5*r10);
IkReal x3250=(cj5*r20);
IkReal x3251=((1.0)*x3245);
IkReal x3252=((1.0)*x3246);
IkReal x3253=(sj5*x3245);
IkReal x3254=(sj5*x3246);
evalcond[0]=(((r22*x3246))+((r21*x3253))+(((-1.0)*x3250*x3251)));
evalcond[1]=(((r21*x3254))+(((-1.0)*r22*x3251))+(((-1.0)*x3250*x3252)));
evalcond[2]=(cj0+((r11*x3254))+(((-1.0)*x3249*x3252))+(((-1.0)*r12*x3251)));
evalcond[3]=((((-1.0)*x3248*x3251))+((r01*x3253))+((r02*x3246))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3253))+(((-1.0)*x3249*x3251))+(((-1.0)*x3247))+((r12*x3246)));
evalcond[5]=((((-1.0)*r02*x3251))+(((-1.0)*x3248*x3252))+((r01*x3254))+(((-1.0)*x3247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3255=((1.0)*cj5);
CheckValue<IkReal> x3256 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3255)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3256.valid){
continue;
}
CheckValue<IkReal> x3257=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3255)))),-1);
if(!x3257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3256.value)+(((1.5707963267949)*(x3257.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3258=IKcos(j4);
IkReal x3259=IKsin(j4);
IkReal x3260=((1.0)*sj0);
IkReal x3261=(cj5*r00);
IkReal x3262=(cj5*r10);
IkReal x3263=(cj5*r20);
IkReal x3264=((1.0)*x3258);
IkReal x3265=((1.0)*x3259);
IkReal x3266=(sj5*x3258);
IkReal x3267=(sj5*x3259);
evalcond[0]=(((r21*x3266))+((r22*x3259))+(((-1.0)*x3263*x3264)));
evalcond[1]=(((r21*x3267))+(((-1.0)*x3263*x3265))+(((-1.0)*r22*x3264)));
evalcond[2]=(cj0+(((-1.0)*r12*x3264))+(((-1.0)*x3262*x3265))+((r11*x3267)));
evalcond[3]=((((-1.0)*x3261*x3264))+((r01*x3266))+((r02*x3259))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3259))+(((-1.0)*x3260))+(((-1.0)*x3262*x3264))+((r11*x3266)));
evalcond[5]=((((-1.0)*x3261*x3265))+((r01*x3267))+(((-1.0)*x3260))+(((-1.0)*r02*x3264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3268 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3268.valid){
continue;
}
CheckValue<IkReal> x3269=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3268.value)+(((1.5707963267949)*(x3269.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3270=IKcos(j4);
IkReal x3271=IKsin(j4);
IkReal x3272=((1.0)*sj0);
IkReal x3273=(cj5*r00);
IkReal x3274=(cj5*r10);
IkReal x3275=(cj5*r20);
IkReal x3276=((1.0)*x3270);
IkReal x3277=((1.0)*x3271);
IkReal x3278=(sj5*x3270);
IkReal x3279=(sj5*x3271);
evalcond[0]=(((r21*x3278))+(((-1.0)*x3275*x3276))+((r22*x3271)));
evalcond[1]=(((r21*x3279))+(((-1.0)*x3275*x3277))+(((-1.0)*r22*x3276)));
evalcond[2]=((((-1.0)*r12*x3276))+cj0+(((-1.0)*x3274*x3277))+((r11*x3279)));
evalcond[3]=((((-1.0)*x3273*x3276))+((r01*x3278))+((r02*x3271))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3274*x3276))+(((-1.0)*x3272))+((r11*x3278))+((r12*x3271)));
evalcond[5]=((((-1.0)*x3273*x3277))+((r01*x3279))+(((-1.0)*x3272))+(((-1.0)*r02*x3276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3280=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3280;
j4eval[1]=IKsign(x3280);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3281=((1.0)*cj5);
IkReal x3282=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3281)));
j4eval[0]=x3282;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3281))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3282);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3283=cj5*cj5;
IkReal x3284=((1.0)*r20);
IkReal x3285=(r01*r21);
IkReal x3286=(r21*sj5);
IkReal x3287=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3283*x3284))+((x3283*x3285))+((cj5*r00*x3286))+(((-1.0)*x3285)));
j4eval[0]=x3287;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x3284))+((cj0*x3286))))));
j4eval[2]=IKsign(x3287);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3288=cj5*cj5;
IkReal x3289=((1.0)*r20);
IkReal x3290=(r01*r21);
IkReal x3291=(r21*sj5);
CheckValue<IkReal> x3292 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3289))+((cj0*x3291)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3292.valid){
continue;
}
CheckValue<IkReal> x3293=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x3288*x3290))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3288*x3289))+((cj5*r00*x3291))+(((-1.0)*x3290)))),-1);
if(!x3293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3292.value)+(((1.5707963267949)*(x3293.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3294=IKcos(j4);
IkReal x3295=IKsin(j4);
IkReal x3296=(cj5*r00);
IkReal x3297=(cj5*r10);
IkReal x3298=(cj5*r20);
IkReal x3299=((1.0)*x3294);
IkReal x3300=((1.0)*x3295);
IkReal x3301=(sj5*x3294);
IkReal x3302=(sj5*x3295);
evalcond[0]=(((r21*x3301))+(((-1.0)*x3298*x3299))+((r22*x3295)));
evalcond[1]=(((r21*x3302))+(((-1.0)*r22*x3299))+(((-1.0)*x3298*x3300)));
evalcond[2]=(cj0+((r02*x3295))+(((-1.0)*x3296*x3299))+((r01*x3301)));
evalcond[3]=(sj0+((r11*x3301))+(((-1.0)*x3297*x3299))+((r12*x3295)));
evalcond[4]=((((-1.0)*r12*x3299))+cj0+((r11*x3302))+(((-1.0)*x3297*x3300)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3299))+(((-1.0)*x3296*x3300))+((r01*x3302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3303=((1.0)*cj5);
CheckValue<IkReal> x3304 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3303)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3304.valid){
continue;
}
CheckValue<IkReal> x3305=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3303)))),-1);
if(!x3305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3304.value)+(((1.5707963267949)*(x3305.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3306=IKcos(j4);
IkReal x3307=IKsin(j4);
IkReal x3308=(cj5*r00);
IkReal x3309=(cj5*r10);
IkReal x3310=(cj5*r20);
IkReal x3311=((1.0)*x3306);
IkReal x3312=((1.0)*x3307);
IkReal x3313=(sj5*x3306);
IkReal x3314=(sj5*x3307);
evalcond[0]=(((r21*x3313))+((r22*x3307))+(((-1.0)*x3310*x3311)));
evalcond[1]=(((r21*x3314))+(((-1.0)*r22*x3311))+(((-1.0)*x3310*x3312)));
evalcond[2]=(cj0+((r02*x3307))+(((-1.0)*x3308*x3311))+((r01*x3313)));
evalcond[3]=(sj0+((r11*x3313))+(((-1.0)*x3309*x3311))+((r12*x3307)));
evalcond[4]=(cj0+((r11*x3314))+(((-1.0)*x3309*x3312))+(((-1.0)*r12*x3311)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3311))+(((-1.0)*x3308*x3312))+((r01*x3314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3315 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3315.valid){
continue;
}
CheckValue<IkReal> x3316=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3315.value)+(((1.5707963267949)*(x3316.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3317=IKcos(j4);
IkReal x3318=IKsin(j4);
IkReal x3319=(cj5*r00);
IkReal x3320=(cj5*r10);
IkReal x3321=(cj5*r20);
IkReal x3322=((1.0)*x3317);
IkReal x3323=((1.0)*x3318);
IkReal x3324=(sj5*x3317);
IkReal x3325=(sj5*x3318);
evalcond[0]=((((-1.0)*x3321*x3322))+((r22*x3318))+((r21*x3324)));
evalcond[1]=((((-1.0)*x3321*x3323))+((r21*x3325))+(((-1.0)*r22*x3322)));
evalcond[2]=(cj0+((r01*x3324))+((r02*x3318))+(((-1.0)*x3319*x3322)));
evalcond[3]=(sj0+((r11*x3324))+(((-1.0)*x3320*x3322))+((r12*x3318)));
evalcond[4]=(cj0+((r11*x3325))+(((-1.0)*x3320*x3323))+(((-1.0)*r12*x3322)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3322))+((r01*x3325))+(((-1.0)*x3319*x3323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3326=IKcos(j0);
IkReal x3327=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.425)*x3326))+(((-0.134)*x3327)));
evalcond[1]=((((0.134)*x3326))+(((-1.0)*py))+(((-0.425)*x3327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3328=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3328;
j4eval[1]=IKsign(x3328);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3329=((1.0)*cj5);
IkReal x3330=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3329)));
j4eval[0]=x3330;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3329)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3330);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3331=cj5*cj5;
IkReal x3332=((1.0)*r20);
IkReal x3333=(r01*r21);
IkReal x3334=(r21*sj5);
IkReal x3335=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x3331*x3332))+(((-1.0)*r02*r22))+((x3331*x3333))+((cj5*r00*x3334))+(((-1.0)*x3333)));
j4eval[0]=x3335;
j4eval[1]=((IKabs((((cj0*x3334))+(((-1.0)*cj0*cj5*x3332)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3335);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3336=cj5*cj5;
IkReal x3337=((1.0)*r20);
IkReal x3338=(r01*r21);
IkReal x3339=(r21*sj5);
CheckValue<IkReal> x3340 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3339))+(((-1.0)*cj0*cj5*x3337)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3340.valid){
continue;
}
CheckValue<IkReal> x3341=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3339))+(((-1.0)*r00*x3336*x3337))+(((-1.0)*x3338))+((x3336*x3338)))),-1);
if(!x3341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3340.value)+(((1.5707963267949)*(x3341.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3342=IKcos(j4);
IkReal x3343=IKsin(j4);
IkReal x3344=(cj5*r00);
IkReal x3345=(cj5*r10);
IkReal x3346=(cj5*r20);
IkReal x3347=((1.0)*x3342);
IkReal x3348=((1.0)*x3343);
IkReal x3349=(sj5*x3342);
IkReal x3350=(sj5*x3343);
evalcond[0]=((((-1.0)*x3346*x3347))+((r22*x3343))+((r21*x3349)));
evalcond[1]=((((-1.0)*x3346*x3348))+((r21*x3350))+(((-1.0)*r22*x3347)));
evalcond[2]=(cj0+((r02*x3343))+(((-1.0)*x3344*x3347))+((r01*x3349)));
evalcond[3]=(sj0+(((-1.0)*x3345*x3347))+((r11*x3349))+((r12*x3343)));
evalcond[4]=(cj0+((r11*x3350))+(((-1.0)*x3345*x3348))+(((-1.0)*r12*x3347)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3350))+(((-1.0)*r02*x3347))+(((-1.0)*x3344*x3348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3351=((1.0)*cj5);
CheckValue<IkReal> x3352 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3351)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3352.valid){
continue;
}
CheckValue<IkReal> x3353=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3351)))),-1);
if(!x3353.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3352.value)+(((1.5707963267949)*(x3353.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3354=IKcos(j4);
IkReal x3355=IKsin(j4);
IkReal x3356=(cj5*r00);
IkReal x3357=(cj5*r10);
IkReal x3358=(cj5*r20);
IkReal x3359=((1.0)*x3354);
IkReal x3360=((1.0)*x3355);
IkReal x3361=(sj5*x3354);
IkReal x3362=(sj5*x3355);
evalcond[0]=(((r21*x3361))+(((-1.0)*x3358*x3359))+((r22*x3355)));
evalcond[1]=(((r21*x3362))+(((-1.0)*r22*x3359))+(((-1.0)*x3358*x3360)));
evalcond[2]=(cj0+((r01*x3361))+(((-1.0)*x3356*x3359))+((r02*x3355)));
evalcond[3]=(((r12*x3355))+sj0+(((-1.0)*x3357*x3359))+((r11*x3361)));
evalcond[4]=(cj0+(((-1.0)*x3357*x3360))+(((-1.0)*r12*x3359))+((r11*x3362)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3359))+((r01*x3362))+(((-1.0)*x3356*x3360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3363 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3363.valid){
continue;
}
CheckValue<IkReal> x3364=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3363.value)+(((1.5707963267949)*(x3364.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3365=IKcos(j4);
IkReal x3366=IKsin(j4);
IkReal x3367=(cj5*r00);
IkReal x3368=(cj5*r10);
IkReal x3369=(cj5*r20);
IkReal x3370=((1.0)*x3365);
IkReal x3371=((1.0)*x3366);
IkReal x3372=(sj5*x3365);
IkReal x3373=(sj5*x3366);
evalcond[0]=(((r22*x3366))+((r21*x3372))+(((-1.0)*x3369*x3370)));
evalcond[1]=((((-1.0)*r22*x3370))+((r21*x3373))+(((-1.0)*x3369*x3371)));
evalcond[2]=(((r01*x3372))+((r02*x3366))+cj0+(((-1.0)*x3367*x3370)));
evalcond[3]=(sj0+((r12*x3366))+((r11*x3372))+(((-1.0)*x3368*x3370)));
evalcond[4]=(cj0+(((-1.0)*r12*x3370))+((r11*x3373))+(((-1.0)*x3368*x3371)));
evalcond[5]=(((r01*x3373))+(((-1.0)*sj0))+(((-1.0)*x3367*x3371))+(((-1.0)*r02*x3370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.14018460980658)*py))+(((-0.67478761815078)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.14018460980658)*px))+(((0.67478761815078)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))))+IKsqr(((((-2.14018460980658)*px))+(((0.67478761815078)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.14018460980658)*py))+(((-0.67478761815078)*px))), ((((-2.14018460980658)*px))+(((0.67478761815078)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3374=IKcos(j0);
IkReal x3375=IKsin(j0);
evalcond[0]=((((-0.134)*x3375))+(((-1.0)*px))+(((-0.425)*x3374)));
evalcond[1]=((((0.134)*x3374))+(((-1.0)*py))+(((-0.425)*x3375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3376=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3376;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3376);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3377=((1.0)*cj5);
IkReal x3378=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3377)));
j4eval[0]=x3378;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3377)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3378);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3379=((1.0)*cj5);
IkReal x3380=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3379)));
j4eval[0]=x3380;
j4eval[1]=IKsign(x3380);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3379))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3381=((1.0)*cj5);
CheckValue<IkReal> x3382=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3381)))),-1);
if(!x3382.valid){
continue;
}
CheckValue<IkReal> x3383 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3381)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3382.value)))+(x3383.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3384=IKcos(j4);
IkReal x3385=IKsin(j4);
IkReal x3386=((1.0)*sj0);
IkReal x3387=(cj5*r00);
IkReal x3388=(cj5*r10);
IkReal x3389=(cj5*r20);
IkReal x3390=((1.0)*x3384);
IkReal x3391=((1.0)*x3385);
IkReal x3392=(sj5*x3384);
IkReal x3393=(sj5*x3385);
evalcond[0]=((((-1.0)*x3389*x3390))+((r21*x3392))+((r22*x3385)));
evalcond[1]=((((-1.0)*r22*x3390))+(((-1.0)*x3389*x3391))+((r21*x3393)));
evalcond[2]=(cj0+((r11*x3393))+(((-1.0)*r12*x3390))+(((-1.0)*x3388*x3391)));
evalcond[3]=((((-1.0)*x3387*x3390))+((r01*x3392))+((r02*x3385))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3392))+((r12*x3385))+(((-1.0)*x3388*x3390))+(((-1.0)*x3386)));
evalcond[5]=((((-1.0)*x3387*x3391))+((r01*x3393))+(((-1.0)*r02*x3390))+(((-1.0)*x3386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3394=((1.0)*cj5);
CheckValue<IkReal> x3395 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3394)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3395.valid){
continue;
}
CheckValue<IkReal> x3396=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3394))+(((-1.0)*r00*sj5)))),-1);
if(!x3396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3395.value)+(((1.5707963267949)*(x3396.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3397=IKcos(j4);
IkReal x3398=IKsin(j4);
IkReal x3399=((1.0)*sj0);
IkReal x3400=(cj5*r00);
IkReal x3401=(cj5*r10);
IkReal x3402=(cj5*r20);
IkReal x3403=((1.0)*x3397);
IkReal x3404=((1.0)*x3398);
IkReal x3405=(sj5*x3397);
IkReal x3406=(sj5*x3398);
evalcond[0]=((((-1.0)*x3402*x3403))+((r21*x3405))+((r22*x3398)));
evalcond[1]=((((-1.0)*x3402*x3404))+((r21*x3406))+(((-1.0)*r22*x3403)));
evalcond[2]=(cj0+(((-1.0)*x3401*x3404))+((r11*x3406))+(((-1.0)*r12*x3403)));
evalcond[3]=((((-1.0)*x3400*x3403))+((r02*x3398))+((r01*x3405))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3401*x3403))+((r11*x3405))+(((-1.0)*x3399))+((r12*x3398)));
evalcond[5]=((((-1.0)*x3400*x3404))+(((-1.0)*r02*x3403))+(((-1.0)*x3399))+((r01*x3406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3407 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3407.valid){
continue;
}
CheckValue<IkReal> x3408=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3407.value)+(((1.5707963267949)*(x3408.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3409=IKcos(j4);
IkReal x3410=IKsin(j4);
IkReal x3411=((1.0)*sj0);
IkReal x3412=(cj5*r00);
IkReal x3413=(cj5*r10);
IkReal x3414=(cj5*r20);
IkReal x3415=((1.0)*x3409);
IkReal x3416=((1.0)*x3410);
IkReal x3417=(sj5*x3409);
IkReal x3418=(sj5*x3410);
evalcond[0]=(((r22*x3410))+((r21*x3417))+(((-1.0)*x3414*x3415)));
evalcond[1]=((((-1.0)*r22*x3415))+((r21*x3418))+(((-1.0)*x3414*x3416)));
evalcond[2]=(cj0+((r11*x3418))+(((-1.0)*r12*x3415))+(((-1.0)*x3413*x3416)));
evalcond[3]=((((-1.0)*x3412*x3415))+((r02*x3410))+((r01*x3417))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3410))+((r11*x3417))+(((-1.0)*x3413*x3415))+(((-1.0)*x3411)));
evalcond[5]=((((-1.0)*x3412*x3416))+(((-1.0)*r02*x3415))+((r01*x3418))+(((-1.0)*x3411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3419=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3419;
j4eval[1]=IKsign(x3419);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3420=((1.0)*cj5);
IkReal x3421=((((-1.0)*r11*x3420))+(((-1.0)*r10*sj5)));
j4eval[0]=x3421;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3420))))));
j4eval[2]=IKsign(x3421);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3422=cj5*cj5;
IkReal x3423=((1.0)*r20);
IkReal x3424=(r01*r21);
IkReal x3425=(r21*sj5);
IkReal x3426=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3425))+(((-1.0)*r00*x3422*x3423))+((x3422*x3424))+(((-1.0)*x3424)));
j4eval[0]=x3426;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3423))+((cj0*x3425)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3426);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3427=cj5*cj5;
IkReal x3428=((1.0)*r20);
IkReal x3429=(r01*r21);
IkReal x3430=(r21*sj5);
CheckValue<IkReal> x3431=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3427*x3429))+((cj5*r00*x3430))+(((-1.0)*r00*x3427*x3428))+(((-1.0)*x3429)))),-1);
if(!x3431.valid){
continue;
}
CheckValue<IkReal> x3432 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3430))+(((-1.0)*cj0*cj5*x3428)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3431.value)))+(x3432.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3433=IKcos(j4);
IkReal x3434=IKsin(j4);
IkReal x3435=(cj5*r00);
IkReal x3436=(cj5*r10);
IkReal x3437=(cj5*r20);
IkReal x3438=((1.0)*x3433);
IkReal x3439=((1.0)*x3434);
IkReal x3440=(sj5*x3433);
IkReal x3441=(sj5*x3434);
evalcond[0]=(((r21*x3440))+(((-1.0)*x3437*x3438))+((r22*x3434)));
evalcond[1]=(((r21*x3441))+(((-1.0)*x3437*x3439))+(((-1.0)*r22*x3438)));
evalcond[2]=(cj0+(((-1.0)*x3435*x3438))+((r01*x3440))+((r02*x3434)));
evalcond[3]=(((r11*x3440))+sj0+(((-1.0)*x3436*x3438))+((r12*x3434)));
evalcond[4]=(((r11*x3441))+(((-1.0)*r12*x3438))+cj0+(((-1.0)*x3436*x3439)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3435*x3439))+((r01*x3441))+(((-1.0)*r02*x3438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3442=((1.0)*cj5);
CheckValue<IkReal> x3443=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3442)))),-1);
if(!x3443.valid){
continue;
}
CheckValue<IkReal> x3444 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x3442))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3443.value)))+(x3444.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3445=IKcos(j4);
IkReal x3446=IKsin(j4);
IkReal x3447=(cj5*r00);
IkReal x3448=(cj5*r10);
IkReal x3449=(cj5*r20);
IkReal x3450=((1.0)*x3445);
IkReal x3451=((1.0)*x3446);
IkReal x3452=(sj5*x3445);
IkReal x3453=(sj5*x3446);
evalcond[0]=(((r21*x3452))+((r22*x3446))+(((-1.0)*x3449*x3450)));
evalcond[1]=(((r21*x3453))+(((-1.0)*r22*x3450))+(((-1.0)*x3449*x3451)));
evalcond[2]=((((-1.0)*x3447*x3450))+cj0+((r02*x3446))+((r01*x3452)));
evalcond[3]=(sj0+((r12*x3446))+(((-1.0)*x3448*x3450))+((r11*x3452)));
evalcond[4]=(cj0+(((-1.0)*x3448*x3451))+(((-1.0)*r12*x3450))+((r11*x3453)));
evalcond[5]=((((-1.0)*x3447*x3451))+(((-1.0)*sj0))+(((-1.0)*r02*x3450))+((r01*x3453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3454 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3454.valid){
continue;
}
CheckValue<IkReal> x3455=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3454.value)+(((1.5707963267949)*(x3455.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3456=IKcos(j4);
IkReal x3457=IKsin(j4);
IkReal x3458=(cj5*r00);
IkReal x3459=(cj5*r10);
IkReal x3460=(cj5*r20);
IkReal x3461=((1.0)*x3456);
IkReal x3462=((1.0)*x3457);
IkReal x3463=(sj5*x3456);
IkReal x3464=(sj5*x3457);
evalcond[0]=((((-1.0)*x3460*x3461))+((r22*x3457))+((r21*x3463)));
evalcond[1]=((((-1.0)*x3460*x3462))+(((-1.0)*r22*x3461))+((r21*x3464)));
evalcond[2]=(cj0+(((-1.0)*x3458*x3461))+((r01*x3463))+((r02*x3457)));
evalcond[3]=(sj0+((r12*x3457))+(((-1.0)*x3459*x3461))+((r11*x3463)));
evalcond[4]=(cj0+(((-1.0)*r12*x3461))+(((-1.0)*x3459*x3462))+((r11*x3464)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3461))+(((-1.0)*x3458*x3462))+((r01*x3464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-7.46268656716418)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((7.46268656716418)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-7.46268656716418)*px))+IKsqr(((7.46268656716418)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-7.46268656716418)*px), ((7.46268656716418)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.134)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((0.134)*(IKcos(j0))))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3465=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3465;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3465);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3466=((1.0)*cj5);
IkReal x3467=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3466)));
j4eval[0]=x3467;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3466)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3467);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3468=((1.0)*cj5);
IkReal x3469=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3468)));
j4eval[0]=x3469;
j4eval[1]=IKsign(x3469);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3468))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3470=((1.0)*cj5);
CheckValue<IkReal> x3471=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3470)))),-1);
if(!x3471.valid){
continue;
}
CheckValue<IkReal> x3472 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3470))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3471.value)))+(x3472.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3473=IKcos(j4);
IkReal x3474=IKsin(j4);
IkReal x3475=((1.0)*sj0);
IkReal x3476=(cj5*r00);
IkReal x3477=(cj5*r10);
IkReal x3478=(cj5*r20);
IkReal x3479=((1.0)*x3473);
IkReal x3480=((1.0)*x3474);
IkReal x3481=(sj5*x3473);
IkReal x3482=(sj5*x3474);
evalcond[0]=(((r21*x3481))+(((-1.0)*x3478*x3479))+((r22*x3474)));
evalcond[1]=((((-1.0)*r22*x3479))+((r21*x3482))+(((-1.0)*x3478*x3480)));
evalcond[2]=(cj0+(((-1.0)*r12*x3479))+((r11*x3482))+(((-1.0)*x3477*x3480)));
evalcond[3]=(((r01*x3481))+((r02*x3474))+(((-1.0)*x3476*x3479))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3474))+((r11*x3481))+(((-1.0)*x3475))+(((-1.0)*x3477*x3479)));
evalcond[5]=((((-1.0)*r02*x3479))+((r01*x3482))+(((-1.0)*x3476*x3480))+(((-1.0)*x3475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3483=((1.0)*cj5);
CheckValue<IkReal> x3484=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3483))+(((-1.0)*r00*sj5)))),-1);
if(!x3484.valid){
continue;
}
CheckValue<IkReal> x3485 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3483)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3485.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3484.value)))+(x3485.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3486=IKcos(j4);
IkReal x3487=IKsin(j4);
IkReal x3488=((1.0)*sj0);
IkReal x3489=(cj5*r00);
IkReal x3490=(cj5*r10);
IkReal x3491=(cj5*r20);
IkReal x3492=((1.0)*x3486);
IkReal x3493=((1.0)*x3487);
IkReal x3494=(sj5*x3486);
IkReal x3495=(sj5*x3487);
evalcond[0]=(((r21*x3494))+((r22*x3487))+(((-1.0)*x3491*x3492)));
evalcond[1]=((((-1.0)*r22*x3492))+((r21*x3495))+(((-1.0)*x3491*x3493)));
evalcond[2]=((((-1.0)*r12*x3492))+cj0+(((-1.0)*x3490*x3493))+((r11*x3495)));
evalcond[3]=(((r01*x3494))+(((-1.0)*x3489*x3492))+((r02*x3487))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3490*x3492))+((r12*x3487))+((r11*x3494))+(((-1.0)*x3488)));
evalcond[5]=((((-1.0)*r02*x3492))+((r01*x3495))+(((-1.0)*x3489*x3493))+(((-1.0)*x3488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3496 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3496.valid){
continue;
}
CheckValue<IkReal> x3497=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3496.value)+(((1.5707963267949)*(x3497.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3498=IKcos(j4);
IkReal x3499=IKsin(j4);
IkReal x3500=((1.0)*sj0);
IkReal x3501=(cj5*r00);
IkReal x3502=(cj5*r10);
IkReal x3503=(cj5*r20);
IkReal x3504=((1.0)*x3498);
IkReal x3505=((1.0)*x3499);
IkReal x3506=(sj5*x3498);
IkReal x3507=(sj5*x3499);
evalcond[0]=(((r22*x3499))+(((-1.0)*x3503*x3504))+((r21*x3506)));
evalcond[1]=((((-1.0)*r22*x3504))+(((-1.0)*x3503*x3505))+((r21*x3507)));
evalcond[2]=((((-1.0)*r12*x3504))+cj0+(((-1.0)*x3502*x3505))+((r11*x3507)));
evalcond[3]=(((r01*x3506))+(((-1.0)*x3501*x3504))+((r02*x3499))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3500))+(((-1.0)*x3502*x3504))+((r11*x3506))+((r12*x3499)));
evalcond[5]=(((r01*x3507))+(((-1.0)*x3500))+(((-1.0)*x3501*x3505))+(((-1.0)*r02*x3504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3508=(sj1*sj2);
IkReal x3509=(r00*sj5);
IkReal x3510=(cj5*r01);
IkReal x3511=((212.5)*cj1);
IkReal x3512=(cj1*cj2);
IkReal x3513=((500.0)*px);
IkReal x3514=((246.0)*x3512);
CheckValue<IkReal> x3515=IKPowWithIntegerCheck(((((-67.0)*x3512))+(((67.0)*x3508))),-1);
if(!x3515.valid){
continue;
}
CheckValue<IkReal> x3516=IKPowWithIntegerCheck((x3508+(((-1.0)*x3512))),-1);
if(!x3516.valid){
continue;
}
if( IKabs(((x3515.value)*(((((-246.0)*x3508*x3509))+((x3510*x3511))+((x3510*x3514))+(((-246.0)*x3508*x3510))+(((-1.0)*x3508*x3513))+((x3509*x3511))+((x3509*x3514))+((x3512*x3513)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3516.value)*((x3509+x3510)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3515.value)*(((((-246.0)*x3508*x3509))+((x3510*x3511))+((x3510*x3514))+(((-246.0)*x3508*x3510))+(((-1.0)*x3508*x3513))+((x3509*x3511))+((x3509*x3514))+((x3512*x3513))))))+IKsqr(((x3516.value)*((x3509+x3510))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3515.value)*(((((-246.0)*x3508*x3509))+((x3510*x3511))+((x3510*x3514))+(((-246.0)*x3508*x3510))+(((-1.0)*x3508*x3513))+((x3509*x3511))+((x3509*x3514))+((x3512*x3513))))), ((x3516.value)*((x3509+x3510))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3517=IKcos(j0);
IkReal x3518=IKsin(j0);
IkReal x3519=((0.1)*sj5);
IkReal x3520=(cj5*r11);
IkReal x3521=(sj1*sj2);
IkReal x3522=(cj1*cj2);
IkReal x3523=((1.0)*sj5);
IkReal x3524=(cj5*r01);
IkReal x3525=((0.425)*cj1);
IkReal x3526=((0.392)*x3518);
IkReal x3527=((0.392)*x3517);
evalcond[0]=((((-1.0)*x3524))+((x3517*x3521))+(((-1.0)*x3517*x3522))+(((-1.0)*r00*x3523)));
evalcond[1]=((((-1.0)*x3520))+(((-1.0)*r10*x3523))+((x3518*x3521))+(((-1.0)*x3518*x3522)));
evalcond[2]=((((-0.134)*x3518))+((x3517*x3525))+((x3522*x3527))+(((-1.0)*px))+(((-1.0)*x3521*x3527))+(((-0.1)*x3524))+(((-1.0)*r00*x3519)));
evalcond[3]=((((0.134)*x3517))+(((-1.0)*r10*x3519))+((x3522*x3526))+(((-1.0)*py))+(((-1.0)*x3521*x3526))+(((-0.1)*x3520))+((x3518*x3525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3528=((1.0)*cj5);
IkReal x3529=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3528)));
j4eval[0]=x3529;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3528)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3529);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3530=((1.0)*cj5);
IkReal x3531=((((-1.0)*r11*x3530))+(((-1.0)*r10*sj5)));
j4eval[0]=x3531;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3530))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x3531);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3532=((1.0)*sj0);
IkReal x3533=((1.0)*cj0);
IkReal x3534=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3534;
j4eval[1]=((IKabs(((((-1.0)*r12*x3532))+(((-1.0)*r02*x3533)))))+(IKabs(((((-1.0)*r01*sj5*x3533))+(((-1.0)*r11*sj5*x3532))+((cj0*cj5*r00))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x3534);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3535=((-1.0)*r20);
IkReal x3537 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3537)==0){
continue;
}
IkReal x3536=pow(x3537,-0.5);
CheckValue<IkReal> x3538 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3535),IKFAST_ATAN2_MAGTHRESH);
if(!x3538.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3538.value));
IkReal gconst97=(r21*x3536);
IkReal gconst98=(x3535*x3536);
CheckValue<IkReal> x3539 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3539.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3539.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3540=((-1.0)*r20);
IkReal x3541=x3536;
CheckValue<IkReal> x3543 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3540),IKFAST_ATAN2_MAGTHRESH);
if(!x3543.valid){
continue;
}
IkReal x3542=((-1.0)*(x3543.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3542;
IkReal gconst96=x3542;
IkReal gconst97=(r21*x3541);
IkReal gconst98=(x3540*x3541);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3544=((-1.0)*r20);
IkReal x3545=x3536;
CheckValue<IkReal> x3547 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3544),IKFAST_ATAN2_MAGTHRESH);
if(!x3547.valid){
continue;
}
IkReal x3546=((-1.0)*(x3547.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3546;
IkReal gconst96=x3546;
IkReal gconst97=(r21*x3545);
IkReal gconst98=(x3544*x3545);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3548=((-1.0)*r20);
IkReal x3549=x3536;
CheckValue<IkReal> x3551 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3548),IKFAST_ATAN2_MAGTHRESH);
if(!x3551.valid){
continue;
}
IkReal x3550=((-1.0)*(x3551.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3550;
IkReal gconst96=x3550;
IkReal gconst97=(r21*x3549);
IkReal gconst98=(x3548*x3549);
IkReal x3552=((1.0)*(r22*r22));
CheckValue<IkReal> x3556=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3552))),-1);
if(!x3556.valid){
continue;
}
IkReal x3553=x3556.value;
IkReal x3554=((1.0)*x3553);
IkReal x3555=((((-1.0)*x3554*(r21*r21*r21*r21)))+(((-1.0)*x3554*(r20*r20*r20*r20)))+(((-2.0)*x3553*(r20*r20)*(r21*r21)))+(((-1.0)*x3552)));
j4eval[0]=x3555;
j4eval[1]=IKsign(x3555);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3557=(cj1*cj2);
IkReal x3558=(gconst98*r20);
IkReal x3559=(sj1*sj2);
IkReal x3560=(gconst97*r21);
CheckValue<IkReal> x3561 = IKatan2WithCheck(IkReal((((r22*x3559))+(((-1.0)*r22*x3557)))),IkReal(((((-1.0)*x3558*x3559))+((x3559*x3560))+((x3557*x3558))+(((-1.0)*x3557*x3560)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3561.valid){
continue;
}
CheckValue<IkReal> x3562=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3560*x3560)))+(((-1.0)*(r22*r22)))+(((2.0)*x3558*x3560))+(((-1.0)*(x3558*x3558))))),-1);
if(!x3562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3561.value)+(((1.5707963267949)*(x3562.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3563=IKsin(j4);
IkReal x3564=IKcos(j4);
IkReal x3565=(gconst98*r10);
IkReal x3566=(gconst97*r21);
IkReal x3567=(gconst98*r20);
IkReal x3568=((1.0)*cj2);
IkReal x3569=((1.0)*sj0);
IkReal x3570=(gconst98*r00);
IkReal x3571=(cj1*sj2);
IkReal x3572=((1.0)*x3564);
IkReal x3573=((1.0)*x3563);
IkReal x3574=(gconst97*x3563);
IkReal x3575=(gconst97*x3564);
evalcond[0]=(((x3563*x3566))+(((-1.0)*x3567*x3573))+(((-1.0)*r22*x3572)));
evalcond[1]=(cj0+(((-1.0)*x3565*x3573))+((r11*x3574))+(((-1.0)*r12*x3572)));
evalcond[2]=(((r01*x3574))+(((-1.0)*x3569))+(((-1.0)*x3570*x3573))+(((-1.0)*r02*x3572)));
evalcond[3]=(((sj1*sj2))+((r22*x3563))+(((-1.0)*x3567*x3572))+((x3564*x3566))+(((-1.0)*cj1*x3568)));
evalcond[4]=(((r01*x3575))+(((-1.0)*cj0*x3571))+(((-1.0)*cj0*sj1*x3568))+((r02*x3563))+(((-1.0)*x3570*x3572)));
evalcond[5]=((((-1.0)*x3565*x3572))+(((-1.0)*sj0*sj1*x3568))+(((-1.0)*x3569*x3571))+((r11*x3575))+((r12*x3563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3576=((1.0)*gconst98);
CheckValue<IkReal> x3577=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3576))+(((-1.0)*gconst97*r10)))),-1);
if(!x3577.valid){
continue;
}
CheckValue<IkReal> x3578 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3576)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3577.value)))+(x3578.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3579=IKsin(j4);
IkReal x3580=IKcos(j4);
IkReal x3581=(gconst98*r10);
IkReal x3582=(gconst97*r21);
IkReal x3583=(gconst98*r20);
IkReal x3584=((1.0)*cj2);
IkReal x3585=((1.0)*sj0);
IkReal x3586=(gconst98*r00);
IkReal x3587=(cj1*sj2);
IkReal x3588=((1.0)*x3580);
IkReal x3589=((1.0)*x3579);
IkReal x3590=(gconst97*x3579);
IkReal x3591=(gconst97*x3580);
evalcond[0]=((((-1.0)*r22*x3588))+((x3579*x3582))+(((-1.0)*x3583*x3589)));
evalcond[1]=(cj0+((r11*x3590))+(((-1.0)*x3581*x3589))+(((-1.0)*r12*x3588)));
evalcond[2]=((((-1.0)*r02*x3588))+(((-1.0)*x3586*x3589))+((r01*x3590))+(((-1.0)*x3585)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x3583*x3588))+((r22*x3579))+((x3580*x3582))+(((-1.0)*cj1*x3584)));
evalcond[4]=((((-1.0)*cj0*x3587))+(((-1.0)*cj0*sj1*x3584))+((r02*x3579))+(((-1.0)*x3586*x3588))+((r01*x3591)));
evalcond[5]=(((r11*x3591))+(((-1.0)*x3581*x3588))+((r12*x3579))+(((-1.0)*x3585*x3587))+(((-1.0)*sj0*sj1*x3584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3592=((1.0)*gconst98);
CheckValue<IkReal> x3593=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3592))+(((-1.0)*gconst97*r00)))),-1);
if(!x3593.valid){
continue;
}
CheckValue<IkReal> x3594 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3592))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3593.value)))+(x3594.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3595=IKsin(j4);
IkReal x3596=IKcos(j4);
IkReal x3597=(gconst98*r10);
IkReal x3598=(gconst97*r21);
IkReal x3599=(gconst98*r20);
IkReal x3600=((1.0)*cj2);
IkReal x3601=((1.0)*sj0);
IkReal x3602=(gconst98*r00);
IkReal x3603=(cj1*sj2);
IkReal x3604=((1.0)*x3596);
IkReal x3605=((1.0)*x3595);
IkReal x3606=(gconst97*x3595);
IkReal x3607=(gconst97*x3596);
evalcond[0]=(((x3595*x3598))+(((-1.0)*r22*x3604))+(((-1.0)*x3599*x3605)));
evalcond[1]=(((r11*x3606))+cj0+(((-1.0)*r12*x3604))+(((-1.0)*x3597*x3605)));
evalcond[2]=((((-1.0)*r02*x3604))+(((-1.0)*x3602*x3605))+((r01*x3606))+(((-1.0)*x3601)));
evalcond[3]=(((sj1*sj2))+((x3596*x3598))+(((-1.0)*x3599*x3604))+((r22*x3595))+(((-1.0)*cj1*x3600)));
evalcond[4]=(((r02*x3595))+(((-1.0)*x3602*x3604))+((r01*x3607))+(((-1.0)*cj0*x3603))+(((-1.0)*cj0*sj1*x3600)));
evalcond[5]=(((r11*x3607))+(((-1.0)*x3601*x3603))+((r12*x3595))+(((-1.0)*sj0*sj1*x3600))+(((-1.0)*x3597*x3604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3608=((-1.0)*r21);
IkReal x3610 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3610)==0){
continue;
}
IkReal x3609=pow(x3610,-0.5);
CheckValue<IkReal> x3611 = IKatan2WithCheck(IkReal(x3608),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3611.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3611.value))));
IkReal gconst100=(x3608*x3609);
IkReal gconst101=((1.0)*r20*x3609);
CheckValue<IkReal> x3612 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3612.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3612.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3613=((-1.0)*r21);
CheckValue<IkReal> x3616 = IKatan2WithCheck(IkReal(x3613),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3616.valid){
continue;
}
IkReal x3614=((1.0)*(x3616.value));
IkReal x3615=x3609;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3614)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3614)));
IkReal gconst100=(x3613*x3615);
IkReal gconst101=((1.0)*r20*x3615);
IkReal x3617=r22*r22;
IkReal x3618=((1.0)*x3617);
CheckValue<IkReal> x3622=IKPowWithIntegerCheck(((-1.0)+x3617),-1);
if(!x3622.valid){
continue;
}
IkReal x3619=x3622.value;
if((((1.0)+(((-1.0)*x3618)))) < -0.00001)
continue;
IkReal x3620=IKsqrt(((1.0)+(((-1.0)*x3618))));
IkReal x3621=(cj0*x3619*x3620);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x3621+(((-1.0)*x3618*x3621))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3623=((-1.0)*r21);
CheckValue<IkReal> x3626 = IKatan2WithCheck(IkReal(x3623),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3626.valid){
continue;
}
IkReal x3624=((1.0)*(x3626.value));
IkReal x3625=x3609;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3624)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3624)));
IkReal gconst100=(x3623*x3625);
IkReal gconst101=((1.0)*r20*x3625);
IkReal x3627=r22*r22;
IkReal x3628=((1.0)*x3627);
CheckValue<IkReal> x3632=IKPowWithIntegerCheck(((-1.0)+x3627),-1);
if(!x3632.valid){
continue;
}
IkReal x3629=x3632.value;
if((((1.0)+(((-1.0)*x3628)))) < -0.00001)
continue;
IkReal x3630=IKsqrt(((1.0)+(((-1.0)*x3628))));
IkReal x3631=(sj0*x3629*x3630);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x3628*x3631))+x3631))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3633=((-1.0)*r21);
CheckValue<IkReal> x3636 = IKatan2WithCheck(IkReal(x3633),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3636.valid){
continue;
}
IkReal x3634=((1.0)*(x3636.value));
IkReal x3635=x3609;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3634)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3634)));
IkReal gconst100=(x3633*x3635);
IkReal gconst101=((1.0)*r20*x3635);
IkReal x3637=r22*r22;
IkReal x3638=(r12*sj0);
IkReal x3639=(cj0*r02);
CheckValue<IkReal> x3643=IKPowWithIntegerCheck(((-1.0)+x3637),-1);
if(!x3643.valid){
continue;
}
IkReal x3640=x3643.value;
if((((1.0)+(((-1.0)*x3637)))) < -0.00001)
continue;
IkReal x3641=IKsqrt(((1.0)+(((-1.0)*x3637))));
IkReal x3642=(r22*x3640*x3641);
j4eval[0]=0;
j4eval[1]=((IKabs((((x3639*x3642))+((x3638*x3642)))))+(IKabs(((((-1.0)*x3638))+(((-1.0)*x3639))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3644=((1.0)*sj0);
IkReal x3645=((1.0)*gconst100);
CheckValue<IkReal> x3646=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3645))+(((-1.0)*gconst101*r21)))),-1);
if(!x3646.valid){
continue;
}
CheckValue<IkReal> x3647 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3644))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst100*r11*x3644))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x3645)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3646.value)))+(x3647.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3648=IKsin(j4);
IkReal x3649=IKcos(j4);
IkReal x3650=(gconst101*r20);
IkReal x3651=(gconst101*r10);
IkReal x3652=((1.0)*cj2);
IkReal x3653=(gconst101*r00);
IkReal x3654=((1.0)*sj0);
IkReal x3655=(cj1*sj2);
IkReal x3656=((1.0)*x3649);
IkReal x3657=((1.0)*x3648);
IkReal x3658=(gconst100*x3648);
IkReal x3659=(gconst100*x3649);
evalcond[0]=(((r21*x3658))+(((-1.0)*x3650*x3657))+(((-1.0)*r22*x3656)));
evalcond[1]=(cj0+((r11*x3658))+(((-1.0)*x3651*x3657))+(((-1.0)*r12*x3656)));
evalcond[2]=((((-1.0)*x3653*x3657))+(((-1.0)*r02*x3656))+((r01*x3658))+(((-1.0)*x3654)));
evalcond[3]=(((sj1*sj2))+((r21*x3659))+(((-1.0)*x3650*x3656))+(((-1.0)*cj1*x3652))+((r22*x3648)));
evalcond[4]=((((-1.0)*cj0*x3655))+(((-1.0)*x3653*x3656))+((r02*x3648))+(((-1.0)*cj0*sj1*x3652))+((r01*x3659)));
evalcond[5]=((((-1.0)*sj0*sj1*x3652))+((r12*x3648))+((r11*x3659))+(((-1.0)*x3654*x3655))+(((-1.0)*x3651*x3656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3660=((1.0)*gconst101);
CheckValue<IkReal> x3661 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3660))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3661.valid){
continue;
}
CheckValue<IkReal> x3662=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3660)))),-1);
if(!x3662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3661.value)+(((1.5707963267949)*(x3662.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3663=IKsin(j4);
IkReal x3664=IKcos(j4);
IkReal x3665=(gconst101*r20);
IkReal x3666=(gconst101*r10);
IkReal x3667=((1.0)*cj2);
IkReal x3668=(gconst101*r00);
IkReal x3669=((1.0)*sj0);
IkReal x3670=(cj1*sj2);
IkReal x3671=((1.0)*x3664);
IkReal x3672=((1.0)*x3663);
IkReal x3673=(gconst100*x3663);
IkReal x3674=(gconst100*x3664);
evalcond[0]=((((-1.0)*x3665*x3672))+((r21*x3673))+(((-1.0)*r22*x3671)));
evalcond[1]=(cj0+((r11*x3673))+(((-1.0)*r12*x3671))+(((-1.0)*x3666*x3672)));
evalcond[2]=(((r01*x3673))+(((-1.0)*x3669))+(((-1.0)*x3668*x3672))+(((-1.0)*r02*x3671)));
evalcond[3]=(((r22*x3663))+(((-1.0)*x3665*x3671))+((sj1*sj2))+((r21*x3674))+(((-1.0)*cj1*x3667)));
evalcond[4]=(((r01*x3674))+(((-1.0)*cj0*sj1*x3667))+(((-1.0)*cj0*x3670))+((r02*x3663))+(((-1.0)*x3668*x3671)));
evalcond[5]=(((r11*x3674))+(((-1.0)*sj0*sj1*x3667))+((r12*x3663))+(((-1.0)*x3666*x3671))+(((-1.0)*x3669*x3670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3675=((1.0)*gconst101);
CheckValue<IkReal> x3676=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3675)))),-1);
if(!x3676.valid){
continue;
}
CheckValue<IkReal> x3677 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3675)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3676.value)))+(x3677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3678=IKsin(j4);
IkReal x3679=IKcos(j4);
IkReal x3680=(gconst101*r20);
IkReal x3681=(gconst101*r10);
IkReal x3682=((1.0)*cj2);
IkReal x3683=(gconst101*r00);
IkReal x3684=((1.0)*sj0);
IkReal x3685=(cj1*sj2);
IkReal x3686=((1.0)*x3679);
IkReal x3687=((1.0)*x3678);
IkReal x3688=(gconst100*x3678);
IkReal x3689=(gconst100*x3679);
evalcond[0]=((((-1.0)*r22*x3686))+((r21*x3688))+(((-1.0)*x3680*x3687)));
evalcond[1]=(cj0+(((-1.0)*r12*x3686))+((r11*x3688))+(((-1.0)*x3681*x3687)));
evalcond[2]=(((r01*x3688))+(((-1.0)*x3684))+(((-1.0)*x3683*x3687))+(((-1.0)*r02*x3686)));
evalcond[3]=(((r21*x3689))+((sj1*sj2))+(((-1.0)*cj1*x3682))+(((-1.0)*x3680*x3686))+((r22*x3678)));
evalcond[4]=(((r01*x3689))+(((-1.0)*cj0*x3685))+(((-1.0)*x3683*x3686))+((r02*x3678))+(((-1.0)*cj0*sj1*x3682)));
evalcond[5]=((((-1.0)*sj0*sj1*x3682))+((r12*x3678))+(((-1.0)*x3684*x3685))+((r11*x3689))+(((-1.0)*x3681*x3686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3690=((-1.0)*r10);
IkReal x3692 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3692)==0){
continue;
}
IkReal x3691=pow(x3692,-0.5);
CheckValue<IkReal> x3693 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3690),IKFAST_ATAN2_MAGTHRESH);
if(!x3693.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3693.value));
IkReal gconst103=(r11*x3691);
IkReal gconst104=(x3690*x3691);
CheckValue<IkReal> x3694 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3694.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3694.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3695=((-1.0)*r10);
IkReal x3696=x3691;
CheckValue<IkReal> x3698 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3695),IKFAST_ATAN2_MAGTHRESH);
if(!x3698.valid){
continue;
}
IkReal x3697=((-1.0)*(x3698.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3697;
IkReal gconst102=x3697;
IkReal gconst103=(r11*x3696);
IkReal gconst104=(x3695*x3696);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3699=((1.0)*sj0);
IkReal x3700=((1.0)*gconst103);
CheckValue<IkReal> x3701=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x3700)))),-1);
if(!x3701.valid){
continue;
}
CheckValue<IkReal> x3702 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3699))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3700))+(((-1.0)*gconst103*r11*x3699))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3702.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3701.value)))+(x3702.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3703=IKsin(j4);
IkReal x3704=IKcos(j4);
IkReal x3705=(gconst103*r11);
IkReal x3706=((1.0)*cj2);
IkReal x3707=((1.0)*sj0);
IkReal x3708=(cj1*sj2);
IkReal x3709=((1.0)*x3704);
IkReal x3710=(gconst103*x3704);
IkReal x3711=(gconst103*x3703);
IkReal x3712=((1.0)*gconst104*x3703);
evalcond[0]=((((-1.0)*r20*x3712))+((r21*x3711))+(((-1.0)*r22*x3709)));
evalcond[1]=(cj0+(((-1.0)*r10*x3712))+(((-1.0)*r12*x3709))+((x3703*x3705)));
evalcond[2]=((((-1.0)*r02*x3709))+(((-1.0)*r00*x3712))+(((-1.0)*x3707))+((r01*x3711)));
evalcond[3]=((((-1.0)*gconst104*r20*x3709))+(((-1.0)*cj1*x3706))+((sj1*sj2))+((r21*x3710))+((r22*x3703)));
evalcond[4]=((((-1.0)*cj0*x3708))+(((-1.0)*cj0*sj1*x3706))+(((-1.0)*gconst104*r00*x3709))+((r01*x3710))+((r02*x3703)));
evalcond[5]=((((-1.0)*x3707*x3708))+((r12*x3703))+(((-1.0)*sj0*sj1*x3706))+((x3704*x3705))+(((-1.0)*gconst104*r10*x3709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3713=((1.0)*gconst104);
CheckValue<IkReal> x3714 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3713))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3714.valid){
continue;
}
CheckValue<IkReal> x3715=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x3713)))),-1);
if(!x3715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3714.value)+(((1.5707963267949)*(x3715.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3716=IKsin(j4);
IkReal x3717=IKcos(j4);
IkReal x3718=(gconst103*r11);
IkReal x3719=((1.0)*cj2);
IkReal x3720=((1.0)*sj0);
IkReal x3721=(cj1*sj2);
IkReal x3722=((1.0)*x3717);
IkReal x3723=(gconst103*x3717);
IkReal x3724=(gconst103*x3716);
IkReal x3725=((1.0)*gconst104*x3716);
evalcond[0]=((((-1.0)*r22*x3722))+(((-1.0)*r20*x3725))+((r21*x3724)));
evalcond[1]=(cj0+(((-1.0)*r12*x3722))+(((-1.0)*r10*x3725))+((x3716*x3718)));
evalcond[2]=((((-1.0)*x3720))+((r01*x3724))+(((-1.0)*r00*x3725))+(((-1.0)*r02*x3722)));
evalcond[3]=((((-1.0)*cj1*x3719))+((sj1*sj2))+(((-1.0)*gconst104*r20*x3722))+((r22*x3716))+((r21*x3723)));
evalcond[4]=((((-1.0)*cj0*x3721))+(((-1.0)*gconst104*r00*x3722))+((r01*x3723))+((r02*x3716))+(((-1.0)*cj0*sj1*x3719)));
evalcond[5]=((((-1.0)*gconst104*r10*x3722))+((x3717*x3718))+((r12*x3716))+(((-1.0)*sj0*sj1*x3719))+(((-1.0)*x3720*x3721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3726=((-1.0)*r11);
IkReal x3728 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3728)==0){
continue;
}
IkReal x3727=pow(x3728,-0.5);
CheckValue<IkReal> x3729 = IKatan2WithCheck(IkReal(x3726),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3729.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3729.value))));
IkReal gconst106=(x3726*x3727);
IkReal gconst107=((1.0)*r10*x3727);
CheckValue<IkReal> x3730 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3730.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3730.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3731=((-1.0)*r11);
CheckValue<IkReal> x3734 = IKatan2WithCheck(IkReal(x3731),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3734.valid){
continue;
}
IkReal x3732=((1.0)*(x3734.value));
IkReal x3733=x3727;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3732)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3732)));
IkReal gconst106=(x3731*x3733);
IkReal gconst107=((1.0)*r10*x3733);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3735=((-1.0)*r11);
CheckValue<IkReal> x3738 = IKatan2WithCheck(IkReal(x3735),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3738.valid){
continue;
}
IkReal x3736=((1.0)*(x3738.value));
IkReal x3737=x3727;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3736)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3736)));
IkReal gconst106=(x3735*x3737);
IkReal gconst107=((1.0)*r10*x3737);
IkReal x3739=r12*r12;
IkReal x3740=((1.0)*sj0);
IkReal x3741=(cj0*r02);
IkReal x3742=x3727;
j4eval[0]=((IKabs(((((-1.0)*x3740*x3742))+((r12*x3741*x3742))+((sj0*x3739*x3742)))))+(IKabs(((((-1.0)*r12*x3740))+(((-1.0)*x3741))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3743=((-1.0)*r11);
CheckValue<IkReal> x3746 = IKatan2WithCheck(IkReal(x3743),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3746.valid){
continue;
}
IkReal x3744=((1.0)*(x3746.value));
IkReal x3745=x3727;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3744)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3744)));
IkReal gconst106=(x3743*x3745);
IkReal gconst107=((1.0)*r10*x3745);
IkReal x3747=r12*r12;
IkReal x3748=((1.0)+(((-1.0)*x3747)));
IkReal x3749=(r22*sj1*sj2);
IkReal x3750=(cj1*cj2*r22);
CheckValue<IkReal> x3757=IKPowWithIntegerCheck(x3748,-1);
if(!x3757.valid){
continue;
}
IkReal x3751=x3757.value;
CheckValue<IkReal> x3758=IKPowWithIntegerCheck(((-1.0)+x3747),-1);
if(!x3758.valid){
continue;
}
IkReal x3752=x3758.value;
IkReal x3753=((1.0)*x3751);
if((x3748) < -0.00001)
continue;
IkReal x3754=IKsqrt(x3748);
IkReal x3755=(r12*x3752*x3754);
IkReal x3756=((((-1.0)*x3753*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x3751))+(((-1.0)*x3753*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22))));
j4eval[0]=x3756;
j4eval[1]=((IKabs(((((-1.0)*x3749*x3755))+((x3750*x3755)))))+(IKabs((x3749+(((-1.0)*x3750))))));
j4eval[2]=IKsign(x3756);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3759=(sj1*sj2);
IkReal x3760=(gconst106*r21);
IkReal x3761=(gconst107*r20);
IkReal x3762=(cj1*cj2);
CheckValue<IkReal> x3763 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3762))+((r22*x3759)))),IkReal(((((-1.0)*x3760*x3762))+(((-1.0)*x3759*x3761))+((x3761*x3762))+((x3759*x3760)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3763.valid){
continue;
}
CheckValue<IkReal> x3764=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3761*x3761)))+(((-1.0)*(x3760*x3760)))+(((-1.0)*(r22*r22)))+(((2.0)*x3760*x3761)))),-1);
if(!x3764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3763.value)+(((1.5707963267949)*(x3764.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3765=IKsin(j4);
IkReal x3766=IKcos(j4);
IkReal x3767=(gconst107*r10);
IkReal x3768=(gconst107*r00);
IkReal x3769=((1.0)*cj2);
IkReal x3770=(gconst107*r20);
IkReal x3771=((1.0)*sj0);
IkReal x3772=(cj1*sj2);
IkReal x3773=((1.0)*x3766);
IkReal x3774=(gconst106*x3766);
IkReal x3775=(gconst106*x3765);
IkReal x3776=((1.0)*x3765);
evalcond[0]=(((r21*x3775))+(((-1.0)*r22*x3773))+(((-1.0)*x3770*x3776)));
evalcond[1]=(cj0+(((-1.0)*x3767*x3776))+((r11*x3775))+(((-1.0)*r12*x3773)));
evalcond[2]=((((-1.0)*r02*x3773))+(((-1.0)*x3771))+(((-1.0)*x3768*x3776))+((r01*x3775)));
evalcond[3]=(((r22*x3765))+((r21*x3774))+((sj1*sj2))+(((-1.0)*x3770*x3773))+(((-1.0)*cj1*x3769)));
evalcond[4]=(((r02*x3765))+(((-1.0)*cj0*sj1*x3769))+(((-1.0)*cj0*x3772))+(((-1.0)*x3768*x3773))+((r01*x3774)));
evalcond[5]=((((-1.0)*x3767*x3773))+((r11*x3774))+((r12*x3765))+(((-1.0)*x3771*x3772))+(((-1.0)*sj0*sj1*x3769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3777=((1.0)*sj0);
IkReal x3778=((1.0)*gconst106);
CheckValue<IkReal> x3779=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3778))+(((-1.0)*gconst107*r21)))),-1);
if(!x3779.valid){
continue;
}
CheckValue<IkReal> x3780 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3777)))),IkReal(((((-1.0)*cj0*r01*x3778))+((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x3777))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3780.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3779.value)))+(x3780.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3781=IKsin(j4);
IkReal x3782=IKcos(j4);
IkReal x3783=(gconst107*r10);
IkReal x3784=(gconst107*r00);
IkReal x3785=((1.0)*cj2);
IkReal x3786=(gconst107*r20);
IkReal x3787=((1.0)*sj0);
IkReal x3788=(cj1*sj2);
IkReal x3789=((1.0)*x3782);
IkReal x3790=(gconst106*x3782);
IkReal x3791=(gconst106*x3781);
IkReal x3792=((1.0)*x3781);
evalcond[0]=(((r21*x3791))+(((-1.0)*x3786*x3792))+(((-1.0)*r22*x3789)));
evalcond[1]=((((-1.0)*x3783*x3792))+cj0+(((-1.0)*r12*x3789))+((r11*x3791)));
evalcond[2]=((((-1.0)*r02*x3789))+(((-1.0)*x3787))+(((-1.0)*x3784*x3792))+((r01*x3791)));
evalcond[3]=(((r21*x3790))+((r22*x3781))+((sj1*sj2))+(((-1.0)*cj1*x3785))+(((-1.0)*x3786*x3789)));
evalcond[4]=((((-1.0)*x3784*x3789))+((r02*x3781))+(((-1.0)*cj0*x3788))+((r01*x3790))+(((-1.0)*cj0*sj1*x3785)));
evalcond[5]=(((r12*x3781))+(((-1.0)*sj0*sj1*x3785))+(((-1.0)*x3783*x3789))+((r11*x3790))+(((-1.0)*x3787*x3788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3793=((1.0)*gconst107);
CheckValue<IkReal> x3794=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3793)))),-1);
if(!x3794.valid){
continue;
}
CheckValue<IkReal> x3795 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*r20*x3793)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3794.value)))+(x3795.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3796=IKsin(j4);
IkReal x3797=IKcos(j4);
IkReal x3798=(gconst107*r10);
IkReal x3799=(gconst107*r00);
IkReal x3800=((1.0)*cj2);
IkReal x3801=(gconst107*r20);
IkReal x3802=((1.0)*sj0);
IkReal x3803=(cj1*sj2);
IkReal x3804=((1.0)*x3797);
IkReal x3805=(gconst106*x3797);
IkReal x3806=(gconst106*x3796);
IkReal x3807=((1.0)*x3796);
evalcond[0]=(((r21*x3806))+(((-1.0)*x3801*x3807))+(((-1.0)*r22*x3804)));
evalcond[1]=(((r11*x3806))+cj0+(((-1.0)*r12*x3804))+(((-1.0)*x3798*x3807)));
evalcond[2]=(((r01*x3806))+(((-1.0)*x3802))+(((-1.0)*r02*x3804))+(((-1.0)*x3799*x3807)));
evalcond[3]=(((r22*x3796))+((r21*x3805))+(((-1.0)*x3801*x3804))+((sj1*sj2))+(((-1.0)*cj1*x3800)));
evalcond[4]=(((r01*x3805))+((r02*x3796))+(((-1.0)*cj0*x3803))+(((-1.0)*cj0*sj1*x3800))+(((-1.0)*x3799*x3804)));
evalcond[5]=((((-1.0)*sj0*sj1*x3800))+((r11*x3805))+(((-1.0)*x3802*x3803))+((r12*x3796))+(((-1.0)*x3798*x3804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3808=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3808;
j4eval[1]=IKsign(x3808);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3809=((1.0)*cj5);
IkReal x3810=((((-1.0)*r01*x3809))+(((-1.0)*r00*sj5)));
j4eval[0]=x3810;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3809))))));
j4eval[2]=IKsign(x3810);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3811=(sj1*sj2);
IkReal x3812=(cj5*r10);
IkReal x3813=(r11*sj5);
IkReal x3814=(cj1*cj2);
IkReal x3815=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3815;
j4eval[1]=((IKabs((((x3811*x3813))+(((-1.0)*x3813*x3814))+((x3812*x3814))+(((-1.0)*x3811*x3812)))))+(IKabs((((r12*x3814))+(((-1.0)*r12*x3811))))));
j4eval[2]=IKsign(x3815);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3816=(sj1*sj2);
IkReal x3817=(cj5*r10);
IkReal x3818=(r11*sj5);
IkReal x3819=(cj1*cj2);
CheckValue<IkReal> x3820 = IKatan2WithCheck(IkReal((((x3817*x3819))+((x3816*x3818))+(((-1.0)*x3818*x3819))+(((-1.0)*x3816*x3817)))),IkReal((((r12*x3819))+(((-1.0)*r12*x3816)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3820.valid){
continue;
}
CheckValue<IkReal> x3821=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3820.value)+(((1.5707963267949)*(x3821.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3822=IKcos(j4);
IkReal x3823=IKsin(j4);
IkReal x3824=(cj5*r00);
IkReal x3825=(cj5*r10);
IkReal x3826=(r21*sj5);
IkReal x3827=((1.0)*cj2);
IkReal x3828=(cj5*r20);
IkReal x3829=((1.0)*x3822);
IkReal x3830=((1.0)*x3823);
IkReal x3831=(sj5*x3823);
IkReal x3832=(sj5*x3822);
evalcond[0]=(((r12*x3823))+(((-1.0)*x3825*x3829))+((r11*x3832)));
evalcond[1]=((((-1.0)*r22*x3829))+(((-1.0)*x3828*x3830))+((x3823*x3826)));
evalcond[2]=((((-1.0)*r02*x3829))+((r01*x3831))+(((-1.0)*x3824*x3830)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3829))+((r11*x3831))+(((-1.0)*x3825*x3830)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x3827))+((r22*x3823))+(((-1.0)*x3828*x3829))+((x3822*x3826)));
evalcond[5]=((((-1.0)*x3824*x3829))+(((-1.0)*sj1*x3827))+((r01*x3832))+(((-1.0)*cj1*sj2))+((r02*x3823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3833=((1.0)*cj5);
CheckValue<IkReal> x3834=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3833)))),-1);
if(!x3834.valid){
continue;
}
CheckValue<IkReal> x3835 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3833))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3834.value)))+(x3835.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3836=IKcos(j4);
IkReal x3837=IKsin(j4);
IkReal x3838=(cj5*r00);
IkReal x3839=(cj5*r10);
IkReal x3840=(r21*sj5);
IkReal x3841=((1.0)*cj2);
IkReal x3842=(cj5*r20);
IkReal x3843=((1.0)*x3836);
IkReal x3844=((1.0)*x3837);
IkReal x3845=(sj5*x3837);
IkReal x3846=(sj5*x3836);
evalcond[0]=((((-1.0)*x3839*x3843))+((r12*x3837))+((r11*x3846)));
evalcond[1]=((((-1.0)*x3842*x3844))+((x3837*x3840))+(((-1.0)*r22*x3843)));
evalcond[2]=((((-1.0)*r02*x3843))+(((-1.0)*x3838*x3844))+((r01*x3845)));
evalcond[3]=((1.0)+(((-1.0)*x3839*x3844))+(((-1.0)*r12*x3843))+((r11*x3845)));
evalcond[4]=((((-1.0)*x3842*x3843))+((sj1*sj2))+((x3836*x3840))+(((-1.0)*cj1*x3841))+((r22*x3837)));
evalcond[5]=(((r02*x3837))+(((-1.0)*sj1*x3841))+(((-1.0)*cj1*sj2))+(((-1.0)*x3838*x3843))+((r01*x3846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3847=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3847.valid){
continue;
}
CheckValue<IkReal> x3848 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3847.value)))+(x3848.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3849=IKcos(j4);
IkReal x3850=IKsin(j4);
IkReal x3851=(cj5*r00);
IkReal x3852=(cj5*r10);
IkReal x3853=(r21*sj5);
IkReal x3854=((1.0)*cj2);
IkReal x3855=(cj5*r20);
IkReal x3856=((1.0)*x3849);
IkReal x3857=((1.0)*x3850);
IkReal x3858=(sj5*x3850);
IkReal x3859=(sj5*x3849);
evalcond[0]=(((r11*x3859))+(((-1.0)*x3852*x3856))+((r12*x3850)));
evalcond[1]=(((x3850*x3853))+(((-1.0)*x3855*x3857))+(((-1.0)*r22*x3856)));
evalcond[2]=(((r01*x3858))+(((-1.0)*x3851*x3857))+(((-1.0)*r02*x3856)));
evalcond[3]=((1.0)+((r11*x3858))+(((-1.0)*r12*x3856))+(((-1.0)*x3852*x3857)));
evalcond[4]=(((x3849*x3853))+((sj1*sj2))+(((-1.0)*x3855*x3856))+(((-1.0)*cj1*x3854))+((r22*x3850)));
evalcond[5]=(((r02*x3850))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3854))+((r01*x3859))+(((-1.0)*x3851*x3856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3860=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3860;
j4eval[1]=IKsign(x3860);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3861=((1.0)*cj5);
IkReal x3862=((((-1.0)*r21*x3861))+(((-1.0)*r20*sj5)));
j4eval[0]=x3862;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3861))))));
j4eval[2]=IKsign(x3862);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3863=cj5*cj5;
IkReal x3864=r11*r11;
IkReal x3865=(r11*sj5);
IkReal x3866=(cj5*r10);
IkReal x3867=((r12*r12)+((x3863*(r10*r10)))+x3864+(((-2.0)*x3865*x3866))+(((-1.0)*x3863*x3864)));
j4eval[0]=x3867;
j4eval[1]=IKsign(x3867);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3866))+x3865))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3868=cj5*cj5;
IkReal x3869=r11*r11;
IkReal x3870=(cj5*r10);
IkReal x3871=(r11*sj5);
CheckValue<IkReal> x3872=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x3870*x3871))+(((-1.0)*x3868*x3869))+((x3868*(r10*r10)))+x3869)),-1);
if(!x3872.valid){
continue;
}
CheckValue<IkReal> x3873 = IKatan2WithCheck(IkReal((x3871+(((-1.0)*x3870)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3872.value)))+(x3873.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3874=IKcos(j4);
IkReal x3875=IKsin(j4);
IkReal x3876=(cj5*r00);
IkReal x3877=(cj5*r10);
IkReal x3878=(r21*sj5);
IkReal x3879=(cj5*r20);
IkReal x3880=((1.0)*x3874);
IkReal x3881=((1.0)*x3875);
IkReal x3882=(sj5*x3875);
IkReal x3883=(sj5*x3874);
evalcond[0]=(((r11*x3883))+(((-1.0)*x3877*x3880))+((r12*x3875)));
evalcond[1]=((((-1.0)*x3879*x3881))+(((-1.0)*r22*x3880))+((x3875*x3878)));
evalcond[2]=((((-1.0)*r02*x3880))+((r01*x3882))+(((-1.0)*x3876*x3881)));
evalcond[3]=((-1.0)+((r11*x3882))+(((-1.0)*x3877*x3881))+(((-1.0)*r12*x3880)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x3883))+((r02*x3875))+(((-1.0)*x3876*x3880)));
evalcond[5]=((((-1.0)*x3879*x3880))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3874*x3878))+((r22*x3875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3884=((1.0)*cj5);
CheckValue<IkReal> x3885=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3884))+(((-1.0)*r20*sj5)))),-1);
if(!x3885.valid){
continue;
}
CheckValue<IkReal> x3886 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3884)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3885.value)))+(x3886.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3887=IKcos(j4);
IkReal x3888=IKsin(j4);
IkReal x3889=(cj5*r00);
IkReal x3890=(cj5*r10);
IkReal x3891=(r21*sj5);
IkReal x3892=(cj5*r20);
IkReal x3893=((1.0)*x3887);
IkReal x3894=((1.0)*x3888);
IkReal x3895=(sj5*x3888);
IkReal x3896=(sj5*x3887);
evalcond[0]=(((r12*x3888))+((r11*x3896))+(((-1.0)*x3890*x3893)));
evalcond[1]=(((x3888*x3891))+(((-1.0)*r22*x3893))+(((-1.0)*x3892*x3894)));
evalcond[2]=((((-1.0)*x3889*x3894))+((r01*x3895))+(((-1.0)*r02*x3893)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3893))+((r11*x3895))+(((-1.0)*x3890*x3894)));
evalcond[4]=((((-1.0)*x3889*x3893))+((cj2*sj1))+((cj1*sj2))+((r01*x3896))+((r02*x3888)));
evalcond[5]=(((r22*x3888))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3892*x3893))+((x3887*x3891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3897 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3897.valid){
continue;
}
CheckValue<IkReal> x3898=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3897.value)+(((1.5707963267949)*(x3898.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3899=IKcos(j4);
IkReal x3900=IKsin(j4);
IkReal x3901=(cj5*r00);
IkReal x3902=(cj5*r10);
IkReal x3903=(r21*sj5);
IkReal x3904=(cj5*r20);
IkReal x3905=((1.0)*x3899);
IkReal x3906=((1.0)*x3900);
IkReal x3907=(sj5*x3900);
IkReal x3908=(sj5*x3899);
evalcond[0]=((((-1.0)*x3902*x3905))+((r12*x3900))+((r11*x3908)));
evalcond[1]=(((x3900*x3903))+(((-1.0)*x3904*x3906))+(((-1.0)*r22*x3905)));
evalcond[2]=((((-1.0)*x3901*x3906))+((r01*x3907))+(((-1.0)*r02*x3905)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3905))+(((-1.0)*x3902*x3906))+((r11*x3907)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3901*x3905))+((cj1*sj2))+((r01*x3908))+((r02*x3900)));
evalcond[5]=((((-1.0)*x3904*x3905))+((r22*x3900))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3899*x3903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3909=((-1.0)*r00);
IkReal x3911 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3911)==0){
continue;
}
IkReal x3910=pow(x3911,-0.5);
CheckValue<IkReal> x3912 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3909),IKFAST_ATAN2_MAGTHRESH);
if(!x3912.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3912.value));
IkReal gconst109=(r01*x3910);
IkReal gconst110=(x3909*x3910);
CheckValue<IkReal> x3913 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3913.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3913.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3914=((-1.0)*r00);
IkReal x3915=x3910;
CheckValue<IkReal> x3917 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3914),IKFAST_ATAN2_MAGTHRESH);
if(!x3917.valid){
continue;
}
IkReal x3916=((-1.0)*(x3917.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3916;
IkReal gconst108=x3916;
IkReal gconst109=(r01*x3915);
IkReal gconst110=(x3914*x3915);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3918=((1.0)*sj0);
IkReal x3919=((1.0)*gconst109);
CheckValue<IkReal> x3920 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3918)))),IkReal(((((-1.0)*cj0*r01*x3919))+(((-1.0)*gconst109*r11*x3918))+((cj0*gconst110*r00))+((gconst110*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3920.valid){
continue;
}
CheckValue<IkReal> x3921=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3919))+(((-1.0)*gconst110*r21)))),-1);
if(!x3921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3920.value)+(((1.5707963267949)*(x3921.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3922=IKsin(j4);
IkReal x3923=IKcos(j4);
IkReal x3924=(gconst109*r21);
IkReal x3925=((1.0)*cj2);
IkReal x3926=((1.0)*sj0);
IkReal x3927=(cj1*sj2);
IkReal x3928=((1.0)*x3923);
IkReal x3929=(gconst109*x3922);
IkReal x3930=(gconst109*x3923);
IkReal x3931=((1.0)*gconst110*x3922);
evalcond[0]=((((-1.0)*r20*x3931))+(((-1.0)*r22*x3928))+((x3922*x3924)));
evalcond[1]=(((r11*x3929))+cj0+(((-1.0)*r12*x3928))+(((-1.0)*r10*x3931)));
evalcond[2]=((((-1.0)*x3926))+(((-1.0)*r00*x3931))+(((-1.0)*r02*x3928))+((r01*x3929)));
evalcond[3]=((((-1.0)*gconst110*r20*x3928))+(((-1.0)*cj1*x3925))+((sj1*sj2))+((r22*x3922))+((x3923*x3924)));
evalcond[4]=((((-1.0)*cj0*x3927))+(((-1.0)*gconst110*r00*x3928))+((r01*x3930))+((r02*x3922))+(((-1.0)*cj0*sj1*x3925)));
evalcond[5]=(((r12*x3922))+(((-1.0)*sj0*sj1*x3925))+(((-1.0)*gconst110*r10*x3928))+(((-1.0)*x3926*x3927))+((r11*x3930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3932=((1.0)*gconst110);
CheckValue<IkReal> x3933=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r10))+(((-1.0)*r11*x3932)))),-1);
if(!x3933.valid){
continue;
}
CheckValue<IkReal> x3934 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3932))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3933.value)))+(x3934.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3935=IKsin(j4);
IkReal x3936=IKcos(j4);
IkReal x3937=(gconst109*r21);
IkReal x3938=((1.0)*cj2);
IkReal x3939=((1.0)*sj0);
IkReal x3940=(cj1*sj2);
IkReal x3941=((1.0)*x3936);
IkReal x3942=(gconst109*x3935);
IkReal x3943=(gconst109*x3936);
IkReal x3944=((1.0)*gconst110*x3935);
evalcond[0]=((((-1.0)*r22*x3941))+((x3935*x3937))+(((-1.0)*r20*x3944)));
evalcond[1]=(cj0+(((-1.0)*r10*x3944))+(((-1.0)*r12*x3941))+((r11*x3942)));
evalcond[2]=(((r01*x3942))+(((-1.0)*r00*x3944))+(((-1.0)*r02*x3941))+(((-1.0)*x3939)));
evalcond[3]=(((r22*x3935))+(((-1.0)*cj1*x3938))+((sj1*sj2))+(((-1.0)*gconst110*r20*x3941))+((x3936*x3937)));
evalcond[4]=(((r01*x3943))+(((-1.0)*cj0*sj1*x3938))+(((-1.0)*cj0*x3940))+(((-1.0)*gconst110*r00*x3941))+((r02*x3935)));
evalcond[5]=((((-1.0)*x3939*x3940))+(((-1.0)*gconst110*r10*x3941))+((r12*x3935))+(((-1.0)*sj0*sj1*x3938))+((r11*x3943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3945=((-1.0)*r01);
IkReal x3947 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3947)==0){
continue;
}
IkReal x3946=pow(x3947,-0.5);
CheckValue<IkReal> x3948 = IKatan2WithCheck(IkReal(x3945),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3948.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3948.value))));
IkReal gconst112=(x3945*x3946);
IkReal gconst113=((1.0)*r00*x3946);
CheckValue<IkReal> x3949 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3949.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3949.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3950=((-1.0)*r01);
CheckValue<IkReal> x3953 = IKatan2WithCheck(IkReal(x3950),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3953.valid){
continue;
}
IkReal x3951=((1.0)*(x3953.value));
IkReal x3952=x3946;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3951)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3951)));
IkReal gconst112=(x3950*x3952);
IkReal gconst113=((1.0)*r00*x3952);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3954=((-1.0)*r01);
CheckValue<IkReal> x3957 = IKatan2WithCheck(IkReal(x3954),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3957.valid){
continue;
}
IkReal x3955=((1.0)*(x3957.value));
IkReal x3956=x3946;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3955)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3955)));
IkReal gconst112=(x3954*x3956);
IkReal gconst113=((1.0)*r00*x3956);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3958=((-1.0)*r01);
CheckValue<IkReal> x3961 = IKatan2WithCheck(IkReal(x3958),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3961.valid){
continue;
}
IkReal x3959=((1.0)*(x3961.value));
IkReal x3960=x3946;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3959)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3959)));
IkReal gconst112=(x3958*x3960);
IkReal gconst113=((1.0)*r00*x3960);
IkReal x3962=r02*r02;
IkReal x3963=(r12*sj0);
IkReal x3964=((1.0)*cj0);
IkReal x3965=x3946;
j4eval[0]=((IKabs(((((-1.0)*r02*x3964))+(((-1.0)*x3963)))))+(IKabs((((cj0*x3962*x3965))+((r02*x3963*x3965))+(((-1.0)*x3964*x3965))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3966=((1.0)*sj0);
IkReal x3967=((1.0)*gconst112);
CheckValue<IkReal> x3968=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3967))+(((-1.0)*gconst113*r21)))),-1);
if(!x3968.valid){
continue;
}
CheckValue<IkReal> x3969 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3966)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x3967))+(((-1.0)*gconst112*r11*x3966)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3968.value)))+(x3969.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3970=IKsin(j4);
IkReal x3971=IKcos(j4);
IkReal x3972=(gconst113*r20);
IkReal x3973=(gconst112*r21);
IkReal x3974=((1.0)*cj2);
IkReal x3975=(gconst113*r00);
IkReal x3976=(gconst113*r10);
IkReal x3977=((1.0)*sj0);
IkReal x3978=(cj1*sj2);
IkReal x3979=((1.0)*x3971);
IkReal x3980=((1.0)*x3970);
IkReal x3981=(gconst112*x3971);
IkReal x3982=(gconst112*x3970);
evalcond[0]=(((x3970*x3973))+(((-1.0)*r22*x3979))+(((-1.0)*x3972*x3980)));
evalcond[1]=((((-1.0)*r12*x3979))+((r11*x3982))+cj0+(((-1.0)*x3976*x3980)));
evalcond[2]=((((-1.0)*x3977))+(((-1.0)*r02*x3979))+((r01*x3982))+(((-1.0)*x3975*x3980)));
evalcond[3]=((((-1.0)*x3972*x3979))+(((-1.0)*cj1*x3974))+((x3971*x3973))+((sj1*sj2))+((r22*x3970)));
evalcond[4]=(((r02*x3970))+((r01*x3981))+(((-1.0)*cj0*sj1*x3974))+(((-1.0)*x3975*x3979))+(((-1.0)*cj0*x3978)));
evalcond[5]=(((r11*x3981))+(((-1.0)*x3976*x3979))+(((-1.0)*x3977*x3978))+((r12*x3970))+(((-1.0)*sj0*sj1*x3974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3983=((1.0)*gconst113);
CheckValue<IkReal> x3984 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x3983)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3984.valid){
continue;
}
CheckValue<IkReal> x3985=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3983))+(((-1.0)*gconst112*r10)))),-1);
if(!x3985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3984.value)+(((1.5707963267949)*(x3985.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3986=IKsin(j4);
IkReal x3987=IKcos(j4);
IkReal x3988=(gconst113*r20);
IkReal x3989=(gconst112*r21);
IkReal x3990=((1.0)*cj2);
IkReal x3991=(gconst113*r00);
IkReal x3992=(gconst113*r10);
IkReal x3993=((1.0)*sj0);
IkReal x3994=(cj1*sj2);
IkReal x3995=((1.0)*x3987);
IkReal x3996=((1.0)*x3986);
IkReal x3997=(gconst112*x3987);
IkReal x3998=(gconst112*x3986);
evalcond[0]=((((-1.0)*x3988*x3996))+((x3986*x3989))+(((-1.0)*r22*x3995)));
evalcond[1]=(cj0+(((-1.0)*r12*x3995))+(((-1.0)*x3992*x3996))+((r11*x3998)));
evalcond[2]=((((-1.0)*x3993))+(((-1.0)*r02*x3995))+(((-1.0)*x3991*x3996))+((r01*x3998)));
evalcond[3]=((((-1.0)*x3988*x3995))+((x3987*x3989))+((sj1*sj2))+((r22*x3986))+(((-1.0)*cj1*x3990)));
evalcond[4]=((((-1.0)*cj0*sj1*x3990))+(((-1.0)*cj0*x3994))+(((-1.0)*x3991*x3995))+((r01*x3997))+((r02*x3986)));
evalcond[5]=((((-1.0)*x3993*x3994))+(((-1.0)*x3992*x3995))+((r11*x3997))+(((-1.0)*sj0*sj1*x3990))+((r12*x3986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3999=((1.0)*gconst113);
CheckValue<IkReal> x4000=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3999))+(((-1.0)*gconst112*r00)))),-1);
if(!x4000.valid){
continue;
}
CheckValue<IkReal> x4001 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3999))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4000.value)))+(x4001.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4002=IKsin(j4);
IkReal x4003=IKcos(j4);
IkReal x4004=(gconst113*r20);
IkReal x4005=(gconst112*r21);
IkReal x4006=((1.0)*cj2);
IkReal x4007=(gconst113*r00);
IkReal x4008=(gconst113*r10);
IkReal x4009=((1.0)*sj0);
IkReal x4010=(cj1*sj2);
IkReal x4011=((1.0)*x4003);
IkReal x4012=((1.0)*x4002);
IkReal x4013=(gconst112*x4003);
IkReal x4014=(gconst112*x4002);
evalcond[0]=((((-1.0)*r22*x4011))+(((-1.0)*x4004*x4012))+((x4002*x4005)));
evalcond[1]=((((-1.0)*r12*x4011))+cj0+(((-1.0)*x4008*x4012))+((r11*x4014)));
evalcond[2]=((((-1.0)*x4009))+(((-1.0)*r02*x4011))+((r01*x4014))+(((-1.0)*x4007*x4012)));
evalcond[3]=(((sj1*sj2))+((r22*x4002))+(((-1.0)*cj1*x4006))+((x4003*x4005))+(((-1.0)*x4004*x4011)));
evalcond[4]=((((-1.0)*cj0*x4010))+((r01*x4013))+((r02*x4002))+(((-1.0)*x4007*x4011))+(((-1.0)*cj0*sj1*x4006)));
evalcond[5]=(((r12*x4002))+(((-1.0)*sj0*sj1*x4006))+(((-1.0)*x4008*x4011))+(((-1.0)*x4009*x4010))+((r11*x4013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4015=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4015;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4015);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4016=((1.0)*cj5);
IkReal x4017=((((-1.0)*r11*x4016))+(((-1.0)*r10*sj5)));
j4eval[0]=x4017;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4016)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4017);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4018=cj5*cj5;
IkReal x4019=r01*r01;
IkReal x4020=(cj5*r00);
IkReal x4021=(r01*sj5);
IkReal x4022=((((-2.0)*x4020*x4021))+x4019+(((-1.0)*x4018*x4019))+((x4018*(r00*r00)))+(r02*r02));
j4eval[0]=x4022;
j4eval[1]=IKsign(x4022);
j4eval[2]=((IKabs(((((-1.0)*x4020))+x4021)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4023=cj5*cj5;
IkReal x4024=r01*r01;
IkReal x4025=(r01*sj5);
IkReal x4026=(cj5*r00);
CheckValue<IkReal> x4027=IKPowWithIntegerCheck(IKsign((((x4023*(r00*r00)))+x4024+(((-2.0)*x4025*x4026))+(((-1.0)*x4023*x4024))+(r02*r02))),-1);
if(!x4027.valid){
continue;
}
CheckValue<IkReal> x4028 = IKatan2WithCheck(IkReal(((((-1.0)*x4026))+x4025)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4027.value)))+(x4028.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4029=IKcos(j4);
IkReal x4030=IKsin(j4);
IkReal x4031=(cj5*r00);
IkReal x4032=(cj5*r10);
IkReal x4033=(r21*sj5);
IkReal x4034=((1.0)*cj2);
IkReal x4035=(cj5*r20);
IkReal x4036=((1.0)*x4029);
IkReal x4037=((1.0)*x4030);
IkReal x4038=(sj5*x4030);
IkReal x4039=(sj5*x4029);
evalcond[0]=((((-1.0)*x4031*x4036))+((r02*x4030))+((r01*x4039)));
evalcond[1]=((((-1.0)*r22*x4036))+(((-1.0)*x4035*x4037))+((x4030*x4033)));
evalcond[2]=((((-1.0)*r12*x4036))+(((-1.0)*x4032*x4037))+((r11*x4038)));
evalcond[3]=((-1.0)+(((-1.0)*x4031*x4037))+((r01*x4038))+(((-1.0)*r02*x4036)));
evalcond[4]=(((x4029*x4033))+(((-1.0)*cj1*x4034))+((sj1*sj2))+(((-1.0)*x4035*x4036))+((r22*x4030)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r12*x4030))+(((-1.0)*x4032*x4036))+((r11*x4039))+(((-1.0)*sj1*x4034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4040=((1.0)*cj5);
CheckValue<IkReal> x4041 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4040))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4041.valid){
continue;
}
CheckValue<IkReal> x4042=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4040)))),-1);
if(!x4042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4041.value)+(((1.5707963267949)*(x4042.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4043=IKcos(j4);
IkReal x4044=IKsin(j4);
IkReal x4045=(cj5*r00);
IkReal x4046=(cj5*r10);
IkReal x4047=(r21*sj5);
IkReal x4048=((1.0)*cj2);
IkReal x4049=(cj5*r20);
IkReal x4050=((1.0)*x4043);
IkReal x4051=((1.0)*x4044);
IkReal x4052=(sj5*x4044);
IkReal x4053=(sj5*x4043);
evalcond[0]=(((r02*x4044))+(((-1.0)*x4045*x4050))+((r01*x4053)));
evalcond[1]=(((x4044*x4047))+(((-1.0)*x4049*x4051))+(((-1.0)*r22*x4050)));
evalcond[2]=((((-1.0)*r12*x4050))+(((-1.0)*x4046*x4051))+((r11*x4052)));
evalcond[3]=((-1.0)+(((-1.0)*x4045*x4051))+(((-1.0)*r02*x4050))+((r01*x4052)));
evalcond[4]=(((r22*x4044))+((x4043*x4047))+((sj1*sj2))+(((-1.0)*cj1*x4048))+(((-1.0)*x4049*x4050)));
evalcond[5]=((((-1.0)*sj1*x4048))+(((-1.0)*x4046*x4050))+(((-1.0)*cj1*sj2))+((r11*x4053))+((r12*x4044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4054=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4054.valid){
continue;
}
CheckValue<IkReal> x4055 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4054.value)))+(x4055.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4056=IKcos(j4);
IkReal x4057=IKsin(j4);
IkReal x4058=(cj5*r00);
IkReal x4059=(cj5*r10);
IkReal x4060=(r21*sj5);
IkReal x4061=((1.0)*cj2);
IkReal x4062=(cj5*r20);
IkReal x4063=((1.0)*x4056);
IkReal x4064=((1.0)*x4057);
IkReal x4065=(sj5*x4057);
IkReal x4066=(sj5*x4056);
evalcond[0]=(((r02*x4057))+(((-1.0)*x4058*x4063))+((r01*x4066)));
evalcond[1]=((((-1.0)*x4062*x4064))+((x4057*x4060))+(((-1.0)*r22*x4063)));
evalcond[2]=((((-1.0)*r12*x4063))+(((-1.0)*x4059*x4064))+((r11*x4065)));
evalcond[3]=((-1.0)+(((-1.0)*x4058*x4064))+(((-1.0)*r02*x4063))+((r01*x4065)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x4062*x4063))+((x4056*x4060))+(((-1.0)*cj1*x4061))+((r22*x4057)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x4059*x4063))+((r11*x4066))+((r12*x4057))+(((-1.0)*sj1*x4061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4067=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4067;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4067);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4068=((1.0)*cj5);
IkReal x4069=((((-1.0)*r21*x4068))+(((-1.0)*r20*sj5)));
j4eval[0]=x4069;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4068))))));
j4eval[2]=IKsign(x4069);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4070=cj5*cj5;
IkReal x4071=r01*r01;
IkReal x4072=(r01*sj5);
IkReal x4073=(cj5*r00);
IkReal x4074=((((-1.0)*x4070*(r00*r00)))+(((-1.0)*x4071))+(((-1.0)*(r02*r02)))+((x4070*x4071))+(((2.0)*x4072*x4073)));
j4eval[0]=x4074;
j4eval[1]=IKsign(x4074);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4073))+x4072))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4075=cj5*cj5;
IkReal x4076=r01*r01;
IkReal x4077=(r01*sj5);
IkReal x4078=(cj5*r00);
CheckValue<IkReal> x4079 = IKatan2WithCheck(IkReal(((((-1.0)*x4078))+x4077)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4079.valid){
continue;
}
CheckValue<IkReal> x4080=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4076))+(((-1.0)*x4075*(r00*r00)))+(((-1.0)*(r02*r02)))+((x4075*x4076))+(((2.0)*x4077*x4078)))),-1);
if(!x4080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4079.value)+(((1.5707963267949)*(x4080.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4081=IKcos(j4);
IkReal x4082=IKsin(j4);
IkReal x4083=(cj5*r00);
IkReal x4084=(cj5*r10);
IkReal x4085=(r21*sj5);
IkReal x4086=(cj5*r20);
IkReal x4087=((1.0)*x4081);
IkReal x4088=((1.0)*x4082);
IkReal x4089=(sj5*x4082);
IkReal x4090=(sj5*x4081);
evalcond[0]=(((r01*x4090))+(((-1.0)*x4083*x4087))+((r02*x4082)));
evalcond[1]=(((x4082*x4085))+(((-1.0)*x4086*x4088))+(((-1.0)*r22*x4087)));
evalcond[2]=((((-1.0)*r12*x4087))+((r11*x4089))+(((-1.0)*x4084*x4088)));
evalcond[3]=((1.0)+((r01*x4089))+(((-1.0)*r02*x4087))+(((-1.0)*x4083*x4088)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4090))+((r12*x4082))+(((-1.0)*x4084*x4087)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4086*x4087))+((x4081*x4085))+((r22*x4082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4091=((1.0)*cj5);
CheckValue<IkReal> x4092=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4091))+(((-1.0)*r20*sj5)))),-1);
if(!x4092.valid){
continue;
}
CheckValue<IkReal> x4093 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4091))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4092.value)))+(x4093.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4094=IKcos(j4);
IkReal x4095=IKsin(j4);
IkReal x4096=(cj5*r00);
IkReal x4097=(cj5*r10);
IkReal x4098=(r21*sj5);
IkReal x4099=(cj5*r20);
IkReal x4100=((1.0)*x4094);
IkReal x4101=((1.0)*x4095);
IkReal x4102=(sj5*x4095);
IkReal x4103=(sj5*x4094);
evalcond[0]=((((-1.0)*x4096*x4100))+((r02*x4095))+((r01*x4103)));
evalcond[1]=((((-1.0)*r22*x4100))+((x4095*x4098))+(((-1.0)*x4099*x4101)));
evalcond[2]=((((-1.0)*r12*x4100))+((r11*x4102))+(((-1.0)*x4097*x4101)));
evalcond[3]=((1.0)+(((-1.0)*x4096*x4101))+((r01*x4102))+(((-1.0)*r02*x4100)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x4095))+((r11*x4103))+(((-1.0)*x4097*x4100)));
evalcond[5]=(((x4094*x4098))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4095))+(((-1.0)*x4099*x4100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4104 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4104.valid){
continue;
}
CheckValue<IkReal> x4105=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4104.value)+(((1.5707963267949)*(x4105.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4106=IKcos(j4);
IkReal x4107=IKsin(j4);
IkReal x4108=(cj5*r00);
IkReal x4109=(cj5*r10);
IkReal x4110=(r21*sj5);
IkReal x4111=(cj5*r20);
IkReal x4112=((1.0)*x4106);
IkReal x4113=((1.0)*x4107);
IkReal x4114=(sj5*x4107);
IkReal x4115=(sj5*x4106);
evalcond[0]=((((-1.0)*x4108*x4112))+((r02*x4107))+((r01*x4115)));
evalcond[1]=((((-1.0)*r22*x4112))+(((-1.0)*x4111*x4113))+((x4107*x4110)));
evalcond[2]=((((-1.0)*x4109*x4113))+(((-1.0)*r12*x4112))+((r11*x4114)));
evalcond[3]=((1.0)+(((-1.0)*x4108*x4113))+(((-1.0)*r02*x4112))+((r01*x4114)));
evalcond[4]=((((-1.0)*x4109*x4112))+((cj2*sj1))+((cj1*sj2))+((r12*x4107))+((r11*x4115)));
evalcond[5]=(((r22*x4107))+(((-1.0)*x4111*x4112))+((x4106*x4110))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4116=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4116);
rxp1_1=(px*r21);
rxp1_2=(r11*x4116);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4117=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4117);
rxp1_1=(px*r21);
rxp1_2=(r11*x4117);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4118=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4118);
rxp1_1=(px*r21);
rxp1_2=(r11*x4118);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4121=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4121.valid){
continue;
}
IkReal x4119=x4121.value;
IkReal x4120=(sj0*x4119);
cj4array[0]=(((cj1*sj2*x4120))+((cj2*sj1*x4120)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4122=IKsin(j4);
IkReal x4123=IKcos(j4);
IkReal x4124=(r21*sj5);
IkReal x4125=((1.0)*cj5*r20);
evalcond[0]=(r02*x4122);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4123)));
evalcond[2]=((((-1.0)*x4122*x4125))+((x4122*x4124)));
evalcond[3]=(((r11*sj5*x4122))+(((-1.0)*cj5*r10*x4122)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4123*x4125))+((x4123*x4124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4127=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4127.valid){
continue;
}
IkReal x4126=x4127.value;
cj4array[0]=((((-1.0)*sj1*sj2*x4126))+((cj1*cj2*x4126)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4128=IKsin(j4);
IkReal x4129=IKcos(j4);
IkReal x4130=((1.0)*sj0);
IkReal x4131=((1.0)*cj5);
IkReal x4132=(sj5*x4128);
evalcond[0]=(r02*x4128);
evalcond[1]=((((-1.0)*r02*x4129))+(((-1.0)*x4130)));
evalcond[2]=(((r21*x4132))+(((-1.0)*r20*x4128*x4131)));
evalcond[3]=((((-1.0)*r10*x4128*x4131))+((r11*x4132)));
evalcond[4]=((((-1.0)*cj2*sj1*x4130))+(((-1.0)*r10*x4129*x4131))+((r11*sj5*x4129))+(((-1.0)*cj1*sj2*x4130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4133=IKPowWithIntegerCheck(r02,-1);
if(!x4133.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4133.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4134=IKsin(j4);
IkReal x4135=IKcos(j4);
IkReal x4136=((1.0)*cj1);
IkReal x4137=(r21*sj5);
IkReal x4138=((1.0)*cj5);
IkReal x4139=(r11*sj5);
evalcond[0]=(r02*x4134);
evalcond[1]=((((-1.0)*r20*x4134*x4138))+((x4134*x4137)));
evalcond[2]=(((x4134*x4139))+(((-1.0)*r10*x4134*x4138)));
evalcond[3]=((((-1.0)*r20*x4135*x4138))+((sj1*sj2))+((x4135*x4137))+(((-1.0)*cj2*x4136)));
evalcond[4]=((((-1.0)*r10*x4135*x4138))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x4136))+((x4135*x4139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4140=((1.0)*sj0);
IkReal x4141=((1.0)*cj0);
CheckValue<IkReal> x4142 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4141))+(((-1.0)*r12*x4140)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x4141))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4140)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4142.valid){
continue;
}
CheckValue<IkReal> x4143=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4142.value)+(((1.5707963267949)*(x4143.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4144=IKsin(j4);
IkReal x4145=IKcos(j4);
IkReal x4146=(cj5*r00);
IkReal x4147=(cj5*r10);
IkReal x4148=(r21*sj5);
IkReal x4149=((1.0)*cj2);
IkReal x4150=((1.0)*sj0);
IkReal x4151=(cj1*sj2);
IkReal x4152=(cj5*r20);
IkReal x4153=((1.0)*x4145);
IkReal x4154=((1.0)*x4144);
IkReal x4155=(sj5*x4144);
IkReal x4156=(sj5*x4145);
evalcond[0]=((((-1.0)*x4152*x4154))+((x4144*x4148))+(((-1.0)*r22*x4153)));
evalcond[1]=(cj0+(((-1.0)*x4147*x4154))+((r11*x4155))+(((-1.0)*r12*x4153)));
evalcond[2]=((((-1.0)*x4146*x4154))+((r01*x4155))+(((-1.0)*r02*x4153))+(((-1.0)*x4150)));
evalcond[3]=(((x4145*x4148))+((sj1*sj2))+((r22*x4144))+(((-1.0)*x4152*x4153))+(((-1.0)*cj1*x4149)));
evalcond[4]=(((r02*x4144))+(((-1.0)*x4146*x4153))+((r01*x4156))+(((-1.0)*cj0*x4151))+(((-1.0)*cj0*sj1*x4149)));
evalcond[5]=((((-1.0)*x4147*x4153))+((r12*x4144))+((r11*x4156))+(((-1.0)*sj0*sj1*x4149))+(((-1.0)*x4150*x4151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4157=((1.0)*cj5);
CheckValue<IkReal> x4158 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4157)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4158.valid){
continue;
}
CheckValue<IkReal> x4159=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4157)))),-1);
if(!x4159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4158.value)+(((1.5707963267949)*(x4159.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4160=IKsin(j4);
IkReal x4161=IKcos(j4);
IkReal x4162=(cj5*r00);
IkReal x4163=(cj5*r10);
IkReal x4164=(r21*sj5);
IkReal x4165=((1.0)*cj2);
IkReal x4166=((1.0)*sj0);
IkReal x4167=(cj1*sj2);
IkReal x4168=(cj5*r20);
IkReal x4169=((1.0)*x4161);
IkReal x4170=((1.0)*x4160);
IkReal x4171=(sj5*x4160);
IkReal x4172=(sj5*x4161);
evalcond[0]=((((-1.0)*x4168*x4170))+((x4160*x4164))+(((-1.0)*r22*x4169)));
evalcond[1]=(((r11*x4171))+cj0+(((-1.0)*r12*x4169))+(((-1.0)*x4163*x4170)));
evalcond[2]=((((-1.0)*r02*x4169))+(((-1.0)*x4162*x4170))+(((-1.0)*x4166))+((r01*x4171)));
evalcond[3]=(((r22*x4160))+(((-1.0)*cj1*x4165))+((sj1*sj2))+((x4161*x4164))+(((-1.0)*x4168*x4169)));
evalcond[4]=((((-1.0)*cj0*sj1*x4165))+(((-1.0)*x4162*x4169))+((r02*x4160))+(((-1.0)*cj0*x4167))+((r01*x4172)));
evalcond[5]=(((r11*x4172))+(((-1.0)*x4163*x4169))+((r12*x4160))+(((-1.0)*x4166*x4167))+(((-1.0)*sj0*sj1*x4165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4173=((1.0)*cj5);
CheckValue<IkReal> x4174=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4173))+(((-1.0)*r00*sj5)))),-1);
if(!x4174.valid){
continue;
}
CheckValue<IkReal> x4175 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4173)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4174.value)))+(x4175.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4176=IKsin(j4);
IkReal x4177=IKcos(j4);
IkReal x4178=(cj5*r00);
IkReal x4179=(cj5*r10);
IkReal x4180=(r21*sj5);
IkReal x4181=((1.0)*cj2);
IkReal x4182=((1.0)*sj0);
IkReal x4183=(cj1*sj2);
IkReal x4184=(cj5*r20);
IkReal x4185=((1.0)*x4177);
IkReal x4186=((1.0)*x4176);
IkReal x4187=(sj5*x4176);
IkReal x4188=(sj5*x4177);
evalcond[0]=((((-1.0)*x4184*x4186))+(((-1.0)*r22*x4185))+((x4176*x4180)));
evalcond[1]=((((-1.0)*r12*x4185))+cj0+((r11*x4187))+(((-1.0)*x4179*x4186)));
evalcond[2]=((((-1.0)*x4182))+(((-1.0)*r02*x4185))+((r01*x4187))+(((-1.0)*x4178*x4186)));
evalcond[3]=((((-1.0)*cj1*x4181))+((r22*x4176))+((x4177*x4180))+((sj1*sj2))+(((-1.0)*x4184*x4185)));
evalcond[4]=((((-1.0)*cj0*sj1*x4181))+(((-1.0)*cj0*x4183))+((r01*x4188))+(((-1.0)*x4178*x4185))+((r02*x4176)));
evalcond[5]=(((r12*x4176))+((r11*x4188))+(((-1.0)*sj0*sj1*x4181))+(((-1.0)*x4179*x4185))+(((-1.0)*x4182*x4183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4189=r21*r21;
IkReal x4190=cj5*cj5;
IkReal x4191=(sj1*sj2);
IkReal x4192=(r21*sj5);
IkReal x4193=(cj1*cj2);
IkReal x4194=(cj5*r20);
CheckValue<IkReal> x4195=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4190*(r20*r20)))+(((-1.0)*x4189))+(((-1.0)*(r22*r22)))+((x4189*x4190))+(((2.0)*x4192*x4194)))),-1);
if(!x4195.valid){
continue;
}
CheckValue<IkReal> x4196 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4193))+((r22*x4191)))),IkReal(((((-1.0)*x4191*x4194))+((x4193*x4194))+((x4191*x4192))+(((-1.0)*x4192*x4193)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4195.value)))+(x4196.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4197=IKsin(j4);
IkReal x4198=IKcos(j4);
IkReal x4199=(r21*sj5);
IkReal x4200=(cj5*r20);
IkReal x4201=((1.0)*x4198);
evalcond[0]=((((-1.0)*r22*x4201))+((x4197*x4199))+(((-1.0)*x4197*x4200)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4197))+((x4198*x4199))+(((-1.0)*x4200*x4201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4202=(cj5*sj4);
IkReal x4203=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4202))+((r01*x4203)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x4202))+(((-1.0)*r11*x4203))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4202))+((r01*x4203))))+IKsqr((((r10*x4202))+(((-1.0)*r11*x4203))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x4202))+((r01*x4203))), (((r10*x4202))+(((-1.0)*r11*x4203))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4204=IKcos(j0);
IkReal x4205=IKsin(j0);
IkReal x4206=((0.1)*sj5);
IkReal x4207=((0.392)*sj1);
IkReal x4208=(cj5*r11);
IkReal x4209=((1.0)*cj1);
IkReal x4210=(r11*sj5);
IkReal x4211=((1.0)*sj5);
IkReal x4212=((1.0)*sj1);
IkReal x4213=((1.0)*cj5);
IkReal x4214=((0.425)*cj1);
IkReal x4215=((1.0)*cj4);
IkReal x4216=(r01*sj5);
IkReal x4217=(sj2*x4205);
IkReal x4218=(sj2*x4204);
IkReal x4219=(cj4*x4213);
IkReal x4220=((0.392)*cj1*cj2);
IkReal x4221=(cj2*x4204);
IkReal x4222=(cj2*x4205);
evalcond[0]=((((-1.0)*r12*x4215))+(((-1.0)*r10*sj4*x4213))+x4204+((sj4*x4210)));
evalcond[1]=((((-1.0)*r02*x4215))+(((-1.0)*r00*sj4*x4213))+(((-1.0)*x4205))+((sj4*x4216)));
evalcond[2]=((((-1.0)*r01*x4213))+(((-1.0)*r00*x4211))+(((-1.0)*x4209*x4221))+((sj1*x4218)));
evalcond[3]=((((-1.0)*x4209*x4222))+((sj1*x4217))+(((-1.0)*x4208))+(((-1.0)*r10*x4211)));
evalcond[4]=(((cj4*x4216))+(((-1.0)*r00*x4219))+((r02*sj4))+(((-1.0)*x4212*x4221))+(((-1.0)*x4209*x4218)));
evalcond[5]=(((cj4*x4210))+((r12*sj4))+(((-1.0)*x4212*x4222))+(((-1.0)*r10*x4219))+(((-1.0)*x4209*x4217)));
evalcond[6]=(((x4204*x4220))+(((-1.0)*r00*x4206))+(((-0.1)*cj5*r01))+(((-1.0)*x4207*x4218))+(((-1.0)*px))+(((-0.134)*x4205))+((x4204*x4214)));
evalcond[7]=((((-1.0)*r10*x4206))+((x4205*x4214))+((x4205*x4220))+(((-1.0)*x4207*x4217))+(((-1.0)*py))+(((0.134)*x4204))+(((-0.1)*x4208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4223 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4223.valid){
continue;
}
CheckValue<IkReal> x4224=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4224.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4223.value)+(((1.5707963267949)*(x4224.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4225=IKcos(j0);
IkReal x4226=IKsin(j0);
IkReal x4227=((0.1)*sj5);
IkReal x4228=(cj5*r11);
IkReal x4229=(sj1*sj2);
IkReal x4230=(cj1*cj2);
IkReal x4231=((1.0)*sj5);
IkReal x4232=(cj5*r01);
IkReal x4233=((0.425)*cj1);
IkReal x4234=((0.392)*x4226);
IkReal x4235=((0.392)*x4225);
evalcond[0]=((((-1.0)*x4232))+(((-1.0)*r00*x4231))+((x4225*x4229))+(((-1.0)*x4225*x4230)));
evalcond[1]=((((-1.0)*x4228))+(((-1.0)*x4226*x4230))+(((-1.0)*r10*x4231))+((x4226*x4229)));
evalcond[2]=(((x4230*x4235))+(((-0.134)*x4226))+(((-0.1)*x4232))+(((-1.0)*px))+(((-1.0)*x4229*x4235))+(((-1.0)*r00*x4227))+((x4225*x4233)));
evalcond[3]=(((x4230*x4234))+(((0.134)*x4225))+(((-0.1)*x4228))+(((-1.0)*r10*x4227))+((x4226*x4233))+(((-1.0)*py))+(((-1.0)*x4229*x4234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4236=((1.0)*cj5);
IkReal x4237=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4236)));
j4eval[0]=x4237;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4236)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4237);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4238=((1.0)*cj5);
IkReal x4239=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4238)));
j4eval[0]=x4239;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4238))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x4239);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4240=((1.0)*sj0);
IkReal x4241=((1.0)*cj0);
IkReal x4242=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4242;
j4eval[1]=((IKabs(((((-1.0)*r12*x4240))+(((-1.0)*r02*x4241)))))+(IKabs(((((-1.0)*r01*sj5*x4241))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4240))))));
j4eval[2]=IKsign(x4242);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4243=((-1.0)*r20);
IkReal x4245 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4245)==0){
continue;
}
IkReal x4244=pow(x4245,-0.5);
CheckValue<IkReal> x4246 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4243),IKFAST_ATAN2_MAGTHRESH);
if(!x4246.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4246.value));
IkReal gconst97=(r21*x4244);
IkReal gconst98=(x4243*x4244);
CheckValue<IkReal> x4247 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4247.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4247.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4248=((-1.0)*r20);
IkReal x4249=x4244;
CheckValue<IkReal> x4251 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4248),IKFAST_ATAN2_MAGTHRESH);
if(!x4251.valid){
continue;
}
IkReal x4250=((-1.0)*(x4251.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4250;
IkReal gconst96=x4250;
IkReal gconst97=(r21*x4249);
IkReal gconst98=(x4248*x4249);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4252=((-1.0)*r20);
IkReal x4253=x4244;
CheckValue<IkReal> x4255 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4252),IKFAST_ATAN2_MAGTHRESH);
if(!x4255.valid){
continue;
}
IkReal x4254=((-1.0)*(x4255.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4254;
IkReal gconst96=x4254;
IkReal gconst97=(r21*x4253);
IkReal gconst98=(x4252*x4253);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4256=((-1.0)*r20);
IkReal x4257=x4244;
CheckValue<IkReal> x4259 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4256),IKFAST_ATAN2_MAGTHRESH);
if(!x4259.valid){
continue;
}
IkReal x4258=((-1.0)*(x4259.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4258;
IkReal gconst96=x4258;
IkReal gconst97=(r21*x4257);
IkReal gconst98=(x4256*x4257);
IkReal x4260=((1.0)*(r22*r22));
CheckValue<IkReal> x4264=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4260))),-1);
if(!x4264.valid){
continue;
}
IkReal x4261=x4264.value;
IkReal x4262=((1.0)*x4261);
IkReal x4263=((((-1.0)*x4262*(r20*r20*r20*r20)))+(((-2.0)*x4261*(r20*r20)*(r21*r21)))+(((-1.0)*x4262*(r21*r21*r21*r21)))+(((-1.0)*x4260)));
j4eval[0]=x4263;
j4eval[1]=IKsign(x4263);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4265=(cj1*cj2);
IkReal x4266=(gconst98*r20);
IkReal x4267=(sj1*sj2);
IkReal x4268=(gconst97*r21);
CheckValue<IkReal> x4269 = IKatan2WithCheck(IkReal((((r22*x4267))+(((-1.0)*r22*x4265)))),IkReal((((x4267*x4268))+(((-1.0)*x4265*x4268))+((x4265*x4266))+(((-1.0)*x4266*x4267)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4269.valid){
continue;
}
CheckValue<IkReal> x4270=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4266*x4266)))+(((2.0)*x4266*x4268))+(((-1.0)*(x4268*x4268)))+(((-1.0)*(r22*r22))))),-1);
if(!x4270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4269.value)+(((1.5707963267949)*(x4270.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4271=IKsin(j4);
IkReal x4272=IKcos(j4);
IkReal x4273=(gconst98*r10);
IkReal x4274=(gconst97*r21);
IkReal x4275=(gconst98*r20);
IkReal x4276=((1.0)*cj2);
IkReal x4277=((1.0)*sj0);
IkReal x4278=(gconst98*r00);
IkReal x4279=(cj1*sj2);
IkReal x4280=((1.0)*x4272);
IkReal x4281=((1.0)*x4271);
IkReal x4282=(gconst97*x4271);
IkReal x4283=(gconst97*x4272);
evalcond[0]=((((-1.0)*x4275*x4281))+(((-1.0)*r22*x4280))+((x4271*x4274)));
evalcond[1]=((((-1.0)*x4273*x4281))+cj0+((r11*x4282))+(((-1.0)*r12*x4280)));
evalcond[2]=((((-1.0)*r02*x4280))+(((-1.0)*x4278*x4281))+(((-1.0)*x4277))+((r01*x4282)));
evalcond[3]=((((-1.0)*cj1*x4276))+(((-1.0)*x4275*x4280))+((sj1*sj2))+((x4272*x4274))+((r22*x4271)));
evalcond[4]=(((r02*x4271))+(((-1.0)*cj0*x4279))+(((-1.0)*x4278*x4280))+(((-1.0)*cj0*sj1*x4276))+((r01*x4283)));
evalcond[5]=((((-1.0)*x4273*x4280))+((r11*x4283))+((r12*x4271))+(((-1.0)*sj0*sj1*x4276))+(((-1.0)*x4277*x4279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4284=((1.0)*gconst98);
CheckValue<IkReal> x4285 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4284)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4285.valid){
continue;
}
CheckValue<IkReal> x4286=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4284))+(((-1.0)*gconst97*r10)))),-1);
if(!x4286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4285.value)+(((1.5707963267949)*(x4286.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4287=IKsin(j4);
IkReal x4288=IKcos(j4);
IkReal x4289=(gconst98*r10);
IkReal x4290=(gconst97*r21);
IkReal x4291=(gconst98*r20);
IkReal x4292=((1.0)*cj2);
IkReal x4293=((1.0)*sj0);
IkReal x4294=(gconst98*r00);
IkReal x4295=(cj1*sj2);
IkReal x4296=((1.0)*x4288);
IkReal x4297=((1.0)*x4287);
IkReal x4298=(gconst97*x4287);
IkReal x4299=(gconst97*x4288);
evalcond[0]=((((-1.0)*r22*x4296))+(((-1.0)*x4291*x4297))+((x4287*x4290)));
evalcond[1]=(cj0+(((-1.0)*x4289*x4297))+(((-1.0)*r12*x4296))+((r11*x4298)));
evalcond[2]=(((r01*x4298))+(((-1.0)*x4293))+(((-1.0)*x4294*x4297))+(((-1.0)*r02*x4296)));
evalcond[3]=(((r22*x4287))+(((-1.0)*x4291*x4296))+((x4288*x4290))+((sj1*sj2))+(((-1.0)*cj1*x4292)));
evalcond[4]=(((r01*x4299))+(((-1.0)*cj0*sj1*x4292))+((r02*x4287))+(((-1.0)*cj0*x4295))+(((-1.0)*x4294*x4296)));
evalcond[5]=(((r12*x4287))+(((-1.0)*x4289*x4296))+(((-1.0)*x4293*x4295))+((r11*x4299))+(((-1.0)*sj0*sj1*x4292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4300=((1.0)*gconst98);
CheckValue<IkReal> x4301=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4300))+(((-1.0)*gconst97*r00)))),-1);
if(!x4301.valid){
continue;
}
CheckValue<IkReal> x4302 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*r20*x4300)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4301.value)))+(x4302.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4303=IKsin(j4);
IkReal x4304=IKcos(j4);
IkReal x4305=(gconst98*r10);
IkReal x4306=(gconst97*r21);
IkReal x4307=(gconst98*r20);
IkReal x4308=((1.0)*cj2);
IkReal x4309=((1.0)*sj0);
IkReal x4310=(gconst98*r00);
IkReal x4311=(cj1*sj2);
IkReal x4312=((1.0)*x4304);
IkReal x4313=((1.0)*x4303);
IkReal x4314=(gconst97*x4303);
IkReal x4315=(gconst97*x4304);
evalcond[0]=((((-1.0)*r22*x4312))+(((-1.0)*x4307*x4313))+((x4303*x4306)));
evalcond[1]=((((-1.0)*x4305*x4313))+cj0+((r11*x4314))+(((-1.0)*r12*x4312)));
evalcond[2]=((((-1.0)*x4310*x4313))+((r01*x4314))+(((-1.0)*r02*x4312))+(((-1.0)*x4309)));
evalcond[3]=(((r22*x4303))+(((-1.0)*x4307*x4312))+((sj1*sj2))+(((-1.0)*cj1*x4308))+((x4304*x4306)));
evalcond[4]=((((-1.0)*cj0*sj1*x4308))+((r02*x4303))+(((-1.0)*cj0*x4311))+(((-1.0)*x4310*x4312))+((r01*x4315)));
evalcond[5]=((((-1.0)*x4305*x4312))+((r12*x4303))+(((-1.0)*sj0*sj1*x4308))+((r11*x4315))+(((-1.0)*x4309*x4311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4316=((-1.0)*r21);
IkReal x4318 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4318)==0){
continue;
}
IkReal x4317=pow(x4318,-0.5);
CheckValue<IkReal> x4319 = IKatan2WithCheck(IkReal(x4316),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4319.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4319.value))));
IkReal gconst100=(x4316*x4317);
IkReal gconst101=((1.0)*r20*x4317);
CheckValue<IkReal> x4320 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4320.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4320.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4321=((-1.0)*r21);
CheckValue<IkReal> x4324 = IKatan2WithCheck(IkReal(x4321),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4324.valid){
continue;
}
IkReal x4322=((1.0)*(x4324.value));
IkReal x4323=x4317;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4322)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4322)));
IkReal gconst100=(x4321*x4323);
IkReal gconst101=((1.0)*r20*x4323);
IkReal x4325=r22*r22;
IkReal x4326=((1.0)*x4325);
CheckValue<IkReal> x4330=IKPowWithIntegerCheck(((-1.0)+x4325),-1);
if(!x4330.valid){
continue;
}
IkReal x4327=x4330.value;
if((((1.0)+(((-1.0)*x4326)))) < -0.00001)
continue;
IkReal x4328=IKsqrt(((1.0)+(((-1.0)*x4326))));
IkReal x4329=(cj0*x4327*x4328);
j4eval[0]=((IKabs(((((-1.0)*x4326*x4329))+x4329)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4331=((-1.0)*r21);
CheckValue<IkReal> x4334 = IKatan2WithCheck(IkReal(x4331),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4334.valid){
continue;
}
IkReal x4332=((1.0)*(x4334.value));
IkReal x4333=x4317;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4332)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4332)));
IkReal gconst100=(x4331*x4333);
IkReal gconst101=((1.0)*r20*x4333);
IkReal x4335=r22*r22;
IkReal x4336=((1.0)*x4335);
CheckValue<IkReal> x4340=IKPowWithIntegerCheck(((-1.0)+x4335),-1);
if(!x4340.valid){
continue;
}
IkReal x4337=x4340.value;
if((((1.0)+(((-1.0)*x4336)))) < -0.00001)
continue;
IkReal x4338=IKsqrt(((1.0)+(((-1.0)*x4336))));
IkReal x4339=(sj0*x4337*x4338);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x4339+(((-1.0)*x4336*x4339))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4341=((-1.0)*r21);
CheckValue<IkReal> x4344 = IKatan2WithCheck(IkReal(x4341),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4344.valid){
continue;
}
IkReal x4342=((1.0)*(x4344.value));
IkReal x4343=x4317;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4342)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4342)));
IkReal gconst100=(x4341*x4343);
IkReal gconst101=((1.0)*r20*x4343);
IkReal x4345=r22*r22;
IkReal x4346=(r12*sj0);
IkReal x4347=(cj0*r02);
CheckValue<IkReal> x4351=IKPowWithIntegerCheck(((-1.0)+x4345),-1);
if(!x4351.valid){
continue;
}
IkReal x4348=x4351.value;
if((((1.0)+(((-1.0)*x4345)))) < -0.00001)
continue;
IkReal x4349=IKsqrt(((1.0)+(((-1.0)*x4345))));
IkReal x4350=(r22*x4348*x4349);
j4eval[0]=0;
j4eval[1]=((IKabs((((x4347*x4350))+((x4346*x4350)))))+(IKabs(((((-1.0)*x4347))+(((-1.0)*x4346))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4352=((1.0)*sj0);
IkReal x4353=((1.0)*gconst100);
CheckValue<IkReal> x4354 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4352))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4353))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*gconst100*r11*x4352)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4354.valid){
continue;
}
CheckValue<IkReal> x4355=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst101*r21))+(((-1.0)*r20*x4353)))),-1);
if(!x4355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4354.value)+(((1.5707963267949)*(x4355.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4356=IKsin(j4);
IkReal x4357=IKcos(j4);
IkReal x4358=(gconst101*r20);
IkReal x4359=(gconst101*r10);
IkReal x4360=((1.0)*cj2);
IkReal x4361=(gconst101*r00);
IkReal x4362=((1.0)*sj0);
IkReal x4363=(cj1*sj2);
IkReal x4364=((1.0)*x4357);
IkReal x4365=((1.0)*x4356);
IkReal x4366=(gconst100*x4356);
IkReal x4367=(gconst100*x4357);
evalcond[0]=((((-1.0)*r22*x4364))+((r21*x4366))+(((-1.0)*x4358*x4365)));
evalcond[1]=(cj0+((r11*x4366))+(((-1.0)*x4359*x4365))+(((-1.0)*r12*x4364)));
evalcond[2]=((((-1.0)*x4361*x4365))+(((-1.0)*x4362))+((r01*x4366))+(((-1.0)*r02*x4364)));
evalcond[3]=((((-1.0)*cj1*x4360))+((r21*x4367))+((r22*x4356))+((sj1*sj2))+(((-1.0)*x4358*x4364)));
evalcond[4]=((((-1.0)*x4361*x4364))+(((-1.0)*cj0*x4363))+((r01*x4367))+((r02*x4356))+(((-1.0)*cj0*sj1*x4360)));
evalcond[5]=(((r11*x4367))+(((-1.0)*x4359*x4364))+(((-1.0)*x4362*x4363))+(((-1.0)*sj0*sj1*x4360))+((r12*x4356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4368=((1.0)*gconst101);
CheckValue<IkReal> x4369 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4368))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4369.valid){
continue;
}
CheckValue<IkReal> x4370=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x4368)))),-1);
if(!x4370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4369.value)+(((1.5707963267949)*(x4370.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4371=IKsin(j4);
IkReal x4372=IKcos(j4);
IkReal x4373=(gconst101*r20);
IkReal x4374=(gconst101*r10);
IkReal x4375=((1.0)*cj2);
IkReal x4376=(gconst101*r00);
IkReal x4377=((1.0)*sj0);
IkReal x4378=(cj1*sj2);
IkReal x4379=((1.0)*x4372);
IkReal x4380=((1.0)*x4371);
IkReal x4381=(gconst100*x4371);
IkReal x4382=(gconst100*x4372);
evalcond[0]=((((-1.0)*x4373*x4380))+(((-1.0)*r22*x4379))+((r21*x4381)));
evalcond[1]=(cj0+((r11*x4381))+(((-1.0)*r12*x4379))+(((-1.0)*x4374*x4380)));
evalcond[2]=((((-1.0)*r02*x4379))+(((-1.0)*x4377))+(((-1.0)*x4376*x4380))+((r01*x4381)));
evalcond[3]=(((r22*x4371))+((sj1*sj2))+(((-1.0)*x4373*x4379))+((r21*x4382))+(((-1.0)*cj1*x4375)));
evalcond[4]=((((-1.0)*cj0*sj1*x4375))+((r02*x4371))+(((-1.0)*cj0*x4378))+(((-1.0)*x4376*x4379))+((r01*x4382)));
evalcond[5]=(((r12*x4371))+(((-1.0)*x4377*x4378))+(((-1.0)*x4374*x4379))+(((-1.0)*sj0*sj1*x4375))+((r11*x4382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4383=((1.0)*gconst101);
CheckValue<IkReal> x4384=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x4383)))),-1);
if(!x4384.valid){
continue;
}
CheckValue<IkReal> x4385 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x4383)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4384.value)))+(x4385.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4386=IKsin(j4);
IkReal x4387=IKcos(j4);
IkReal x4388=(gconst101*r20);
IkReal x4389=(gconst101*r10);
IkReal x4390=((1.0)*cj2);
IkReal x4391=(gconst101*r00);
IkReal x4392=((1.0)*sj0);
IkReal x4393=(cj1*sj2);
IkReal x4394=((1.0)*x4387);
IkReal x4395=((1.0)*x4386);
IkReal x4396=(gconst100*x4386);
IkReal x4397=(gconst100*x4387);
evalcond[0]=((((-1.0)*x4388*x4395))+(((-1.0)*r22*x4394))+((r21*x4396)));
evalcond[1]=((((-1.0)*r12*x4394))+(((-1.0)*x4389*x4395))+cj0+((r11*x4396)));
evalcond[2]=((((-1.0)*x4392))+((r01*x4396))+(((-1.0)*r02*x4394))+(((-1.0)*x4391*x4395)));
evalcond[3]=((((-1.0)*x4388*x4394))+((r22*x4386))+((sj1*sj2))+(((-1.0)*cj1*x4390))+((r21*x4397)));
evalcond[4]=(((r01*x4397))+(((-1.0)*cj0*sj1*x4390))+((r02*x4386))+(((-1.0)*x4391*x4394))+(((-1.0)*cj0*x4393)));
evalcond[5]=((((-1.0)*sj0*sj1*x4390))+(((-1.0)*x4389*x4394))+((r11*x4397))+(((-1.0)*x4392*x4393))+((r12*x4386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4398=((-1.0)*r10);
IkReal x4400 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4400)==0){
continue;
}
IkReal x4399=pow(x4400,-0.5);
CheckValue<IkReal> x4401 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4398),IKFAST_ATAN2_MAGTHRESH);
if(!x4401.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4401.value));
IkReal gconst103=(r11*x4399);
IkReal gconst104=(x4398*x4399);
CheckValue<IkReal> x4402 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4402.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4402.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4403=((-1.0)*r10);
IkReal x4404=x4399;
CheckValue<IkReal> x4406 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4403),IKFAST_ATAN2_MAGTHRESH);
if(!x4406.valid){
continue;
}
IkReal x4405=((-1.0)*(x4406.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4405;
IkReal gconst102=x4405;
IkReal gconst103=(r11*x4404);
IkReal gconst104=(x4403*x4404);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4407=((1.0)*sj0);
IkReal x4408=((1.0)*gconst103);
CheckValue<IkReal> x4409 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4407))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4408))+((gconst104*r10*sj0))+(((-1.0)*gconst103*r11*x4407))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4409.valid){
continue;
}
CheckValue<IkReal> x4410=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4408)))),-1);
if(!x4410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4409.value)+(((1.5707963267949)*(x4410.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4411=IKsin(j4);
IkReal x4412=IKcos(j4);
IkReal x4413=(gconst103*r11);
IkReal x4414=((1.0)*cj2);
IkReal x4415=((1.0)*sj0);
IkReal x4416=(cj1*sj2);
IkReal x4417=((1.0)*x4412);
IkReal x4418=(gconst103*x4412);
IkReal x4419=(gconst103*x4411);
IkReal x4420=((1.0)*gconst104*x4411);
evalcond[0]=(((r21*x4419))+(((-1.0)*r22*x4417))+(((-1.0)*r20*x4420)));
evalcond[1]=(cj0+(((-1.0)*r12*x4417))+((x4411*x4413))+(((-1.0)*r10*x4420)));
evalcond[2]=(((r01*x4419))+(((-1.0)*r02*x4417))+(((-1.0)*x4415))+(((-1.0)*r00*x4420)));
evalcond[3]=(((r21*x4418))+((r22*x4411))+((sj1*sj2))+(((-1.0)*cj1*x4414))+(((-1.0)*gconst104*r20*x4417)));
evalcond[4]=((((-1.0)*cj0*sj1*x4414))+(((-1.0)*cj0*x4416))+((r01*x4418))+(((-1.0)*gconst104*r00*x4417))+((r02*x4411)));
evalcond[5]=(((r12*x4411))+((x4412*x4413))+(((-1.0)*x4415*x4416))+(((-1.0)*sj0*sj1*x4414))+(((-1.0)*gconst104*r10*x4417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4421=((1.0)*gconst104);
CheckValue<IkReal> x4422=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4421))+(((-1.0)*gconst103*r00)))),-1);
if(!x4422.valid){
continue;
}
CheckValue<IkReal> x4423 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4421))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4422.value)))+(x4423.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4424=IKsin(j4);
IkReal x4425=IKcos(j4);
IkReal x4426=(gconst103*r11);
IkReal x4427=((1.0)*cj2);
IkReal x4428=((1.0)*sj0);
IkReal x4429=(cj1*sj2);
IkReal x4430=((1.0)*x4425);
IkReal x4431=(gconst103*x4425);
IkReal x4432=(gconst103*x4424);
IkReal x4433=((1.0)*gconst104*x4424);
evalcond[0]=((((-1.0)*r22*x4430))+(((-1.0)*r20*x4433))+((r21*x4432)));
evalcond[1]=(cj0+(((-1.0)*r10*x4433))+((x4424*x4426))+(((-1.0)*r12*x4430)));
evalcond[2]=((((-1.0)*x4428))+(((-1.0)*r02*x4430))+(((-1.0)*r00*x4433))+((r01*x4432)));
evalcond[3]=(((sj1*sj2))+((r22*x4424))+(((-1.0)*cj1*x4427))+(((-1.0)*gconst104*r20*x4430))+((r21*x4431)));
evalcond[4]=(((r02*x4424))+(((-1.0)*cj0*x4429))+(((-1.0)*cj0*sj1*x4427))+(((-1.0)*gconst104*r00*x4430))+((r01*x4431)));
evalcond[5]=(((x4425*x4426))+(((-1.0)*sj0*sj1*x4427))+(((-1.0)*gconst104*r10*x4430))+(((-1.0)*x4428*x4429))+((r12*x4424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4434=((-1.0)*r11);
IkReal x4436 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4436)==0){
continue;
}
IkReal x4435=pow(x4436,-0.5);
CheckValue<IkReal> x4437 = IKatan2WithCheck(IkReal(x4434),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4437.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4437.value))));
IkReal gconst106=(x4434*x4435);
IkReal gconst107=((1.0)*r10*x4435);
CheckValue<IkReal> x4438 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4438.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4438.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4439=((-1.0)*r11);
CheckValue<IkReal> x4442 = IKatan2WithCheck(IkReal(x4439),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4442.valid){
continue;
}
IkReal x4440=((1.0)*(x4442.value));
IkReal x4441=x4435;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4440)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4440)));
IkReal gconst106=(x4439*x4441);
IkReal gconst107=((1.0)*r10*x4441);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4443=((-1.0)*r11);
CheckValue<IkReal> x4446 = IKatan2WithCheck(IkReal(x4443),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4446.valid){
continue;
}
IkReal x4444=((1.0)*(x4446.value));
IkReal x4445=x4435;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4444)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4444)));
IkReal gconst106=(x4443*x4445);
IkReal gconst107=((1.0)*r10*x4445);
IkReal x4447=r12*r12;
IkReal x4448=((1.0)*sj0);
IkReal x4449=(cj0*r02);
IkReal x4450=x4435;
j4eval[0]=((IKabs(((((-1.0)*r12*x4448))+(((-1.0)*x4449)))))+(IKabs((((r12*x4449*x4450))+((sj0*x4447*x4450))+(((-1.0)*x4448*x4450))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4451=((-1.0)*r11);
CheckValue<IkReal> x4454 = IKatan2WithCheck(IkReal(x4451),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4454.valid){
continue;
}
IkReal x4452=((1.0)*(x4454.value));
IkReal x4453=x4435;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4452)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4452)));
IkReal gconst106=(x4451*x4453);
IkReal gconst107=((1.0)*r10*x4453);
IkReal x4455=r12*r12;
IkReal x4456=((1.0)+(((-1.0)*x4455)));
IkReal x4457=(r22*sj1*sj2);
IkReal x4458=(cj1*cj2*r22);
CheckValue<IkReal> x4465=IKPowWithIntegerCheck(x4456,-1);
if(!x4465.valid){
continue;
}
IkReal x4459=x4465.value;
CheckValue<IkReal> x4466=IKPowWithIntegerCheck(((-1.0)+x4455),-1);
if(!x4466.valid){
continue;
}
IkReal x4460=x4466.value;
IkReal x4461=((1.0)*x4459);
if((x4456) < -0.00001)
continue;
IkReal x4462=IKsqrt(x4456);
IkReal x4463=(r12*x4460*x4462);
IkReal x4464=((((-2.0)*r10*r11*r20*r21*x4459))+(((-1.0)*x4461*(r10*r10)*(r20*r20)))+(((-1.0)*x4461*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22))));
j4eval[0]=x4464;
j4eval[1]=((IKabs((x4457+(((-1.0)*x4458)))))+(IKabs((((x4458*x4463))+(((-1.0)*x4457*x4463))))));
j4eval[2]=IKsign(x4464);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4467=(sj1*sj2);
IkReal x4468=(gconst106*r21);
IkReal x4469=(gconst107*r20);
IkReal x4470=(cj1*cj2);
CheckValue<IkReal> x4471=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4468*x4468)))+(((-1.0)*(x4469*x4469)))+(((-1.0)*(r22*r22)))+(((2.0)*x4468*x4469)))),-1);
if(!x4471.valid){
continue;
}
CheckValue<IkReal> x4472 = IKatan2WithCheck(IkReal((((r22*x4467))+(((-1.0)*r22*x4470)))),IkReal(((((-1.0)*x4468*x4470))+(((-1.0)*x4467*x4469))+((x4467*x4468))+((x4469*x4470)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4471.value)))+(x4472.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4473=IKsin(j4);
IkReal x4474=IKcos(j4);
IkReal x4475=(gconst107*r10);
IkReal x4476=(gconst107*r00);
IkReal x4477=((1.0)*cj2);
IkReal x4478=(gconst107*r20);
IkReal x4479=((1.0)*sj0);
IkReal x4480=(cj1*sj2);
IkReal x4481=((1.0)*x4474);
IkReal x4482=(gconst106*x4474);
IkReal x4483=(gconst106*x4473);
IkReal x4484=((1.0)*x4473);
evalcond[0]=(((r21*x4483))+(((-1.0)*x4478*x4484))+(((-1.0)*r22*x4481)));
evalcond[1]=(((r11*x4483))+(((-1.0)*r12*x4481))+cj0+(((-1.0)*x4475*x4484)));
evalcond[2]=((((-1.0)*x4479))+(((-1.0)*x4476*x4484))+((r01*x4483))+(((-1.0)*r02*x4481)));
evalcond[3]=((((-1.0)*cj1*x4477))+((r21*x4482))+((sj1*sj2))+(((-1.0)*x4478*x4481))+((r22*x4473)));
evalcond[4]=((((-1.0)*cj0*x4480))+(((-1.0)*cj0*sj1*x4477))+(((-1.0)*x4476*x4481))+((r02*x4473))+((r01*x4482)));
evalcond[5]=(((r11*x4482))+(((-1.0)*x4475*x4481))+(((-1.0)*x4479*x4480))+(((-1.0)*sj0*sj1*x4477))+((r12*x4473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4485=((1.0)*sj0);
IkReal x4486=((1.0)*gconst106);
CheckValue<IkReal> x4487=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x4486)))),-1);
if(!x4487.valid){
continue;
}
CheckValue<IkReal> x4488 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4485))+(((-1.0)*cj0*r02)))),IkReal((((gconst107*r10*sj0))+(((-1.0)*cj0*r01*x4486))+(((-1.0)*gconst106*r11*x4485))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4487.value)))+(x4488.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4489=IKsin(j4);
IkReal x4490=IKcos(j4);
IkReal x4491=(gconst107*r10);
IkReal x4492=(gconst107*r00);
IkReal x4493=((1.0)*cj2);
IkReal x4494=(gconst107*r20);
IkReal x4495=((1.0)*sj0);
IkReal x4496=(cj1*sj2);
IkReal x4497=((1.0)*x4490);
IkReal x4498=(gconst106*x4490);
IkReal x4499=(gconst106*x4489);
IkReal x4500=((1.0)*x4489);
evalcond[0]=((((-1.0)*x4494*x4500))+((r21*x4499))+(((-1.0)*r22*x4497)));
evalcond[1]=(cj0+((r11*x4499))+(((-1.0)*x4491*x4500))+(((-1.0)*r12*x4497)));
evalcond[2]=((((-1.0)*r02*x4497))+(((-1.0)*x4492*x4500))+(((-1.0)*x4495))+((r01*x4499)));
evalcond[3]=((((-1.0)*cj1*x4493))+((sj1*sj2))+((r21*x4498))+(((-1.0)*x4494*x4497))+((r22*x4489)));
evalcond[4]=((((-1.0)*x4492*x4497))+(((-1.0)*cj0*x4496))+((r02*x4489))+(((-1.0)*cj0*sj1*x4493))+((r01*x4498)));
evalcond[5]=((((-1.0)*x4495*x4496))+(((-1.0)*sj0*sj1*x4493))+((r11*x4498))+(((-1.0)*x4491*x4497))+((r12*x4489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4501=((1.0)*gconst107);
CheckValue<IkReal> x4502=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4501)))),-1);
if(!x4502.valid){
continue;
}
CheckValue<IkReal> x4503 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4501))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4502.value)))+(x4503.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4504=IKsin(j4);
IkReal x4505=IKcos(j4);
IkReal x4506=(gconst107*r10);
IkReal x4507=(gconst107*r00);
IkReal x4508=((1.0)*cj2);
IkReal x4509=(gconst107*r20);
IkReal x4510=((1.0)*sj0);
IkReal x4511=(cj1*sj2);
IkReal x4512=((1.0)*x4505);
IkReal x4513=(gconst106*x4505);
IkReal x4514=(gconst106*x4504);
IkReal x4515=((1.0)*x4504);
evalcond[0]=(((r21*x4514))+(((-1.0)*r22*x4512))+(((-1.0)*x4509*x4515)));
evalcond[1]=(cj0+(((-1.0)*x4506*x4515))+(((-1.0)*r12*x4512))+((r11*x4514)));
evalcond[2]=((((-1.0)*r02*x4512))+((r01*x4514))+(((-1.0)*x4510))+(((-1.0)*x4507*x4515)));
evalcond[3]=((((-1.0)*cj1*x4508))+((r22*x4504))+((sj1*sj2))+((r21*x4513))+(((-1.0)*x4509*x4512)));
evalcond[4]=((((-1.0)*cj0*x4511))+((r02*x4504))+((r01*x4513))+(((-1.0)*x4507*x4512))+(((-1.0)*cj0*sj1*x4508)));
evalcond[5]=((((-1.0)*x4506*x4512))+((r12*x4504))+((r11*x4513))+(((-1.0)*x4510*x4511))+(((-1.0)*sj0*sj1*x4508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4516=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4516;
j4eval[1]=IKsign(x4516);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4517=((1.0)*cj5);
IkReal x4518=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4517)));
j4eval[0]=x4518;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4517)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4518);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4519=(sj1*sj2);
IkReal x4520=(cj5*r10);
IkReal x4521=(r11*sj5);
IkReal x4522=(cj1*cj2);
IkReal x4523=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4523;
j4eval[1]=((IKabs(((((-1.0)*x4521*x4522))+((x4520*x4522))+((x4519*x4521))+(((-1.0)*x4519*x4520)))))+(IKabs((((r12*x4522))+(((-1.0)*r12*x4519))))));
j4eval[2]=IKsign(x4523);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4524=(sj1*sj2);
IkReal x4525=(cj5*r10);
IkReal x4526=(r11*sj5);
IkReal x4527=(cj1*cj2);
CheckValue<IkReal> x4528=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4528.valid){
continue;
}
CheckValue<IkReal> x4529 = IKatan2WithCheck(IkReal((((x4525*x4527))+(((-1.0)*x4524*x4525))+(((-1.0)*x4526*x4527))+((x4524*x4526)))),IkReal((((r12*x4527))+(((-1.0)*r12*x4524)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4528.value)))+(x4529.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4530=IKcos(j4);
IkReal x4531=IKsin(j4);
IkReal x4532=(cj5*r00);
IkReal x4533=(cj5*r10);
IkReal x4534=(r21*sj5);
IkReal x4535=((1.0)*cj2);
IkReal x4536=(cj5*r20);
IkReal x4537=((1.0)*x4530);
IkReal x4538=((1.0)*x4531);
IkReal x4539=(sj5*x4531);
IkReal x4540=(sj5*x4530);
evalcond[0]=(((r12*x4531))+(((-1.0)*x4533*x4537))+((r11*x4540)));
evalcond[1]=(((x4531*x4534))+(((-1.0)*r22*x4537))+(((-1.0)*x4536*x4538)));
evalcond[2]=(((r01*x4539))+(((-1.0)*r02*x4537))+(((-1.0)*x4532*x4538)));
evalcond[3]=((1.0)+(((-1.0)*x4533*x4538))+(((-1.0)*r12*x4537))+((r11*x4539)));
evalcond[4]=(((x4530*x4534))+(((-1.0)*cj1*x4535))+((sj1*sj2))+((r22*x4531))+(((-1.0)*x4536*x4537)));
evalcond[5]=((((-1.0)*sj1*x4535))+(((-1.0)*cj1*sj2))+((r01*x4540))+((r02*x4531))+(((-1.0)*x4532*x4537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4541=((1.0)*cj5);
CheckValue<IkReal> x4542 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4541)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4542.valid){
continue;
}
CheckValue<IkReal> x4543=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4541)))),-1);
if(!x4543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4542.value)+(((1.5707963267949)*(x4543.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4544=IKcos(j4);
IkReal x4545=IKsin(j4);
IkReal x4546=(cj5*r00);
IkReal x4547=(cj5*r10);
IkReal x4548=(r21*sj5);
IkReal x4549=((1.0)*cj2);
IkReal x4550=(cj5*r20);
IkReal x4551=((1.0)*x4544);
IkReal x4552=((1.0)*x4545);
IkReal x4553=(sj5*x4545);
IkReal x4554=(sj5*x4544);
evalcond[0]=((((-1.0)*x4547*x4551))+((r11*x4554))+((r12*x4545)));
evalcond[1]=((((-1.0)*x4550*x4552))+((x4545*x4548))+(((-1.0)*r22*x4551)));
evalcond[2]=(((r01*x4553))+(((-1.0)*r02*x4551))+(((-1.0)*x4546*x4552)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4551))+(((-1.0)*x4547*x4552))+((r11*x4553)));
evalcond[4]=(((r22*x4545))+(((-1.0)*x4550*x4551))+((sj1*sj2))+((x4544*x4548))+(((-1.0)*cj1*x4549)));
evalcond[5]=(((r01*x4554))+((r02*x4545))+(((-1.0)*cj1*sj2))+(((-1.0)*x4546*x4551))+(((-1.0)*sj1*x4549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4555=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4555.valid){
continue;
}
CheckValue<IkReal> x4556 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4555.value)))+(x4556.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4557=IKcos(j4);
IkReal x4558=IKsin(j4);
IkReal x4559=(cj5*r00);
IkReal x4560=(cj5*r10);
IkReal x4561=(r21*sj5);
IkReal x4562=((1.0)*cj2);
IkReal x4563=(cj5*r20);
IkReal x4564=((1.0)*x4557);
IkReal x4565=((1.0)*x4558);
IkReal x4566=(sj5*x4558);
IkReal x4567=(sj5*x4557);
evalcond[0]=(((r11*x4567))+((r12*x4558))+(((-1.0)*x4560*x4564)));
evalcond[1]=((((-1.0)*r22*x4564))+(((-1.0)*x4563*x4565))+((x4558*x4561)));
evalcond[2]=((((-1.0)*r02*x4564))+(((-1.0)*x4559*x4565))+((r01*x4566)));
evalcond[3]=((1.0)+((r11*x4566))+(((-1.0)*x4560*x4565))+(((-1.0)*r12*x4564)));
evalcond[4]=((((-1.0)*cj1*x4562))+((x4557*x4561))+((sj1*sj2))+((r22*x4558))+(((-1.0)*x4563*x4564)));
evalcond[5]=((((-1.0)*sj1*x4562))+(((-1.0)*cj1*sj2))+((r02*x4558))+(((-1.0)*x4559*x4564))+((r01*x4567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4568=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4568;
j4eval[1]=IKsign(x4568);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4569=((1.0)*cj5);
IkReal x4570=((((-1.0)*r21*x4569))+(((-1.0)*r20*sj5)));
j4eval[0]=x4570;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4569))))));
j4eval[2]=IKsign(x4570);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4571=cj5*cj5;
IkReal x4572=r11*r11;
IkReal x4573=(r11*sj5);
IkReal x4574=(cj5*r10);
IkReal x4575=((r12*r12)+x4572+((x4571*(r10*r10)))+(((-2.0)*x4573*x4574))+(((-1.0)*x4571*x4572)));
j4eval[0]=x4575;
j4eval[1]=IKsign(x4575);
j4eval[2]=((IKabs(r12))+(IKabs((x4573+(((-1.0)*x4574))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4576=cj5*cj5;
IkReal x4577=r11*r11;
IkReal x4578=(cj5*r10);
IkReal x4579=(r11*sj5);
CheckValue<IkReal> x4580 = IKatan2WithCheck(IkReal((x4579+(((-1.0)*x4578)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4580.valid){
continue;
}
CheckValue<IkReal> x4581=IKPowWithIntegerCheck(IKsign(((r12*r12)+x4577+((x4576*(r10*r10)))+(((-2.0)*x4578*x4579))+(((-1.0)*x4576*x4577)))),-1);
if(!x4581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4580.value)+(((1.5707963267949)*(x4581.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4582=IKcos(j4);
IkReal x4583=IKsin(j4);
IkReal x4584=(cj5*r00);
IkReal x4585=(cj5*r10);
IkReal x4586=(r21*sj5);
IkReal x4587=(cj5*r20);
IkReal x4588=((1.0)*x4582);
IkReal x4589=((1.0)*x4583);
IkReal x4590=(sj5*x4583);
IkReal x4591=(sj5*x4582);
evalcond[0]=(((r11*x4591))+((r12*x4583))+(((-1.0)*x4585*x4588)));
evalcond[1]=((((-1.0)*r22*x4588))+((x4583*x4586))+(((-1.0)*x4587*x4589)));
evalcond[2]=((((-1.0)*r02*x4588))+(((-1.0)*x4584*x4589))+((r01*x4590)));
evalcond[3]=((-1.0)+((r11*x4590))+(((-1.0)*r12*x4588))+(((-1.0)*x4585*x4589)));
evalcond[4]=(((cj2*sj1))+((r02*x4583))+((cj1*sj2))+(((-1.0)*x4584*x4588))+((r01*x4591)));
evalcond[5]=(((r22*x4583))+(((-1.0)*cj1*cj2))+((x4582*x4586))+((sj1*sj2))+(((-1.0)*x4587*x4588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4592=((1.0)*cj5);
CheckValue<IkReal> x4593 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4592)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4593.valid){
continue;
}
CheckValue<IkReal> x4594=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4592))+(((-1.0)*r20*sj5)))),-1);
if(!x4594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4593.value)+(((1.5707963267949)*(x4594.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4595=IKcos(j4);
IkReal x4596=IKsin(j4);
IkReal x4597=(cj5*r00);
IkReal x4598=(cj5*r10);
IkReal x4599=(r21*sj5);
IkReal x4600=(cj5*r20);
IkReal x4601=((1.0)*x4595);
IkReal x4602=((1.0)*x4596);
IkReal x4603=(sj5*x4596);
IkReal x4604=(sj5*x4595);
evalcond[0]=(((r11*x4604))+(((-1.0)*x4598*x4601))+((r12*x4596)));
evalcond[1]=((((-1.0)*x4600*x4602))+((x4596*x4599))+(((-1.0)*r22*x4601)));
evalcond[2]=(((r01*x4603))+(((-1.0)*r02*x4601))+(((-1.0)*x4597*x4602)));
evalcond[3]=((-1.0)+((r11*x4603))+(((-1.0)*r12*x4601))+(((-1.0)*x4598*x4602)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x4604))+((r02*x4596))+(((-1.0)*x4597*x4601)));
evalcond[5]=(((x4595*x4599))+((r22*x4596))+(((-1.0)*x4600*x4601))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4605 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4605.valid){
continue;
}
CheckValue<IkReal> x4606=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4605.value)+(((1.5707963267949)*(x4606.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4607=IKcos(j4);
IkReal x4608=IKsin(j4);
IkReal x4609=(cj5*r00);
IkReal x4610=(cj5*r10);
IkReal x4611=(r21*sj5);
IkReal x4612=(cj5*r20);
IkReal x4613=((1.0)*x4607);
IkReal x4614=((1.0)*x4608);
IkReal x4615=(sj5*x4608);
IkReal x4616=(sj5*x4607);
evalcond[0]=(((r12*x4608))+((r11*x4616))+(((-1.0)*x4610*x4613)));
evalcond[1]=((((-1.0)*x4612*x4614))+((x4608*x4611))+(((-1.0)*r22*x4613)));
evalcond[2]=((((-1.0)*r02*x4613))+((r01*x4615))+(((-1.0)*x4609*x4614)));
evalcond[3]=((-1.0)+((r11*x4615))+(((-1.0)*r12*x4613))+(((-1.0)*x4610*x4614)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x4616))+((r02*x4608))+(((-1.0)*x4609*x4613)));
evalcond[5]=((((-1.0)*x4612*x4613))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4608))+((x4607*x4611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4617=((-1.0)*r00);
IkReal x4619 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4619)==0){
continue;
}
IkReal x4618=pow(x4619,-0.5);
CheckValue<IkReal> x4620 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4617),IKFAST_ATAN2_MAGTHRESH);
if(!x4620.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4620.value));
IkReal gconst109=(r01*x4618);
IkReal gconst110=(x4617*x4618);
CheckValue<IkReal> x4621 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4621.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4621.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4622=((-1.0)*r00);
IkReal x4623=x4618;
CheckValue<IkReal> x4625 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4622),IKFAST_ATAN2_MAGTHRESH);
if(!x4625.valid){
continue;
}
IkReal x4624=((-1.0)*(x4625.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4624;
IkReal gconst108=x4624;
IkReal gconst109=(r01*x4623);
IkReal gconst110=(x4622*x4623);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4626=((1.0)*sj0);
IkReal x4627=((1.0)*gconst109);
CheckValue<IkReal> x4628=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4627))+(((-1.0)*gconst110*r21)))),-1);
if(!x4628.valid){
continue;
}
CheckValue<IkReal> x4629 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4626)))),IkReal((((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x4626))+(((-1.0)*cj0*r01*x4627)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4629.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4628.value)))+(x4629.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4630=IKsin(j4);
IkReal x4631=IKcos(j4);
IkReal x4632=(gconst109*r21);
IkReal x4633=((1.0)*cj2);
IkReal x4634=((1.0)*sj0);
IkReal x4635=(cj1*sj2);
IkReal x4636=((1.0)*x4631);
IkReal x4637=(gconst109*x4630);
IkReal x4638=(gconst109*x4631);
IkReal x4639=((1.0)*gconst110*x4630);
evalcond[0]=(((x4630*x4632))+(((-1.0)*r20*x4639))+(((-1.0)*r22*x4636)));
evalcond[1]=(cj0+((r11*x4637))+(((-1.0)*r10*x4639))+(((-1.0)*r12*x4636)));
evalcond[2]=(((r01*x4637))+(((-1.0)*x4634))+(((-1.0)*r02*x4636))+(((-1.0)*r00*x4639)));
evalcond[3]=((((-1.0)*gconst110*r20*x4636))+((x4631*x4632))+(((-1.0)*cj1*x4633))+((sj1*sj2))+((r22*x4630)));
evalcond[4]=(((r01*x4638))+(((-1.0)*gconst110*r00*x4636))+(((-1.0)*cj0*sj1*x4633))+(((-1.0)*cj0*x4635))+((r02*x4630)));
evalcond[5]=(((r12*x4630))+(((-1.0)*gconst110*r10*x4636))+(((-1.0)*x4634*x4635))+((r11*x4638))+(((-1.0)*sj0*sj1*x4633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4640=((1.0)*gconst110);
CheckValue<IkReal> x4641 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x4640)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4641.valid){
continue;
}
CheckValue<IkReal> x4642=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4640))+(((-1.0)*gconst109*r10)))),-1);
if(!x4642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4641.value)+(((1.5707963267949)*(x4642.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4643=IKsin(j4);
IkReal x4644=IKcos(j4);
IkReal x4645=(gconst109*r21);
IkReal x4646=((1.0)*cj2);
IkReal x4647=((1.0)*sj0);
IkReal x4648=(cj1*sj2);
IkReal x4649=((1.0)*x4644);
IkReal x4650=(gconst109*x4643);
IkReal x4651=(gconst109*x4644);
IkReal x4652=((1.0)*gconst110*x4643);
evalcond[0]=((((-1.0)*r22*x4649))+((x4643*x4645))+(((-1.0)*r20*x4652)));
evalcond[1]=(((r11*x4650))+cj0+(((-1.0)*r12*x4649))+(((-1.0)*r10*x4652)));
evalcond[2]=((((-1.0)*r02*x4649))+(((-1.0)*r00*x4652))+(((-1.0)*x4647))+((r01*x4650)));
evalcond[3]=((((-1.0)*cj1*x4646))+((sj1*sj2))+((r22*x4643))+(((-1.0)*gconst110*r20*x4649))+((x4644*x4645)));
evalcond[4]=(((r02*x4643))+(((-1.0)*cj0*x4648))+(((-1.0)*cj0*sj1*x4646))+(((-1.0)*gconst110*r00*x4649))+((r01*x4651)));
evalcond[5]=((((-1.0)*x4647*x4648))+((r11*x4651))+(((-1.0)*gconst110*r10*x4649))+(((-1.0)*sj0*sj1*x4646))+((r12*x4643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4653=((-1.0)*r01);
IkReal x4655 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4655)==0){
continue;
}
IkReal x4654=pow(x4655,-0.5);
CheckValue<IkReal> x4656 = IKatan2WithCheck(IkReal(x4653),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4656.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4656.value))));
IkReal gconst112=(x4653*x4654);
IkReal gconst113=((1.0)*r00*x4654);
CheckValue<IkReal> x4657 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4657.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4657.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4658=((-1.0)*r01);
CheckValue<IkReal> x4661 = IKatan2WithCheck(IkReal(x4658),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4661.valid){
continue;
}
IkReal x4659=((1.0)*(x4661.value));
IkReal x4660=x4654;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4659)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4659)));
IkReal gconst112=(x4658*x4660);
IkReal gconst113=((1.0)*r00*x4660);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4662=((-1.0)*r01);
CheckValue<IkReal> x4665 = IKatan2WithCheck(IkReal(x4662),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4665.valid){
continue;
}
IkReal x4663=((1.0)*(x4665.value));
IkReal x4664=x4654;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4663)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4663)));
IkReal gconst112=(x4662*x4664);
IkReal gconst113=((1.0)*r00*x4664);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4666=((-1.0)*r01);
CheckValue<IkReal> x4669 = IKatan2WithCheck(IkReal(x4666),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4669.valid){
continue;
}
IkReal x4667=((1.0)*(x4669.value));
IkReal x4668=x4654;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4667)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4667)));
IkReal gconst112=(x4666*x4668);
IkReal gconst113=((1.0)*r00*x4668);
IkReal x4670=r02*r02;
IkReal x4671=(r12*sj0);
IkReal x4672=((1.0)*cj0);
IkReal x4673=x4654;
j4eval[0]=((IKabs(((((-1.0)*r02*x4672))+(((-1.0)*x4671)))))+(IKabs((((cj0*x4670*x4673))+((r02*x4671*x4673))+(((-1.0)*x4672*x4673))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4674=((1.0)*sj0);
IkReal x4675=((1.0)*gconst112);
CheckValue<IkReal> x4676=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4675))+(((-1.0)*gconst113*r21)))),-1);
if(!x4676.valid){
continue;
}
CheckValue<IkReal> x4677 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4674))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4675))+((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*gconst112*r11*x4674)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4676.value)))+(x4677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4678=IKsin(j4);
IkReal x4679=IKcos(j4);
IkReal x4680=(gconst113*r20);
IkReal x4681=(gconst112*r21);
IkReal x4682=((1.0)*cj2);
IkReal x4683=(gconst113*r00);
IkReal x4684=(gconst113*r10);
IkReal x4685=((1.0)*sj0);
IkReal x4686=(cj1*sj2);
IkReal x4687=((1.0)*x4679);
IkReal x4688=((1.0)*x4678);
IkReal x4689=(gconst112*x4679);
IkReal x4690=(gconst112*x4678);
evalcond[0]=(((x4678*x4681))+(((-1.0)*x4680*x4688))+(((-1.0)*r22*x4687)));
evalcond[1]=((((-1.0)*x4684*x4688))+cj0+((r11*x4690))+(((-1.0)*r12*x4687)));
evalcond[2]=((((-1.0)*x4683*x4688))+((r01*x4690))+(((-1.0)*r02*x4687))+(((-1.0)*x4685)));
evalcond[3]=((((-1.0)*cj1*x4682))+((sj1*sj2))+(((-1.0)*x4680*x4687))+((r22*x4678))+((x4679*x4681)));
evalcond[4]=(((r02*x4678))+(((-1.0)*cj0*sj1*x4682))+(((-1.0)*x4683*x4687))+(((-1.0)*cj0*x4686))+((r01*x4689)));
evalcond[5]=((((-1.0)*x4684*x4687))+(((-1.0)*sj0*sj1*x4682))+((r12*x4678))+(((-1.0)*x4685*x4686))+((r11*x4689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4691=((1.0)*gconst113);
CheckValue<IkReal> x4692 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4691)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4692.valid){
continue;
}
CheckValue<IkReal> x4693=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r10))+(((-1.0)*r11*x4691)))),-1);
if(!x4693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4692.value)+(((1.5707963267949)*(x4693.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4694=IKsin(j4);
IkReal x4695=IKcos(j4);
IkReal x4696=(gconst113*r20);
IkReal x4697=(gconst112*r21);
IkReal x4698=((1.0)*cj2);
IkReal x4699=(gconst113*r00);
IkReal x4700=(gconst113*r10);
IkReal x4701=((1.0)*sj0);
IkReal x4702=(cj1*sj2);
IkReal x4703=((1.0)*x4695);
IkReal x4704=((1.0)*x4694);
IkReal x4705=(gconst112*x4695);
IkReal x4706=(gconst112*x4694);
evalcond[0]=((((-1.0)*r22*x4703))+(((-1.0)*x4696*x4704))+((x4694*x4697)));
evalcond[1]=((((-1.0)*x4700*x4704))+cj0+(((-1.0)*r12*x4703))+((r11*x4706)));
evalcond[2]=((((-1.0)*r02*x4703))+((r01*x4706))+(((-1.0)*x4699*x4704))+(((-1.0)*x4701)));
evalcond[3]=((((-1.0)*x4696*x4703))+(((-1.0)*cj1*x4698))+((sj1*sj2))+((x4695*x4697))+((r22*x4694)));
evalcond[4]=(((r02*x4694))+(((-1.0)*cj0*sj1*x4698))+(((-1.0)*cj0*x4702))+((r01*x4705))+(((-1.0)*x4699*x4703)));
evalcond[5]=((((-1.0)*x4700*x4703))+(((-1.0)*sj0*sj1*x4698))+((r12*x4694))+((r11*x4705))+(((-1.0)*x4701*x4702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4707=((1.0)*gconst113);
CheckValue<IkReal> x4708 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4707)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4708.valid){
continue;
}
CheckValue<IkReal> x4709=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4707))+(((-1.0)*gconst112*r00)))),-1);
if(!x4709.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4708.value)+(((1.5707963267949)*(x4709.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4710=IKsin(j4);
IkReal x4711=IKcos(j4);
IkReal x4712=(gconst113*r20);
IkReal x4713=(gconst112*r21);
IkReal x4714=((1.0)*cj2);
IkReal x4715=(gconst113*r00);
IkReal x4716=(gconst113*r10);
IkReal x4717=((1.0)*sj0);
IkReal x4718=(cj1*sj2);
IkReal x4719=((1.0)*x4711);
IkReal x4720=((1.0)*x4710);
IkReal x4721=(gconst112*x4711);
IkReal x4722=(gconst112*x4710);
evalcond[0]=((((-1.0)*x4712*x4720))+(((-1.0)*r22*x4719))+((x4710*x4713)));
evalcond[1]=(((r11*x4722))+cj0+(((-1.0)*x4716*x4720))+(((-1.0)*r12*x4719)));
evalcond[2]=((((-1.0)*r02*x4719))+(((-1.0)*x4715*x4720))+((r01*x4722))+(((-1.0)*x4717)));
evalcond[3]=((((-1.0)*x4712*x4719))+((r22*x4710))+((sj1*sj2))+(((-1.0)*cj1*x4714))+((x4711*x4713)));
evalcond[4]=((((-1.0)*cj0*x4718))+(((-1.0)*cj0*sj1*x4714))+(((-1.0)*x4715*x4719))+((r01*x4721))+((r02*x4710)));
evalcond[5]=(((r11*x4721))+(((-1.0)*sj0*sj1*x4714))+(((-1.0)*x4716*x4719))+((r12*x4710))+(((-1.0)*x4717*x4718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4723=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4723;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4723);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4724=((1.0)*cj5);
IkReal x4725=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4724)));
j4eval[0]=x4725;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4724))))));
j4eval[2]=IKsign(x4725);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4726=cj5*cj5;
IkReal x4727=r01*r01;
IkReal x4728=(cj5*r00);
IkReal x4729=(r01*sj5);
IkReal x4730=((((-2.0)*x4728*x4729))+x4727+(((-1.0)*x4726*x4727))+(r02*r02)+((x4726*(r00*r00))));
j4eval[0]=x4730;
j4eval[1]=IKsign(x4730);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4728))+x4729))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4731=cj5*cj5;
IkReal x4732=r01*r01;
IkReal x4733=(r01*sj5);
IkReal x4734=(cj5*r00);
CheckValue<IkReal> x4735=IKPowWithIntegerCheck(IKsign((((x4731*(r00*r00)))+x4732+(r02*r02)+(((-1.0)*x4731*x4732))+(((-2.0)*x4733*x4734)))),-1);
if(!x4735.valid){
continue;
}
CheckValue<IkReal> x4736 = IKatan2WithCheck(IkReal(((((-1.0)*x4734))+x4733)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4735.value)))+(x4736.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4737=IKcos(j4);
IkReal x4738=IKsin(j4);
IkReal x4739=(cj5*r00);
IkReal x4740=(cj5*r10);
IkReal x4741=(r21*sj5);
IkReal x4742=((1.0)*cj2);
IkReal x4743=(cj5*r20);
IkReal x4744=((1.0)*x4737);
IkReal x4745=((1.0)*x4738);
IkReal x4746=(sj5*x4738);
IkReal x4747=(sj5*x4737);
evalcond[0]=(((r01*x4747))+((r02*x4738))+(((-1.0)*x4739*x4744)));
evalcond[1]=(((x4738*x4741))+(((-1.0)*r22*x4744))+(((-1.0)*x4743*x4745)));
evalcond[2]=(((r11*x4746))+(((-1.0)*r12*x4744))+(((-1.0)*x4740*x4745)));
evalcond[3]=((-1.0)+((r01*x4746))+(((-1.0)*x4739*x4745))+(((-1.0)*r02*x4744)));
evalcond[4]=(((x4737*x4741))+(((-1.0)*cj1*x4742))+((sj1*sj2))+((r22*x4738))+(((-1.0)*x4743*x4744)));
evalcond[5]=(((r11*x4747))+(((-1.0)*sj1*x4742))+(((-1.0)*cj1*sj2))+(((-1.0)*x4740*x4744))+((r12*x4738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4748=((1.0)*cj5);
CheckValue<IkReal> x4749=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4748))+(((-1.0)*r10*sj5)))),-1);
if(!x4749.valid){
continue;
}
CheckValue<IkReal> x4750 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4748)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4749.value)))+(x4750.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4751=IKcos(j4);
IkReal x4752=IKsin(j4);
IkReal x4753=(cj5*r00);
IkReal x4754=(cj5*r10);
IkReal x4755=(r21*sj5);
IkReal x4756=((1.0)*cj2);
IkReal x4757=(cj5*r20);
IkReal x4758=((1.0)*x4751);
IkReal x4759=((1.0)*x4752);
IkReal x4760=(sj5*x4752);
IkReal x4761=(sj5*x4751);
evalcond[0]=((((-1.0)*x4753*x4758))+((r01*x4761))+((r02*x4752)));
evalcond[1]=((((-1.0)*r22*x4758))+((x4752*x4755))+(((-1.0)*x4757*x4759)));
evalcond[2]=((((-1.0)*x4754*x4759))+(((-1.0)*r12*x4758))+((r11*x4760)));
evalcond[3]=((-1.0)+(((-1.0)*x4753*x4759))+((r01*x4760))+(((-1.0)*r02*x4758)));
evalcond[4]=((((-1.0)*cj1*x4756))+((sj1*sj2))+((x4751*x4755))+(((-1.0)*x4757*x4758))+((r22*x4752)));
evalcond[5]=(((r12*x4752))+(((-1.0)*x4754*x4758))+(((-1.0)*sj1*x4756))+(((-1.0)*cj1*sj2))+((r11*x4761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4762=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4762.valid){
continue;
}
CheckValue<IkReal> x4763 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4762.value)))+(x4763.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4764=IKcos(j4);
IkReal x4765=IKsin(j4);
IkReal x4766=(cj5*r00);
IkReal x4767=(cj5*r10);
IkReal x4768=(r21*sj5);
IkReal x4769=((1.0)*cj2);
IkReal x4770=(cj5*r20);
IkReal x4771=((1.0)*x4764);
IkReal x4772=((1.0)*x4765);
IkReal x4773=(sj5*x4765);
IkReal x4774=(sj5*x4764);
evalcond[0]=(((r02*x4765))+(((-1.0)*x4766*x4771))+((r01*x4774)));
evalcond[1]=((((-1.0)*r22*x4771))+(((-1.0)*x4770*x4772))+((x4765*x4768)));
evalcond[2]=(((r11*x4773))+(((-1.0)*r12*x4771))+(((-1.0)*x4767*x4772)));
evalcond[3]=((-1.0)+(((-1.0)*x4766*x4772))+((r01*x4773))+(((-1.0)*r02*x4771)));
evalcond[4]=(((r22*x4765))+((sj1*sj2))+(((-1.0)*cj1*x4769))+((x4764*x4768))+(((-1.0)*x4770*x4771)));
evalcond[5]=(((r11*x4774))+(((-1.0)*x4767*x4771))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4769))+((r12*x4765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4775=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4775;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4775);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4776=((1.0)*cj5);
IkReal x4777=((((-1.0)*r21*x4776))+(((-1.0)*r20*sj5)));
j4eval[0]=x4777;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4776))))));
j4eval[2]=IKsign(x4777);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4778=cj5*cj5;
IkReal x4779=r01*r01;
IkReal x4780=(r01*sj5);
IkReal x4781=(cj5*r00);
IkReal x4782=((((-1.0)*x4779))+(((-1.0)*(r02*r02)))+((x4778*x4779))+(((-1.0)*x4778*(r00*r00)))+(((2.0)*x4780*x4781)));
j4eval[0]=x4782;
j4eval[1]=IKsign(x4782);
j4eval[2]=((IKabs(r02))+(IKabs((x4780+(((-1.0)*x4781))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4783=cj5*cj5;
IkReal x4784=r01*r01;
IkReal x4785=(r01*sj5);
IkReal x4786=(cj5*r00);
CheckValue<IkReal> x4787 = IKatan2WithCheck(IkReal((x4785+(((-1.0)*x4786)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4787.valid){
continue;
}
CheckValue<IkReal> x4788=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x4785*x4786))+(((-1.0)*x4784))+(((-1.0)*x4783*(r00*r00)))+((x4783*x4784)))),-1);
if(!x4788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4787.value)+(((1.5707963267949)*(x4788.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4789=IKcos(j4);
IkReal x4790=IKsin(j4);
IkReal x4791=(cj5*r00);
IkReal x4792=(cj5*r10);
IkReal x4793=(r21*sj5);
IkReal x4794=(cj5*r20);
IkReal x4795=((1.0)*x4789);
IkReal x4796=((1.0)*x4790);
IkReal x4797=(sj5*x4790);
IkReal x4798=(sj5*x4789);
evalcond[0]=(((r01*x4798))+((r02*x4790))+(((-1.0)*x4791*x4795)));
evalcond[1]=(((x4790*x4793))+(((-1.0)*x4794*x4796))+(((-1.0)*r22*x4795)));
evalcond[2]=((((-1.0)*r12*x4795))+((r11*x4797))+(((-1.0)*x4792*x4796)));
evalcond[3]=((1.0)+((r01*x4797))+(((-1.0)*r02*x4795))+(((-1.0)*x4791*x4796)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4798))+((r12*x4790))+(((-1.0)*x4792*x4795)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4794*x4795))+((x4789*x4793))+((r22*x4790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4799=((1.0)*cj5);
CheckValue<IkReal> x4800=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4799))+(((-1.0)*r20*sj5)))),-1);
if(!x4800.valid){
continue;
}
CheckValue<IkReal> x4801 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4799)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4800.value)))+(x4801.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4802=IKcos(j4);
IkReal x4803=IKsin(j4);
IkReal x4804=(cj5*r00);
IkReal x4805=(cj5*r10);
IkReal x4806=(r21*sj5);
IkReal x4807=(cj5*r20);
IkReal x4808=((1.0)*x4802);
IkReal x4809=((1.0)*x4803);
IkReal x4810=(sj5*x4803);
IkReal x4811=(sj5*x4802);
evalcond[0]=(((r02*x4803))+(((-1.0)*x4804*x4808))+((r01*x4811)));
evalcond[1]=((((-1.0)*r22*x4808))+((x4803*x4806))+(((-1.0)*x4807*x4809)));
evalcond[2]=((((-1.0)*x4805*x4809))+((r11*x4810))+(((-1.0)*r12*x4808)));
evalcond[3]=((1.0)+(((-1.0)*x4804*x4809))+(((-1.0)*r02*x4808))+((r01*x4810)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4805*x4808))+((r11*x4811))+((cj1*sj2))+((r12*x4803)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4803))+(((-1.0)*x4807*x4808))+((x4802*x4806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4812 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4812.valid){
continue;
}
CheckValue<IkReal> x4813=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4812.value)+(((1.5707963267949)*(x4813.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4814=IKcos(j4);
IkReal x4815=IKsin(j4);
IkReal x4816=(cj5*r00);
IkReal x4817=(cj5*r10);
IkReal x4818=(r21*sj5);
IkReal x4819=(cj5*r20);
IkReal x4820=((1.0)*x4814);
IkReal x4821=((1.0)*x4815);
IkReal x4822=(sj5*x4815);
IkReal x4823=(sj5*x4814);
evalcond[0]=((((-1.0)*x4816*x4820))+((r02*x4815))+((r01*x4823)));
evalcond[1]=(((x4815*x4818))+(((-1.0)*r22*x4820))+(((-1.0)*x4819*x4821)));
evalcond[2]=(((r11*x4822))+(((-1.0)*x4817*x4821))+(((-1.0)*r12*x4820)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4820))+(((-1.0)*x4816*x4821))+((r01*x4822)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x4823))+(((-1.0)*x4817*x4820))+((r12*x4815)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4819*x4820))+((x4814*x4818))+((r22*x4815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4824=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4824);
rxp1_1=(px*r21);
rxp1_2=(r11*x4824);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4825=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4825);
rxp1_1=(px*r21);
rxp1_2=(r11*x4825);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4826=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4826);
rxp1_1=(px*r21);
rxp1_2=(r11*x4826);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4829=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4829.valid){
continue;
}
IkReal x4827=x4829.value;
IkReal x4828=(sj0*x4827);
cj4array[0]=(((cj1*sj2*x4828))+((cj2*sj1*x4828)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4830=IKsin(j4);
IkReal x4831=IKcos(j4);
IkReal x4832=(r21*sj5);
IkReal x4833=((1.0)*cj5*r20);
evalcond[0]=(r02*x4830);
evalcond[1]=((((-1.0)*r02*x4831))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x4830*x4833))+((x4830*x4832)));
evalcond[3]=(((r11*sj5*x4830))+(((-1.0)*cj5*r10*x4830)));
evalcond[4]=((((-1.0)*x4831*x4833))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4831*x4832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4835=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4835.valid){
continue;
}
IkReal x4834=x4835.value;
cj4array[0]=(((cj1*cj2*x4834))+(((-1.0)*sj1*sj2*x4834)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4836=IKsin(j4);
IkReal x4837=IKcos(j4);
IkReal x4838=((1.0)*sj0);
IkReal x4839=((1.0)*cj5);
IkReal x4840=(sj5*x4836);
evalcond[0]=(r02*x4836);
evalcond[1]=((((-1.0)*r02*x4837))+(((-1.0)*x4838)));
evalcond[2]=((((-1.0)*r20*x4836*x4839))+((r21*x4840)));
evalcond[3]=((((-1.0)*r10*x4836*x4839))+((r11*x4840)));
evalcond[4]=((((-1.0)*cj2*sj1*x4838))+((r11*sj5*x4837))+(((-1.0)*cj1*sj2*x4838))+(((-1.0)*r10*x4837*x4839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4841=IKPowWithIntegerCheck(r02,-1);
if(!x4841.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4841.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4842=IKsin(j4);
IkReal x4843=IKcos(j4);
IkReal x4844=((1.0)*cj1);
IkReal x4845=(r21*sj5);
IkReal x4846=((1.0)*cj5);
IkReal x4847=(r11*sj5);
evalcond[0]=(r02*x4842);
evalcond[1]=(((x4842*x4845))+(((-1.0)*r20*x4842*x4846)));
evalcond[2]=((((-1.0)*r10*x4842*x4846))+((x4842*x4847)));
evalcond[3]=((((-1.0)*cj2*x4844))+(((-1.0)*r20*x4843*x4846))+((sj1*sj2))+((x4843*x4845)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x4843*x4846))+(((-1.0)*sj0*sj2*x4844))+((x4843*x4847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4848=((1.0)*sj0);
IkReal x4849=((1.0)*cj0);
CheckValue<IkReal> x4850 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4849))+(((-1.0)*r12*x4848)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x4849))+(((-1.0)*r11*sj5*x4848)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4850.valid){
continue;
}
CheckValue<IkReal> x4851=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4850.value)+(((1.5707963267949)*(x4851.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4852=IKsin(j4);
IkReal x4853=IKcos(j4);
IkReal x4854=(cj5*r00);
IkReal x4855=(cj5*r10);
IkReal x4856=(r21*sj5);
IkReal x4857=((1.0)*cj2);
IkReal x4858=((1.0)*sj0);
IkReal x4859=(cj1*sj2);
IkReal x4860=(cj5*r20);
IkReal x4861=((1.0)*x4853);
IkReal x4862=((1.0)*x4852);
IkReal x4863=(sj5*x4852);
IkReal x4864=(sj5*x4853);
evalcond[0]=((((-1.0)*r22*x4861))+(((-1.0)*x4860*x4862))+((x4852*x4856)));
evalcond[1]=((((-1.0)*x4855*x4862))+((r11*x4863))+cj0+(((-1.0)*r12*x4861)));
evalcond[2]=((((-1.0)*x4854*x4862))+((r01*x4863))+(((-1.0)*x4858))+(((-1.0)*r02*x4861)));
evalcond[3]=(((x4853*x4856))+((r22*x4852))+((sj1*sj2))+(((-1.0)*cj1*x4857))+(((-1.0)*x4860*x4861)));
evalcond[4]=((((-1.0)*x4854*x4861))+((r01*x4864))+((r02*x4852))+(((-1.0)*cj0*x4859))+(((-1.0)*cj0*sj1*x4857)));
evalcond[5]=((((-1.0)*x4855*x4861))+((r11*x4864))+((r12*x4852))+(((-1.0)*x4858*x4859))+(((-1.0)*sj0*sj1*x4857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4865=((1.0)*cj5);
CheckValue<IkReal> x4866 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4865))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4866.valid){
continue;
}
CheckValue<IkReal> x4867=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4865)))),-1);
if(!x4867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4866.value)+(((1.5707963267949)*(x4867.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4868=IKsin(j4);
IkReal x4869=IKcos(j4);
IkReal x4870=(cj5*r00);
IkReal x4871=(cj5*r10);
IkReal x4872=(r21*sj5);
IkReal x4873=((1.0)*cj2);
IkReal x4874=((1.0)*sj0);
IkReal x4875=(cj1*sj2);
IkReal x4876=(cj5*r20);
IkReal x4877=((1.0)*x4869);
IkReal x4878=((1.0)*x4868);
IkReal x4879=(sj5*x4868);
IkReal x4880=(sj5*x4869);
evalcond[0]=((((-1.0)*x4876*x4878))+((x4868*x4872))+(((-1.0)*r22*x4877)));
evalcond[1]=(cj0+(((-1.0)*x4871*x4878))+(((-1.0)*r12*x4877))+((r11*x4879)));
evalcond[2]=(((r01*x4879))+(((-1.0)*x4870*x4878))+(((-1.0)*r02*x4877))+(((-1.0)*x4874)));
evalcond[3]=((((-1.0)*x4876*x4877))+((x4869*x4872))+((r22*x4868))+((sj1*sj2))+(((-1.0)*cj1*x4873)));
evalcond[4]=((((-1.0)*cj0*sj1*x4873))+(((-1.0)*x4870*x4877))+((r02*x4868))+((r01*x4880))+(((-1.0)*cj0*x4875)));
evalcond[5]=(((r12*x4868))+((r11*x4880))+(((-1.0)*x4874*x4875))+(((-1.0)*x4871*x4877))+(((-1.0)*sj0*sj1*x4873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4881=((1.0)*cj5);
CheckValue<IkReal> x4882 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4881)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4882.valid){
continue;
}
CheckValue<IkReal> x4883=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4881)))),-1);
if(!x4883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4882.value)+(((1.5707963267949)*(x4883.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4884=IKsin(j4);
IkReal x4885=IKcos(j4);
IkReal x4886=(cj5*r00);
IkReal x4887=(cj5*r10);
IkReal x4888=(r21*sj5);
IkReal x4889=((1.0)*cj2);
IkReal x4890=((1.0)*sj0);
IkReal x4891=(cj1*sj2);
IkReal x4892=(cj5*r20);
IkReal x4893=((1.0)*x4885);
IkReal x4894=((1.0)*x4884);
IkReal x4895=(sj5*x4884);
IkReal x4896=(sj5*x4885);
evalcond[0]=((((-1.0)*x4892*x4894))+(((-1.0)*r22*x4893))+((x4884*x4888)));
evalcond[1]=(((r11*x4895))+(((-1.0)*r12*x4893))+cj0+(((-1.0)*x4887*x4894)));
evalcond[2]=((((-1.0)*x4890))+(((-1.0)*r02*x4893))+(((-1.0)*x4886*x4894))+((r01*x4895)));
evalcond[3]=(((x4885*x4888))+(((-1.0)*cj1*x4889))+((sj1*sj2))+((r22*x4884))+(((-1.0)*x4892*x4893)));
evalcond[4]=((((-1.0)*cj0*x4891))+((r02*x4884))+(((-1.0)*cj0*sj1*x4889))+(((-1.0)*x4886*x4893))+((r01*x4896)));
evalcond[5]=(((r11*x4896))+((r12*x4884))+(((-1.0)*sj0*sj1*x4889))+(((-1.0)*x4887*x4893))+(((-1.0)*x4890*x4891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4897=((1.0)*cj5);
IkReal x4898=((1.0)*sj5);
IkReal x4899=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4899;
j0eval[1]=((IKabs(((((-1.0)*r11*x4897))+(((-1.0)*r10*x4898)))))+(IKabs(((((-1.0)*r00*x4898))+(((-1.0)*r01*x4897))))));
j0eval[2]=IKsign(x4899);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4900=r21*r21;
IkReal x4901=cj5*cj5;
IkReal x4902=(cj2*sj1);
IkReal x4903=(cj1*sj2);
IkReal x4904=(r21*sj5);
IkReal x4905=((1.0)*cj5*r20);
IkReal x4906=(((x4900*x4901))+(((-1.0)*x4900))+(((2.0)*cj5*r20*x4904))+(((-1.0)*x4901*(r20*r20)))+(((-1.0)*(r22*r22))));
j4eval[0]=x4906;
j4eval[1]=((IKabs(((((-1.0)*x4902*x4905))+(((-1.0)*x4903*x4905))+((x4902*x4904))+((x4903*x4904)))))+(IKabs((((r22*x4903))+((r22*x4902))))));
j4eval[2]=IKsign(x4906);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4907=cj1*cj1;
IkReal x4908=(cj2*sj2);
IkReal x4909=(cj2*sj1);
IkReal x4910=(cj1*sj1);
j0eval[0]=((((-1.08418367346939)*cj1*x4909))+x4910+x4908+(((-1.08418367346939)*sj2*x4907))+(((-2.0)*x4907*x4908))+(((-2.0)*cj1*cj2*x4909)));
j0eval[1]=((((-1.0)*x4909))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.19192641276835)*py))+(((-0.195493438569105)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.19192641276835)*px))+(((0.195493438569105)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.19192641276835)*py))+(((-0.195493438569105)*px))))+IKsqr(((((1.19192641276835)*px))+(((0.195493438569105)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.19192641276835)*py))+(((-0.195493438569105)*px))), ((((1.19192641276835)*px))+(((0.195493438569105)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4911=IKcos(j0);
IkReal x4912=IKsin(j0);
evalcond[0]=((((-0.134)*x4912))+(((-1.0)*px))+(((0.817)*x4911)));
evalcond[1]=((((0.134)*x4911))+(((-1.0)*py))+(((0.817)*x4912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4913=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4913;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4913);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4914=((1.0)*cj5);
IkReal x4915=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4914)));
j4eval[0]=x4915;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x4914))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4915);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4916=((1.0)*cj5);
IkReal x4917=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4916)));
j4eval[0]=x4917;
j4eval[1]=IKsign(x4917);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4916)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4918=((1.0)*cj5);
CheckValue<IkReal> x4919 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4918)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4919.valid){
continue;
}
CheckValue<IkReal> x4920=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4918)))),-1);
if(!x4920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4919.value)+(((1.5707963267949)*(x4920.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4921=IKcos(j4);
IkReal x4922=IKsin(j4);
IkReal x4923=((1.0)*sj0);
IkReal x4924=(cj5*r00);
IkReal x4925=(cj5*r10);
IkReal x4926=(cj5*r20);
IkReal x4927=((1.0)*x4921);
IkReal x4928=((1.0)*x4922);
IkReal x4929=(sj5*x4921);
IkReal x4930=(sj5*x4922);
evalcond[0]=(((r22*x4922))+((r21*x4929))+(((-1.0)*x4926*x4927)));
evalcond[1]=((((-1.0)*x4926*x4928))+((r21*x4930))+(((-1.0)*r22*x4927)));
evalcond[2]=(cj0+(((-1.0)*r12*x4927))+((r11*x4930))+(((-1.0)*x4925*x4928)));
evalcond[3]=((((-1.0)*x4924*x4927))+((r01*x4929))+((r02*x4922))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4923))+((r11*x4929))+(((-1.0)*x4925*x4927))+((r12*x4922)));
evalcond[5]=((((-1.0)*r02*x4927))+(((-1.0)*x4924*x4928))+((r01*x4930))+(((-1.0)*x4923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4931=((1.0)*cj5);
CheckValue<IkReal> x4932 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4931)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4932.valid){
continue;
}
CheckValue<IkReal> x4933=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4931))+(((-1.0)*r00*sj5)))),-1);
if(!x4933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4932.value)+(((1.5707963267949)*(x4933.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4934=IKcos(j4);
IkReal x4935=IKsin(j4);
IkReal x4936=((1.0)*sj0);
IkReal x4937=(cj5*r00);
IkReal x4938=(cj5*r10);
IkReal x4939=(cj5*r20);
IkReal x4940=((1.0)*x4934);
IkReal x4941=((1.0)*x4935);
IkReal x4942=(sj5*x4934);
IkReal x4943=(sj5*x4935);
evalcond[0]=(((r21*x4942))+(((-1.0)*x4939*x4940))+((r22*x4935)));
evalcond[1]=(((r21*x4943))+(((-1.0)*x4939*x4941))+(((-1.0)*r22*x4940)));
evalcond[2]=((((-1.0)*x4938*x4941))+cj0+((r11*x4943))+(((-1.0)*r12*x4940)));
evalcond[3]=(((r01*x4942))+(((-1.0)*x4937*x4940))+((r02*x4935))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4935))+(((-1.0)*x4938*x4940))+((r11*x4942))+(((-1.0)*x4936)));
evalcond[5]=(((r01*x4943))+(((-1.0)*x4937*x4941))+(((-1.0)*r02*x4940))+(((-1.0)*x4936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4944 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4944.valid){
continue;
}
CheckValue<IkReal> x4945=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4944.value)+(((1.5707963267949)*(x4945.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4946=IKcos(j4);
IkReal x4947=IKsin(j4);
IkReal x4948=((1.0)*sj0);
IkReal x4949=(cj5*r00);
IkReal x4950=(cj5*r10);
IkReal x4951=(cj5*r20);
IkReal x4952=((1.0)*x4946);
IkReal x4953=((1.0)*x4947);
IkReal x4954=(sj5*x4946);
IkReal x4955=(sj5*x4947);
evalcond[0]=(((r21*x4954))+(((-1.0)*x4951*x4952))+((r22*x4947)));
evalcond[1]=((((-1.0)*r22*x4952))+((r21*x4955))+(((-1.0)*x4951*x4953)));
evalcond[2]=(cj0+((r11*x4955))+(((-1.0)*r12*x4952))+(((-1.0)*x4950*x4953)));
evalcond[3]=(((r02*x4947))+(((-1.0)*x4949*x4952))+((r01*x4954))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4948))+((r12*x4947))+((r11*x4954))+(((-1.0)*x4950*x4952)));
evalcond[5]=((((-1.0)*x4948))+(((-1.0)*r02*x4952))+(((-1.0)*x4949*x4953))+((r01*x4955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.73273825150958)*px))+(((7.03596744552376)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((1.73273825150958)*px))+(((7.03596744552376)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((1.73273825150958)*px))+(((7.03596744552376)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4956=IKcos(j0);
IkReal x4957=IKsin(j0);
evalcond[0]=((((0.033)*x4956))+(((-1.0)*px))+(((-0.134)*x4957)));
evalcond[1]=((((0.033)*x4957))+(((-1.0)*py))+(((0.134)*x4956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4958=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4958;
j4eval[1]=IKsign(x4958);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4959=((1.0)*cj5);
IkReal x4960=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4959)));
j4eval[0]=x4960;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4959))))));
j4eval[2]=IKsign(x4960);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4961=cj5*cj5;
IkReal x4962=((1.0)*r20);
IkReal x4963=(r01*r21);
IkReal x4964=(r21*sj5);
IkReal x4965=(((cj5*r01*r20*sj5))+(((-1.0)*r00*x4961*x4962))+(((-1.0)*r02*r22))+((x4961*x4963))+((cj5*r00*x4964))+(((-1.0)*x4963)));
j4eval[0]=x4965;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x4962))+((cj0*x4964)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4965);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4966=cj5*cj5;
IkReal x4967=((1.0)*r20);
IkReal x4968=(r01*r21);
IkReal x4969=(r21*sj5);
CheckValue<IkReal> x4970 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4967))+((cj0*x4969)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4970.valid){
continue;
}
CheckValue<IkReal> x4971=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x4966*x4968))+((cj5*r00*x4969))+(((-1.0)*r00*x4966*x4967))+(((-1.0)*x4968)))),-1);
if(!x4971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4970.value)+(((1.5707963267949)*(x4971.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4972=IKcos(j4);
IkReal x4973=IKsin(j4);
IkReal x4974=(cj5*r00);
IkReal x4975=(cj5*r10);
IkReal x4976=(cj5*r20);
IkReal x4977=((1.0)*x4972);
IkReal x4978=((1.0)*x4973);
IkReal x4979=(sj5*x4972);
IkReal x4980=(sj5*x4973);
evalcond[0]=(((r22*x4973))+(((-1.0)*x4976*x4977))+((r21*x4979)));
evalcond[1]=((((-1.0)*x4976*x4978))+((r21*x4980))+(((-1.0)*r22*x4977)));
evalcond[2]=(cj0+((r02*x4973))+(((-1.0)*x4974*x4977))+((r01*x4979)));
evalcond[3]=((((-1.0)*x4975*x4977))+sj0+((r12*x4973))+((r11*x4979)));
evalcond[4]=((((-1.0)*x4975*x4978))+cj0+((r11*x4980))+(((-1.0)*r12*x4977)));
evalcond[5]=((((-1.0)*sj0))+((r01*x4980))+(((-1.0)*r02*x4977))+(((-1.0)*x4974*x4978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4981=((1.0)*cj5);
CheckValue<IkReal> x4982=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4981)))),-1);
if(!x4982.valid){
continue;
}
CheckValue<IkReal> x4983 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4981)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4982.value)))+(x4983.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4984=IKcos(j4);
IkReal x4985=IKsin(j4);
IkReal x4986=(cj5*r00);
IkReal x4987=(cj5*r10);
IkReal x4988=(cj5*r20);
IkReal x4989=((1.0)*x4984);
IkReal x4990=((1.0)*x4985);
IkReal x4991=(sj5*x4984);
IkReal x4992=(sj5*x4985);
evalcond[0]=((((-1.0)*x4988*x4989))+((r22*x4985))+((r21*x4991)));
evalcond[1]=((((-1.0)*r22*x4989))+(((-1.0)*x4988*x4990))+((r21*x4992)));
evalcond[2]=((((-1.0)*x4986*x4989))+cj0+((r01*x4991))+((r02*x4985)));
evalcond[3]=(sj0+((r12*x4985))+((r11*x4991))+(((-1.0)*x4987*x4989)));
evalcond[4]=(cj0+((r11*x4992))+(((-1.0)*r12*x4989))+(((-1.0)*x4987*x4990)));
evalcond[5]=((((-1.0)*x4986*x4990))+(((-1.0)*sj0))+(((-1.0)*r02*x4989))+((r01*x4992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4993 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4993.valid){
continue;
}
CheckValue<IkReal> x4994=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4993.value)+(((1.5707963267949)*(x4994.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4995=IKcos(j4);
IkReal x4996=IKsin(j4);
IkReal x4997=(cj5*r00);
IkReal x4998=(cj5*r10);
IkReal x4999=(cj5*r20);
IkReal x5000=((1.0)*x4995);
IkReal x5001=((1.0)*x4996);
IkReal x5002=(sj5*x4995);
IkReal x5003=(sj5*x4996);
evalcond[0]=(((r22*x4996))+(((-1.0)*x4999*x5000))+((r21*x5002)));
evalcond[1]=((((-1.0)*x4999*x5001))+((r21*x5003))+(((-1.0)*r22*x5000)));
evalcond[2]=(cj0+((r02*x4996))+((r01*x5002))+(((-1.0)*x4997*x5000)));
evalcond[3]=(sj0+((r11*x5002))+(((-1.0)*x4998*x5000))+((r12*x4996)));
evalcond[4]=(((r11*x5003))+cj0+(((-1.0)*x4998*x5001))+(((-1.0)*r12*x5000)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5003))+(((-1.0)*x4997*x5001))+(((-1.0)*r02*x5000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5004=IKsin(j0);
IkReal x5005=IKcos(j0);
IkReal x5006=((0.1)*sj5);
IkReal x5007=(cj5*r11);
IkReal x5008=(cj5*r01);
evalcond[0]=(((r00*sj5))+(((-1.0)*x5005))+x5008);
evalcond[1]=(((r10*sj5))+(((-1.0)*x5004))+x5007);
evalcond[2]=((((-1.0)*px))+(((-0.134)*x5004))+(((-1.0)*r00*x5006))+(((-0.1)*x5008)));
evalcond[3]=((((0.134)*x5005))+(((-1.0)*py))+(((-1.0)*r10*x5006))+(((-0.1)*x5007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5009=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5009;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5009);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5010=((1.0)*cj5);
IkReal x5011=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5010)));
j4eval[0]=x5011;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5010))+((r11*sj5))))));
j4eval[2]=IKsign(x5011);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5012=cj5*cj5;
IkReal x5013=(r01*r11);
IkReal x5014=((1.0)*r00);
IkReal x5015=(r01*sj5);
IkReal x5016=((((-1.0)*r02*r12))+((x5012*x5013))+(((-1.0)*r10*x5012*x5014))+((cj5*r10*x5015))+(((-1.0)*x5013))+((cj5*r00*r11*sj5)));
j4eval[0]=x5016;
j4eval[1]=IKsign(x5016);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5015))+(((-1.0)*cj0*cj5*x5014))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5017=cj5*cj5;
IkReal x5018=(r01*r11);
IkReal x5019=(cj5*r00);
IkReal x5020=(r01*sj5);
CheckValue<IkReal> x5021=IKPowWithIntegerCheck(IKsign((((cj5*r10*x5020))+((r11*sj5*x5019))+(((-1.0)*r02*r12))+((x5017*x5018))+(((-1.0)*x5018))+(((-1.0)*r00*r10*x5017)))),-1);
if(!x5021.valid){
continue;
}
CheckValue<IkReal> x5022 = IKatan2WithCheck(IkReal((((cj0*x5020))+(((-1.0)*cj0*x5019)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5021.value)))+(x5022.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5023=IKcos(j4);
IkReal x5024=IKsin(j4);
IkReal x5025=(cj5*r00);
IkReal x5026=(r01*sj5);
IkReal x5027=(cj5*r10);
IkReal x5028=(cj5*r20);
IkReal x5029=((1.0)*x5023);
IkReal x5030=((1.0)*x5024);
IkReal x5031=(sj5*x5024);
IkReal x5032=(sj5*x5023);
evalcond[0]=(((x5023*x5026))+(((-1.0)*x5025*x5029))+((r02*x5024)));
evalcond[1]=(((r12*x5024))+((r11*x5032))+(((-1.0)*x5027*x5029)));
evalcond[2]=((((-1.0)*x5028*x5030))+((r21*x5031))+(((-1.0)*r22*x5029)));
evalcond[3]=((1.0)+(((-1.0)*x5028*x5029))+((r22*x5024))+((r21*x5032)));
evalcond[4]=((((-1.0)*x5027*x5030))+cj0+((r11*x5031))+(((-1.0)*r12*x5029)));
evalcond[5]=((((-1.0)*r02*x5029))+(((-1.0)*sj0))+((x5024*x5026))+(((-1.0)*x5025*x5030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5033=((1.0)*cj5);
CheckValue<IkReal> x5034=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5033)))),-1);
if(!x5034.valid){
continue;
}
CheckValue<IkReal> x5035 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5033)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5034.value)))+(x5035.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5036=IKcos(j4);
IkReal x5037=IKsin(j4);
IkReal x5038=(cj5*r00);
IkReal x5039=(r01*sj5);
IkReal x5040=(cj5*r10);
IkReal x5041=(cj5*r20);
IkReal x5042=((1.0)*x5036);
IkReal x5043=((1.0)*x5037);
IkReal x5044=(sj5*x5037);
IkReal x5045=(sj5*x5036);
evalcond[0]=(((r02*x5037))+((x5036*x5039))+(((-1.0)*x5038*x5042)));
evalcond[1]=(((r12*x5037))+(((-1.0)*x5040*x5042))+((r11*x5045)));
evalcond[2]=((((-1.0)*x5041*x5043))+((r21*x5044))+(((-1.0)*r22*x5042)));
evalcond[3]=((1.0)+(((-1.0)*x5041*x5042))+((r21*x5045))+((r22*x5037)));
evalcond[4]=((((-1.0)*x5040*x5043))+cj0+(((-1.0)*r12*x5042))+((r11*x5044)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5042))+(((-1.0)*x5038*x5043))+((x5037*x5039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5046 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5046.valid){
continue;
}
CheckValue<IkReal> x5047=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5046.value)+(((1.5707963267949)*(x5047.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5048=IKcos(j4);
IkReal x5049=IKsin(j4);
IkReal x5050=(cj5*r00);
IkReal x5051=(r01*sj5);
IkReal x5052=(cj5*r10);
IkReal x5053=(cj5*r20);
IkReal x5054=((1.0)*x5048);
IkReal x5055=((1.0)*x5049);
IkReal x5056=(sj5*x5049);
IkReal x5057=(sj5*x5048);
evalcond[0]=(((x5048*x5051))+((r02*x5049))+(((-1.0)*x5050*x5054)));
evalcond[1]=(((r11*x5057))+(((-1.0)*x5052*x5054))+((r12*x5049)));
evalcond[2]=(((r21*x5056))+(((-1.0)*r22*x5054))+(((-1.0)*x5053*x5055)));
evalcond[3]=((1.0)+((r21*x5057))+(((-1.0)*x5053*x5054))+((r22*x5049)));
evalcond[4]=(cj0+(((-1.0)*r12*x5054))+((r11*x5056))+(((-1.0)*x5052*x5055)));
evalcond[5]=((((-1.0)*sj0))+((x5049*x5051))+(((-1.0)*r02*x5054))+(((-1.0)*x5050*x5055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((-2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((-2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((-2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5058=IKcos(j0);
IkReal x5059=IKsin(j0);
evalcond[0]=((((-0.392)*x5058))+(((-0.134)*x5059))+(((-1.0)*px)));
evalcond[1]=((((-0.392)*x5059))+(((-1.0)*py))+(((0.134)*x5058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5060=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5060;
j4eval[1]=IKsign(x5060);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5061=((1.0)*cj5);
IkReal x5062=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5061)));
j4eval[0]=x5062;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5061)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5062);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5063=cj5*cj5;
IkReal x5064=((1.0)*r20);
IkReal x5065=(r01*r21);
IkReal x5066=(r21*sj5);
IkReal x5067=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5063*x5065))+(((-1.0)*r00*x5063*x5064))+(((-1.0)*x5065))+((cj5*r00*x5066)));
j4eval[0]=x5067;
j4eval[1]=((IKabs((((cj0*x5066))+(((-1.0)*cj0*cj5*x5064)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5067);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5068=cj5*cj5;
IkReal x5069=((1.0)*r20);
IkReal x5070=(r01*r21);
IkReal x5071=(r21*sj5);
CheckValue<IkReal> x5072=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x5068*x5070))+(((-1.0)*r02*r22))+((cj5*r00*x5071))+(((-1.0)*x5070))+(((-1.0)*r00*x5068*x5069)))),-1);
if(!x5072.valid){
continue;
}
CheckValue<IkReal> x5073 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5071))+(((-1.0)*cj0*cj5*x5069)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5072.value)))+(x5073.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5074=IKcos(j4);
IkReal x5075=IKsin(j4);
IkReal x5076=(cj5*r00);
IkReal x5077=(cj5*r10);
IkReal x5078=(cj5*r20);
IkReal x5079=((1.0)*x5074);
IkReal x5080=((1.0)*x5075);
IkReal x5081=(sj5*x5074);
IkReal x5082=(sj5*x5075);
evalcond[0]=(((r21*x5081))+(((-1.0)*x5078*x5079))+((r22*x5075)));
evalcond[1]=(((r21*x5082))+(((-1.0)*x5078*x5080))+(((-1.0)*r22*x5079)));
evalcond[2]=(cj0+((r01*x5081))+((r02*x5075))+(((-1.0)*x5076*x5079)));
evalcond[3]=(sj0+((r11*x5081))+(((-1.0)*x5077*x5079))+((r12*x5075)));
evalcond[4]=(cj0+(((-1.0)*x5077*x5080))+((r11*x5082))+(((-1.0)*r12*x5079)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5079))+((r01*x5082))+(((-1.0)*x5076*x5080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5083=((1.0)*cj5);
CheckValue<IkReal> x5084=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5083))+(((-1.0)*r10*sj5)))),-1);
if(!x5084.valid){
continue;
}
CheckValue<IkReal> x5085 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5083)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5084.value)))+(x5085.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5086=IKcos(j4);
IkReal x5087=IKsin(j4);
IkReal x5088=(cj5*r00);
IkReal x5089=(cj5*r10);
IkReal x5090=(cj5*r20);
IkReal x5091=((1.0)*x5086);
IkReal x5092=((1.0)*x5087);
IkReal x5093=(sj5*x5086);
IkReal x5094=(sj5*x5087);
evalcond[0]=(((r21*x5093))+((r22*x5087))+(((-1.0)*x5090*x5091)));
evalcond[1]=((((-1.0)*r22*x5091))+((r21*x5094))+(((-1.0)*x5090*x5092)));
evalcond[2]=((((-1.0)*x5088*x5091))+cj0+((r01*x5093))+((r02*x5087)));
evalcond[3]=(sj0+((r11*x5093))+((r12*x5087))+(((-1.0)*x5089*x5091)));
evalcond[4]=(cj0+((r11*x5094))+(((-1.0)*x5089*x5092))+(((-1.0)*r12*x5091)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5088*x5092))+((r01*x5094))+(((-1.0)*r02*x5091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5095 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5095.valid){
continue;
}
CheckValue<IkReal> x5096=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5095.value)+(((1.5707963267949)*(x5096.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5097=IKcos(j4);
IkReal x5098=IKsin(j4);
IkReal x5099=(cj5*r00);
IkReal x5100=(cj5*r10);
IkReal x5101=(cj5*r20);
IkReal x5102=((1.0)*x5097);
IkReal x5103=((1.0)*x5098);
IkReal x5104=(sj5*x5097);
IkReal x5105=(sj5*x5098);
evalcond[0]=((((-1.0)*x5101*x5102))+((r22*x5098))+((r21*x5104)));
evalcond[1]=((((-1.0)*x5101*x5103))+(((-1.0)*r22*x5102))+((r21*x5105)));
evalcond[2]=(((r01*x5104))+cj0+(((-1.0)*x5099*x5102))+((r02*x5098)));
evalcond[3]=(sj0+(((-1.0)*x5100*x5102))+((r12*x5098))+((r11*x5104)));
evalcond[4]=(cj0+(((-1.0)*x5100*x5103))+((r11*x5105))+(((-1.0)*r12*x5102)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5105))+(((-1.0)*r02*x5102))+(((-1.0)*x5099*x5103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5106=((1.0)*sj5);
IkReal x5107=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x5106))+(((-1.0)*r11*x5107)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5106))+(((-1.0)*r01*x5107)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x5106))+(((-1.0)*r11*x5107))))+IKsqr(((((-1.0)*r00*x5106))+(((-1.0)*r01*x5107))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x5106))+(((-1.0)*r11*x5107))), ((((-1.0)*r00*x5106))+(((-1.0)*r01*x5107))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5108=IKsin(j0);
IkReal x5109=IKcos(j0);
IkReal x5110=(r10*sj5);
IkReal x5111=(r00*sj5);
IkReal x5112=(cj5*r11);
IkReal x5113=(cj5*r01);
evalcond[0]=(x5109+x5111+x5113);
evalcond[1]=(x5108+x5110+x5112);
evalcond[2]=((((-0.1)*x5113))+(((-0.1)*x5111))+(((-0.134)*x5108))+(((-1.0)*px)));
evalcond[3]=((((-0.1)*x5112))+(((-0.1)*x5110))+(((-1.0)*py))+(((0.134)*x5109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5114=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5114;
j4eval[1]=IKsign(x5114);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5115=((1.0)*cj5);
IkReal x5116=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5115)));
j4eval[0]=x5116;
j4eval[1]=IKsign(x5116);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5115))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5117=cj5*cj5;
IkReal x5118=(r01*r11);
IkReal x5119=((1.0)*r00);
IkReal x5120=(r01*sj5);
IkReal x5121=(((x5117*x5118))+(((-1.0)*r02*r12))+(((-1.0)*x5118))+((cj5*r10*x5120))+(((-1.0)*r10*x5117*x5119))+((cj5*r00*r11*sj5)));
j4eval[0]=x5121;
j4eval[1]=IKsign(x5121);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5119))+((cj0*x5120))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5122=cj5*cj5;
IkReal x5123=(r01*r11);
IkReal x5124=(cj5*r00);
IkReal x5125=(r01*sj5);
CheckValue<IkReal> x5126=IKPowWithIntegerCheck(IKsign((((x5122*x5123))+(((-1.0)*r02*r12))+((cj5*r10*x5125))+(((-1.0)*r00*r10*x5122))+(((-1.0)*x5123))+((r11*sj5*x5124)))),-1);
if(!x5126.valid){
continue;
}
CheckValue<IkReal> x5127 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5124))+((cj0*x5125)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5126.value)))+(x5127.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5128=IKcos(j4);
IkReal x5129=IKsin(j4);
IkReal x5130=(cj5*r00);
IkReal x5131=(r01*sj5);
IkReal x5132=(cj5*r10);
IkReal x5133=(cj5*r20);
IkReal x5134=((1.0)*x5128);
IkReal x5135=((1.0)*x5129);
IkReal x5136=(sj5*x5129);
IkReal x5137=(sj5*x5128);
evalcond[0]=(((x5128*x5131))+(((-1.0)*x5130*x5134))+((r02*x5129)));
evalcond[1]=((((-1.0)*x5132*x5134))+((r12*x5129))+((r11*x5137)));
evalcond[2]=(((r21*x5136))+(((-1.0)*r22*x5134))+(((-1.0)*x5133*x5135)));
evalcond[3]=((-1.0)+((r22*x5129))+((r21*x5137))+(((-1.0)*x5133*x5134)));
evalcond[4]=((((-1.0)*x5132*x5135))+cj0+((r11*x5136))+(((-1.0)*r12*x5134)));
evalcond[5]=((((-1.0)*sj0))+((x5129*x5131))+(((-1.0)*r02*x5134))+(((-1.0)*x5130*x5135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5138=((1.0)*cj5);
CheckValue<IkReal> x5139=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5138)))),-1);
if(!x5139.valid){
continue;
}
CheckValue<IkReal> x5140 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5138)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5139.value)))+(x5140.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5141=IKcos(j4);
IkReal x5142=IKsin(j4);
IkReal x5143=(cj5*r00);
IkReal x5144=(r01*sj5);
IkReal x5145=(cj5*r10);
IkReal x5146=(cj5*r20);
IkReal x5147=((1.0)*x5141);
IkReal x5148=((1.0)*x5142);
IkReal x5149=(sj5*x5142);
IkReal x5150=(sj5*x5141);
evalcond[0]=((((-1.0)*x5143*x5147))+((x5141*x5144))+((r02*x5142)));
evalcond[1]=(((r11*x5150))+((r12*x5142))+(((-1.0)*x5145*x5147)));
evalcond[2]=(((r21*x5149))+(((-1.0)*x5146*x5148))+(((-1.0)*r22*x5147)));
evalcond[3]=((-1.0)+((r21*x5150))+((r22*x5142))+(((-1.0)*x5146*x5147)));
evalcond[4]=(cj0+(((-1.0)*r12*x5147))+((r11*x5149))+(((-1.0)*x5145*x5148)));
evalcond[5]=((((-1.0)*sj0))+((x5142*x5144))+(((-1.0)*x5143*x5148))+(((-1.0)*r02*x5147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5151=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5151.valid){
continue;
}
CheckValue<IkReal> x5152 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5151.value)))+(x5152.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5153=IKcos(j4);
IkReal x5154=IKsin(j4);
IkReal x5155=(cj5*r00);
IkReal x5156=(r01*sj5);
IkReal x5157=(cj5*r10);
IkReal x5158=(cj5*r20);
IkReal x5159=((1.0)*x5153);
IkReal x5160=((1.0)*x5154);
IkReal x5161=(sj5*x5154);
IkReal x5162=(sj5*x5153);
evalcond[0]=(((x5153*x5156))+((r02*x5154))+(((-1.0)*x5155*x5159)));
evalcond[1]=(((r12*x5154))+((r11*x5162))+(((-1.0)*x5157*x5159)));
evalcond[2]=(((r21*x5161))+(((-1.0)*r22*x5159))+(((-1.0)*x5158*x5160)));
evalcond[3]=((-1.0)+((r21*x5162))+((r22*x5154))+(((-1.0)*x5158*x5159)));
evalcond[4]=((((-1.0)*x5157*x5160))+cj0+(((-1.0)*r12*x5159))+((r11*x5161)));
evalcond[5]=((((-1.0)*sj0))+((x5154*x5156))+(((-1.0)*x5155*x5160))+(((-1.0)*r02*x5159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5163=IKsin(j0);
IkReal x5164=IKcos(j0);
evalcond[0]=((((0.392)*x5164))+(((-1.0)*px))+(((-0.134)*x5163)));
evalcond[1]=((((0.392)*x5163))+(((-1.0)*py))+(((0.134)*x5164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5165=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5165;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5165);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5166=((1.0)*cj5);
IkReal x5167=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5166)));
j4eval[0]=x5167;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5166)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5167);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5168=((1.0)*cj5);
IkReal x5169=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5168)));
j4eval[0]=x5169;
j4eval[1]=IKsign(x5169);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5168))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5170=((1.0)*cj5);
CheckValue<IkReal> x5171 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5170))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5171.valid){
continue;
}
CheckValue<IkReal> x5172=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5170)))),-1);
if(!x5172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5171.value)+(((1.5707963267949)*(x5172.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5173=IKcos(j4);
IkReal x5174=IKsin(j4);
IkReal x5175=((1.0)*sj0);
IkReal x5176=(cj5*r00);
IkReal x5177=(cj5*r10);
IkReal x5178=(cj5*r20);
IkReal x5179=((1.0)*x5173);
IkReal x5180=((1.0)*x5174);
IkReal x5181=(sj5*x5173);
IkReal x5182=(sj5*x5174);
evalcond[0]=((((-1.0)*x5178*x5179))+((r21*x5181))+((r22*x5174)));
evalcond[1]=(((r21*x5182))+(((-1.0)*x5178*x5180))+(((-1.0)*r22*x5179)));
evalcond[2]=(cj0+(((-1.0)*r12*x5179))+(((-1.0)*x5177*x5180))+((r11*x5182)));
evalcond[3]=((((-1.0)*x5176*x5179))+((r01*x5181))+((r02*x5174))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5175))+((r12*x5174))+(((-1.0)*x5177*x5179))+((r11*x5181)));
evalcond[5]=((((-1.0)*x5176*x5180))+((r01*x5182))+(((-1.0)*r02*x5179))+(((-1.0)*x5175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5183=((1.0)*cj5);
CheckValue<IkReal> x5184 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5183)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5184.valid){
continue;
}
CheckValue<IkReal> x5185=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5183)))),-1);
if(!x5185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5184.value)+(((1.5707963267949)*(x5185.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5186=IKcos(j4);
IkReal x5187=IKsin(j4);
IkReal x5188=((1.0)*sj0);
IkReal x5189=(cj5*r00);
IkReal x5190=(cj5*r10);
IkReal x5191=(cj5*r20);
IkReal x5192=((1.0)*x5186);
IkReal x5193=((1.0)*x5187);
IkReal x5194=(sj5*x5186);
IkReal x5195=(sj5*x5187);
evalcond[0]=(((r22*x5187))+((r21*x5194))+(((-1.0)*x5191*x5192)));
evalcond[1]=(((r21*x5195))+(((-1.0)*x5191*x5193))+(((-1.0)*r22*x5192)));
evalcond[2]=((((-1.0)*r12*x5192))+cj0+((r11*x5195))+(((-1.0)*x5190*x5193)));
evalcond[3]=((((-1.0)*x5189*x5192))+((r02*x5187))+((r01*x5194))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5194))+(((-1.0)*x5190*x5192))+(((-1.0)*x5188))+((r12*x5187)));
evalcond[5]=((((-1.0)*x5189*x5193))+(((-1.0)*r02*x5192))+((r01*x5195))+(((-1.0)*x5188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5196 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5196.valid){
continue;
}
CheckValue<IkReal> x5197=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5196.value)+(((1.5707963267949)*(x5197.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5198=IKcos(j4);
IkReal x5199=IKsin(j4);
IkReal x5200=((1.0)*sj0);
IkReal x5201=(cj5*r00);
IkReal x5202=(cj5*r10);
IkReal x5203=(cj5*r20);
IkReal x5204=((1.0)*x5198);
IkReal x5205=((1.0)*x5199);
IkReal x5206=(sj5*x5198);
IkReal x5207=(sj5*x5199);
evalcond[0]=((((-1.0)*x5203*x5204))+((r22*x5199))+((r21*x5206)));
evalcond[1]=((((-1.0)*x5203*x5205))+(((-1.0)*r22*x5204))+((r21*x5207)));
evalcond[2]=(cj0+((r11*x5207))+(((-1.0)*x5202*x5205))+(((-1.0)*r12*x5204)));
evalcond[3]=(((r01*x5206))+((r02*x5199))+(((-1.0)*x5201*x5204))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5200))+((r11*x5206))+((r12*x5199))+(((-1.0)*x5202*x5204)));
evalcond[5]=((((-1.0)*x5200))+(((-1.0)*r02*x5204))+((r01*x5207))+(((-1.0)*x5201*x5205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.195493438569105)*px))+(((-1.19192641276835)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.195493438569105)*py))+(((-1.19192641276835)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))))+IKsqr(((((0.195493438569105)*py))+(((-1.19192641276835)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))), ((((0.195493438569105)*py))+(((-1.19192641276835)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5208=IKcos(j0);
IkReal x5209=IKsin(j0);
evalcond[0]=((((-0.817)*x5208))+(((-0.134)*x5209))+(((-1.0)*px)));
evalcond[1]=((((-0.817)*x5209))+(((-1.0)*py))+(((0.134)*x5208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5210=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5210;
j4eval[1]=IKsign(x5210);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5211=((1.0)*cj5);
IkReal x5212=((((-1.0)*r11*x5211))+(((-1.0)*r10*sj5)));
j4eval[0]=x5212;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5211)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5212);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5213=cj5*cj5;
IkReal x5214=((1.0)*r20);
IkReal x5215=(r01*r21);
IkReal x5216=(r21*sj5);
IkReal x5217=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5213*x5215))+((cj5*r00*x5216))+(((-1.0)*x5215))+(((-1.0)*r00*x5213*x5214)));
j4eval[0]=x5217;
j4eval[1]=((IKabs((((cj0*x5216))+(((-1.0)*cj0*cj5*x5214)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5217);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5218=cj5*cj5;
IkReal x5219=((1.0)*r20);
IkReal x5220=(r01*r21);
IkReal x5221=(r21*sj5);
CheckValue<IkReal> x5222=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x5221))+((x5218*x5220))+(((-1.0)*x5220))+(((-1.0)*r00*x5218*x5219)))),-1);
if(!x5222.valid){
continue;
}
CheckValue<IkReal> x5223 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5221))+(((-1.0)*cj0*cj5*x5219)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5222.value)))+(x5223.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5224=IKcos(j4);
IkReal x5225=IKsin(j4);
IkReal x5226=(cj5*r00);
IkReal x5227=(cj5*r10);
IkReal x5228=(cj5*r20);
IkReal x5229=((1.0)*x5224);
IkReal x5230=((1.0)*x5225);
IkReal x5231=(sj5*x5224);
IkReal x5232=(sj5*x5225);
evalcond[0]=(((r22*x5225))+((r21*x5231))+(((-1.0)*x5228*x5229)));
evalcond[1]=((((-1.0)*x5228*x5230))+((r21*x5232))+(((-1.0)*r22*x5229)));
evalcond[2]=(cj0+((r02*x5225))+((r01*x5231))+(((-1.0)*x5226*x5229)));
evalcond[3]=(sj0+(((-1.0)*x5227*x5229))+((r11*x5231))+((r12*x5225)));
evalcond[4]=(cj0+((r11*x5232))+(((-1.0)*x5227*x5230))+(((-1.0)*r12*x5229)));
evalcond[5]=((((-1.0)*x5226*x5230))+(((-1.0)*sj0))+((r01*x5232))+(((-1.0)*r02*x5229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5233=((1.0)*cj5);
CheckValue<IkReal> x5234=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5233))+(((-1.0)*r10*sj5)))),-1);
if(!x5234.valid){
continue;
}
CheckValue<IkReal> x5235 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x5233))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5234.value)))+(x5235.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5236=IKcos(j4);
IkReal x5237=IKsin(j4);
IkReal x5238=(cj5*r00);
IkReal x5239=(cj5*r10);
IkReal x5240=(cj5*r20);
IkReal x5241=((1.0)*x5236);
IkReal x5242=((1.0)*x5237);
IkReal x5243=(sj5*x5236);
IkReal x5244=(sj5*x5237);
evalcond[0]=((((-1.0)*x5240*x5241))+((r21*x5243))+((r22*x5237)));
evalcond[1]=((((-1.0)*r22*x5241))+(((-1.0)*x5240*x5242))+((r21*x5244)));
evalcond[2]=(cj0+((r01*x5243))+((r02*x5237))+(((-1.0)*x5238*x5241)));
evalcond[3]=(sj0+((r11*x5243))+((r12*x5237))+(((-1.0)*x5239*x5241)));
evalcond[4]=((((-1.0)*r12*x5241))+((r11*x5244))+cj0+(((-1.0)*x5239*x5242)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5244))+(((-1.0)*r02*x5241))+(((-1.0)*x5238*x5242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5245 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5245.valid){
continue;
}
CheckValue<IkReal> x5246=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5245.value)+(((1.5707963267949)*(x5246.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5247=IKcos(j4);
IkReal x5248=IKsin(j4);
IkReal x5249=(cj5*r00);
IkReal x5250=(cj5*r10);
IkReal x5251=(cj5*r20);
IkReal x5252=((1.0)*x5247);
IkReal x5253=((1.0)*x5248);
IkReal x5254=(sj5*x5247);
IkReal x5255=(sj5*x5248);
evalcond[0]=(((r21*x5254))+(((-1.0)*x5251*x5252))+((r22*x5248)));
evalcond[1]=(((r21*x5255))+(((-1.0)*r22*x5252))+(((-1.0)*x5251*x5253)));
evalcond[2]=(((r01*x5254))+cj0+(((-1.0)*x5249*x5252))+((r02*x5248)));
evalcond[3]=(sj0+((r12*x5248))+((r11*x5254))+(((-1.0)*x5250*x5252)));
evalcond[4]=(cj0+(((-1.0)*r12*x5252))+((r11*x5255))+(((-1.0)*x5250*x5253)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5252))+((r01*x5255))+(((-1.0)*x5249*x5253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.03596744552376)*py))+(((-1.73273825150958)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((7.03596744552376)*py))+(((-1.73273825150958)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((7.03596744552376)*py))+(((-1.73273825150958)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5256=IKcos(j0);
IkReal x5257=IKsin(j0);
evalcond[0]=((((-0.033)*x5256))+(((-1.0)*px))+(((-0.134)*x5257)));
evalcond[1]=((((-0.033)*x5257))+(((-1.0)*py))+(((0.134)*x5256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5258=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5258;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5258);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5259=((1.0)*cj5);
IkReal x5260=((((-1.0)*r01*x5259))+(((-1.0)*r00*sj5)));
j4eval[0]=x5260;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5259)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5260);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5261=((1.0)*cj5);
IkReal x5262=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5261)));
j4eval[0]=x5262;
j4eval[1]=IKsign(x5262);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5261))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5263=((1.0)*cj5);
CheckValue<IkReal> x5264 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5263))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5264.valid){
continue;
}
CheckValue<IkReal> x5265=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5263)))),-1);
if(!x5265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5264.value)+(((1.5707963267949)*(x5265.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5266=IKcos(j4);
IkReal x5267=IKsin(j4);
IkReal x5268=((1.0)*sj0);
IkReal x5269=(cj5*r00);
IkReal x5270=(cj5*r10);
IkReal x5271=(cj5*r20);
IkReal x5272=((1.0)*x5266);
IkReal x5273=((1.0)*x5267);
IkReal x5274=(sj5*x5266);
IkReal x5275=(sj5*x5267);
evalcond[0]=(((r21*x5274))+(((-1.0)*x5271*x5272))+((r22*x5267)));
evalcond[1]=(((r21*x5275))+(((-1.0)*x5271*x5273))+(((-1.0)*r22*x5272)));
evalcond[2]=(cj0+(((-1.0)*r12*x5272))+(((-1.0)*x5270*x5273))+((r11*x5275)));
evalcond[3]=(((r02*x5267))+((r01*x5274))+(((-1.0)*x5269*x5272))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5267))+(((-1.0)*x5268))+(((-1.0)*x5270*x5272))+((r11*x5274)));
evalcond[5]=((((-1.0)*x5268))+((r01*x5275))+(((-1.0)*r02*x5272))+(((-1.0)*x5269*x5273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5276=((1.0)*cj5);
CheckValue<IkReal> x5277=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5276))+(((-1.0)*r00*sj5)))),-1);
if(!x5277.valid){
continue;
}
CheckValue<IkReal> x5278 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5276)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5277.value)))+(x5278.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5279=IKcos(j4);
IkReal x5280=IKsin(j4);
IkReal x5281=((1.0)*sj0);
IkReal x5282=(cj5*r00);
IkReal x5283=(cj5*r10);
IkReal x5284=(cj5*r20);
IkReal x5285=((1.0)*x5279);
IkReal x5286=((1.0)*x5280);
IkReal x5287=(sj5*x5279);
IkReal x5288=(sj5*x5280);
evalcond[0]=((((-1.0)*x5284*x5285))+((r22*x5280))+((r21*x5287)));
evalcond[1]=((((-1.0)*r22*x5285))+(((-1.0)*x5284*x5286))+((r21*x5288)));
evalcond[2]=(cj0+(((-1.0)*r12*x5285))+(((-1.0)*x5283*x5286))+((r11*x5288)));
evalcond[3]=(((r02*x5280))+((r01*x5287))+(((-1.0)*x5282*x5285))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5280))+(((-1.0)*x5281))+(((-1.0)*x5283*x5285))+((r11*x5287)));
evalcond[5]=((((-1.0)*x5281))+((r01*x5288))+(((-1.0)*r02*x5285))+(((-1.0)*x5282*x5286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5289 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5289.valid){
continue;
}
CheckValue<IkReal> x5290=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5289.value)+(((1.5707963267949)*(x5290.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5291=IKcos(j4);
IkReal x5292=IKsin(j4);
IkReal x5293=((1.0)*sj0);
IkReal x5294=(cj5*r00);
IkReal x5295=(cj5*r10);
IkReal x5296=(cj5*r20);
IkReal x5297=((1.0)*x5291);
IkReal x5298=((1.0)*x5292);
IkReal x5299=(sj5*x5291);
IkReal x5300=(sj5*x5292);
evalcond[0]=(((r22*x5292))+((r21*x5299))+(((-1.0)*x5296*x5297)));
evalcond[1]=(((r21*x5300))+(((-1.0)*r22*x5297))+(((-1.0)*x5296*x5298)));
evalcond[2]=(cj0+(((-1.0)*x5295*x5298))+(((-1.0)*r12*x5297))+((r11*x5300)));
evalcond[3]=(((r02*x5292))+(((-1.0)*x5294*x5297))+((r01*x5299))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5292))+(((-1.0)*x5295*x5297))+(((-1.0)*x5293))+((r11*x5299)));
evalcond[5]=((((-1.0)*x5293))+(((-1.0)*x5294*x5298))+(((-1.0)*r02*x5297))+((r01*x5300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5301=((1.0)*sj5);
IkReal x5302=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5302))+(((-1.0)*r10*x5301)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5302))+(((-1.0)*r00*x5301)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5302))+(((-1.0)*r10*x5301))))+IKsqr(((((-1.0)*r01*x5302))+(((-1.0)*r00*x5301))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5302))+(((-1.0)*r10*x5301))), ((((-1.0)*r01*x5302))+(((-1.0)*r00*x5301))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5303=IKsin(j0);
IkReal x5304=IKcos(j0);
IkReal x5305=(r10*sj5);
IkReal x5306=(r00*sj5);
IkReal x5307=(cj5*r11);
IkReal x5308=(cj5*r01);
evalcond[0]=(x5308+x5304+x5306);
evalcond[1]=(x5303+x5305+x5307);
evalcond[2]=((((-0.1)*x5308))+(((-0.1)*x5306))+(((-1.0)*px))+(((-0.134)*x5303)));
evalcond[3]=((((-0.1)*x5307))+(((-0.1)*x5305))+(((-1.0)*py))+(((0.134)*x5304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5309=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5309;
j4eval[1]=IKsign(x5309);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5310=((1.0)*cj5);
IkReal x5311=((((-1.0)*r11*x5310))+(((-1.0)*r10*sj5)));
j4eval[0]=x5311;
j4eval[1]=IKsign(x5311);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5310))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5312=cj5*cj5;
IkReal x5313=(r01*r11);
IkReal x5314=((1.0)*r00);
IkReal x5315=(r01*sj5);
IkReal x5316=(((cj5*r10*x5315))+(((-1.0)*r02*r12))+(((-1.0)*x5313))+((x5312*x5313))+(((-1.0)*r10*x5312*x5314))+((cj5*r00*r11*sj5)));
j4eval[0]=x5316;
j4eval[1]=IKsign(x5316);
j4eval[2]=((IKabs((((cj0*x5315))+(((-1.0)*cj0*cj5*x5314)))))+(IKabs((cj0*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5317=cj5*cj5;
IkReal x5318=(r01*r11);
IkReal x5319=(cj5*r00);
IkReal x5320=(r01*sj5);
CheckValue<IkReal> x5321=IKPowWithIntegerCheck(IKsign((((r11*sj5*x5319))+(((-1.0)*r02*r12))+((x5317*x5318))+(((-1.0)*x5318))+(((-1.0)*r00*r10*x5317))+((cj5*r10*x5320)))),-1);
if(!x5321.valid){
continue;
}
CheckValue<IkReal> x5322 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5319))+((cj0*x5320)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5322.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5321.value)))+(x5322.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5323=IKcos(j4);
IkReal x5324=IKsin(j4);
IkReal x5325=(cj5*r00);
IkReal x5326=(r01*sj5);
IkReal x5327=(cj5*r10);
IkReal x5328=(cj5*r20);
IkReal x5329=((1.0)*x5323);
IkReal x5330=((1.0)*x5324);
IkReal x5331=(sj5*x5324);
IkReal x5332=(sj5*x5323);
evalcond[0]=((((-1.0)*x5325*x5329))+((x5323*x5326))+((r02*x5324)));
evalcond[1]=(((r11*x5332))+((r12*x5324))+(((-1.0)*x5327*x5329)));
evalcond[2]=((((-1.0)*r22*x5329))+(((-1.0)*x5328*x5330))+((r21*x5331)));
evalcond[3]=((-1.0)+(((-1.0)*x5328*x5329))+((r22*x5324))+((r21*x5332)));
evalcond[4]=(cj0+((r11*x5331))+(((-1.0)*r12*x5329))+(((-1.0)*x5327*x5330)));
evalcond[5]=((((-1.0)*sj0))+((x5324*x5326))+(((-1.0)*r02*x5329))+(((-1.0)*x5325*x5330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5333=((1.0)*cj5);
CheckValue<IkReal> x5334 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x5333))+((r01*sj5)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5334.valid){
continue;
}
CheckValue<IkReal> x5335=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5333)))),-1);
if(!x5335.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5334.value)+(((1.5707963267949)*(x5335.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5336=IKcos(j4);
IkReal x5337=IKsin(j4);
IkReal x5338=(cj5*r00);
IkReal x5339=(r01*sj5);
IkReal x5340=(cj5*r10);
IkReal x5341=(cj5*r20);
IkReal x5342=((1.0)*x5336);
IkReal x5343=((1.0)*x5337);
IkReal x5344=(sj5*x5337);
IkReal x5345=(sj5*x5336);
evalcond[0]=(((x5336*x5339))+(((-1.0)*x5338*x5342))+((r02*x5337)));
evalcond[1]=(((r12*x5337))+((r11*x5345))+(((-1.0)*x5340*x5342)));
evalcond[2]=((((-1.0)*x5341*x5343))+(((-1.0)*r22*x5342))+((r21*x5344)));
evalcond[3]=((-1.0)+(((-1.0)*x5341*x5342))+((r22*x5337))+((r21*x5345)));
evalcond[4]=(cj0+((r11*x5344))+(((-1.0)*r12*x5342))+(((-1.0)*x5340*x5343)));
evalcond[5]=((((-1.0)*r02*x5342))+(((-1.0)*sj0))+((x5337*x5339))+(((-1.0)*x5338*x5343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5346=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5346.valid){
continue;
}
CheckValue<IkReal> x5347 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5346.value)))+(x5347.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5348=IKcos(j4);
IkReal x5349=IKsin(j4);
IkReal x5350=(cj5*r00);
IkReal x5351=(r01*sj5);
IkReal x5352=(cj5*r10);
IkReal x5353=(cj5*r20);
IkReal x5354=((1.0)*x5348);
IkReal x5355=((1.0)*x5349);
IkReal x5356=(sj5*x5349);
IkReal x5357=(sj5*x5348);
evalcond[0]=((((-1.0)*x5350*x5354))+((x5348*x5351))+((r02*x5349)));
evalcond[1]=((((-1.0)*x5352*x5354))+((r12*x5349))+((r11*x5357)));
evalcond[2]=((((-1.0)*x5353*x5355))+(((-1.0)*r22*x5354))+((r21*x5356)));
evalcond[3]=((-1.0)+(((-1.0)*x5353*x5354))+((r22*x5349))+((r21*x5357)));
evalcond[4]=(cj0+(((-1.0)*x5352*x5355))+((r11*x5356))+(((-1.0)*r12*x5354)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5354))+(((-1.0)*x5350*x5355))+((x5349*x5351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5358=IKsin(j0);
IkReal x5359=IKcos(j0);
evalcond[0]=((((0.392)*x5359))+(((-1.0)*px))+(((-0.134)*x5358)));
evalcond[1]=((((0.392)*x5358))+(((0.134)*x5359))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5360=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5360;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5360);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5361=((1.0)*cj5);
IkReal x5362=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5361)));
j4eval[0]=x5362;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5361))))));
j4eval[2]=IKsign(x5362);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5363=((1.0)*cj5);
IkReal x5364=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5363)));
j4eval[0]=x5364;
j4eval[1]=IKsign(x5364);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5363)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5365=((1.0)*cj5);
CheckValue<IkReal> x5366=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5365)))),-1);
if(!x5366.valid){
continue;
}
CheckValue<IkReal> x5367 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5365)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5366.value)))+(x5367.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5368=IKcos(j4);
IkReal x5369=IKsin(j4);
IkReal x5370=((1.0)*sj0);
IkReal x5371=(cj5*r00);
IkReal x5372=(cj5*r10);
IkReal x5373=(cj5*r20);
IkReal x5374=((1.0)*x5368);
IkReal x5375=((1.0)*x5369);
IkReal x5376=(sj5*x5368);
IkReal x5377=(sj5*x5369);
evalcond[0]=(((r22*x5369))+((r21*x5376))+(((-1.0)*x5373*x5374)));
evalcond[1]=((((-1.0)*r22*x5374))+((r21*x5377))+(((-1.0)*x5373*x5375)));
evalcond[2]=(cj0+(((-1.0)*x5372*x5375))+(((-1.0)*r12*x5374))+((r11*x5377)));
evalcond[3]=(((r02*x5369))+(((-1.0)*x5371*x5374))+((r01*x5376))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5369))+(((-1.0)*x5372*x5374))+(((-1.0)*x5370))+((r11*x5376)));
evalcond[5]=((((-1.0)*x5370))+(((-1.0)*x5371*x5375))+(((-1.0)*r02*x5374))+((r01*x5377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5378=((1.0)*cj5);
CheckValue<IkReal> x5379 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5378)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5379.valid){
continue;
}
CheckValue<IkReal> x5380=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5378)))),-1);
if(!x5380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5379.value)+(((1.5707963267949)*(x5380.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5381=IKcos(j4);
IkReal x5382=IKsin(j4);
IkReal x5383=((1.0)*sj0);
IkReal x5384=(cj5*r00);
IkReal x5385=(cj5*r10);
IkReal x5386=(cj5*r20);
IkReal x5387=((1.0)*x5381);
IkReal x5388=((1.0)*x5382);
IkReal x5389=(sj5*x5381);
IkReal x5390=(sj5*x5382);
evalcond[0]=((((-1.0)*x5386*x5387))+((r21*x5389))+((r22*x5382)));
evalcond[1]=((((-1.0)*x5386*x5388))+((r21*x5390))+(((-1.0)*r22*x5387)));
evalcond[2]=(cj0+(((-1.0)*x5385*x5388))+((r11*x5390))+(((-1.0)*r12*x5387)));
evalcond[3]=((((-1.0)*x5384*x5387))+((r02*x5382))+((r01*x5389))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5385*x5387))+((r11*x5389))+((r12*x5382))+(((-1.0)*x5383)));
evalcond[5]=((((-1.0)*x5384*x5388))+(((-1.0)*r02*x5387))+((r01*x5390))+(((-1.0)*x5383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5391 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5391.valid){
continue;
}
CheckValue<IkReal> x5392=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5391.value)+(((1.5707963267949)*(x5392.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5393=IKcos(j4);
IkReal x5394=IKsin(j4);
IkReal x5395=((1.0)*sj0);
IkReal x5396=(cj5*r00);
IkReal x5397=(cj5*r10);
IkReal x5398=(cj5*r20);
IkReal x5399=((1.0)*x5393);
IkReal x5400=((1.0)*x5394);
IkReal x5401=(sj5*x5393);
IkReal x5402=(sj5*x5394);
evalcond[0]=(((r21*x5401))+((r22*x5394))+(((-1.0)*x5398*x5399)));
evalcond[1]=(((r21*x5402))+(((-1.0)*x5398*x5400))+(((-1.0)*r22*x5399)));
evalcond[2]=(cj0+(((-1.0)*x5397*x5400))+(((-1.0)*r12*x5399))+((r11*x5402)));
evalcond[3]=(((r02*x5394))+((r01*x5401))+(((-1.0)*cj0))+(((-1.0)*x5396*x5399)));
evalcond[4]=((((-1.0)*x5397*x5399))+((r12*x5394))+(((-1.0)*x5395))+((r11*x5401)));
evalcond[5]=((((-1.0)*r02*x5399))+(((-1.0)*x5396*x5400))+(((-1.0)*x5395))+((r01*x5402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5403=IKsin(j0);
IkReal x5404=IKcos(j0);
IkReal x5405=((0.1)*sj5);
IkReal x5406=(cj5*r11);
IkReal x5407=(cj5*r01);
evalcond[0]=(((r00*sj5))+(((-1.0)*x5404))+x5407);
evalcond[1]=((((-1.0)*x5403))+x5406+((r10*sj5)));
evalcond[2]=((((-1.0)*r00*x5405))+(((-1.0)*px))+(((-0.134)*x5403))+(((-0.1)*x5407)));
evalcond[3]=((((-1.0)*py))+(((0.134)*x5404))+(((-1.0)*r10*x5405))+(((-0.1)*x5406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5408=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5408;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5408);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5409=((1.0)*cj5);
IkReal x5410=((((-1.0)*r01*x5409))+(((-1.0)*r00*sj5)));
j4eval[0]=x5410;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5409))))));
j4eval[2]=IKsign(x5410);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5411=cj5*cj5;
IkReal x5412=(r01*r11);
IkReal x5413=((1.0)*r00);
IkReal x5414=(r01*sj5);
IkReal x5415=((((-1.0)*x5412))+((cj5*r10*x5414))+(((-1.0)*r02*r12))+((x5411*x5412))+(((-1.0)*r10*x5411*x5413))+((cj5*r00*r11*sj5)));
j4eval[0]=x5415;
j4eval[1]=IKsign(x5415);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5413))+((cj0*x5414))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5416=cj5*cj5;
IkReal x5417=(r01*r11);
IkReal x5418=(cj5*r00);
IkReal x5419=(r01*sj5);
CheckValue<IkReal> x5420=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5417))+((r11*sj5*x5418))+((cj5*r10*x5419))+(((-1.0)*r02*r12))+(((-1.0)*r00*r10*x5416))+((x5416*x5417)))),-1);
if(!x5420.valid){
continue;
}
CheckValue<IkReal> x5421 = IKatan2WithCheck(IkReal((((cj0*x5419))+(((-1.0)*cj0*x5418)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5420.value)))+(x5421.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5422=IKcos(j4);
IkReal x5423=IKsin(j4);
IkReal x5424=(cj5*r00);
IkReal x5425=(r01*sj5);
IkReal x5426=(cj5*r10);
IkReal x5427=(cj5*r20);
IkReal x5428=((1.0)*x5422);
IkReal x5429=((1.0)*x5423);
IkReal x5430=(sj5*x5423);
IkReal x5431=(sj5*x5422);
evalcond[0]=(((x5422*x5425))+(((-1.0)*x5424*x5428))+((r02*x5423)));
evalcond[1]=(((r12*x5423))+(((-1.0)*x5426*x5428))+((r11*x5431)));
evalcond[2]=((((-1.0)*x5427*x5429))+(((-1.0)*r22*x5428))+((r21*x5430)));
evalcond[3]=((1.0)+((r22*x5423))+(((-1.0)*x5427*x5428))+((r21*x5431)));
evalcond[4]=(cj0+(((-1.0)*x5426*x5429))+((r11*x5430))+(((-1.0)*r12*x5428)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5424*x5429))+((x5423*x5425))+(((-1.0)*r02*x5428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5432=((1.0)*cj5);
CheckValue<IkReal> x5433 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5432)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5433.valid){
continue;
}
CheckValue<IkReal> x5434=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5432))+(((-1.0)*r00*sj5)))),-1);
if(!x5434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5433.value)+(((1.5707963267949)*(x5434.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5435=IKcos(j4);
IkReal x5436=IKsin(j4);
IkReal x5437=(cj5*r00);
IkReal x5438=(r01*sj5);
IkReal x5439=(cj5*r10);
IkReal x5440=(cj5*r20);
IkReal x5441=((1.0)*x5435);
IkReal x5442=((1.0)*x5436);
IkReal x5443=(sj5*x5436);
IkReal x5444=(sj5*x5435);
evalcond[0]=((((-1.0)*x5437*x5441))+((r02*x5436))+((x5435*x5438)));
evalcond[1]=((((-1.0)*x5439*x5441))+((r11*x5444))+((r12*x5436)));
evalcond[2]=((((-1.0)*r22*x5441))+(((-1.0)*x5440*x5442))+((r21*x5443)));
evalcond[3]=((1.0)+((r22*x5436))+(((-1.0)*x5440*x5441))+((r21*x5444)));
evalcond[4]=(cj0+(((-1.0)*r12*x5441))+(((-1.0)*x5439*x5442))+((r11*x5443)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5437*x5442))+((x5436*x5438))+(((-1.0)*r02*x5441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5445 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5445.valid){
continue;
}
CheckValue<IkReal> x5446=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5445.value)+(((1.5707963267949)*(x5446.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5447=IKcos(j4);
IkReal x5448=IKsin(j4);
IkReal x5449=(cj5*r00);
IkReal x5450=(r01*sj5);
IkReal x5451=(cj5*r10);
IkReal x5452=(cj5*r20);
IkReal x5453=((1.0)*x5447);
IkReal x5454=((1.0)*x5448);
IkReal x5455=(sj5*x5448);
IkReal x5456=(sj5*x5447);
evalcond[0]=(((x5447*x5450))+(((-1.0)*x5449*x5453))+((r02*x5448)));
evalcond[1]=((((-1.0)*x5451*x5453))+((r12*x5448))+((r11*x5456)));
evalcond[2]=((((-1.0)*x5452*x5454))+((r21*x5455))+(((-1.0)*r22*x5453)));
evalcond[3]=((1.0)+(((-1.0)*x5452*x5453))+((r21*x5456))+((r22*x5448)));
evalcond[4]=((((-1.0)*r12*x5453))+(((-1.0)*x5451*x5454))+cj0+((r11*x5455)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5453))+((x5448*x5450))+(((-1.0)*x5449*x5454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((-2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((-2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((-2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5457=IKcos(j0);
IkReal x5458=IKsin(j0);
evalcond[0]=((((-0.134)*x5458))+(((-1.0)*px))+(((-0.392)*x5457)));
evalcond[1]=((((0.134)*x5457))+(((-1.0)*py))+(((-0.392)*x5458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5459=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5459;
j4eval[1]=IKsign(x5459);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5460=((1.0)*cj5);
IkReal x5461=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5460)));
j4eval[0]=x5461;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x5460))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x5461);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5462=cj5*cj5;
IkReal x5463=((1.0)*r20);
IkReal x5464=(r01*r21);
IkReal x5465=(r21*sj5);
IkReal x5466=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5462*x5463))+((x5462*x5464))+(((-1.0)*x5464))+((cj5*r00*x5465)));
j4eval[0]=x5466;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x5463))+((cj0*x5465)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5466);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5467=cj5*cj5;
IkReal x5468=((1.0)*r20);
IkReal x5469=(r01*r21);
IkReal x5470=(r21*sj5);
CheckValue<IkReal> x5471 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5468))+((cj0*x5470)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5471.valid){
continue;
}
CheckValue<IkReal> x5472=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x5467*x5469))+(((-1.0)*r02*r22))+((cj5*r00*x5470))+(((-1.0)*r00*x5467*x5468))+(((-1.0)*x5469)))),-1);
if(!x5472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5471.value)+(((1.5707963267949)*(x5472.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5473=IKcos(j4);
IkReal x5474=IKsin(j4);
IkReal x5475=(cj5*r00);
IkReal x5476=(cj5*r10);
IkReal x5477=(cj5*r20);
IkReal x5478=((1.0)*x5473);
IkReal x5479=((1.0)*x5474);
IkReal x5480=(sj5*x5473);
IkReal x5481=(sj5*x5474);
evalcond[0]=((((-1.0)*x5477*x5478))+((r21*x5480))+((r22*x5474)));
evalcond[1]=((((-1.0)*x5477*x5479))+((r21*x5481))+(((-1.0)*r22*x5478)));
evalcond[2]=(cj0+((r01*x5480))+(((-1.0)*x5475*x5478))+((r02*x5474)));
evalcond[3]=(sj0+((r11*x5480))+(((-1.0)*x5476*x5478))+((r12*x5474)));
evalcond[4]=(cj0+((r11*x5481))+(((-1.0)*x5476*x5479))+(((-1.0)*r12*x5478)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5481))+(((-1.0)*x5475*x5479))+(((-1.0)*r02*x5478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5482=((1.0)*cj5);
CheckValue<IkReal> x5483 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5482)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5483.valid){
continue;
}
CheckValue<IkReal> x5484=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5482))+(((-1.0)*r10*sj5)))),-1);
if(!x5484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5483.value)+(((1.5707963267949)*(x5484.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5485=IKcos(j4);
IkReal x5486=IKsin(j4);
IkReal x5487=(cj5*r00);
IkReal x5488=(cj5*r10);
IkReal x5489=(cj5*r20);
IkReal x5490=((1.0)*x5485);
IkReal x5491=((1.0)*x5486);
IkReal x5492=(sj5*x5485);
IkReal x5493=(sj5*x5486);
evalcond[0]=((((-1.0)*x5489*x5490))+((r21*x5492))+((r22*x5486)));
evalcond[1]=((((-1.0)*x5489*x5491))+((r21*x5493))+(((-1.0)*r22*x5490)));
evalcond[2]=(((r01*x5492))+cj0+(((-1.0)*x5487*x5490))+((r02*x5486)));
evalcond[3]=(sj0+(((-1.0)*x5488*x5490))+((r12*x5486))+((r11*x5492)));
evalcond[4]=(cj0+(((-1.0)*x5488*x5491))+(((-1.0)*r12*x5490))+((r11*x5493)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5493))+(((-1.0)*x5487*x5491))+(((-1.0)*r02*x5490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5494 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5494.valid){
continue;
}
CheckValue<IkReal> x5495=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5494.value)+(((1.5707963267949)*(x5495.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5496=IKcos(j4);
IkReal x5497=IKsin(j4);
IkReal x5498=(cj5*r00);
IkReal x5499=(cj5*r10);
IkReal x5500=(cj5*r20);
IkReal x5501=((1.0)*x5496);
IkReal x5502=((1.0)*x5497);
IkReal x5503=(sj5*x5496);
IkReal x5504=(sj5*x5497);
evalcond[0]=((((-1.0)*x5500*x5501))+((r21*x5503))+((r22*x5497)));
evalcond[1]=((((-1.0)*r22*x5501))+(((-1.0)*x5500*x5502))+((r21*x5504)));
evalcond[2]=(cj0+(((-1.0)*x5498*x5501))+((r01*x5503))+((r02*x5497)));
evalcond[3]=(sj0+((r12*x5497))+((r11*x5503))+(((-1.0)*x5499*x5501)));
evalcond[4]=(cj0+(((-1.0)*r12*x5501))+((r11*x5504))+(((-1.0)*x5499*x5502)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5498*x5502))+(((-1.0)*r02*x5501))+((r01*x5504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5505=cj1*cj1;
IkReal x5506=((500.0)*py);
IkReal x5507=(cj1*sj2);
IkReal x5508=(cj2*sj2);
IkReal x5509=(cj5*r01);
IkReal x5510=(cj2*sj1);
IkReal x5511=(cj1*sj1);
IkReal x5512=(r00*sj5);
IkReal x5513=((50.0)*r10*sj5);
IkReal x5514=((50.0)*cj5*r11);
CheckValue<IkReal> x5515=IKPowWithIntegerCheck(((((-392.0)*cj1*cj2*x5510))+(((196.0)*x5508))+(((-212.5)*sj2*x5505))+(((196.0)*x5511))+(((-392.0)*x5505*x5508))+(((-212.5)*cj1*x5510))),-1);
if(!x5515.valid){
continue;
}
CheckValue<IkReal> x5516=IKPowWithIntegerCheck(((((-1.0)*x5507))+(((-1.0)*x5510))),-1);
if(!x5516.valid){
continue;
}
if( IKabs(((x5515.value)*(((((-1.0)*x5510*x5514))+(((-1.0)*x5510*x5513))+(((-1.0)*x5507*x5513))+(((-1.0)*x5507*x5514))+(((-1.0)*x5506*x5507))+(((-1.0)*x5506*x5510))+(((67.0)*x5509))+(((67.0)*x5512)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5516.value)*(((((-1.0)*x5509))+(((-1.0)*x5512)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5515.value)*(((((-1.0)*x5510*x5514))+(((-1.0)*x5510*x5513))+(((-1.0)*x5507*x5513))+(((-1.0)*x5507*x5514))+(((-1.0)*x5506*x5507))+(((-1.0)*x5506*x5510))+(((67.0)*x5509))+(((67.0)*x5512))))))+IKsqr(((x5516.value)*(((((-1.0)*x5509))+(((-1.0)*x5512))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5515.value)*(((((-1.0)*x5510*x5514))+(((-1.0)*x5510*x5513))+(((-1.0)*x5507*x5513))+(((-1.0)*x5507*x5514))+(((-1.0)*x5506*x5507))+(((-1.0)*x5506*x5510))+(((67.0)*x5509))+(((67.0)*x5512))))), ((x5516.value)*(((((-1.0)*x5509))+(((-1.0)*x5512))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5517=IKcos(j0);
IkReal x5518=IKsin(j0);
IkReal x5519=((0.1)*sj5);
IkReal x5520=(cj5*r11);
IkReal x5521=(cj5*r01);
IkReal x5522=((0.392)*cj2);
IkReal x5523=((1.0)*cj2);
IkReal x5524=((0.392)*sj2);
IkReal x5525=((1.0)*cj1*sj2);
IkReal x5526=(cj1*x5517);
IkReal x5527=(cj1*x5518);
IkReal x5528=(sj1*x5517);
IkReal x5529=(sj1*x5518);
evalcond[0]=(((r00*sj5))+(((-1.0)*x5523*x5528))+x5521+(((-1.0)*x5517*x5525)));
evalcond[1]=((((-1.0)*x5523*x5529))+x5520+((r10*sj5))+(((-1.0)*x5518*x5525)));
evalcond[2]=(((x5522*x5526))+(((-1.0)*r00*x5519))+(((-1.0)*px))+(((-0.134)*x5518))+(((-0.1)*x5521))+(((-1.0)*x5524*x5528))+(((0.425)*x5526)));
evalcond[3]=((((-1.0)*r10*x5519))+((x5522*x5527))+(((-1.0)*py))+(((0.134)*x5517))+(((-0.1)*x5520))+(((-1.0)*x5524*x5529))+(((0.425)*x5527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5530=((1.0)*cj5);
IkReal x5531=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5530)));
j4eval[0]=x5531;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5530)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5531);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5532=((1.0)*cj5);
IkReal x5533=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5532)));
j4eval[0]=x5533;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5532))))));
j4eval[2]=IKsign(x5533);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5534=((1.0)*sj0);
IkReal x5535=((1.0)*cj0);
IkReal x5536=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5536;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x5535))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x5534)))))+(IKabs(((((-1.0)*r02*x5535))+(((-1.0)*r12*x5534))))));
j4eval[2]=IKsign(x5536);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5537=((-1.0)*r20);
IkReal x5539 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5539)==0){
continue;
}
IkReal x5538=pow(x5539,-0.5);
CheckValue<IkReal> x5540 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5537),IKFAST_ATAN2_MAGTHRESH);
if(!x5540.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5540.value));
IkReal gconst115=(r21*x5538);
IkReal gconst116=(x5537*x5538);
CheckValue<IkReal> x5541 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5541.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5541.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5542=((-1.0)*r20);
IkReal x5543=x5538;
CheckValue<IkReal> x5545 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5542),IKFAST_ATAN2_MAGTHRESH);
if(!x5545.valid){
continue;
}
IkReal x5544=((-1.0)*(x5545.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5544;
IkReal gconst114=x5544;
IkReal gconst115=(r21*x5543);
IkReal gconst116=(x5542*x5543);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5546=((-1.0)*r20);
IkReal x5547=x5538;
CheckValue<IkReal> x5549 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5546),IKFAST_ATAN2_MAGTHRESH);
if(!x5549.valid){
continue;
}
IkReal x5548=((-1.0)*(x5549.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5548;
IkReal gconst114=x5548;
IkReal gconst115=(r21*x5547);
IkReal gconst116=(x5546*x5547);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5550=((-1.0)*r20);
IkReal x5551=x5538;
CheckValue<IkReal> x5553 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5550),IKFAST_ATAN2_MAGTHRESH);
if(!x5553.valid){
continue;
}
IkReal x5552=((-1.0)*(x5553.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5552;
IkReal gconst114=x5552;
IkReal gconst115=(r21*x5551);
IkReal gconst116=(x5550*x5551);
IkReal x5554=((1.0)*(r22*r22));
CheckValue<IkReal> x5558=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5554))),-1);
if(!x5558.valid){
continue;
}
IkReal x5555=x5558.value;
IkReal x5556=((1.0)*x5555);
IkReal x5557=((((-1.0)*x5556*(r20*r20*r20*r20)))+(((-2.0)*x5555*(r20*r20)*(r21*r21)))+(((-1.0)*x5556*(r21*r21*r21*r21)))+(((-1.0)*x5554)));
j4eval[0]=x5557;
j4eval[1]=IKsign(x5557);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5559=(cj2*sj1);
IkReal x5560=(gconst115*r21);
IkReal x5561=(cj1*sj2);
IkReal x5562=((1.0)*gconst116*r20);
CheckValue<IkReal> x5563=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5560*x5560)))+(((-1.0)*gconst116*r20*x5562))+(((2.0)*gconst116*r20*x5560))+(((-1.0)*(r22*r22))))),-1);
if(!x5563.valid){
continue;
}
CheckValue<IkReal> x5564 = IKatan2WithCheck(IkReal((((r22*x5561))+((r22*x5559)))),IkReal((((x5560*x5561))+(((-1.0)*x5559*x5562))+(((-1.0)*x5561*x5562))+((x5559*x5560)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5563.value)))+(x5564.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5565=IKsin(j4);
IkReal x5566=IKcos(j4);
IkReal x5567=(sj1*sj2);
IkReal x5568=((1.0)*x5566);
IkReal x5569=((1.0)*cj1*cj2);
IkReal x5570=(gconst115*x5565);
IkReal x5571=(gconst115*x5566);
IkReal x5572=((1.0)*gconst116*x5565);
evalcond[0]=((((-1.0)*r22*x5568))+((r21*x5570))+(((-1.0)*r20*x5572)));
evalcond[1]=((((-1.0)*r12*x5568))+cj0+(((-1.0)*r10*x5572))+((r11*x5570)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5572))+(((-1.0)*r02*x5568))+((r01*x5570)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5565))+((r21*x5571))+(((-1.0)*gconst116*r20*x5568)));
evalcond[4]=(((r02*x5565))+((cj0*x5567))+(((-1.0)*gconst116*r00*x5568))+(((-1.0)*cj0*x5569))+((r01*x5571)));
evalcond[5]=((((-1.0)*sj0*x5569))+((r11*x5571))+(((-1.0)*gconst116*r10*x5568))+((sj0*x5567))+((r12*x5565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5573=((1.0)*gconst116);
CheckValue<IkReal> x5574 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x5573)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5574.valid){
continue;
}
CheckValue<IkReal> x5575=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5573))+(((-1.0)*gconst115*r10)))),-1);
if(!x5575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5574.value)+(((1.5707963267949)*(x5575.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5576=IKsin(j4);
IkReal x5577=IKcos(j4);
IkReal x5578=(sj1*sj2);
IkReal x5579=((1.0)*x5577);
IkReal x5580=((1.0)*cj1*cj2);
IkReal x5581=(gconst115*x5576);
IkReal x5582=(gconst115*x5577);
IkReal x5583=((1.0)*gconst116*x5576);
evalcond[0]=(((r21*x5581))+(((-1.0)*r20*x5583))+(((-1.0)*r22*x5579)));
evalcond[1]=(cj0+(((-1.0)*r12*x5579))+((r11*x5581))+(((-1.0)*r10*x5583)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5579))+(((-1.0)*r00*x5583))+((r01*x5581)));
evalcond[3]=(((cj2*sj1))+((r21*x5582))+((cj1*sj2))+((r22*x5576))+(((-1.0)*gconst116*r20*x5579)));
evalcond[4]=(((r02*x5576))+((cj0*x5578))+(((-1.0)*gconst116*r00*x5579))+(((-1.0)*cj0*x5580))+((r01*x5582)));
evalcond[5]=(((r11*x5582))+((r12*x5576))+((sj0*x5578))+(((-1.0)*gconst116*r10*x5579))+(((-1.0)*sj0*x5580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5584=((1.0)*gconst116);
CheckValue<IkReal> x5585 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x5584)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5585.valid){
continue;
}
CheckValue<IkReal> x5586=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x5584)))),-1);
if(!x5586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5585.value)+(((1.5707963267949)*(x5586.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5587=IKsin(j4);
IkReal x5588=IKcos(j4);
IkReal x5589=(sj1*sj2);
IkReal x5590=((1.0)*x5588);
IkReal x5591=((1.0)*cj1*cj2);
IkReal x5592=(gconst115*x5587);
IkReal x5593=(gconst115*x5588);
IkReal x5594=((1.0)*gconst116*x5587);
evalcond[0]=(((r21*x5592))+(((-1.0)*r20*x5594))+(((-1.0)*r22*x5590)));
evalcond[1]=((((-1.0)*r12*x5590))+cj0+((r11*x5592))+(((-1.0)*r10*x5594)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5590))+(((-1.0)*r00*x5594))+((r01*x5592)));
evalcond[3]=(((r21*x5593))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5590))+((r22*x5587)));
evalcond[4]=((((-1.0)*cj0*x5591))+((cj0*x5589))+((r02*x5587))+(((-1.0)*gconst116*r00*x5590))+((r01*x5593)));
evalcond[5]=(((sj0*x5589))+((r11*x5593))+((r12*x5587))+(((-1.0)*gconst116*r10*x5590))+(((-1.0)*sj0*x5591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5595=((-1.0)*r21);
IkReal x5597 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5597)==0){
continue;
}
IkReal x5596=pow(x5597,-0.5);
CheckValue<IkReal> x5598 = IKatan2WithCheck(IkReal(x5595),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5598.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5598.value))));
IkReal gconst118=(x5595*x5596);
IkReal gconst119=((1.0)*r20*x5596);
CheckValue<IkReal> x5599 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5599.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5599.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5600=((-1.0)*r21);
CheckValue<IkReal> x5603 = IKatan2WithCheck(IkReal(x5600),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5603.valid){
continue;
}
IkReal x5601=((1.0)*(x5603.value));
IkReal x5602=x5596;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5601)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5601)));
IkReal gconst118=(x5600*x5602);
IkReal gconst119=((1.0)*r20*x5602);
IkReal x5604=r22*r22;
IkReal x5605=((1.0)*x5604);
CheckValue<IkReal> x5609=IKPowWithIntegerCheck(((-1.0)+x5604),-1);
if(!x5609.valid){
continue;
}
IkReal x5606=x5609.value;
if((((1.0)+(((-1.0)*x5605)))) < -0.00001)
continue;
IkReal x5607=IKsqrt(((1.0)+(((-1.0)*x5605))));
IkReal x5608=(cj0*x5606*x5607);
j4eval[0]=((IKabs((x5608+(((-1.0)*x5605*x5608)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5610=((-1.0)*r21);
CheckValue<IkReal> x5613 = IKatan2WithCheck(IkReal(x5610),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5613.valid){
continue;
}
IkReal x5611=((1.0)*(x5613.value));
IkReal x5612=x5596;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5611)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5611)));
IkReal gconst118=(x5610*x5612);
IkReal gconst119=((1.0)*r20*x5612);
IkReal x5614=r22*r22;
IkReal x5615=((1.0)*x5614);
CheckValue<IkReal> x5619=IKPowWithIntegerCheck(((-1.0)+x5614),-1);
if(!x5619.valid){
continue;
}
IkReal x5616=x5619.value;
if((((1.0)+(((-1.0)*x5615)))) < -0.00001)
continue;
IkReal x5617=IKsqrt(((1.0)+(((-1.0)*x5615))));
IkReal x5618=(sj0*x5616*x5617);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5618+(((-1.0)*x5615*x5618))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5620=((-1.0)*r21);
CheckValue<IkReal> x5623 = IKatan2WithCheck(IkReal(x5620),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5623.valid){
continue;
}
IkReal x5621=((1.0)*(x5623.value));
IkReal x5622=x5596;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5621)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5621)));
IkReal gconst118=(x5620*x5622);
IkReal gconst119=((1.0)*r20*x5622);
IkReal x5624=r22*r22;
IkReal x5625=(r12*sj0);
IkReal x5626=(cj0*r02);
CheckValue<IkReal> x5630=IKPowWithIntegerCheck(((-1.0)+x5624),-1);
if(!x5630.valid){
continue;
}
IkReal x5627=x5630.value;
if((((1.0)+(((-1.0)*x5624)))) < -0.00001)
continue;
IkReal x5628=IKsqrt(((1.0)+(((-1.0)*x5624))));
IkReal x5629=(r22*x5627*x5628);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x5626))+(((-1.0)*x5625)))))+(IKabs((((x5625*x5629))+((x5626*x5629))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5631=((1.0)*sj0);
IkReal x5632=((1.0)*gconst118);
CheckValue<IkReal> x5633 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5631))+(((-1.0)*cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x5631))+(((-1.0)*cj0*r01*x5632))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5633.valid){
continue;
}
CheckValue<IkReal> x5634=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5632)))),-1);
if(!x5634.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5633.value)+(((1.5707963267949)*(x5634.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5635=IKsin(j4);
IkReal x5636=IKcos(j4);
IkReal x5637=(gconst118*r01);
IkReal x5638=(sj1*sj2);
IkReal x5639=(gconst119*r20);
IkReal x5640=(gconst119*r10);
IkReal x5641=(gconst119*r00);
IkReal x5642=(gconst118*r21);
IkReal x5643=(gconst118*r11);
IkReal x5644=((1.0)*x5636);
IkReal x5645=((1.0)*cj1*cj2);
IkReal x5646=((1.0)*x5635);
evalcond[0]=((((-1.0)*r22*x5644))+((x5635*x5642))+(((-1.0)*x5639*x5646)));
evalcond[1]=(cj0+(((-1.0)*r12*x5644))+((x5635*x5643))+(((-1.0)*x5640*x5646)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5644))+(((-1.0)*x5641*x5646))+((x5635*x5637)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5635))+((x5636*x5642))+(((-1.0)*x5639*x5644)));
evalcond[4]=(((cj0*x5638))+(((-1.0)*cj0*x5645))+(((-1.0)*x5641*x5644))+((r02*x5635))+((x5636*x5637)));
evalcond[5]=(((r12*x5635))+(((-1.0)*sj0*x5645))+((x5636*x5643))+(((-1.0)*x5640*x5644))+((sj0*x5638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5647=((1.0)*gconst119);
CheckValue<IkReal> x5648=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5647))+(((-1.0)*gconst118*r10)))),-1);
if(!x5648.valid){
continue;
}
CheckValue<IkReal> x5649 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5647))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5648.value)))+(x5649.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5650=IKsin(j4);
IkReal x5651=IKcos(j4);
IkReal x5652=(gconst118*r01);
IkReal x5653=(sj1*sj2);
IkReal x5654=(gconst119*r20);
IkReal x5655=(gconst119*r10);
IkReal x5656=(gconst119*r00);
IkReal x5657=(gconst118*r21);
IkReal x5658=(gconst118*r11);
IkReal x5659=((1.0)*x5651);
IkReal x5660=((1.0)*cj1*cj2);
IkReal x5661=((1.0)*x5650);
evalcond[0]=((((-1.0)*r22*x5659))+((x5650*x5657))+(((-1.0)*x5654*x5661)));
evalcond[1]=((((-1.0)*r12*x5659))+cj0+((x5650*x5658))+(((-1.0)*x5655*x5661)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5656*x5661))+(((-1.0)*r02*x5659))+((x5650*x5652)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5654*x5659))+((cj1*sj2))+((r22*x5650))+((x5651*x5657)));
evalcond[4]=(((cj0*x5653))+(((-1.0)*cj0*x5660))+((x5651*x5652))+(((-1.0)*x5656*x5659))+((r02*x5650)));
evalcond[5]=((((-1.0)*x5655*x5659))+((sj0*x5653))+((r12*x5650))+((x5651*x5658))+(((-1.0)*sj0*x5660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5662=((1.0)*gconst119);
CheckValue<IkReal> x5663=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5662))+(((-1.0)*gconst118*r00)))),-1);
if(!x5663.valid){
continue;
}
CheckValue<IkReal> x5664 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5662)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5663.value)))+(x5664.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5665=IKsin(j4);
IkReal x5666=IKcos(j4);
IkReal x5667=(gconst118*r01);
IkReal x5668=(sj1*sj2);
IkReal x5669=(gconst119*r20);
IkReal x5670=(gconst119*r10);
IkReal x5671=(gconst119*r00);
IkReal x5672=(gconst118*r21);
IkReal x5673=(gconst118*r11);
IkReal x5674=((1.0)*x5666);
IkReal x5675=((1.0)*cj1*cj2);
IkReal x5676=((1.0)*x5665);
evalcond[0]=((((-1.0)*r22*x5674))+(((-1.0)*x5669*x5676))+((x5665*x5672)));
evalcond[1]=((((-1.0)*x5670*x5676))+cj0+(((-1.0)*r12*x5674))+((x5665*x5673)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5671*x5676))+((x5665*x5667))+(((-1.0)*r02*x5674)));
evalcond[3]=(((cj2*sj1))+((r22*x5665))+(((-1.0)*x5669*x5674))+((cj1*sj2))+((x5666*x5672)));
evalcond[4]=((((-1.0)*x5671*x5674))+((r02*x5665))+((x5666*x5667))+(((-1.0)*cj0*x5675))+((cj0*x5668)));
evalcond[5]=((((-1.0)*x5670*x5674))+((x5666*x5673))+((sj0*x5668))+((r12*x5665))+(((-1.0)*sj0*x5675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5677=((-1.0)*r10);
IkReal x5679 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5679)==0){
continue;
}
IkReal x5678=pow(x5679,-0.5);
CheckValue<IkReal> x5680 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5677),IKFAST_ATAN2_MAGTHRESH);
if(!x5680.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5680.value));
IkReal gconst121=(r11*x5678);
IkReal gconst122=(x5677*x5678);
CheckValue<IkReal> x5681 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5681.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5681.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5682=((-1.0)*r10);
IkReal x5683=x5678;
CheckValue<IkReal> x5685 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5682),IKFAST_ATAN2_MAGTHRESH);
if(!x5685.valid){
continue;
}
IkReal x5684=((-1.0)*(x5685.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5684;
IkReal gconst120=x5684;
IkReal gconst121=(r11*x5683);
IkReal gconst122=(x5682*x5683);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5686=((1.0)*sj0);
IkReal x5687=((1.0)*gconst121);
CheckValue<IkReal> x5688=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x5687)))),-1);
if(!x5688.valid){
continue;
}
CheckValue<IkReal> x5689 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5686)))),IkReal(((((-1.0)*cj0*r01*x5687))+((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x5686))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5688.value)))+(x5689.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5690=IKsin(j4);
IkReal x5691=IKcos(j4);
IkReal x5692=(gconst121*r11);
IkReal x5693=(sj1*sj2);
IkReal x5694=(gconst122*r00);
IkReal x5695=(gconst122*r10);
IkReal x5696=(gconst122*r20);
IkReal x5697=((1.0)*x5691);
IkReal x5698=((1.0)*cj1*cj2);
IkReal x5699=((1.0)*x5690);
IkReal x5700=(gconst121*x5690);
IkReal x5701=(gconst121*x5691);
evalcond[0]=((((-1.0)*x5696*x5699))+(((-1.0)*r22*x5697))+((r21*x5700)));
evalcond[1]=(cj0+((x5690*x5692))+(((-1.0)*r12*x5697))+(((-1.0)*x5695*x5699)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5697))+((r01*x5700))+(((-1.0)*x5694*x5699)));
evalcond[3]=(((cj2*sj1))+((r22*x5690))+(((-1.0)*x5696*x5697))+((cj1*sj2))+((r21*x5701)));
evalcond[4]=((((-1.0)*cj0*x5698))+((r02*x5690))+((r01*x5701))+(((-1.0)*x5694*x5697))+((cj0*x5693)));
evalcond[5]=(((x5691*x5692))+(((-1.0)*sj0*x5698))+((sj0*x5693))+((r12*x5690))+(((-1.0)*x5695*x5697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5702=((1.0)*gconst122);
CheckValue<IkReal> x5703=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5702)))),-1);
if(!x5703.valid){
continue;
}
CheckValue<IkReal> x5704 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5702))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5703.value)))+(x5704.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5705=IKsin(j4);
IkReal x5706=IKcos(j4);
IkReal x5707=(gconst121*r11);
IkReal x5708=(sj1*sj2);
IkReal x5709=(gconst122*r00);
IkReal x5710=(gconst122*r10);
IkReal x5711=(gconst122*r20);
IkReal x5712=((1.0)*x5706);
IkReal x5713=((1.0)*cj1*cj2);
IkReal x5714=((1.0)*x5705);
IkReal x5715=(gconst121*x5705);
IkReal x5716=(gconst121*x5706);
evalcond[0]=((((-1.0)*r22*x5712))+(((-1.0)*x5711*x5714))+((r21*x5715)));
evalcond[1]=(cj0+((x5705*x5707))+(((-1.0)*x5710*x5714))+(((-1.0)*r12*x5712)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5709*x5714))+((r01*x5715))+(((-1.0)*r02*x5712)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5705))+(((-1.0)*x5711*x5712))+((r21*x5716)));
evalcond[4]=((((-1.0)*cj0*x5713))+((r02*x5705))+(((-1.0)*x5709*x5712))+((r01*x5716))+((cj0*x5708)));
evalcond[5]=(((x5706*x5707))+((sj0*x5708))+((r12*x5705))+(((-1.0)*x5710*x5712))+(((-1.0)*sj0*x5713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5717=((-1.0)*r11);
IkReal x5719 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5719)==0){
continue;
}
IkReal x5718=pow(x5719,-0.5);
CheckValue<IkReal> x5720 = IKatan2WithCheck(IkReal(x5717),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5720.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5720.value))));
IkReal gconst124=(x5717*x5718);
IkReal gconst125=((1.0)*r10*x5718);
CheckValue<IkReal> x5721 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5721.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5721.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5722=((-1.0)*r11);
CheckValue<IkReal> x5725 = IKatan2WithCheck(IkReal(x5722),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5725.valid){
continue;
}
IkReal x5723=((1.0)*(x5725.value));
IkReal x5724=x5718;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5723)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5723)));
IkReal gconst124=(x5722*x5724);
IkReal gconst125=((1.0)*r10*x5724);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5726=((-1.0)*r11);
CheckValue<IkReal> x5729 = IKatan2WithCheck(IkReal(x5726),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5729.valid){
continue;
}
IkReal x5727=((1.0)*(x5729.value));
IkReal x5728=x5718;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5727)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5727)));
IkReal gconst124=(x5726*x5728);
IkReal gconst125=((1.0)*r10*x5728);
IkReal x5730=r12*r12;
IkReal x5731=((1.0)*sj0);
IkReal x5732=(cj0*r02);
IkReal x5733=x5718;
j4eval[0]=((IKabs(((((-1.0)*r12*x5731))+(((-1.0)*x5732)))))+(IKabs((((sj0*x5730*x5733))+(((-1.0)*x5731*x5733))+((r12*x5732*x5733))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5734=((-1.0)*r11);
CheckValue<IkReal> x5737 = IKatan2WithCheck(IkReal(x5734),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5737.valid){
continue;
}
IkReal x5735=((1.0)*(x5737.value));
IkReal x5736=x5718;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5735)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5735)));
IkReal gconst124=(x5734*x5736);
IkReal gconst125=((1.0)*r10*x5736);
IkReal x5738=r12*r12;
IkReal x5739=((1.0)+(((-1.0)*x5738)));
IkReal x5740=(cj2*r22*sj1);
IkReal x5741=(cj1*r22*sj2);
CheckValue<IkReal> x5748=IKPowWithIntegerCheck(x5739,-1);
if(!x5748.valid){
continue;
}
IkReal x5742=x5748.value;
CheckValue<IkReal> x5749=IKPowWithIntegerCheck(((-1.0)+x5738),-1);
if(!x5749.valid){
continue;
}
IkReal x5743=x5749.value;
IkReal x5744=((1.0)*x5742);
if((x5739) < -0.00001)
continue;
IkReal x5745=IKsqrt(x5739);
IkReal x5746=((1.0)*r12*x5743*x5745);
IkReal x5747=((((-2.0)*r10*r11*r20*r21*x5742))+(((-1.0)*x5744*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x5744*(r11*r11)*(r21*r21))));
j4eval[0]=x5747;
j4eval[1]=IKsign(x5747);
j4eval[2]=((IKabs((x5740+x5741)))+(IKabs(((((-1.0)*x5740*x5746))+(((-1.0)*x5741*x5746))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5750=(gconst124*r21);
IkReal x5751=(cj1*sj2);
IkReal x5752=(cj2*sj1);
IkReal x5753=(gconst125*r20);
CheckValue<IkReal> x5754=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5750*x5750)))+(((-1.0)*(r22*r22)))+(((2.0)*x5750*x5753))+(((-1.0)*(x5753*x5753))))),-1);
if(!x5754.valid){
continue;
}
CheckValue<IkReal> x5755 = IKatan2WithCheck(IkReal((((r22*x5752))+((r22*x5751)))),IkReal((((x5750*x5752))+((x5750*x5751))+(((-1.0)*x5751*x5753))+(((-1.0)*x5752*x5753)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5754.value)))+(x5755.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5756=IKsin(j4);
IkReal x5757=IKcos(j4);
IkReal x5758=(sj1*sj2);
IkReal x5759=(gconst125*r20);
IkReal x5760=(gconst124*r01);
IkReal x5761=(gconst125*r00);
IkReal x5762=(gconst125*r10);
IkReal x5763=((1.0)*x5757);
IkReal x5764=((1.0)*cj1*cj2);
IkReal x5765=((1.0)*x5756);
IkReal x5766=(gconst124*x5756);
IkReal x5767=(gconst124*x5757);
evalcond[0]=(((r21*x5766))+(((-1.0)*x5759*x5765))+(((-1.0)*r22*x5763)));
evalcond[1]=(cj0+(((-1.0)*r12*x5763))+((r11*x5766))+(((-1.0)*x5762*x5765)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5761*x5765))+((x5756*x5760))+(((-1.0)*r02*x5763)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5767))+(((-1.0)*x5759*x5763))+((r22*x5756)));
evalcond[4]=((((-1.0)*x5761*x5763))+((x5757*x5760))+(((-1.0)*cj0*x5764))+((r02*x5756))+((cj0*x5758)));
evalcond[5]=((((-1.0)*sj0*x5764))+((r11*x5767))+(((-1.0)*x5762*x5763))+((sj0*x5758))+((r12*x5756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5768=((1.0)*sj0);
IkReal x5769=((1.0)*cj0);
CheckValue<IkReal> x5770=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5770.valid){
continue;
}
CheckValue<IkReal> x5771 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5768))+(((-1.0)*r02*x5769)))),IkReal(((((-1.0)*gconst124*r11*x5768))+((gconst125*r10*sj0))+(((-1.0)*gconst124*r01*x5769))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5770.value)))+(x5771.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5772=IKsin(j4);
IkReal x5773=IKcos(j4);
IkReal x5774=(sj1*sj2);
IkReal x5775=(gconst125*r20);
IkReal x5776=(gconst124*r01);
IkReal x5777=(gconst125*r00);
IkReal x5778=(gconst125*r10);
IkReal x5779=((1.0)*x5773);
IkReal x5780=((1.0)*cj1*cj2);
IkReal x5781=((1.0)*x5772);
IkReal x5782=(gconst124*x5772);
IkReal x5783=(gconst124*x5773);
evalcond[0]=((((-1.0)*x5775*x5781))+((r21*x5782))+(((-1.0)*r22*x5779)));
evalcond[1]=(cj0+(((-1.0)*r12*x5779))+((r11*x5782))+(((-1.0)*x5778*x5781)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5777*x5781))+(((-1.0)*r02*x5779))+((x5772*x5776)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5783))+((r22*x5772))+(((-1.0)*x5775*x5779)));
evalcond[4]=((((-1.0)*x5777*x5779))+((cj0*x5774))+((r02*x5772))+(((-1.0)*cj0*x5780))+((x5773*x5776)));
evalcond[5]=((((-1.0)*x5778*x5779))+((r11*x5783))+((r12*x5772))+(((-1.0)*sj0*x5780))+((sj0*x5774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5784=((1.0)*gconst125);
CheckValue<IkReal> x5785=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5784)))),-1);
if(!x5785.valid){
continue;
}
CheckValue<IkReal> x5786 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5784))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5785.value)))+(x5786.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5787=IKsin(j4);
IkReal x5788=IKcos(j4);
IkReal x5789=(sj1*sj2);
IkReal x5790=(gconst125*r20);
IkReal x5791=(gconst124*r01);
IkReal x5792=(gconst125*r00);
IkReal x5793=(gconst125*r10);
IkReal x5794=((1.0)*x5788);
IkReal x5795=((1.0)*cj1*cj2);
IkReal x5796=((1.0)*x5787);
IkReal x5797=(gconst124*x5787);
IkReal x5798=(gconst124*x5788);
evalcond[0]=(((r21*x5797))+(((-1.0)*r22*x5794))+(((-1.0)*x5790*x5796)));
evalcond[1]=((((-1.0)*x5793*x5796))+cj0+((r11*x5797))+(((-1.0)*r12*x5794)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5792*x5796))+(((-1.0)*r02*x5794))+((x5787*x5791)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5798))+((r22*x5787))+(((-1.0)*x5790*x5794)));
evalcond[4]=(((x5788*x5791))+(((-1.0)*x5792*x5794))+(((-1.0)*cj0*x5795))+((r02*x5787))+((cj0*x5789)));
evalcond[5]=((((-1.0)*x5793*x5794))+((r12*x5787))+((r11*x5798))+((sj0*x5789))+(((-1.0)*sj0*x5795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5799=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5799;
j4eval[1]=IKsign(x5799);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5800=((1.0)*cj5);
IkReal x5801=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5800)));
j4eval[0]=x5801;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x5800))+((r21*sj5))))));
j4eval[2]=IKsign(x5801);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5802=cj5*cj5;
IkReal x5803=r11*r11;
IkReal x5804=(cj5*r10);
IkReal x5805=(r11*sj5);
IkReal x5806=((((-1.0)*(r12*r12)))+(((2.0)*x5804*x5805))+(((-1.0)*x5803))+(((-1.0)*x5802*(r10*r10)))+((x5802*x5803)));
j4eval[0]=x5806;
j4eval[1]=IKsign(x5806);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5804))+x5805))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5807=cj5*cj5;
IkReal x5808=r11*r11;
IkReal x5809=(cj5*r10);
IkReal x5810=(r11*sj5);
CheckValue<IkReal> x5811 = IKatan2WithCheck(IkReal(((((-1.0)*x5809))+x5810)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5811.valid){
continue;
}
CheckValue<IkReal> x5812=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5807*(r10*r10)))+(((2.0)*x5809*x5810))+((x5807*x5808))+(((-1.0)*(r12*r12)))+(((-1.0)*x5808)))),-1);
if(!x5812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5811.value)+(((1.5707963267949)*(x5812.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5813=IKcos(j4);
IkReal x5814=IKsin(j4);
IkReal x5815=(cj5*r00);
IkReal x5816=(cj5*r10);
IkReal x5817=(r21*sj5);
IkReal x5818=(cj5*r20);
IkReal x5819=((1.0)*x5813);
IkReal x5820=((1.0)*x5814);
IkReal x5821=(sj5*x5814);
IkReal x5822=(sj5*x5813);
evalcond[0]=(((r11*x5822))+((r12*x5814))+(((-1.0)*x5816*x5819)));
evalcond[1]=(((x5814*x5817))+(((-1.0)*x5818*x5820))+(((-1.0)*r22*x5819)));
evalcond[2]=((((-1.0)*r02*x5819))+((r01*x5821))+(((-1.0)*x5815*x5820)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5819))+((r11*x5821))+(((-1.0)*x5816*x5820)));
evalcond[4]=(((cj2*sj1))+((x5813*x5817))+((r22*x5814))+((cj1*sj2))+(((-1.0)*x5818*x5819)));
evalcond[5]=((((-1.0)*x5815*x5819))+((r02*x5814))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5823=((1.0)*cj5);
CheckValue<IkReal> x5824=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5823))+(((-1.0)*r00*sj5)))),-1);
if(!x5824.valid){
continue;
}
CheckValue<IkReal> x5825 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x5823))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5824.value)))+(x5825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5826=IKcos(j4);
IkReal x5827=IKsin(j4);
IkReal x5828=(cj5*r00);
IkReal x5829=(cj5*r10);
IkReal x5830=(r21*sj5);
IkReal x5831=(cj5*r20);
IkReal x5832=((1.0)*x5826);
IkReal x5833=((1.0)*x5827);
IkReal x5834=(sj5*x5827);
IkReal x5835=(sj5*x5826);
evalcond[0]=(((r12*x5827))+((r11*x5835))+(((-1.0)*x5829*x5832)));
evalcond[1]=((((-1.0)*r22*x5832))+(((-1.0)*x5831*x5833))+((x5827*x5830)));
evalcond[2]=((((-1.0)*r02*x5832))+(((-1.0)*x5828*x5833))+((r01*x5834)));
evalcond[3]=((1.0)+((r11*x5834))+(((-1.0)*r12*x5832))+(((-1.0)*x5829*x5833)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5831*x5832))+((x5826*x5830))+((r22*x5827)));
evalcond[5]=(((r02*x5827))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5828*x5832))+((r01*x5835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5836=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5836.valid){
continue;
}
CheckValue<IkReal> x5837 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5836.value)))+(x5837.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5838=IKcos(j4);
IkReal x5839=IKsin(j4);
IkReal x5840=(cj5*r00);
IkReal x5841=(cj5*r10);
IkReal x5842=(r21*sj5);
IkReal x5843=(cj5*r20);
IkReal x5844=((1.0)*x5838);
IkReal x5845=((1.0)*x5839);
IkReal x5846=(sj5*x5839);
IkReal x5847=(sj5*x5838);
evalcond[0]=(((r11*x5847))+((r12*x5839))+(((-1.0)*x5841*x5844)));
evalcond[1]=((((-1.0)*x5843*x5845))+((x5839*x5842))+(((-1.0)*r22*x5844)));
evalcond[2]=((((-1.0)*r02*x5844))+(((-1.0)*x5840*x5845))+((r01*x5846)));
evalcond[3]=((1.0)+((r11*x5846))+(((-1.0)*x5841*x5845))+(((-1.0)*r12*x5844)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5843*x5844))+((r22*x5839))+((x5838*x5842)));
evalcond[5]=(((r02*x5839))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5840*x5844))+((r01*x5847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5848=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5848;
j4eval[1]=IKsign(x5848);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5849=((1.0)*cj5);
IkReal x5850=((((-1.0)*r21*x5849))+(((-1.0)*r20*sj5)));
j4eval[0]=x5850;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5849))))));
j4eval[2]=IKsign(x5850);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5851=cj5*cj5;
IkReal x5852=r11*r11;
IkReal x5853=(r11*sj5);
IkReal x5854=(cj5*r10);
IkReal x5855=((((-1.0)*x5851*x5852))+((x5851*(r10*r10)))+(r12*r12)+(((-2.0)*x5853*x5854))+x5852);
j4eval[0]=x5855;
j4eval[1]=IKsign(x5855);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5854))+x5853))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5856=cj5*cj5;
IkReal x5857=r11*r11;
IkReal x5858=(cj5*r10);
IkReal x5859=(r11*sj5);
CheckValue<IkReal> x5860 = IKatan2WithCheck(IkReal(((((-1.0)*x5858))+x5859)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5860.valid){
continue;
}
CheckValue<IkReal> x5861=IKPowWithIntegerCheck(IKsign(((((-2.0)*x5858*x5859))+(r12*r12)+((x5856*(r10*r10)))+(((-1.0)*x5856*x5857))+x5857)),-1);
if(!x5861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5860.value)+(((1.5707963267949)*(x5861.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5862=IKcos(j4);
IkReal x5863=IKsin(j4);
IkReal x5864=(cj5*r00);
IkReal x5865=(cj5*r10);
IkReal x5866=(r21*sj5);
IkReal x5867=(cj5*r20);
IkReal x5868=((1.0)*x5862);
IkReal x5869=((1.0)*x5863);
IkReal x5870=(sj5*x5863);
IkReal x5871=(sj5*x5862);
evalcond[0]=(((r11*x5871))+((r12*x5863))+(((-1.0)*x5865*x5868)));
evalcond[1]=((((-1.0)*r22*x5868))+(((-1.0)*x5867*x5869))+((x5863*x5866)));
evalcond[2]=((((-1.0)*r02*x5868))+(((-1.0)*x5864*x5869))+((r01*x5870)));
evalcond[3]=((-1.0)+((r11*x5870))+(((-1.0)*x5865*x5869))+(((-1.0)*r12*x5868)));
evalcond[4]=(((cj2*sj1))+((r22*x5863))+((cj1*sj2))+((x5862*x5866))+(((-1.0)*x5867*x5868)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x5863))+(((-1.0)*x5864*x5868))+((cj1*cj2))+((r01*x5871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5872=((1.0)*cj5);
CheckValue<IkReal> x5873 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5872)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5873.valid){
continue;
}
CheckValue<IkReal> x5874=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5872))+(((-1.0)*r20*sj5)))),-1);
if(!x5874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5873.value)+(((1.5707963267949)*(x5874.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5875=IKcos(j4);
IkReal x5876=IKsin(j4);
IkReal x5877=(cj5*r00);
IkReal x5878=(cj5*r10);
IkReal x5879=(r21*sj5);
IkReal x5880=(cj5*r20);
IkReal x5881=((1.0)*x5875);
IkReal x5882=((1.0)*x5876);
IkReal x5883=(sj5*x5876);
IkReal x5884=(sj5*x5875);
evalcond[0]=(((r11*x5884))+((r12*x5876))+(((-1.0)*x5878*x5881)));
evalcond[1]=((((-1.0)*x5880*x5882))+(((-1.0)*r22*x5881))+((x5876*x5879)));
evalcond[2]=(((r01*x5883))+(((-1.0)*r02*x5881))+(((-1.0)*x5877*x5882)));
evalcond[3]=((-1.0)+((r11*x5883))+(((-1.0)*r12*x5881))+(((-1.0)*x5878*x5882)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x5876))+(((-1.0)*x5880*x5881))+((x5875*x5879)));
evalcond[5]=(((r01*x5884))+(((-1.0)*sj1*sj2))+((r02*x5876))+((cj1*cj2))+(((-1.0)*x5877*x5881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5885 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5885.valid){
continue;
}
CheckValue<IkReal> x5886=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5885.value)+(((1.5707963267949)*(x5886.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5887=IKcos(j4);
IkReal x5888=IKsin(j4);
IkReal x5889=(cj5*r00);
IkReal x5890=(cj5*r10);
IkReal x5891=(r21*sj5);
IkReal x5892=(cj5*r20);
IkReal x5893=((1.0)*x5887);
IkReal x5894=((1.0)*x5888);
IkReal x5895=(sj5*x5888);
IkReal x5896=(sj5*x5887);
evalcond[0]=(((r12*x5888))+(((-1.0)*x5890*x5893))+((r11*x5896)));
evalcond[1]=((((-1.0)*r22*x5893))+(((-1.0)*x5892*x5894))+((x5888*x5891)));
evalcond[2]=((((-1.0)*x5889*x5894))+(((-1.0)*r02*x5893))+((r01*x5895)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5893))+(((-1.0)*x5890*x5894))+((r11*x5895)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5892*x5893))+((cj1*sj2))+((x5887*x5891))+((r22*x5888)));
evalcond[5]=((((-1.0)*x5889*x5893))+(((-1.0)*sj1*sj2))+((r01*x5896))+((cj1*cj2))+((r02*x5888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5897=((-1.0)*r00);
IkReal x5899 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5899)==0){
continue;
}
IkReal x5898=pow(x5899,-0.5);
CheckValue<IkReal> x5900 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5897),IKFAST_ATAN2_MAGTHRESH);
if(!x5900.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5900.value));
IkReal gconst127=(r01*x5898);
IkReal gconst128=(x5897*x5898);
CheckValue<IkReal> x5901 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5901.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5901.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5902=((-1.0)*r00);
IkReal x5903=x5898;
CheckValue<IkReal> x5905 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5902),IKFAST_ATAN2_MAGTHRESH);
if(!x5905.valid){
continue;
}
IkReal x5904=((-1.0)*(x5905.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5904;
IkReal gconst126=x5904;
IkReal gconst127=(r01*x5903);
IkReal gconst128=(x5902*x5903);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5906=((1.0)*sj0);
IkReal x5907=((1.0)*gconst127);
CheckValue<IkReal> x5908 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5906))+(((-1.0)*cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*cj0*r01*x5907))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x5906)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5908.valid){
continue;
}
CheckValue<IkReal> x5909=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5907))+(((-1.0)*gconst128*r21)))),-1);
if(!x5909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5908.value)+(((1.5707963267949)*(x5909.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5910=IKsin(j4);
IkReal x5911=IKcos(j4);
IkReal x5912=(gconst127*r01);
IkReal x5913=(sj1*sj2);
IkReal x5914=(gconst128*r10);
IkReal x5915=(gconst128*r00);
IkReal x5916=(gconst128*r20);
IkReal x5917=((1.0)*x5911);
IkReal x5918=((1.0)*cj1*cj2);
IkReal x5919=((1.0)*x5910);
IkReal x5920=(gconst127*x5911);
IkReal x5921=(gconst127*x5910);
evalcond[0]=((((-1.0)*r22*x5917))+((r21*x5921))+(((-1.0)*x5916*x5919)));
evalcond[1]=((((-1.0)*r12*x5917))+cj0+((r11*x5921))+(((-1.0)*x5914*x5919)));
evalcond[2]=((((-1.0)*sj0))+((x5910*x5912))+(((-1.0)*r02*x5917))+(((-1.0)*x5915*x5919)));
evalcond[3]=(((cj2*sj1))+((r22*x5910))+((cj1*sj2))+((r21*x5920))+(((-1.0)*x5916*x5917)));
evalcond[4]=(((x5911*x5912))+(((-1.0)*cj0*x5918))+((r02*x5910))+((cj0*x5913))+(((-1.0)*x5915*x5917)));
evalcond[5]=(((r12*x5910))+((sj0*x5913))+((r11*x5920))+(((-1.0)*sj0*x5918))+(((-1.0)*x5914*x5917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5922=((1.0)*gconst128);
CheckValue<IkReal> x5923 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5922))+((gconst127*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5923.valid){
continue;
}
CheckValue<IkReal> x5924=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5922))+(((-1.0)*gconst127*r10)))),-1);
if(!x5924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5923.value)+(((1.5707963267949)*(x5924.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5925=IKsin(j4);
IkReal x5926=IKcos(j4);
IkReal x5927=(gconst127*r01);
IkReal x5928=(sj1*sj2);
IkReal x5929=(gconst128*r10);
IkReal x5930=(gconst128*r00);
IkReal x5931=(gconst128*r20);
IkReal x5932=((1.0)*x5926);
IkReal x5933=((1.0)*cj1*cj2);
IkReal x5934=((1.0)*x5925);
IkReal x5935=(gconst127*x5926);
IkReal x5936=(gconst127*x5925);
evalcond[0]=((((-1.0)*x5931*x5934))+((r21*x5936))+(((-1.0)*r22*x5932)));
evalcond[1]=(cj0+(((-1.0)*x5929*x5934))+((r11*x5936))+(((-1.0)*r12*x5932)));
evalcond[2]=((((-1.0)*sj0))+((x5925*x5927))+(((-1.0)*r02*x5932))+(((-1.0)*x5930*x5934)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5931*x5932))+((r22*x5925))+((r21*x5935)));
evalcond[4]=(((x5926*x5927))+(((-1.0)*cj0*x5933))+((cj0*x5928))+(((-1.0)*x5930*x5932))+((r02*x5925)));
evalcond[5]=((((-1.0)*sj0*x5933))+(((-1.0)*x5929*x5932))+((r11*x5935))+((r12*x5925))+((sj0*x5928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5937=((-1.0)*r01);
IkReal x5939 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5939)==0){
continue;
}
IkReal x5938=pow(x5939,-0.5);
CheckValue<IkReal> x5940 = IKatan2WithCheck(IkReal(x5937),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5940.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5940.value))));
IkReal gconst130=(x5937*x5938);
IkReal gconst131=((1.0)*r00*x5938);
CheckValue<IkReal> x5941 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5941.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5941.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5942=((-1.0)*r01);
CheckValue<IkReal> x5945 = IKatan2WithCheck(IkReal(x5942),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5945.valid){
continue;
}
IkReal x5943=((1.0)*(x5945.value));
IkReal x5944=x5938;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5943)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5943)));
IkReal gconst130=(x5942*x5944);
IkReal gconst131=((1.0)*r00*x5944);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5946=((-1.0)*r01);
CheckValue<IkReal> x5949 = IKatan2WithCheck(IkReal(x5946),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5949.valid){
continue;
}
IkReal x5947=((1.0)*(x5949.value));
IkReal x5948=x5938;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5947)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5947)));
IkReal gconst130=(x5946*x5948);
IkReal gconst131=((1.0)*r00*x5948);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5950=((-1.0)*r01);
CheckValue<IkReal> x5953 = IKatan2WithCheck(IkReal(x5950),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5953.valid){
continue;
}
IkReal x5951=((1.0)*(x5953.value));
IkReal x5952=x5938;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5951)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5951)));
IkReal gconst130=(x5950*x5952);
IkReal gconst131=((1.0)*r00*x5952);
IkReal x5954=r02*r02;
IkReal x5955=(r12*sj0);
IkReal x5956=((1.0)*cj0);
IkReal x5957=x5938;
j4eval[0]=((IKabs((((cj0*x5954*x5957))+(((-1.0)*x5956*x5957))+((r02*x5955*x5957)))))+(IKabs(((((-1.0)*r02*x5956))+(((-1.0)*x5955))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5958=((1.0)*sj0);
IkReal x5959=((1.0)*gconst130);
CheckValue<IkReal> x5960=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r21))+(((-1.0)*r20*x5959)))),-1);
if(!x5960.valid){
continue;
}
CheckValue<IkReal> x5961 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5958)))),IkReal(((((-1.0)*cj0*r01*x5959))+(((-1.0)*gconst130*r11*x5958))+((gconst131*r10*sj0))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5960.value)))+(x5961.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5962=IKsin(j4);
IkReal x5963=IKcos(j4);
IkReal x5964=(gconst131*r10);
IkReal x5965=(sj1*sj2);
IkReal x5966=(gconst131*r20);
IkReal x5967=(gconst131*r00);
IkReal x5968=((1.0)*x5963);
IkReal x5969=((1.0)*cj1*cj2);
IkReal x5970=(gconst130*x5962);
IkReal x5971=((1.0)*x5962);
IkReal x5972=(gconst130*x5963);
evalcond[0]=((((-1.0)*r22*x5968))+((r21*x5970))+(((-1.0)*x5966*x5971)));
evalcond[1]=(cj0+(((-1.0)*r12*x5968))+((r11*x5970))+(((-1.0)*x5964*x5971)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5970))+(((-1.0)*x5967*x5971))+(((-1.0)*r02*x5968)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5962))+((r21*x5972))+(((-1.0)*x5966*x5968)));
evalcond[4]=(((r02*x5962))+((cj0*x5965))+(((-1.0)*cj0*x5969))+((r01*x5972))+(((-1.0)*x5967*x5968)));
evalcond[5]=((((-1.0)*sj0*x5969))+((r11*x5972))+((r12*x5962))+((sj0*x5965))+(((-1.0)*x5964*x5968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5973=((1.0)*gconst131);
CheckValue<IkReal> x5974 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5973))+((gconst130*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5974.valid){
continue;
}
CheckValue<IkReal> x5975=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5973))+(((-1.0)*gconst130*r10)))),-1);
if(!x5975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5974.value)+(((1.5707963267949)*(x5975.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5976=IKsin(j4);
IkReal x5977=IKcos(j4);
IkReal x5978=(gconst131*r10);
IkReal x5979=(sj1*sj2);
IkReal x5980=(gconst131*r20);
IkReal x5981=(gconst131*r00);
IkReal x5982=((1.0)*x5977);
IkReal x5983=((1.0)*cj1*cj2);
IkReal x5984=(gconst130*x5976);
IkReal x5985=((1.0)*x5976);
IkReal x5986=(gconst130*x5977);
evalcond[0]=((((-1.0)*x5980*x5985))+((r21*x5984))+(((-1.0)*r22*x5982)));
evalcond[1]=((((-1.0)*r12*x5982))+(((-1.0)*x5978*x5985))+cj0+((r11*x5984)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5982))+(((-1.0)*x5981*x5985))+((r01*x5984)));
evalcond[3]=((((-1.0)*x5980*x5982))+((cj2*sj1))+((r21*x5986))+((cj1*sj2))+((r22*x5976)));
evalcond[4]=(((cj0*x5979))+(((-1.0)*x5981*x5982))+(((-1.0)*cj0*x5983))+((r02*x5976))+((r01*x5986)));
evalcond[5]=((((-1.0)*x5978*x5982))+((r11*x5986))+(((-1.0)*sj0*x5983))+((r12*x5976))+((sj0*x5979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5987=((1.0)*gconst131);
CheckValue<IkReal> x5988=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r00))+(((-1.0)*r01*x5987)))),-1);
if(!x5988.valid){
continue;
}
CheckValue<IkReal> x5989 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x5987)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5988.value)))+(x5989.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5990=IKsin(j4);
IkReal x5991=IKcos(j4);
IkReal x5992=(gconst131*r10);
IkReal x5993=(sj1*sj2);
IkReal x5994=(gconst131*r20);
IkReal x5995=(gconst131*r00);
IkReal x5996=((1.0)*x5991);
IkReal x5997=((1.0)*cj1*cj2);
IkReal x5998=(gconst130*x5990);
IkReal x5999=((1.0)*x5990);
IkReal x6000=(gconst130*x5991);
evalcond[0]=(((r21*x5998))+(((-1.0)*x5994*x5999))+(((-1.0)*r22*x5996)));
evalcond[1]=((((-1.0)*x5992*x5999))+(((-1.0)*r12*x5996))+cj0+((r11*x5998)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5996))+(((-1.0)*x5995*x5999))+((r01*x5998)));
evalcond[3]=(((r21*x6000))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5994*x5996))+((r22*x5990)));
evalcond[4]=(((r02*x5990))+((cj0*x5993))+(((-1.0)*x5995*x5996))+((r01*x6000))+(((-1.0)*cj0*x5997)));
evalcond[5]=(((r12*x5990))+(((-1.0)*x5992*x5996))+((sj0*x5993))+((r11*x6000))+(((-1.0)*sj0*x5997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6001=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6001;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6001);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6002=((1.0)*cj5);
IkReal x6003=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6002)));
j4eval[0]=x6003;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x6002))))));
j4eval[2]=IKsign(x6003);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6004=cj5*cj5;
IkReal x6005=r01*r01;
IkReal x6006=(cj5*r00);
IkReal x6007=(r01*sj5);
IkReal x6008=(x6005+(((-2.0)*x6006*x6007))+((x6004*(r00*r00)))+(r02*r02)+(((-1.0)*x6004*x6005)));
j4eval[0]=x6008;
j4eval[1]=IKsign(x6008);
j4eval[2]=((IKabs(r02))+(IKabs((x6007+(((-1.0)*x6006))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6009=cj5*cj5;
IkReal x6010=r01*r01;
IkReal x6011=(r01*sj5);
IkReal x6012=(cj5*r00);
CheckValue<IkReal> x6013 = IKatan2WithCheck(IkReal(((((-1.0)*x6012))+x6011)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6013.valid){
continue;
}
CheckValue<IkReal> x6014=IKPowWithIntegerCheck(IKsign((x6010+(((-2.0)*x6011*x6012))+(((-1.0)*x6009*x6010))+(r02*r02)+((x6009*(r00*r00))))),-1);
if(!x6014.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6013.value)+(((1.5707963267949)*(x6014.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6015=IKcos(j4);
IkReal x6016=IKsin(j4);
IkReal x6017=(cj5*r00);
IkReal x6018=(cj5*r10);
IkReal x6019=(r21*sj5);
IkReal x6020=(cj5*r20);
IkReal x6021=((1.0)*x6015);
IkReal x6022=((1.0)*x6016);
IkReal x6023=(sj5*x6016);
IkReal x6024=(sj5*x6015);
evalcond[0]=(((r01*x6024))+((r02*x6016))+(((-1.0)*x6017*x6021)));
evalcond[1]=((((-1.0)*x6020*x6022))+(((-1.0)*r22*x6021))+((x6016*x6019)));
evalcond[2]=(((r11*x6023))+(((-1.0)*x6018*x6022))+(((-1.0)*r12*x6021)));
evalcond[3]=((-1.0)+((r01*x6023))+(((-1.0)*x6017*x6022))+(((-1.0)*r02*x6021)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6020*x6021))+((cj1*sj2))+((x6015*x6019))+((r22*x6016)));
evalcond[5]=(((r12*x6016))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6024))+(((-1.0)*x6018*x6021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6025=((1.0)*cj5);
CheckValue<IkReal> x6026 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6025)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6026.valid){
continue;
}
CheckValue<IkReal> x6027=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6025))+(((-1.0)*r10*sj5)))),-1);
if(!x6027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6026.value)+(((1.5707963267949)*(x6027.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6028=IKcos(j4);
IkReal x6029=IKsin(j4);
IkReal x6030=(cj5*r00);
IkReal x6031=(cj5*r10);
IkReal x6032=(r21*sj5);
IkReal x6033=(cj5*r20);
IkReal x6034=((1.0)*x6028);
IkReal x6035=((1.0)*x6029);
IkReal x6036=(sj5*x6029);
IkReal x6037=(sj5*x6028);
evalcond[0]=(((r02*x6029))+(((-1.0)*x6030*x6034))+((r01*x6037)));
evalcond[1]=(((x6029*x6032))+(((-1.0)*x6033*x6035))+(((-1.0)*r22*x6034)));
evalcond[2]=((((-1.0)*x6031*x6035))+((r11*x6036))+(((-1.0)*r12*x6034)));
evalcond[3]=((-1.0)+(((-1.0)*x6030*x6035))+((r01*x6036))+(((-1.0)*r02*x6034)));
evalcond[4]=(((cj2*sj1))+((x6028*x6032))+((cj1*sj2))+((r22*x6029))+(((-1.0)*x6033*x6034)));
evalcond[5]=((((-1.0)*x6031*x6034))+((r11*x6037))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6038=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6038.valid){
continue;
}
CheckValue<IkReal> x6039 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6038.value)))+(x6039.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6040=IKcos(j4);
IkReal x6041=IKsin(j4);
IkReal x6042=(cj5*r00);
IkReal x6043=(cj5*r10);
IkReal x6044=(r21*sj5);
IkReal x6045=(cj5*r20);
IkReal x6046=((1.0)*x6040);
IkReal x6047=((1.0)*x6041);
IkReal x6048=(sj5*x6041);
IkReal x6049=(sj5*x6040);
evalcond[0]=((((-1.0)*x6042*x6046))+((r02*x6041))+((r01*x6049)));
evalcond[1]=(((x6041*x6044))+(((-1.0)*r22*x6046))+(((-1.0)*x6045*x6047)));
evalcond[2]=(((r11*x6048))+(((-1.0)*x6043*x6047))+(((-1.0)*r12*x6046)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6046))+(((-1.0)*x6042*x6047))+((r01*x6048)));
evalcond[4]=(((x6040*x6044))+((cj2*sj1))+((cj1*sj2))+((r22*x6041))+(((-1.0)*x6045*x6046)));
evalcond[5]=(((r11*x6049))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6043*x6046))+((r12*x6041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6050=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6050;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6050);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6051=((1.0)*cj5);
IkReal x6052=((((-1.0)*r21*x6051))+(((-1.0)*r20*sj5)));
j4eval[0]=x6052;
j4eval[1]=((IKabs(((((-1.0)*r10*x6051))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6052);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6053=(r01*sj5);
IkReal x6054=(cj1*sj2);
IkReal x6055=(cj2*sj1);
IkReal x6056=((1.0)*r02);
IkReal x6057=((1.0)*cj5*r00);
IkReal x6058=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6058;
j4eval[1]=((IKabs(((((-1.0)*x6054*x6057))+(((-1.0)*x6055*x6057))+((x6053*x6054))+((x6053*x6055)))))+(IKabs(((((-1.0)*x6054*x6056))+(((-1.0)*x6055*x6056))))));
j4eval[2]=IKsign(x6058);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6059=(r01*sj5);
IkReal x6060=(cj1*sj2);
IkReal x6061=(cj2*sj1);
IkReal x6062=((1.0)*r02);
IkReal x6063=((1.0)*cj5*r00);
CheckValue<IkReal> x6064 = IKatan2WithCheck(IkReal(((((-1.0)*x6061*x6063))+((x6059*x6061))+((x6059*x6060))+(((-1.0)*x6060*x6063)))),IkReal(((((-1.0)*x6061*x6062))+(((-1.0)*x6060*x6062)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6064.valid){
continue;
}
CheckValue<IkReal> x6065=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6064.value)+(((1.5707963267949)*(x6065.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6066=IKcos(j4);
IkReal x6067=IKsin(j4);
IkReal x6068=(cj5*r00);
IkReal x6069=(cj5*r10);
IkReal x6070=(r21*sj5);
IkReal x6071=(cj5*r20);
IkReal x6072=((1.0)*x6066);
IkReal x6073=((1.0)*x6067);
IkReal x6074=(sj5*x6067);
IkReal x6075=(sj5*x6066);
evalcond[0]=(((r01*x6075))+(((-1.0)*x6068*x6072))+((r02*x6067)));
evalcond[1]=(((x6067*x6070))+(((-1.0)*r22*x6072))+(((-1.0)*x6071*x6073)));
evalcond[2]=(((r11*x6074))+(((-1.0)*r12*x6072))+(((-1.0)*x6069*x6073)));
evalcond[3]=((1.0)+((r01*x6074))+(((-1.0)*r02*x6072))+(((-1.0)*x6068*x6073)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6067))+((x6066*x6070))+(((-1.0)*x6071*x6072)));
evalcond[5]=(((r11*x6075))+(((-1.0)*sj1*sj2))+((r12*x6067))+((cj1*cj2))+(((-1.0)*x6069*x6072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6076=((1.0)*cj5);
CheckValue<IkReal> x6077 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x6076))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6077.valid){
continue;
}
CheckValue<IkReal> x6078=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6076))+(((-1.0)*r20*sj5)))),-1);
if(!x6078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6077.value)+(((1.5707963267949)*(x6078.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6079=IKcos(j4);
IkReal x6080=IKsin(j4);
IkReal x6081=(cj5*r00);
IkReal x6082=(cj5*r10);
IkReal x6083=(r21*sj5);
IkReal x6084=(cj5*r20);
IkReal x6085=((1.0)*x6079);
IkReal x6086=((1.0)*x6080);
IkReal x6087=(sj5*x6080);
IkReal x6088=(sj5*x6079);
evalcond[0]=(((r01*x6088))+(((-1.0)*x6081*x6085))+((r02*x6080)));
evalcond[1]=((((-1.0)*r22*x6085))+(((-1.0)*x6084*x6086))+((x6080*x6083)));
evalcond[2]=((((-1.0)*r12*x6085))+(((-1.0)*x6082*x6086))+((r11*x6087)));
evalcond[3]=((1.0)+((r01*x6087))+(((-1.0)*r02*x6085))+(((-1.0)*x6081*x6086)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6079*x6083))+((r22*x6080))+(((-1.0)*x6084*x6085)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x6082*x6085))+((r12*x6080))+((cj1*cj2))+((r11*x6088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6089 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6089.valid){
continue;
}
CheckValue<IkReal> x6090=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6089.value)+(((1.5707963267949)*(x6090.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6091=IKcos(j4);
IkReal x6092=IKsin(j4);
IkReal x6093=(cj5*r00);
IkReal x6094=(cj5*r10);
IkReal x6095=(r21*sj5);
IkReal x6096=(cj5*r20);
IkReal x6097=((1.0)*x6091);
IkReal x6098=((1.0)*x6092);
IkReal x6099=(sj5*x6092);
IkReal x6100=(sj5*x6091);
evalcond[0]=((((-1.0)*x6093*x6097))+((r01*x6100))+((r02*x6092)));
evalcond[1]=(((x6092*x6095))+(((-1.0)*r22*x6097))+(((-1.0)*x6096*x6098)));
evalcond[2]=(((r11*x6099))+(((-1.0)*x6094*x6098))+(((-1.0)*r12*x6097)));
evalcond[3]=((1.0)+(((-1.0)*x6093*x6098))+((r01*x6099))+(((-1.0)*r02*x6097)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6092))+(((-1.0)*x6096*x6097))+((x6091*x6095)));
evalcond[5]=(((r11*x6100))+(((-1.0)*sj1*sj2))+((r12*x6092))+((cj1*cj2))+(((-1.0)*x6094*x6097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6101=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6101);
rxp1_1=(px*r21);
rxp1_2=(r11*x6101);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6102=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6102);
rxp1_1=(px*r21);
rxp1_2=(r11*x6102);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6103=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6103);
rxp1_1=(px*r21);
rxp1_2=(r11*x6103);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6106=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6106.valid){
continue;
}
IkReal x6104=x6106.value;
IkReal x6105=(sj0*x6104);
cj4array[0]=(((cj1*cj2*x6105))+(((-1.0)*sj1*sj2*x6105)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6107=IKsin(j4);
IkReal x6108=IKcos(j4);
IkReal x6109=(r21*sj5);
IkReal x6110=((1.0)*cj5*r20);
evalcond[0]=(r02*x6107);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6108)));
evalcond[2]=((((-1.0)*x6107*x6110))+((x6107*x6109)));
evalcond[3]=(((r11*sj5*x6107))+(((-1.0)*cj5*r10*x6107)));
evalcond[4]=(((cj2*sj1))+((x6108*x6109))+((cj1*sj2))+(((-1.0)*x6108*x6110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6113=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6113.valid){
continue;
}
IkReal x6111=x6113.value;
IkReal x6112=((1.0)*x6111);
cj4array[0]=((((-1.0)*cj1*sj2*x6112))+(((-1.0)*cj2*sj1*x6112)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6114=IKsin(j4);
IkReal x6115=IKcos(j4);
IkReal x6116=((1.0)*sj0);
IkReal x6117=((1.0)*cj5);
IkReal x6118=(sj5*x6114);
evalcond[0]=(r02*x6114);
evalcond[1]=((((-1.0)*x6116))+(((-1.0)*r02*x6115)));
evalcond[2]=((((-1.0)*r20*x6114*x6117))+((r21*x6118)));
evalcond[3]=(((r11*x6118))+(((-1.0)*r10*x6114*x6117)));
evalcond[4]=(((r11*sj5*x6115))+(((-1.0)*r10*x6115*x6117))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x6116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6119=IKPowWithIntegerCheck(r02,-1);
if(!x6119.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6119.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6120=IKsin(j4);
IkReal x6121=IKcos(j4);
IkReal x6122=(r21*sj5);
IkReal x6123=((1.0)*cj5);
IkReal x6124=(r11*sj5);
evalcond[0]=(r02*x6120);
evalcond[1]=(((x6120*x6122))+(((-1.0)*r20*x6120*x6123)));
evalcond[2]=((((-1.0)*r10*x6120*x6123))+((x6120*x6124)));
evalcond[3]=(((cj2*sj1))+((x6121*x6122))+((cj1*sj2))+(((-1.0)*r20*x6121*x6123)));
evalcond[4]=(((x6121*x6124))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*r10*x6121*x6123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6125=((1.0)*sj0);
IkReal x6126=((1.0)*cj0);
CheckValue<IkReal> x6127 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6126))+(((-1.0)*r12*x6125)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6126))+(((-1.0)*r11*sj5*x6125)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6127.valid){
continue;
}
CheckValue<IkReal> x6128=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6127.value)+(((1.5707963267949)*(x6128.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6129=IKsin(j4);
IkReal x6130=IKcos(j4);
IkReal x6131=(cj5*r00);
IkReal x6132=(cj5*r10);
IkReal x6133=(r21*sj5);
IkReal x6134=(sj1*sj2);
IkReal x6135=(cj5*r20);
IkReal x6136=((1.0)*x6130);
IkReal x6137=((1.0)*cj1*cj2);
IkReal x6138=((1.0)*x6129);
IkReal x6139=(sj5*x6129);
IkReal x6140=(sj5*x6130);
evalcond[0]=(((x6129*x6133))+(((-1.0)*r22*x6136))+(((-1.0)*x6135*x6138)));
evalcond[1]=(((r11*x6139))+cj0+(((-1.0)*x6132*x6138))+(((-1.0)*r12*x6136)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6131*x6138))+((r01*x6139))+(((-1.0)*r02*x6136)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6130*x6133))+((r22*x6129))+(((-1.0)*x6135*x6136)));
evalcond[4]=(((cj0*x6134))+(((-1.0)*x6131*x6136))+(((-1.0)*cj0*x6137))+((r02*x6129))+((r01*x6140)));
evalcond[5]=(((r12*x6129))+((r11*x6140))+(((-1.0)*x6132*x6136))+(((-1.0)*sj0*x6137))+((sj0*x6134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6141=((1.0)*cj5);
CheckValue<IkReal> x6142=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6141)))),-1);
if(!x6142.valid){
continue;
}
CheckValue<IkReal> x6143 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6141))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6142.value)))+(x6143.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6144=IKsin(j4);
IkReal x6145=IKcos(j4);
IkReal x6146=(cj5*r00);
IkReal x6147=(cj5*r10);
IkReal x6148=(r21*sj5);
IkReal x6149=(sj1*sj2);
IkReal x6150=(cj5*r20);
IkReal x6151=((1.0)*x6145);
IkReal x6152=((1.0)*cj1*cj2);
IkReal x6153=((1.0)*x6144);
IkReal x6154=(sj5*x6144);
IkReal x6155=(sj5*x6145);
evalcond[0]=(((x6144*x6148))+(((-1.0)*x6150*x6153))+(((-1.0)*r22*x6151)));
evalcond[1]=(cj0+(((-1.0)*x6147*x6153))+(((-1.0)*r12*x6151))+((r11*x6154)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6151))+(((-1.0)*x6146*x6153))+((r01*x6154)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6150*x6151))+((cj1*sj2))+((x6145*x6148))+((r22*x6144)));
evalcond[4]=((((-1.0)*x6146*x6151))+(((-1.0)*cj0*x6152))+((cj0*x6149))+((r02*x6144))+((r01*x6155)));
evalcond[5]=((((-1.0)*x6147*x6151))+((sj0*x6149))+((r12*x6144))+((r11*x6155))+(((-1.0)*sj0*x6152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6156=((1.0)*cj5);
CheckValue<IkReal> x6157 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6156)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6157.valid){
continue;
}
CheckValue<IkReal> x6158=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6156)))),-1);
if(!x6158.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6157.value)+(((1.5707963267949)*(x6158.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6159=IKsin(j4);
IkReal x6160=IKcos(j4);
IkReal x6161=(cj5*r00);
IkReal x6162=(cj5*r10);
IkReal x6163=(r21*sj5);
IkReal x6164=(sj1*sj2);
IkReal x6165=(cj5*r20);
IkReal x6166=((1.0)*x6160);
IkReal x6167=((1.0)*cj1*cj2);
IkReal x6168=((1.0)*x6159);
IkReal x6169=(sj5*x6159);
IkReal x6170=(sj5*x6160);
evalcond[0]=(((x6159*x6163))+(((-1.0)*r22*x6166))+(((-1.0)*x6165*x6168)));
evalcond[1]=(cj0+(((-1.0)*r12*x6166))+((r11*x6169))+(((-1.0)*x6162*x6168)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6169))+(((-1.0)*r02*x6166))+(((-1.0)*x6161*x6168)));
evalcond[3]=(((r22*x6159))+((cj2*sj1))+((cj1*sj2))+((x6160*x6163))+(((-1.0)*x6165*x6166)));
evalcond[4]=((((-1.0)*cj0*x6167))+((r02*x6159))+((r01*x6170))+((cj0*x6164))+(((-1.0)*x6161*x6166)));
evalcond[5]=(((r12*x6159))+(((-1.0)*sj0*x6167))+((sj0*x6164))+((r11*x6170))+(((-1.0)*x6162*x6166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6171=r21*r21;
IkReal x6172=cj5*cj5;
IkReal x6173=(cj2*sj1);
IkReal x6174=(cj1*sj2);
IkReal x6175=(r21*sj5);
IkReal x6176=((1.0)*cj5*r20);
CheckValue<IkReal> x6177 = IKatan2WithCheck(IkReal((((r22*x6174))+((r22*x6173)))),IkReal((((x6174*x6175))+((x6173*x6175))+(((-1.0)*x6174*x6176))+(((-1.0)*x6173*x6176)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6177.valid){
continue;
}
CheckValue<IkReal> x6178=IKPowWithIntegerCheck(IKsign(((((2.0)*cj5*r20*x6175))+(((-1.0)*x6171))+(((-1.0)*(r22*r22)))+(((-1.0)*x6172*(r20*r20)))+((x6171*x6172)))),-1);
if(!x6178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6177.value)+(((1.5707963267949)*(x6178.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6179=IKsin(j4);
IkReal x6180=IKcos(j4);
IkReal x6181=(r21*sj5);
IkReal x6182=(cj5*r20);
IkReal x6183=((1.0)*x6180);
evalcond[0]=((((-1.0)*x6179*x6182))+(((-1.0)*r22*x6183))+((x6179*x6181)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*x6182*x6183))+((cj1*sj2))+((x6180*x6181))+((r22*x6179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6184=(cj5*sj4);
IkReal x6185=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x6185))+(((-1.0)*r00*x6184)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x6184))+(((-1.0)*r11*x6185))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x6185))+(((-1.0)*r00*x6184))))+IKsqr((((r10*x6184))+(((-1.0)*r11*x6185))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x6185))+(((-1.0)*r00*x6184))), (((r10*x6184))+(((-1.0)*r11*x6185))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6186=IKcos(j0);
IkReal x6187=IKsin(j0);
IkReal x6188=((0.1)*sj5);
IkReal x6189=((0.392)*sj1);
IkReal x6190=(cj5*r11);
IkReal x6191=(cj5*r01);
IkReal x6192=((1.0)*cj1);
IkReal x6193=(r11*sj5);
IkReal x6194=((0.392)*cj2);
IkReal x6195=((1.0)*sj1);
IkReal x6196=((1.0)*cj4);
IkReal x6197=(r01*sj5);
IkReal x6198=(sj2*x6187);
IkReal x6199=(sj2*x6186);
IkReal x6200=(cj5*x6196);
IkReal x6201=(cj1*x6186);
IkReal x6202=(cj1*x6187);
IkReal x6203=(cj2*x6186);
IkReal x6204=((1.0)*cj5*sj4);
IkReal x6205=(cj2*x6187);
evalcond[0]=((((-1.0)*r12*x6196))+x6186+((sj4*x6193))+(((-1.0)*r10*x6204)));
evalcond[1]=((((-1.0)*r00*x6204))+(((-1.0)*x6187))+((sj4*x6197))+(((-1.0)*r02*x6196)));
evalcond[2]=(((r00*sj5))+(((-1.0)*x6192*x6199))+x6191+(((-1.0)*x6195*x6203)));
evalcond[3]=(((r10*sj5))+(((-1.0)*x6192*x6198))+x6190+(((-1.0)*x6195*x6205)));
evalcond[4]=((((-1.0)*r00*x6200))+(((-1.0)*x6192*x6203))+((sj1*x6199))+((r02*sj4))+((cj4*x6197)));
evalcond[5]=((((-1.0)*x6192*x6205))+((sj1*x6198))+((r12*sj4))+((cj4*x6193))+(((-1.0)*r10*x6200)));
evalcond[6]=((((-0.134)*x6187))+(((-0.1)*x6191))+(((-1.0)*r00*x6188))+((x6194*x6201))+(((-1.0)*x6189*x6199))+(((-1.0)*px))+(((0.425)*x6201)));
evalcond[7]=((((0.134)*x6186))+(((-0.1)*x6190))+((x6194*x6202))+(((-1.0)*x6189*x6198))+(((-1.0)*py))+(((0.425)*x6202))+(((-1.0)*r10*x6188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6206=((1.0)*cj5);
IkReal x6207=((1.0)*sj5);
CheckValue<IkReal> x6208 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x6206))+(((-1.0)*r10*x6207)))),IkReal(((((-1.0)*r00*x6207))+(((-1.0)*r01*x6206)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6208.valid){
continue;
}
CheckValue<IkReal> x6209=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6209.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6208.value)+(((1.5707963267949)*(x6209.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6210=IKcos(j0);
IkReal x6211=IKsin(j0);
IkReal x6212=((0.1)*sj5);
IkReal x6213=(cj5*r11);
IkReal x6214=(cj5*r01);
IkReal x6215=((0.392)*cj2);
IkReal x6216=((1.0)*cj2);
IkReal x6217=((0.392)*sj2);
IkReal x6218=((1.0)*cj1*sj2);
IkReal x6219=(cj1*x6210);
IkReal x6220=(cj1*x6211);
IkReal x6221=(sj1*x6210);
IkReal x6222=(sj1*x6211);
evalcond[0]=(((r00*sj5))+x6214+(((-1.0)*x6210*x6218))+(((-1.0)*x6216*x6221)));
evalcond[1]=(x6213+((r10*sj5))+(((-1.0)*x6216*x6222))+(((-1.0)*x6211*x6218)));
evalcond[2]=((((-0.134)*x6211))+(((-1.0)*r00*x6212))+(((-1.0)*px))+(((-1.0)*x6217*x6221))+((x6215*x6219))+(((-0.1)*x6214))+(((0.425)*x6219)));
evalcond[3]=((((-1.0)*py))+(((0.134)*x6210))+(((-1.0)*x6217*x6222))+((x6215*x6220))+(((-0.1)*x6213))+(((0.425)*x6220))+(((-1.0)*r10*x6212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6223=((1.0)*cj5);
IkReal x6224=((((-1.0)*r01*x6223))+(((-1.0)*r00*sj5)));
j4eval[0]=x6224;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6223)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6224);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6225=((1.0)*cj5);
IkReal x6226=((((-1.0)*r11*x6225))+(((-1.0)*r10*sj5)));
j4eval[0]=x6226;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6225))))));
j4eval[2]=IKsign(x6226);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6227=((1.0)*sj0);
IkReal x6228=((1.0)*cj0);
IkReal x6229=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6229;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6228))+(((-1.0)*r11*sj5*x6227)))))+(IKabs(((((-1.0)*r12*x6227))+(((-1.0)*r02*x6228))))));
j4eval[2]=IKsign(x6229);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6230=((-1.0)*r20);
IkReal x6232 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6232)==0){
continue;
}
IkReal x6231=pow(x6232,-0.5);
CheckValue<IkReal> x6233 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6230),IKFAST_ATAN2_MAGTHRESH);
if(!x6233.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6233.value));
IkReal gconst115=(r21*x6231);
IkReal gconst116=(x6230*x6231);
CheckValue<IkReal> x6234 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6234.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6234.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6235=((-1.0)*r20);
IkReal x6236=x6231;
CheckValue<IkReal> x6238 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6235),IKFAST_ATAN2_MAGTHRESH);
if(!x6238.valid){
continue;
}
IkReal x6237=((-1.0)*(x6238.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6237;
IkReal gconst114=x6237;
IkReal gconst115=(r21*x6236);
IkReal gconst116=(x6235*x6236);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6239=((-1.0)*r20);
IkReal x6240=x6231;
CheckValue<IkReal> x6242 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6239),IKFAST_ATAN2_MAGTHRESH);
if(!x6242.valid){
continue;
}
IkReal x6241=((-1.0)*(x6242.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6241;
IkReal gconst114=x6241;
IkReal gconst115=(r21*x6240);
IkReal gconst116=(x6239*x6240);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6243=((-1.0)*r20);
IkReal x6244=x6231;
CheckValue<IkReal> x6246 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6243),IKFAST_ATAN2_MAGTHRESH);
if(!x6246.valid){
continue;
}
IkReal x6245=((-1.0)*(x6246.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6245;
IkReal gconst114=x6245;
IkReal gconst115=(r21*x6244);
IkReal gconst116=(x6243*x6244);
IkReal x6247=((1.0)*(r22*r22));
CheckValue<IkReal> x6251=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6247))),-1);
if(!x6251.valid){
continue;
}
IkReal x6248=x6251.value;
IkReal x6249=((1.0)*x6248);
IkReal x6250=((((-1.0)*x6249*(r20*r20*r20*r20)))+(((-1.0)*x6247))+(((-1.0)*x6249*(r21*r21*r21*r21)))+(((-2.0)*x6248*(r20*r20)*(r21*r21))));
j4eval[0]=x6250;
j4eval[1]=IKsign(x6250);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6252=(cj2*sj1);
IkReal x6253=(gconst115*r21);
IkReal x6254=(cj1*sj2);
IkReal x6255=((1.0)*gconst116*r20);
CheckValue<IkReal> x6256 = IKatan2WithCheck(IkReal((((r22*x6252))+((r22*x6254)))),IkReal(((((-1.0)*x6252*x6255))+(((-1.0)*x6254*x6255))+((x6252*x6253))+((x6253*x6254)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6256.valid){
continue;
}
CheckValue<IkReal> x6257=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6253*x6253)))+(((-1.0)*(r22*r22)))+(((2.0)*gconst116*r20*x6253))+(((-1.0)*gconst116*r20*x6255)))),-1);
if(!x6257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6256.value)+(((1.5707963267949)*(x6257.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6258=IKsin(j4);
IkReal x6259=IKcos(j4);
IkReal x6260=(sj1*sj2);
IkReal x6261=((1.0)*x6259);
IkReal x6262=((1.0)*cj1*cj2);
IkReal x6263=(gconst115*x6258);
IkReal x6264=(gconst115*x6259);
IkReal x6265=((1.0)*gconst116*x6258);
evalcond[0]=(((r21*x6263))+(((-1.0)*r22*x6261))+(((-1.0)*r20*x6265)));
evalcond[1]=(cj0+(((-1.0)*r10*x6265))+(((-1.0)*r12*x6261))+((r11*x6263)));
evalcond[2]=(((r01*x6263))+(((-1.0)*sj0))+(((-1.0)*r02*x6261))+(((-1.0)*r00*x6265)));
evalcond[3]=(((cj2*sj1))+((r22*x6258))+((cj1*sj2))+((r21*x6264))+(((-1.0)*gconst116*r20*x6261)));
evalcond[4]=(((r01*x6264))+(((-1.0)*gconst116*r00*x6261))+(((-1.0)*cj0*x6262))+((r02*x6258))+((cj0*x6260)));
evalcond[5]=((((-1.0)*gconst116*r10*x6261))+((sj0*x6260))+(((-1.0)*sj0*x6262))+((r12*x6258))+((r11*x6264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6266=((1.0)*gconst116);
CheckValue<IkReal> x6267 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6266))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6267.valid){
continue;
}
CheckValue<IkReal> x6268=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x6266)))),-1);
if(!x6268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6267.value)+(((1.5707963267949)*(x6268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6269=IKsin(j4);
IkReal x6270=IKcos(j4);
IkReal x6271=(sj1*sj2);
IkReal x6272=((1.0)*x6270);
IkReal x6273=((1.0)*cj1*cj2);
IkReal x6274=(gconst115*x6269);
IkReal x6275=(gconst115*x6270);
IkReal x6276=((1.0)*gconst116*x6269);
evalcond[0]=((((-1.0)*r20*x6276))+((r21*x6274))+(((-1.0)*r22*x6272)));
evalcond[1]=((((-1.0)*r10*x6276))+cj0+(((-1.0)*r12*x6272))+((r11*x6274)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6274))+(((-1.0)*r02*x6272))+(((-1.0)*r00*x6276)));
evalcond[3]=(((cj2*sj1))+((r22*x6269))+((cj1*sj2))+((r21*x6275))+(((-1.0)*gconst116*r20*x6272)));
evalcond[4]=(((r01*x6275))+(((-1.0)*gconst116*r00*x6272))+((r02*x6269))+(((-1.0)*cj0*x6273))+((cj0*x6271)));
evalcond[5]=((((-1.0)*sj0*x6273))+(((-1.0)*gconst116*r10*x6272))+((sj0*x6271))+((r12*x6269))+((r11*x6275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6277=((1.0)*gconst116);
CheckValue<IkReal> x6278 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x6277)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6278.valid){
continue;
}
CheckValue<IkReal> x6279=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6277))+(((-1.0)*gconst115*r00)))),-1);
if(!x6279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6278.value)+(((1.5707963267949)*(x6279.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6280=IKsin(j4);
IkReal x6281=IKcos(j4);
IkReal x6282=(sj1*sj2);
IkReal x6283=((1.0)*x6281);
IkReal x6284=((1.0)*cj1*cj2);
IkReal x6285=(gconst115*x6280);
IkReal x6286=(gconst115*x6281);
IkReal x6287=((1.0)*gconst116*x6280);
evalcond[0]=((((-1.0)*r20*x6287))+(((-1.0)*r22*x6283))+((r21*x6285)));
evalcond[1]=(cj0+(((-1.0)*r10*x6287))+((r11*x6285))+(((-1.0)*r12*x6283)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6283))+(((-1.0)*r00*x6287))+((r01*x6285)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x6283))+((r22*x6280))+((cj1*sj2))+((r21*x6286)));
evalcond[4]=((((-1.0)*gconst116*r00*x6283))+((cj0*x6282))+(((-1.0)*cj0*x6284))+((r02*x6280))+((r01*x6286)));
evalcond[5]=(((r12*x6280))+(((-1.0)*gconst116*r10*x6283))+((r11*x6286))+((sj0*x6282))+(((-1.0)*sj0*x6284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6288=((-1.0)*r21);
IkReal x6290 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6290)==0){
continue;
}
IkReal x6289=pow(x6290,-0.5);
CheckValue<IkReal> x6291 = IKatan2WithCheck(IkReal(x6288),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6291.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6291.value))));
IkReal gconst118=(x6288*x6289);
IkReal gconst119=((1.0)*r20*x6289);
CheckValue<IkReal> x6292 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6292.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6292.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6293=((-1.0)*r21);
CheckValue<IkReal> x6296 = IKatan2WithCheck(IkReal(x6293),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6296.valid){
continue;
}
IkReal x6294=((1.0)*(x6296.value));
IkReal x6295=x6289;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6294)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6294)));
IkReal gconst118=(x6293*x6295);
IkReal gconst119=((1.0)*r20*x6295);
IkReal x6297=r22*r22;
IkReal x6298=((1.0)*x6297);
CheckValue<IkReal> x6302=IKPowWithIntegerCheck(((-1.0)+x6297),-1);
if(!x6302.valid){
continue;
}
IkReal x6299=x6302.value;
if((((1.0)+(((-1.0)*x6298)))) < -0.00001)
continue;
IkReal x6300=IKsqrt(((1.0)+(((-1.0)*x6298))));
IkReal x6301=(cj0*x6299*x6300);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x6301+(((-1.0)*x6298*x6301))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6303=((-1.0)*r21);
CheckValue<IkReal> x6306 = IKatan2WithCheck(IkReal(x6303),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6306.valid){
continue;
}
IkReal x6304=((1.0)*(x6306.value));
IkReal x6305=x6289;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6304)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6304)));
IkReal gconst118=(x6303*x6305);
IkReal gconst119=((1.0)*r20*x6305);
IkReal x6307=r22*r22;
IkReal x6308=((1.0)*x6307);
CheckValue<IkReal> x6312=IKPowWithIntegerCheck(((-1.0)+x6307),-1);
if(!x6312.valid){
continue;
}
IkReal x6309=x6312.value;
if((((1.0)+(((-1.0)*x6308)))) < -0.00001)
continue;
IkReal x6310=IKsqrt(((1.0)+(((-1.0)*x6308))));
IkReal x6311=(sj0*x6309*x6310);
j4eval[0]=((IKabs((x6311+(((-1.0)*x6308*x6311)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6313=((-1.0)*r21);
CheckValue<IkReal> x6316 = IKatan2WithCheck(IkReal(x6313),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6316.valid){
continue;
}
IkReal x6314=((1.0)*(x6316.value));
IkReal x6315=x6289;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6314)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6314)));
IkReal gconst118=(x6313*x6315);
IkReal gconst119=((1.0)*r20*x6315);
IkReal x6317=r22*r22;
IkReal x6318=(r12*sj0);
IkReal x6319=(cj0*r02);
CheckValue<IkReal> x6323=IKPowWithIntegerCheck(((-1.0)+x6317),-1);
if(!x6323.valid){
continue;
}
IkReal x6320=x6323.value;
if((((1.0)+(((-1.0)*x6317)))) < -0.00001)
continue;
IkReal x6321=IKsqrt(((1.0)+(((-1.0)*x6317))));
IkReal x6322=(r22*x6320*x6321);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x6318*x6322))+((x6319*x6322)))))+(IKabs(((((-1.0)*x6318))+(((-1.0)*x6319))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6324=((1.0)*sj0);
IkReal x6325=((1.0)*gconst118);
CheckValue<IkReal> x6326 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6324)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x6325))+(((-1.0)*gconst118*r11*x6324))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6326.valid){
continue;
}
CheckValue<IkReal> x6327=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6325)))),-1);
if(!x6327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6326.value)+(((1.5707963267949)*(x6327.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6328=IKsin(j4);
IkReal x6329=IKcos(j4);
IkReal x6330=(gconst118*r01);
IkReal x6331=(sj1*sj2);
IkReal x6332=(gconst119*r20);
IkReal x6333=(gconst119*r10);
IkReal x6334=(gconst119*r00);
IkReal x6335=(gconst118*r21);
IkReal x6336=(gconst118*r11);
IkReal x6337=((1.0)*x6329);
IkReal x6338=((1.0)*cj1*cj2);
IkReal x6339=((1.0)*x6328);
evalcond[0]=((((-1.0)*r22*x6337))+((x6328*x6335))+(((-1.0)*x6332*x6339)));
evalcond[1]=((((-1.0)*r12*x6337))+(((-1.0)*x6333*x6339))+cj0+((x6328*x6336)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6334*x6339))+(((-1.0)*r02*x6337))+((x6328*x6330)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6329*x6335))+((r22*x6328))+(((-1.0)*x6332*x6337)));
evalcond[4]=(((r02*x6328))+(((-1.0)*cj0*x6338))+(((-1.0)*x6334*x6337))+((x6329*x6330))+((cj0*x6331)));
evalcond[5]=((((-1.0)*x6333*x6337))+((sj0*x6331))+((r12*x6328))+((x6329*x6336))+(((-1.0)*sj0*x6338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6340=((1.0)*gconst119);
CheckValue<IkReal> x6341 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r21*sj0))+(((-1.0)*r20*sj0*x6340)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6341.valid){
continue;
}
CheckValue<IkReal> x6342=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6340))+(((-1.0)*gconst118*r10)))),-1);
if(!x6342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6341.value)+(((1.5707963267949)*(x6342.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6343=IKsin(j4);
IkReal x6344=IKcos(j4);
IkReal x6345=(gconst118*r01);
IkReal x6346=(sj1*sj2);
IkReal x6347=(gconst119*r20);
IkReal x6348=(gconst119*r10);
IkReal x6349=(gconst119*r00);
IkReal x6350=(gconst118*r21);
IkReal x6351=(gconst118*r11);
IkReal x6352=((1.0)*x6344);
IkReal x6353=((1.0)*cj1*cj2);
IkReal x6354=((1.0)*x6343);
evalcond[0]=((((-1.0)*x6347*x6354))+((x6343*x6350))+(((-1.0)*r22*x6352)));
evalcond[1]=(cj0+((x6343*x6351))+(((-1.0)*r12*x6352))+(((-1.0)*x6348*x6354)));
evalcond[2]=((((-1.0)*x6349*x6354))+(((-1.0)*sj0))+(((-1.0)*r02*x6352))+((x6343*x6345)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6347*x6352))+((r22*x6343))+((cj1*sj2))+((x6344*x6350)));
evalcond[4]=(((x6344*x6345))+(((-1.0)*x6349*x6352))+(((-1.0)*cj0*x6353))+((cj0*x6346))+((r02*x6343)));
evalcond[5]=(((sj0*x6346))+((r12*x6343))+(((-1.0)*sj0*x6353))+((x6344*x6351))+(((-1.0)*x6348*x6352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6355=((1.0)*gconst119);
CheckValue<IkReal> x6356=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6355))+(((-1.0)*gconst118*r00)))),-1);
if(!x6356.valid){
continue;
}
CheckValue<IkReal> x6357 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6355))+((cj0*gconst118*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6356.value)))+(x6357.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6358=IKsin(j4);
IkReal x6359=IKcos(j4);
IkReal x6360=(gconst118*r01);
IkReal x6361=(sj1*sj2);
IkReal x6362=(gconst119*r20);
IkReal x6363=(gconst119*r10);
IkReal x6364=(gconst119*r00);
IkReal x6365=(gconst118*r21);
IkReal x6366=(gconst118*r11);
IkReal x6367=((1.0)*x6359);
IkReal x6368=((1.0)*cj1*cj2);
IkReal x6369=((1.0)*x6358);
evalcond[0]=((((-1.0)*x6362*x6369))+((x6358*x6365))+(((-1.0)*r22*x6367)));
evalcond[1]=(((x6358*x6366))+cj0+(((-1.0)*r12*x6367))+(((-1.0)*x6363*x6369)));
evalcond[2]=((((-1.0)*sj0))+((x6358*x6360))+(((-1.0)*r02*x6367))+(((-1.0)*x6364*x6369)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6362*x6367))+((x6359*x6365))+((cj1*sj2))+((r22*x6358)));
evalcond[4]=(((x6359*x6360))+((cj0*x6361))+((r02*x6358))+(((-1.0)*x6364*x6367))+(((-1.0)*cj0*x6368)));
evalcond[5]=(((x6359*x6366))+(((-1.0)*sj0*x6368))+((sj0*x6361))+((r12*x6358))+(((-1.0)*x6363*x6367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6370=((-1.0)*r10);
IkReal x6372 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6372)==0){
continue;
}
IkReal x6371=pow(x6372,-0.5);
CheckValue<IkReal> x6373 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6370),IKFAST_ATAN2_MAGTHRESH);
if(!x6373.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6373.value));
IkReal gconst121=(r11*x6371);
IkReal gconst122=(x6370*x6371);
CheckValue<IkReal> x6374 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6374.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6374.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6375=((-1.0)*r10);
IkReal x6376=x6371;
CheckValue<IkReal> x6378 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6375),IKFAST_ATAN2_MAGTHRESH);
if(!x6378.valid){
continue;
}
IkReal x6377=((-1.0)*(x6378.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6377;
IkReal gconst120=x6377;
IkReal gconst121=(r11*x6376);
IkReal gconst122=(x6375*x6376);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6379=((1.0)*sj0);
IkReal x6380=((1.0)*gconst121);
CheckValue<IkReal> x6381=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6380))+(((-1.0)*gconst122*r21)))),-1);
if(!x6381.valid){
continue;
}
CheckValue<IkReal> x6382 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6379)))),IkReal(((((-1.0)*cj0*r01*x6380))+((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x6379))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6381.value)))+(x6382.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6383=IKsin(j4);
IkReal x6384=IKcos(j4);
IkReal x6385=(gconst121*r11);
IkReal x6386=(sj1*sj2);
IkReal x6387=(gconst122*r00);
IkReal x6388=(gconst122*r10);
IkReal x6389=(gconst122*r20);
IkReal x6390=((1.0)*x6384);
IkReal x6391=((1.0)*cj1*cj2);
IkReal x6392=((1.0)*x6383);
IkReal x6393=(gconst121*x6383);
IkReal x6394=(gconst121*x6384);
evalcond[0]=((((-1.0)*r22*x6390))+((r21*x6393))+(((-1.0)*x6389*x6392)));
evalcond[1]=(cj0+(((-1.0)*x6388*x6392))+((x6383*x6385))+(((-1.0)*r12*x6390)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6387*x6392))+((r01*x6393))+(((-1.0)*r02*x6390)));
evalcond[3]=(((cj2*sj1))+((r22*x6383))+((cj1*sj2))+((r21*x6394))+(((-1.0)*x6389*x6390)));
evalcond[4]=(((cj0*x6386))+(((-1.0)*x6387*x6390))+(((-1.0)*cj0*x6391))+((r02*x6383))+((r01*x6394)));
evalcond[5]=((((-1.0)*sj0*x6391))+((sj0*x6386))+(((-1.0)*x6388*x6390))+((x6384*x6385))+((r12*x6383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6395=((1.0)*gconst122);
CheckValue<IkReal> x6396 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6395))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6396.valid){
continue;
}
CheckValue<IkReal> x6397=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x6395)))),-1);
if(!x6397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6396.value)+(((1.5707963267949)*(x6397.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6398=IKsin(j4);
IkReal x6399=IKcos(j4);
IkReal x6400=(gconst121*r11);
IkReal x6401=(sj1*sj2);
IkReal x6402=(gconst122*r00);
IkReal x6403=(gconst122*r10);
IkReal x6404=(gconst122*r20);
IkReal x6405=((1.0)*x6399);
IkReal x6406=((1.0)*cj1*cj2);
IkReal x6407=((1.0)*x6398);
IkReal x6408=(gconst121*x6398);
IkReal x6409=(gconst121*x6399);
evalcond[0]=(((r21*x6408))+(((-1.0)*r22*x6405))+(((-1.0)*x6404*x6407)));
evalcond[1]=((((-1.0)*x6403*x6407))+cj0+((x6398*x6400))+(((-1.0)*r12*x6405)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6402*x6407))+((r01*x6408))+(((-1.0)*r02*x6405)));
evalcond[3]=(((cj2*sj1))+((r21*x6409))+((cj1*sj2))+(((-1.0)*x6404*x6405))+((r22*x6398)));
evalcond[4]=((((-1.0)*x6402*x6405))+((r01*x6409))+((cj0*x6401))+(((-1.0)*cj0*x6406))+((r02*x6398)));
evalcond[5]=((((-1.0)*x6403*x6405))+((sj0*x6401))+((r12*x6398))+((x6399*x6400))+(((-1.0)*sj0*x6406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6410=((-1.0)*r11);
IkReal x6412 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6412)==0){
continue;
}
IkReal x6411=pow(x6412,-0.5);
CheckValue<IkReal> x6413 = IKatan2WithCheck(IkReal(x6410),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6413.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6413.value))));
IkReal gconst124=(x6410*x6411);
IkReal gconst125=((1.0)*r10*x6411);
CheckValue<IkReal> x6414 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6414.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6414.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6415=((-1.0)*r11);
CheckValue<IkReal> x6418 = IKatan2WithCheck(IkReal(x6415),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6418.valid){
continue;
}
IkReal x6416=((1.0)*(x6418.value));
IkReal x6417=x6411;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6416)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6416)));
IkReal gconst124=(x6415*x6417);
IkReal gconst125=((1.0)*r10*x6417);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6419=((-1.0)*r11);
CheckValue<IkReal> x6422 = IKatan2WithCheck(IkReal(x6419),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6422.valid){
continue;
}
IkReal x6420=((1.0)*(x6422.value));
IkReal x6421=x6411;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6420)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6420)));
IkReal gconst124=(x6419*x6421);
IkReal gconst125=((1.0)*r10*x6421);
IkReal x6423=r12*r12;
IkReal x6424=((1.0)*sj0);
IkReal x6425=(cj0*r02);
IkReal x6426=x6411;
j4eval[0]=((IKabs(((((-1.0)*x6425))+(((-1.0)*r12*x6424)))))+(IKabs(((((-1.0)*x6424*x6426))+((sj0*x6423*x6426))+((r12*x6425*x6426))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6427=((-1.0)*r11);
CheckValue<IkReal> x6430 = IKatan2WithCheck(IkReal(x6427),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6430.valid){
continue;
}
IkReal x6428=((1.0)*(x6430.value));
IkReal x6429=x6411;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6428)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6428)));
IkReal gconst124=(x6427*x6429);
IkReal gconst125=((1.0)*r10*x6429);
IkReal x6431=r12*r12;
IkReal x6432=((1.0)+(((-1.0)*x6431)));
IkReal x6433=(cj2*r22*sj1);
IkReal x6434=(cj1*r22*sj2);
CheckValue<IkReal> x6441=IKPowWithIntegerCheck(x6432,-1);
if(!x6441.valid){
continue;
}
IkReal x6435=x6441.value;
CheckValue<IkReal> x6442=IKPowWithIntegerCheck(((-1.0)+x6431),-1);
if(!x6442.valid){
continue;
}
IkReal x6436=x6442.value;
IkReal x6437=((1.0)*x6435);
if((x6432) < -0.00001)
continue;
IkReal x6438=IKsqrt(x6432);
IkReal x6439=((1.0)*r12*x6436*x6438);
IkReal x6440=((((-2.0)*r10*r11*r20*r21*x6435))+(((-1.0)*x6437*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x6437*(r11*r11)*(r21*r21))));
j4eval[0]=x6440;
j4eval[1]=IKsign(x6440);
j4eval[2]=((IKabs(((((-1.0)*x6434*x6439))+(((-1.0)*x6433*x6439)))))+(IKabs((x6434+x6433))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6443=(gconst124*r21);
IkReal x6444=(cj1*sj2);
IkReal x6445=(cj2*sj1);
IkReal x6446=(gconst125*r20);
CheckValue<IkReal> x6447=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6443*x6443)))+(((-1.0)*(r22*r22)))+(((2.0)*x6443*x6446))+(((-1.0)*(x6446*x6446))))),-1);
if(!x6447.valid){
continue;
}
CheckValue<IkReal> x6448 = IKatan2WithCheck(IkReal((((r22*x6444))+((r22*x6445)))),IkReal((((x6443*x6445))+((x6443*x6444))+(((-1.0)*x6445*x6446))+(((-1.0)*x6444*x6446)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6447.value)))+(x6448.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6449=IKsin(j4);
IkReal x6450=IKcos(j4);
IkReal x6451=(sj1*sj2);
IkReal x6452=(gconst125*r20);
IkReal x6453=(gconst124*r01);
IkReal x6454=(gconst125*r00);
IkReal x6455=(gconst125*r10);
IkReal x6456=((1.0)*x6450);
IkReal x6457=((1.0)*cj1*cj2);
IkReal x6458=((1.0)*x6449);
IkReal x6459=(gconst124*x6449);
IkReal x6460=(gconst124*x6450);
evalcond[0]=((((-1.0)*x6452*x6458))+((r21*x6459))+(((-1.0)*r22*x6456)));
evalcond[1]=(cj0+((r11*x6459))+(((-1.0)*r12*x6456))+(((-1.0)*x6455*x6458)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6456))+((x6449*x6453))+(((-1.0)*x6454*x6458)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6452*x6456))+((r21*x6460))+((cj1*sj2))+((r22*x6449)));
evalcond[4]=(((cj0*x6451))+((x6450*x6453))+(((-1.0)*cj0*x6457))+(((-1.0)*x6454*x6456))+((r02*x6449)));
evalcond[5]=(((r12*x6449))+(((-1.0)*sj0*x6457))+((sj0*x6451))+(((-1.0)*x6455*x6456))+((r11*x6460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6461=((1.0)*sj0);
IkReal x6462=((1.0)*cj0);
CheckValue<IkReal> x6463=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6463.valid){
continue;
}
CheckValue<IkReal> x6464 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6462))+(((-1.0)*r12*x6461)))),IkReal((((gconst125*r10*sj0))+((cj0*gconst125*r00))+(((-1.0)*gconst124*r01*x6462))+(((-1.0)*gconst124*r11*x6461)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6463.value)))+(x6464.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6465=IKsin(j4);
IkReal x6466=IKcos(j4);
IkReal x6467=(sj1*sj2);
IkReal x6468=(gconst125*r20);
IkReal x6469=(gconst124*r01);
IkReal x6470=(gconst125*r00);
IkReal x6471=(gconst125*r10);
IkReal x6472=((1.0)*x6466);
IkReal x6473=((1.0)*cj1*cj2);
IkReal x6474=((1.0)*x6465);
IkReal x6475=(gconst124*x6465);
IkReal x6476=(gconst124*x6466);
evalcond[0]=((((-1.0)*r22*x6472))+(((-1.0)*x6468*x6474))+((r21*x6475)));
evalcond[1]=((((-1.0)*r12*x6472))+cj0+((r11*x6475))+(((-1.0)*x6471*x6474)));
evalcond[2]=((((-1.0)*sj0))+((x6465*x6469))+(((-1.0)*x6470*x6474))+(((-1.0)*r02*x6472)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6468*x6472))+((r22*x6465))+((r21*x6476)));
evalcond[4]=((((-1.0)*cj0*x6473))+((x6466*x6469))+((cj0*x6467))+(((-1.0)*x6470*x6472))+((r02*x6465)));
evalcond[5]=(((sj0*x6467))+(((-1.0)*sj0*x6473))+((r11*x6476))+(((-1.0)*x6471*x6472))+((r12*x6465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6477=((1.0)*gconst125);
CheckValue<IkReal> x6478 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6477))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6478.valid){
continue;
}
CheckValue<IkReal> x6479=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x6477)))),-1);
if(!x6479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6478.value)+(((1.5707963267949)*(x6479.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6480=IKsin(j4);
IkReal x6481=IKcos(j4);
IkReal x6482=(sj1*sj2);
IkReal x6483=(gconst125*r20);
IkReal x6484=(gconst124*r01);
IkReal x6485=(gconst125*r00);
IkReal x6486=(gconst125*r10);
IkReal x6487=((1.0)*x6481);
IkReal x6488=((1.0)*cj1*cj2);
IkReal x6489=((1.0)*x6480);
IkReal x6490=(gconst124*x6480);
IkReal x6491=(gconst124*x6481);
evalcond[0]=((((-1.0)*r22*x6487))+(((-1.0)*x6483*x6489))+((r21*x6490)));
evalcond[1]=(cj0+(((-1.0)*r12*x6487))+((r11*x6490))+(((-1.0)*x6486*x6489)));
evalcond[2]=((((-1.0)*x6485*x6489))+(((-1.0)*sj0))+(((-1.0)*r02*x6487))+((x6480*x6484)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6483*x6487))+((r22*x6480))+((r21*x6491)));
evalcond[4]=((((-1.0)*x6485*x6487))+((cj0*x6482))+((r02*x6480))+(((-1.0)*cj0*x6488))+((x6481*x6484)));
evalcond[5]=(((r11*x6491))+(((-1.0)*x6486*x6487))+((r12*x6480))+(((-1.0)*sj0*x6488))+((sj0*x6482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6492=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6492;
j4eval[1]=IKsign(x6492);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6493=((1.0)*cj5);
IkReal x6494=((((-1.0)*r01*x6493))+(((-1.0)*r00*sj5)));
j4eval[0]=x6494;
j4eval[1]=((IKabs(((((-1.0)*r20*x6493))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6494);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6495=cj5*cj5;
IkReal x6496=r11*r11;
IkReal x6497=(cj5*r10);
IkReal x6498=(r11*sj5);
IkReal x6499=((((-1.0)*x6496))+((x6495*x6496))+(((-1.0)*x6495*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x6497*x6498)));
j4eval[0]=x6499;
j4eval[1]=IKsign(x6499);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x6497))+x6498))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6500=cj5*cj5;
IkReal x6501=r11*r11;
IkReal x6502=(cj5*r10);
IkReal x6503=(r11*sj5);
CheckValue<IkReal> x6504 = IKatan2WithCheck(IkReal(((((-1.0)*x6502))+x6503)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6504.valid){
continue;
}
CheckValue<IkReal> x6505=IKPowWithIntegerCheck(IKsign((((x6500*x6501))+(((-1.0)*x6501))+(((2.0)*x6502*x6503))+(((-1.0)*(r12*r12)))+(((-1.0)*x6500*(r10*r10))))),-1);
if(!x6505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6504.value)+(((1.5707963267949)*(x6505.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6506=IKcos(j4);
IkReal x6507=IKsin(j4);
IkReal x6508=(cj5*r00);
IkReal x6509=(cj5*r10);
IkReal x6510=(r21*sj5);
IkReal x6511=(cj5*r20);
IkReal x6512=((1.0)*x6506);
IkReal x6513=((1.0)*x6507);
IkReal x6514=(sj5*x6507);
IkReal x6515=(sj5*x6506);
evalcond[0]=(((r12*x6507))+((r11*x6515))+(((-1.0)*x6509*x6512)));
evalcond[1]=((((-1.0)*r22*x6512))+((x6507*x6510))+(((-1.0)*x6511*x6513)));
evalcond[2]=((((-1.0)*r02*x6512))+((r01*x6514))+(((-1.0)*x6508*x6513)));
evalcond[3]=((1.0)+((r11*x6514))+(((-1.0)*r12*x6512))+(((-1.0)*x6509*x6513)));
evalcond[4]=(((cj2*sj1))+((x6506*x6510))+((cj1*sj2))+((r22*x6507))+(((-1.0)*x6511*x6512)));
evalcond[5]=(((r02*x6507))+((r01*x6515))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6508*x6512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6516=((1.0)*cj5);
CheckValue<IkReal> x6517 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6516)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6517.valid){
continue;
}
CheckValue<IkReal> x6518=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6516)))),-1);
if(!x6518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6517.value)+(((1.5707963267949)*(x6518.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6519=IKcos(j4);
IkReal x6520=IKsin(j4);
IkReal x6521=(cj5*r00);
IkReal x6522=(cj5*r10);
IkReal x6523=(r21*sj5);
IkReal x6524=(cj5*r20);
IkReal x6525=((1.0)*x6519);
IkReal x6526=((1.0)*x6520);
IkReal x6527=(sj5*x6520);
IkReal x6528=(sj5*x6519);
evalcond[0]=((((-1.0)*x6522*x6525))+((r12*x6520))+((r11*x6528)));
evalcond[1]=(((x6520*x6523))+(((-1.0)*r22*x6525))+(((-1.0)*x6524*x6526)));
evalcond[2]=((((-1.0)*x6521*x6526))+(((-1.0)*r02*x6525))+((r01*x6527)));
evalcond[3]=((1.0)+(((-1.0)*x6522*x6526))+(((-1.0)*r12*x6525))+((r11*x6527)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6524*x6525))+((r22*x6520))+((x6519*x6523)));
evalcond[5]=((((-1.0)*x6521*x6525))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6520))+((r01*x6528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6529=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6529.valid){
continue;
}
CheckValue<IkReal> x6530 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6529.value)))+(x6530.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6531=IKcos(j4);
IkReal x6532=IKsin(j4);
IkReal x6533=(cj5*r00);
IkReal x6534=(cj5*r10);
IkReal x6535=(r21*sj5);
IkReal x6536=(cj5*r20);
IkReal x6537=((1.0)*x6531);
IkReal x6538=((1.0)*x6532);
IkReal x6539=(sj5*x6532);
IkReal x6540=(sj5*x6531);
evalcond[0]=((((-1.0)*x6534*x6537))+((r11*x6540))+((r12*x6532)));
evalcond[1]=((((-1.0)*x6536*x6538))+(((-1.0)*r22*x6537))+((x6532*x6535)));
evalcond[2]=((((-1.0)*r02*x6537))+(((-1.0)*x6533*x6538))+((r01*x6539)));
evalcond[3]=((1.0)+(((-1.0)*x6534*x6538))+(((-1.0)*r12*x6537))+((r11*x6539)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6536*x6537))+((r22*x6532))+((x6531*x6535)));
evalcond[5]=(((r02*x6532))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6533*x6537))+((r01*x6540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6541=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6541;
j4eval[1]=IKsign(x6541);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6542=((1.0)*cj5);
IkReal x6543=((((-1.0)*r21*x6542))+(((-1.0)*r20*sj5)));
j4eval[0]=x6543;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x6542))+((r01*sj5))))));
j4eval[2]=IKsign(x6543);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6544=cj5*cj5;
IkReal x6545=r11*r11;
IkReal x6546=(r11*sj5);
IkReal x6547=(cj5*r10);
IkReal x6548=((r12*r12)+((x6544*(r10*r10)))+x6545+(((-1.0)*x6544*x6545))+(((-2.0)*x6546*x6547)));
j4eval[0]=x6548;
j4eval[1]=IKsign(x6548);
j4eval[2]=((IKabs(r12))+(IKabs((x6546+(((-1.0)*x6547))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6549=cj5*cj5;
IkReal x6550=r11*r11;
IkReal x6551=(cj5*r10);
IkReal x6552=(r11*sj5);
CheckValue<IkReal> x6553=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x6551*x6552))+(((-1.0)*x6549*x6550))+((x6549*(r10*r10)))+x6550)),-1);
if(!x6553.valid){
continue;
}
CheckValue<IkReal> x6554 = IKatan2WithCheck(IkReal((x6552+(((-1.0)*x6551)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6553.value)))+(x6554.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6555=IKcos(j4);
IkReal x6556=IKsin(j4);
IkReal x6557=(cj5*r00);
IkReal x6558=(cj5*r10);
IkReal x6559=(r21*sj5);
IkReal x6560=(cj5*r20);
IkReal x6561=((1.0)*x6555);
IkReal x6562=((1.0)*x6556);
IkReal x6563=(sj5*x6556);
IkReal x6564=(sj5*x6555);
evalcond[0]=(((r11*x6564))+((r12*x6556))+(((-1.0)*x6558*x6561)));
evalcond[1]=((((-1.0)*r22*x6561))+((x6556*x6559))+(((-1.0)*x6560*x6562)));
evalcond[2]=((((-1.0)*x6557*x6562))+(((-1.0)*r02*x6561))+((r01*x6563)));
evalcond[3]=((-1.0)+((r11*x6563))+(((-1.0)*x6558*x6562))+(((-1.0)*r12*x6561)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6556))+(((-1.0)*x6560*x6561))+((x6555*x6559)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x6556))+(((-1.0)*x6557*x6561))+((cj1*cj2))+((r01*x6564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6565=((1.0)*cj5);
CheckValue<IkReal> x6566 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x6565)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6566.valid){
continue;
}
CheckValue<IkReal> x6567=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6565))+(((-1.0)*r20*sj5)))),-1);
if(!x6567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6566.value)+(((1.5707963267949)*(x6567.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6568=IKcos(j4);
IkReal x6569=IKsin(j4);
IkReal x6570=(cj5*r00);
IkReal x6571=(cj5*r10);
IkReal x6572=(r21*sj5);
IkReal x6573=(cj5*r20);
IkReal x6574=((1.0)*x6568);
IkReal x6575=((1.0)*x6569);
IkReal x6576=(sj5*x6569);
IkReal x6577=(sj5*x6568);
evalcond[0]=((((-1.0)*x6571*x6574))+((r12*x6569))+((r11*x6577)));
evalcond[1]=((((-1.0)*x6573*x6575))+(((-1.0)*r22*x6574))+((x6569*x6572)));
evalcond[2]=(((r01*x6576))+(((-1.0)*r02*x6574))+(((-1.0)*x6570*x6575)));
evalcond[3]=((-1.0)+(((-1.0)*x6571*x6575))+((r11*x6576))+(((-1.0)*r12*x6574)));
evalcond[4]=(((cj2*sj1))+((r22*x6569))+(((-1.0)*x6573*x6574))+((x6568*x6572))+((cj1*sj2)));
evalcond[5]=(((r01*x6577))+(((-1.0)*sj1*sj2))+((r02*x6569))+((cj1*cj2))+(((-1.0)*x6570*x6574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6578 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6578.valid){
continue;
}
CheckValue<IkReal> x6579=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6578.value)+(((1.5707963267949)*(x6579.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6580=IKcos(j4);
IkReal x6581=IKsin(j4);
IkReal x6582=(cj5*r00);
IkReal x6583=(cj5*r10);
IkReal x6584=(r21*sj5);
IkReal x6585=(cj5*r20);
IkReal x6586=((1.0)*x6580);
IkReal x6587=((1.0)*x6581);
IkReal x6588=(sj5*x6581);
IkReal x6589=(sj5*x6580);
evalcond[0]=(((r11*x6589))+(((-1.0)*x6583*x6586))+((r12*x6581)));
evalcond[1]=(((x6581*x6584))+(((-1.0)*r22*x6586))+(((-1.0)*x6585*x6587)));
evalcond[2]=((((-1.0)*r02*x6586))+((r01*x6588))+(((-1.0)*x6582*x6587)));
evalcond[3]=((-1.0)+((r11*x6588))+(((-1.0)*r12*x6586))+(((-1.0)*x6583*x6587)));
evalcond[4]=(((cj2*sj1))+((r22*x6581))+((cj1*sj2))+((x6580*x6584))+(((-1.0)*x6585*x6586)));
evalcond[5]=(((r02*x6581))+(((-1.0)*sj1*sj2))+((r01*x6589))+(((-1.0)*x6582*x6586))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6590=((-1.0)*r00);
IkReal x6592 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6592)==0){
continue;
}
IkReal x6591=pow(x6592,-0.5);
CheckValue<IkReal> x6593 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6590),IKFAST_ATAN2_MAGTHRESH);
if(!x6593.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6593.value));
IkReal gconst127=(r01*x6591);
IkReal gconst128=(x6590*x6591);
CheckValue<IkReal> x6594 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6594.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6594.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6595=((-1.0)*r00);
IkReal x6596=x6591;
CheckValue<IkReal> x6598 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6595),IKFAST_ATAN2_MAGTHRESH);
if(!x6598.valid){
continue;
}
IkReal x6597=((-1.0)*(x6598.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6597;
IkReal gconst126=x6597;
IkReal gconst127=(r01*x6596);
IkReal gconst128=(x6595*x6596);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6599=((1.0)*sj0);
IkReal x6600=((1.0)*gconst127);
CheckValue<IkReal> x6601=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6600)))),-1);
if(!x6601.valid){
continue;
}
CheckValue<IkReal> x6602 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6599))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst127*r11*x6599))+((gconst128*r10*sj0))+((cj0*gconst128*r00))+(((-1.0)*cj0*r01*x6600)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6601.value)))+(x6602.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6603=IKsin(j4);
IkReal x6604=IKcos(j4);
IkReal x6605=(gconst127*r01);
IkReal x6606=(sj1*sj2);
IkReal x6607=(gconst128*r10);
IkReal x6608=(gconst128*r00);
IkReal x6609=(gconst128*r20);
IkReal x6610=((1.0)*x6604);
IkReal x6611=((1.0)*cj1*cj2);
IkReal x6612=((1.0)*x6603);
IkReal x6613=(gconst127*x6604);
IkReal x6614=(gconst127*x6603);
evalcond[0]=(((r21*x6614))+(((-1.0)*r22*x6610))+(((-1.0)*x6609*x6612)));
evalcond[1]=((((-1.0)*r12*x6610))+(((-1.0)*x6607*x6612))+cj0+((r11*x6614)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6608*x6612))+(((-1.0)*r02*x6610))+((x6603*x6605)));
evalcond[3]=(((cj2*sj1))+((r21*x6613))+((r22*x6603))+((cj1*sj2))+(((-1.0)*x6609*x6610)));
evalcond[4]=((((-1.0)*x6608*x6610))+(((-1.0)*cj0*x6611))+((x6604*x6605))+((r02*x6603))+((cj0*x6606)));
evalcond[5]=((((-1.0)*x6607*x6610))+((sj0*x6606))+((r11*x6613))+(((-1.0)*sj0*x6611))+((r12*x6603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6615=((1.0)*gconst128);
CheckValue<IkReal> x6616 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x6615)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6616.valid){
continue;
}
CheckValue<IkReal> x6617=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6615))+(((-1.0)*gconst127*r10)))),-1);
if(!x6617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6616.value)+(((1.5707963267949)*(x6617.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6618=IKsin(j4);
IkReal x6619=IKcos(j4);
IkReal x6620=(gconst127*r01);
IkReal x6621=(sj1*sj2);
IkReal x6622=(gconst128*r10);
IkReal x6623=(gconst128*r00);
IkReal x6624=(gconst128*r20);
IkReal x6625=((1.0)*x6619);
IkReal x6626=((1.0)*cj1*cj2);
IkReal x6627=((1.0)*x6618);
IkReal x6628=(gconst127*x6619);
IkReal x6629=(gconst127*x6618);
evalcond[0]=((((-1.0)*r22*x6625))+(((-1.0)*x6624*x6627))+((r21*x6629)));
evalcond[1]=((((-1.0)*r12*x6625))+cj0+((r11*x6629))+(((-1.0)*x6622*x6627)));
evalcond[2]=((((-1.0)*sj0))+((x6618*x6620))+(((-1.0)*r02*x6625))+(((-1.0)*x6623*x6627)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6618))+(((-1.0)*x6624*x6625))+((r21*x6628)));
evalcond[4]=(((r02*x6618))+((x6619*x6620))+(((-1.0)*cj0*x6626))+((cj0*x6621))+(((-1.0)*x6623*x6625)));
evalcond[5]=(((r12*x6618))+(((-1.0)*sj0*x6626))+((r11*x6628))+((sj0*x6621))+(((-1.0)*x6622*x6625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6630=((-1.0)*r01);
IkReal x6632 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6632)==0){
continue;
}
IkReal x6631=pow(x6632,-0.5);
CheckValue<IkReal> x6633 = IKatan2WithCheck(IkReal(x6630),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6633.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6633.value))));
IkReal gconst130=(x6630*x6631);
IkReal gconst131=((1.0)*r00*x6631);
CheckValue<IkReal> x6634 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6634.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6634.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6635=((-1.0)*r01);
CheckValue<IkReal> x6638 = IKatan2WithCheck(IkReal(x6635),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6638.valid){
continue;
}
IkReal x6636=((1.0)*(x6638.value));
IkReal x6637=x6631;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6636)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6636)));
IkReal gconst130=(x6635*x6637);
IkReal gconst131=((1.0)*r00*x6637);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6639=((-1.0)*r01);
CheckValue<IkReal> x6642 = IKatan2WithCheck(IkReal(x6639),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6642.valid){
continue;
}
IkReal x6640=((1.0)*(x6642.value));
IkReal x6641=x6631;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6640)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6640)));
IkReal gconst130=(x6639*x6641);
IkReal gconst131=((1.0)*r00*x6641);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6643=((-1.0)*r01);
CheckValue<IkReal> x6646 = IKatan2WithCheck(IkReal(x6643),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6646.valid){
continue;
}
IkReal x6644=((1.0)*(x6646.value));
IkReal x6645=x6631;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6644)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6644)));
IkReal gconst130=(x6643*x6645);
IkReal gconst131=((1.0)*r00*x6645);
IkReal x6647=r02*r02;
IkReal x6648=(r12*sj0);
IkReal x6649=((1.0)*cj0);
IkReal x6650=x6631;
j4eval[0]=((IKabs((((r02*x6648*x6650))+(((-1.0)*x6649*x6650))+((cj0*x6647*x6650)))))+(IKabs(((((-1.0)*x6648))+(((-1.0)*r02*x6649))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6651=((1.0)*sj0);
IkReal x6652=((1.0)*gconst130);
CheckValue<IkReal> x6653 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6651))+(((-1.0)*cj0*r02)))),IkReal((((gconst131*r10*sj0))+(((-1.0)*cj0*r01*x6652))+((cj0*gconst131*r00))+(((-1.0)*gconst130*r11*x6651)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6653.valid){
continue;
}
CheckValue<IkReal> x6654=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6652))+(((-1.0)*gconst131*r21)))),-1);
if(!x6654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6653.value)+(((1.5707963267949)*(x6654.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6655=IKsin(j4);
IkReal x6656=IKcos(j4);
IkReal x6657=(gconst131*r10);
IkReal x6658=(sj1*sj2);
IkReal x6659=(gconst131*r20);
IkReal x6660=(gconst131*r00);
IkReal x6661=((1.0)*x6656);
IkReal x6662=((1.0)*cj1*cj2);
IkReal x6663=(gconst130*x6655);
IkReal x6664=((1.0)*x6655);
IkReal x6665=(gconst130*x6656);
evalcond[0]=((((-1.0)*x6659*x6664))+((r21*x6663))+(((-1.0)*r22*x6661)));
evalcond[1]=(cj0+(((-1.0)*x6657*x6664))+((r11*x6663))+(((-1.0)*r12*x6661)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6660*x6664))+((r01*x6663))+(((-1.0)*r02*x6661)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6659*x6661))+((r21*x6665))+((r22*x6655)));
evalcond[4]=(((r02*x6655))+(((-1.0)*x6660*x6661))+((r01*x6665))+(((-1.0)*cj0*x6662))+((cj0*x6658)));
evalcond[5]=((((-1.0)*x6657*x6661))+((r12*x6655))+(((-1.0)*sj0*x6662))+((r11*x6665))+((sj0*x6658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6666=((1.0)*gconst131);
CheckValue<IkReal> x6667 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6666))+((gconst130*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6667.valid){
continue;
}
CheckValue<IkReal> x6668=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6666))+(((-1.0)*gconst130*r10)))),-1);
if(!x6668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6667.value)+(((1.5707963267949)*(x6668.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6669=IKsin(j4);
IkReal x6670=IKcos(j4);
IkReal x6671=(gconst131*r10);
IkReal x6672=(sj1*sj2);
IkReal x6673=(gconst131*r20);
IkReal x6674=(gconst131*r00);
IkReal x6675=((1.0)*x6670);
IkReal x6676=((1.0)*cj1*cj2);
IkReal x6677=(gconst130*x6669);
IkReal x6678=((1.0)*x6669);
IkReal x6679=(gconst130*x6670);
evalcond[0]=((((-1.0)*x6673*x6678))+(((-1.0)*r22*x6675))+((r21*x6677)));
evalcond[1]=(((r11*x6677))+cj0+(((-1.0)*x6671*x6678))+(((-1.0)*r12*x6675)));
evalcond[2]=((((-1.0)*r02*x6675))+(((-1.0)*sj0))+((r01*x6677))+(((-1.0)*x6674*x6678)));
evalcond[3]=((((-1.0)*x6673*x6675))+((cj2*sj1))+((cj1*sj2))+((r22*x6669))+((r21*x6679)));
evalcond[4]=(((cj0*x6672))+((r02*x6669))+((r01*x6679))+(((-1.0)*x6674*x6675))+(((-1.0)*cj0*x6676)));
evalcond[5]=(((r11*x6679))+(((-1.0)*x6671*x6675))+((r12*x6669))+(((-1.0)*sj0*x6676))+((sj0*x6672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6680=((1.0)*gconst131);
CheckValue<IkReal> x6681 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6680)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6681.valid){
continue;
}
CheckValue<IkReal> x6682=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6680))+(((-1.0)*gconst130*r00)))),-1);
if(!x6682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6681.value)+(((1.5707963267949)*(x6682.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6683=IKsin(j4);
IkReal x6684=IKcos(j4);
IkReal x6685=(gconst131*r10);
IkReal x6686=(sj1*sj2);
IkReal x6687=(gconst131*r20);
IkReal x6688=(gconst131*r00);
IkReal x6689=((1.0)*x6684);
IkReal x6690=((1.0)*cj1*cj2);
IkReal x6691=(gconst130*x6683);
IkReal x6692=((1.0)*x6683);
IkReal x6693=(gconst130*x6684);
evalcond[0]=((((-1.0)*x6687*x6692))+((r21*x6691))+(((-1.0)*r22*x6689)));
evalcond[1]=((((-1.0)*x6685*x6692))+((r11*x6691))+cj0+(((-1.0)*r12*x6689)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6689))+(((-1.0)*x6688*x6692))+((r01*x6691)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6683))+((r21*x6693))+(((-1.0)*x6687*x6689)));
evalcond[4]=(((r02*x6683))+(((-1.0)*x6688*x6689))+(((-1.0)*cj0*x6690))+((r01*x6693))+((cj0*x6686)));
evalcond[5]=(((r12*x6683))+((r11*x6693))+((sj0*x6686))+(((-1.0)*sj0*x6690))+(((-1.0)*x6685*x6689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6694=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6694;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6694);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6695=((1.0)*cj5);
IkReal x6696=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6695)));
j4eval[0]=x6696;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x6695))+((r21*sj5))))));
j4eval[2]=IKsign(x6696);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6697=cj5*cj5;
IkReal x6698=r01*r01;
IkReal x6699=(cj5*r00);
IkReal x6700=(r01*sj5);
IkReal x6701=(x6698+(((-2.0)*x6699*x6700))+(((-1.0)*x6697*x6698))+(r02*r02)+((x6697*(r00*r00))));
j4eval[0]=x6701;
j4eval[1]=IKsign(x6701);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6699))+x6700))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6702=cj5*cj5;
IkReal x6703=r01*r01;
IkReal x6704=(r01*sj5);
IkReal x6705=(cj5*r00);
CheckValue<IkReal> x6706 = IKatan2WithCheck(IkReal((x6704+(((-1.0)*x6705)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6706.valid){
continue;
}
CheckValue<IkReal> x6707=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6702*x6703))+x6703+((x6702*(r00*r00)))+(r02*r02)+(((-2.0)*x6704*x6705)))),-1);
if(!x6707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6706.value)+(((1.5707963267949)*(x6707.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6708=IKcos(j4);
IkReal x6709=IKsin(j4);
IkReal x6710=(cj5*r00);
IkReal x6711=(cj5*r10);
IkReal x6712=(r21*sj5);
IkReal x6713=(cj5*r20);
IkReal x6714=((1.0)*x6708);
IkReal x6715=((1.0)*x6709);
IkReal x6716=(sj5*x6709);
IkReal x6717=(sj5*x6708);
evalcond[0]=((((-1.0)*x6710*x6714))+((r01*x6717))+((r02*x6709)));
evalcond[1]=(((x6709*x6712))+(((-1.0)*x6713*x6715))+(((-1.0)*r22*x6714)));
evalcond[2]=(((r11*x6716))+(((-1.0)*x6711*x6715))+(((-1.0)*r12*x6714)));
evalcond[3]=((-1.0)+(((-1.0)*x6710*x6715))+(((-1.0)*r02*x6714))+((r01*x6716)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6713*x6714))+((cj1*sj2))+((x6708*x6712))+((r22*x6709)));
evalcond[5]=(((r11*x6717))+(((-1.0)*x6711*x6714))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6718=((1.0)*cj5);
CheckValue<IkReal> x6719=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6718)))),-1);
if(!x6719.valid){
continue;
}
CheckValue<IkReal> x6720 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6718))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6719.value)))+(x6720.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6721=IKcos(j4);
IkReal x6722=IKsin(j4);
IkReal x6723=(cj5*r00);
IkReal x6724=(cj5*r10);
IkReal x6725=(r21*sj5);
IkReal x6726=(cj5*r20);
IkReal x6727=((1.0)*x6721);
IkReal x6728=((1.0)*x6722);
IkReal x6729=(sj5*x6722);
IkReal x6730=(sj5*x6721);
evalcond[0]=((((-1.0)*x6723*x6727))+((r02*x6722))+((r01*x6730)));
evalcond[1]=((((-1.0)*r22*x6727))+((x6722*x6725))+(((-1.0)*x6726*x6728)));
evalcond[2]=((((-1.0)*x6724*x6728))+((r11*x6729))+(((-1.0)*r12*x6727)));
evalcond[3]=((-1.0)+(((-1.0)*x6723*x6728))+(((-1.0)*r02*x6727))+((r01*x6729)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6722))+((x6721*x6725))+(((-1.0)*x6726*x6727)));
evalcond[5]=(((r12*x6722))+(((-1.0)*x6724*x6727))+((r11*x6730))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6731=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6731.valid){
continue;
}
CheckValue<IkReal> x6732 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6731.value)))+(x6732.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6733=IKcos(j4);
IkReal x6734=IKsin(j4);
IkReal x6735=(cj5*r00);
IkReal x6736=(cj5*r10);
IkReal x6737=(r21*sj5);
IkReal x6738=(cj5*r20);
IkReal x6739=((1.0)*x6733);
IkReal x6740=((1.0)*x6734);
IkReal x6741=(sj5*x6734);
IkReal x6742=(sj5*x6733);
evalcond[0]=((((-1.0)*x6735*x6739))+((r01*x6742))+((r02*x6734)));
evalcond[1]=((((-1.0)*r22*x6739))+((x6734*x6737))+(((-1.0)*x6738*x6740)));
evalcond[2]=((((-1.0)*r12*x6739))+((r11*x6741))+(((-1.0)*x6736*x6740)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6739))+((r01*x6741))+(((-1.0)*x6735*x6740)));
evalcond[4]=(((r22*x6734))+((cj2*sj1))+((cj1*sj2))+((x6733*x6737))+(((-1.0)*x6738*x6739)));
evalcond[5]=(((r11*x6742))+((r12*x6734))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6736*x6739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6743=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6743;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6743);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6744=((1.0)*cj5);
IkReal x6745=((((-1.0)*r21*x6744))+(((-1.0)*r20*sj5)));
j4eval[0]=x6745;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x6744))+((r11*sj5))))));
j4eval[2]=IKsign(x6745);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6746=(r01*sj5);
IkReal x6747=(cj1*sj2);
IkReal x6748=(cj2*sj1);
IkReal x6749=((1.0)*r02);
IkReal x6750=((1.0)*cj5*r00);
IkReal x6751=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6751;
j4eval[1]=((IKabs(((((-1.0)*x6747*x6749))+(((-1.0)*x6748*x6749)))))+(IKabs((((x6746*x6747))+((x6746*x6748))+(((-1.0)*x6748*x6750))+(((-1.0)*x6747*x6750))))));
j4eval[2]=IKsign(x6751);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6752=(r01*sj5);
IkReal x6753=(cj1*sj2);
IkReal x6754=(cj2*sj1);
IkReal x6755=((1.0)*r02);
IkReal x6756=((1.0)*cj5*r00);
CheckValue<IkReal> x6757=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6757.valid){
continue;
}
CheckValue<IkReal> x6758 = IKatan2WithCheck(IkReal((((x6752*x6753))+((x6752*x6754))+(((-1.0)*x6754*x6756))+(((-1.0)*x6753*x6756)))),IkReal(((((-1.0)*x6754*x6755))+(((-1.0)*x6753*x6755)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6757.value)))+(x6758.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6759=IKcos(j4);
IkReal x6760=IKsin(j4);
IkReal x6761=(cj5*r00);
IkReal x6762=(cj5*r10);
IkReal x6763=(r21*sj5);
IkReal x6764=(cj5*r20);
IkReal x6765=((1.0)*x6759);
IkReal x6766=((1.0)*x6760);
IkReal x6767=(sj5*x6760);
IkReal x6768=(sj5*x6759);
evalcond[0]=(((r01*x6768))+((r02*x6760))+(((-1.0)*x6761*x6765)));
evalcond[1]=((((-1.0)*r22*x6765))+((x6760*x6763))+(((-1.0)*x6764*x6766)));
evalcond[2]=((((-1.0)*x6762*x6766))+((r11*x6767))+(((-1.0)*r12*x6765)));
evalcond[3]=((1.0)+((r01*x6767))+(((-1.0)*r02*x6765))+(((-1.0)*x6761*x6766)));
evalcond[4]=(((cj2*sj1))+((x6759*x6763))+((r22*x6760))+((cj1*sj2))+(((-1.0)*x6764*x6765)));
evalcond[5]=((((-1.0)*x6762*x6765))+((r12*x6760))+(((-1.0)*sj1*sj2))+((r11*x6768))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6769=((1.0)*cj5);
CheckValue<IkReal> x6770 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6769)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6770.valid){
continue;
}
CheckValue<IkReal> x6771=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj5))+(((-1.0)*r21*x6769)))),-1);
if(!x6771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6770.value)+(((1.5707963267949)*(x6771.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6772=IKcos(j4);
IkReal x6773=IKsin(j4);
IkReal x6774=(cj5*r00);
IkReal x6775=(cj5*r10);
IkReal x6776=(r21*sj5);
IkReal x6777=(cj5*r20);
IkReal x6778=((1.0)*x6772);
IkReal x6779=((1.0)*x6773);
IkReal x6780=(sj5*x6773);
IkReal x6781=(sj5*x6772);
evalcond[0]=(((r02*x6773))+((r01*x6781))+(((-1.0)*x6774*x6778)));
evalcond[1]=((((-1.0)*r22*x6778))+(((-1.0)*x6777*x6779))+((x6773*x6776)));
evalcond[2]=(((r11*x6780))+(((-1.0)*r12*x6778))+(((-1.0)*x6775*x6779)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6778))+((r01*x6780))+(((-1.0)*x6774*x6779)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6777*x6778))+((cj1*sj2))+((r22*x6773))+((x6772*x6776)));
evalcond[5]=(((r12*x6773))+((r11*x6781))+(((-1.0)*sj1*sj2))+(((-1.0)*x6775*x6778))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6782 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6782.valid){
continue;
}
CheckValue<IkReal> x6783=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6782.value)+(((1.5707963267949)*(x6783.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6784=IKcos(j4);
IkReal x6785=IKsin(j4);
IkReal x6786=(cj5*r00);
IkReal x6787=(cj5*r10);
IkReal x6788=(r21*sj5);
IkReal x6789=(cj5*r20);
IkReal x6790=((1.0)*x6784);
IkReal x6791=((1.0)*x6785);
IkReal x6792=(sj5*x6785);
IkReal x6793=(sj5*x6784);
evalcond[0]=(((r01*x6793))+((r02*x6785))+(((-1.0)*x6786*x6790)));
evalcond[1]=((((-1.0)*x6789*x6791))+(((-1.0)*r22*x6790))+((x6785*x6788)));
evalcond[2]=(((r11*x6792))+(((-1.0)*x6787*x6791))+(((-1.0)*r12*x6790)));
evalcond[3]=((1.0)+((r01*x6792))+(((-1.0)*x6786*x6791))+(((-1.0)*r02*x6790)));
evalcond[4]=(((x6784*x6788))+((cj2*sj1))+(((-1.0)*x6789*x6790))+((cj1*sj2))+((r22*x6785)));
evalcond[5]=(((r12*x6785))+(((-1.0)*sj1*sj2))+((r11*x6793))+((cj1*cj2))+(((-1.0)*x6787*x6790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6794=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6794);
rxp1_1=(px*r21);
rxp1_2=(r11*x6794);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6795=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6795);
rxp1_1=(px*r21);
rxp1_2=(r11*x6795);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6796=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6796);
rxp1_1=(px*r21);
rxp1_2=(r11*x6796);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6799=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6799.valid){
continue;
}
IkReal x6797=x6799.value;
IkReal x6798=(sj0*x6797);
cj4array[0]=(((cj1*cj2*x6798))+(((-1.0)*sj1*sj2*x6798)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6800=IKsin(j4);
IkReal x6801=IKcos(j4);
IkReal x6802=(r21*sj5);
IkReal x6803=((1.0)*cj5*r20);
evalcond[0]=(r02*x6800);
evalcond[1]=((((-1.0)*r02*x6801))+(((-1.0)*sj0)));
evalcond[2]=(((x6800*x6802))+(((-1.0)*x6800*x6803)));
evalcond[3]=(((r11*sj5*x6800))+(((-1.0)*cj5*r10*x6800)));
evalcond[4]=(((cj2*sj1))+((x6801*x6802))+((cj1*sj2))+(((-1.0)*x6801*x6803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6806=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6806.valid){
continue;
}
IkReal x6804=x6806.value;
IkReal x6805=((1.0)*x6804);
cj4array[0]=((((-1.0)*cj2*sj1*x6805))+(((-1.0)*cj1*sj2*x6805)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6807=IKsin(j4);
IkReal x6808=IKcos(j4);
IkReal x6809=((1.0)*sj0);
IkReal x6810=((1.0)*cj5);
IkReal x6811=(sj5*x6807);
evalcond[0]=(r02*x6807);
evalcond[1]=((((-1.0)*r02*x6808))+(((-1.0)*x6809)));
evalcond[2]=((((-1.0)*r20*x6807*x6810))+((r21*x6811)));
evalcond[3]=(((r11*x6811))+(((-1.0)*r10*x6807*x6810)));
evalcond[4]=(((r11*sj5*x6808))+(((-1.0)*cj1*cj2*x6809))+(((-1.0)*r10*x6808*x6810))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6812=IKPowWithIntegerCheck(r02,-1);
if(!x6812.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6812.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6813=IKsin(j4);
IkReal x6814=IKcos(j4);
IkReal x6815=(r21*sj5);
IkReal x6816=((1.0)*cj5);
IkReal x6817=(r11*sj5);
evalcond[0]=(r02*x6813);
evalcond[1]=((((-1.0)*r20*x6813*x6816))+((x6813*x6815)));
evalcond[2]=(((x6813*x6817))+(((-1.0)*r10*x6813*x6816)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x6814*x6816))+((x6814*x6815)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((x6814*x6817))+((sj0*sj1*sj2))+(((-1.0)*r10*x6814*x6816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6818=((1.0)*sj0);
IkReal x6819=((1.0)*cj0);
CheckValue<IkReal> x6820 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6818))+(((-1.0)*r02*x6819)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x6819))+(((-1.0)*r11*sj5*x6818))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6820.valid){
continue;
}
CheckValue<IkReal> x6821=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6820.value)+(((1.5707963267949)*(x6821.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6822=IKsin(j4);
IkReal x6823=IKcos(j4);
IkReal x6824=(cj5*r00);
IkReal x6825=(cj5*r10);
IkReal x6826=(r21*sj5);
IkReal x6827=(sj1*sj2);
IkReal x6828=(cj5*r20);
IkReal x6829=((1.0)*x6823);
IkReal x6830=((1.0)*cj1*cj2);
IkReal x6831=((1.0)*x6822);
IkReal x6832=(sj5*x6822);
IkReal x6833=(sj5*x6823);
evalcond[0]=((((-1.0)*x6828*x6831))+(((-1.0)*r22*x6829))+((x6822*x6826)));
evalcond[1]=((((-1.0)*x6825*x6831))+cj0+(((-1.0)*r12*x6829))+((r11*x6832)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6824*x6831))+(((-1.0)*r02*x6829))+((r01*x6832)));
evalcond[3]=(((cj2*sj1))+((r22*x6822))+((cj1*sj2))+((x6823*x6826))+(((-1.0)*x6828*x6829)));
evalcond[4]=(((r02*x6822))+((r01*x6833))+(((-1.0)*x6824*x6829))+(((-1.0)*cj0*x6830))+((cj0*x6827)));
evalcond[5]=(((sj0*x6827))+(((-1.0)*sj0*x6830))+((r11*x6833))+((r12*x6822))+(((-1.0)*x6825*x6829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6834=((1.0)*cj5);
CheckValue<IkReal> x6835 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6834))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6835.valid){
continue;
}
CheckValue<IkReal> x6836=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6834)))),-1);
if(!x6836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6835.value)+(((1.5707963267949)*(x6836.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6837=IKsin(j4);
IkReal x6838=IKcos(j4);
IkReal x6839=(cj5*r00);
IkReal x6840=(cj5*r10);
IkReal x6841=(r21*sj5);
IkReal x6842=(sj1*sj2);
IkReal x6843=(cj5*r20);
IkReal x6844=((1.0)*x6838);
IkReal x6845=((1.0)*cj1*cj2);
IkReal x6846=((1.0)*x6837);
IkReal x6847=(sj5*x6837);
IkReal x6848=(sj5*x6838);
evalcond[0]=((((-1.0)*x6843*x6846))+(((-1.0)*r22*x6844))+((x6837*x6841)));
evalcond[1]=(cj0+((r11*x6847))+(((-1.0)*r12*x6844))+(((-1.0)*x6840*x6846)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6839*x6846))+(((-1.0)*r02*x6844))+((r01*x6847)));
evalcond[3]=(((cj2*sj1))+((r22*x6837))+((x6838*x6841))+(((-1.0)*x6843*x6844))+((cj1*sj2)));
evalcond[4]=(((r02*x6837))+(((-1.0)*x6839*x6844))+((cj0*x6842))+((r01*x6848))+(((-1.0)*cj0*x6845)));
evalcond[5]=(((r11*x6848))+((r12*x6837))+(((-1.0)*sj0*x6845))+((sj0*x6842))+(((-1.0)*x6840*x6844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6849=((1.0)*cj5);
CheckValue<IkReal> x6850 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6849)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6850.valid){
continue;
}
CheckValue<IkReal> x6851=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6849))+(((-1.0)*r00*sj5)))),-1);
if(!x6851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6850.value)+(((1.5707963267949)*(x6851.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6852=IKsin(j4);
IkReal x6853=IKcos(j4);
IkReal x6854=(cj5*r00);
IkReal x6855=(cj5*r10);
IkReal x6856=(r21*sj5);
IkReal x6857=(sj1*sj2);
IkReal x6858=(cj5*r20);
IkReal x6859=((1.0)*x6853);
IkReal x6860=((1.0)*cj1*cj2);
IkReal x6861=((1.0)*x6852);
IkReal x6862=(sj5*x6852);
IkReal x6863=(sj5*x6853);
evalcond[0]=((((-1.0)*r22*x6859))+(((-1.0)*x6858*x6861))+((x6852*x6856)));
evalcond[1]=(((r11*x6862))+cj0+(((-1.0)*r12*x6859))+(((-1.0)*x6855*x6861)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6859))+(((-1.0)*x6854*x6861))+((r01*x6862)));
evalcond[3]=(((cj2*sj1))+((r22*x6852))+((x6853*x6856))+((cj1*sj2))+(((-1.0)*x6858*x6859)));
evalcond[4]=(((r02*x6852))+(((-1.0)*x6854*x6859))+((cj0*x6857))+((r01*x6863))+(((-1.0)*cj0*x6860)));
evalcond[5]=(((sj0*x6857))+((r11*x6863))+((r12*x6852))+(((-1.0)*x6855*x6859))+(((-1.0)*sj0*x6860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6864=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6864;
j0eval[1]=IKsign(x6864);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6865=cj5*cj5;
IkReal x6866=r21*r21;
IkReal x6867=(cj2*sj1);
IkReal x6868=(cj1*sj2);
IkReal x6869=(r21*sj5);
IkReal x6870=((1.0)*cj5*r20);
IkReal x6871=(((x6865*(r20*r20)))+(((-1.0)*x6865*x6866))+(r22*r22)+x6866+(((-2.0)*cj5*r20*x6869)));
j4eval[0]=x6871;
j4eval[1]=IKsign(x6871);
j4eval[2]=((IKabs((((r22*x6868))+((r22*x6867)))))+(IKabs(((((-1.0)*x6868*x6870))+((x6868*x6869))+(((-1.0)*x6867*x6870))+((x6867*x6869))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6872=cj1*cj1;
IkReal x6873=(cj2*sj2);
IkReal x6874=(cj2*sj1);
IkReal x6875=(cj1*sj1);
j0eval[0]=((((-2.0)*x6872*x6873))+(((-2.0)*cj1*cj2*x6874))+x6875+x6873+(((-1.08418367346939)*cj1*x6874))+(((-1.08418367346939)*sj2*x6872)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x6874)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.19192641276835)*py))+(((-0.195493438569105)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.19192641276835)*px))+(((0.195493438569105)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.19192641276835)*py))+(((-0.195493438569105)*px))))+IKsqr(((((1.19192641276835)*px))+(((0.195493438569105)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.19192641276835)*py))+(((-0.195493438569105)*px))), ((((1.19192641276835)*px))+(((0.195493438569105)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6876=IKcos(j0);
IkReal x6877=IKsin(j0);
evalcond[0]=((((0.817)*x6876))+(((-1.0)*px))+(((-0.134)*x6877)));
evalcond[1]=((((0.134)*x6876))+(((0.817)*x6877))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6878=((1.0)*cj5);
IkReal x6879=((((-1.0)*r01*x6878))+(((-1.0)*r00*sj5)));
j4eval[0]=x6879;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x6878))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x6879);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6880=((1.0)*cj5);
IkReal x6881=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6880)));
j4eval[0]=x6881;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6880))))));
j4eval[2]=IKsign(x6881);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6882=cj5*cj5;
IkReal x6883=((1.0)*sj5);
IkReal x6884=(cj5*r20);
IkReal x6885=(r11*r21);
IkReal x6886=(((r10*r20*x6882))+((r12*r22))+x6885+(((-1.0)*r11*x6883*x6884))+(((-1.0)*x6882*x6885))+(((-1.0)*cj5*r10*r21*x6883)));
j4eval[0]=x6886;
j4eval[1]=IKsign(x6886);
j4eval[2]=((IKabs((((cj0*x6884))+(((-1.0)*cj0*r21*x6883)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6887=cj5*cj5;
IkReal x6888=((1.0)*sj5);
IkReal x6889=(cj5*r20);
IkReal x6890=(r11*r21);
CheckValue<IkReal> x6891 = IKatan2WithCheck(IkReal((((cj0*x6889))+(((-1.0)*cj0*r21*x6888)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6891.valid){
continue;
}
CheckValue<IkReal> x6892=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6888*x6889))+((r10*r20*x6887))+((r12*r22))+(((-1.0)*x6887*x6890))+x6890+(((-1.0)*cj5*r10*r21*x6888)))),-1);
if(!x6892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6891.value)+(((1.5707963267949)*(x6892.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6893=IKsin(j4);
IkReal x6894=IKcos(j4);
IkReal x6895=((1.0)*sj0);
IkReal x6896=(cj5*r00);
IkReal x6897=(r11*sj5);
IkReal x6898=(cj5*r10);
IkReal x6899=(r21*sj5);
IkReal x6900=(cj5*r20);
IkReal x6901=(r01*sj5);
IkReal x6902=((1.0)*x6894);
IkReal x6903=((1.0)*x6893);
evalcond[0]=((((-1.0)*x6900*x6903))+((x6893*x6899))+(((-1.0)*r22*x6902)));
evalcond[1]=((((-1.0)*r22*x6903))+((x6894*x6900))+(((-1.0)*x6899*x6902)));
evalcond[2]=(cj0+((x6893*x6897))+(((-1.0)*r12*x6902))+(((-1.0)*x6898*x6903)));
evalcond[3]=((((-1.0)*r02*x6902))+((x6893*x6901))+(((-1.0)*x6895))+(((-1.0)*x6896*x6903)));
evalcond[4]=((((-1.0)*r02*x6903))+((x6894*x6896))+(((-1.0)*x6901*x6902))+(((-1.0)*cj0)));
evalcond[5]=(((x6894*x6898))+(((-1.0)*r12*x6903))+(((-1.0)*x6895))+(((-1.0)*x6897*x6902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6904=((1.0)*cj5);
CheckValue<IkReal> x6905 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6904))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6905.valid){
continue;
}
CheckValue<IkReal> x6906=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6904)))),-1);
if(!x6906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6905.value)+(((1.5707963267949)*(x6906.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6907=IKsin(j4);
IkReal x6908=IKcos(j4);
IkReal x6909=((1.0)*sj0);
IkReal x6910=(cj5*r00);
IkReal x6911=(r11*sj5);
IkReal x6912=(cj5*r10);
IkReal x6913=(r21*sj5);
IkReal x6914=(cj5*r20);
IkReal x6915=(r01*sj5);
IkReal x6916=((1.0)*x6908);
IkReal x6917=((1.0)*x6907);
evalcond[0]=(((x6907*x6913))+(((-1.0)*r22*x6916))+(((-1.0)*x6914*x6917)));
evalcond[1]=((((-1.0)*r22*x6917))+((x6908*x6914))+(((-1.0)*x6913*x6916)));
evalcond[2]=((((-1.0)*x6912*x6917))+((x6907*x6911))+cj0+(((-1.0)*r12*x6916)));
evalcond[3]=(((x6907*x6915))+(((-1.0)*x6910*x6917))+(((-1.0)*x6909))+(((-1.0)*r02*x6916)));
evalcond[4]=(((x6908*x6910))+(((-1.0)*r02*x6917))+(((-1.0)*x6915*x6916))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6911*x6916))+(((-1.0)*x6909))+(((-1.0)*r12*x6917))+((x6908*x6912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6918=((1.0)*cj5);
CheckValue<IkReal> x6919=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6918)))),-1);
if(!x6919.valid){
continue;
}
CheckValue<IkReal> x6920 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6918)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6919.value)))+(x6920.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6921=IKsin(j4);
IkReal x6922=IKcos(j4);
IkReal x6923=((1.0)*sj0);
IkReal x6924=(cj5*r00);
IkReal x6925=(r11*sj5);
IkReal x6926=(cj5*r10);
IkReal x6927=(r21*sj5);
IkReal x6928=(cj5*r20);
IkReal x6929=(r01*sj5);
IkReal x6930=((1.0)*x6922);
IkReal x6931=((1.0)*x6921);
evalcond[0]=(((x6921*x6927))+(((-1.0)*r22*x6930))+(((-1.0)*x6928*x6931)));
evalcond[1]=(((x6922*x6928))+(((-1.0)*r22*x6931))+(((-1.0)*x6927*x6930)));
evalcond[2]=((((-1.0)*x6926*x6931))+((x6921*x6925))+cj0+(((-1.0)*r12*x6930)));
evalcond[3]=(((x6921*x6929))+(((-1.0)*x6924*x6931))+(((-1.0)*r02*x6930))+(((-1.0)*x6923)));
evalcond[4]=(((x6922*x6924))+(((-1.0)*r02*x6931))+(((-1.0)*x6929*x6930))+(((-1.0)*cj0)));
evalcond[5]=(((x6922*x6926))+(((-1.0)*x6925*x6930))+(((-1.0)*r12*x6931))+(((-1.0)*x6923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.73273825150958)*px))+(((7.03596744552376)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((1.73273825150958)*px))+(((7.03596744552376)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((1.73273825150958)*px))+(((7.03596744552376)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6932=IKcos(j0);
IkReal x6933=IKsin(j0);
evalcond[0]=((((-0.134)*x6933))+(((-1.0)*px))+(((0.033)*x6932)));
evalcond[1]=((((-1.0)*py))+(((0.033)*x6933))+(((0.134)*x6932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6934=((1.0)*cj5);
IkReal x6935=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6934)));
j4eval[0]=x6935;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6934)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6935);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6936=cj5*cj5;
IkReal x6937=((1.0)*r21);
IkReal x6938=(cj5*sj5);
IkReal x6939=((1.0)*r20);
IkReal x6940=((((-1.0)*r01*x6938*x6939))+((r01*r21))+(((-1.0)*r00*x6937*x6938))+((r00*r20*x6936))+(((-1.0)*r01*x6936*x6937))+((r02*r22)));
j4eval[0]=x6940;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6939)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6940);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6941=cj5*cj5;
IkReal x6942=(r21*sj5);
IkReal x6943=(r11*r21);
IkReal x6944=((1.0)*cj5*r20);
IkReal x6945=((((-1.0)*cj5*r10*x6942))+((r12*r22))+(((-1.0)*r11*sj5*x6944))+(((-1.0)*x6941*x6943))+x6943+((r10*r20*x6941)));
j4eval[0]=x6945;
j4eval[1]=((IKabs(((((-1.0)*sj0*x6944))+((sj0*x6942)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6945);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6946=cj5*cj5;
IkReal x6947=(r21*sj5);
IkReal x6948=(r11*r21);
IkReal x6949=((1.0)*cj5*r20);
CheckValue<IkReal> x6950 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x6949))+((sj0*x6947)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6950.valid){
continue;
}
CheckValue<IkReal> x6951=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x6947))+((r12*r22))+(((-1.0)*x6946*x6948))+(((-1.0)*r11*sj5*x6949))+x6948+((r10*r20*x6946)))),-1);
if(!x6951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6950.value)+(((1.5707963267949)*(x6951.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6952=IKsin(j4);
IkReal x6953=IKcos(j4);
IkReal x6954=(r11*sj5);
IkReal x6955=(cj5*r00);
IkReal x6956=(cj5*r10);
IkReal x6957=(r21*sj5);
IkReal x6958=(cj5*r20);
IkReal x6959=(r01*sj5);
IkReal x6960=((1.0)*x6953);
IkReal x6961=((1.0)*x6952);
evalcond[0]=(((x6952*x6957))+(((-1.0)*x6958*x6961))+(((-1.0)*r22*x6960)));
evalcond[1]=((((-1.0)*x6957*x6960))+(((-1.0)*r22*x6961))+((x6953*x6958)));
evalcond[2]=(((x6952*x6954))+cj0+(((-1.0)*r12*x6960))+(((-1.0)*x6956*x6961)));
evalcond[3]=((((-1.0)*r02*x6961))+(((-1.0)*x6959*x6960))+cj0+((x6953*x6955)));
evalcond[4]=((((-1.0)*x6954*x6960))+sj0+(((-1.0)*r12*x6961))+((x6953*x6956)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6960))+((x6952*x6959))+(((-1.0)*x6955*x6961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6962=cj5*cj5;
IkReal x6963=((1.0)*r21);
IkReal x6964=(cj5*sj5);
IkReal x6965=((1.0)*r20);
CheckValue<IkReal> x6966 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6965)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6966.valid){
continue;
}
CheckValue<IkReal> x6967=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6962*x6963))+((r01*r21))+((r00*r20*x6962))+(((-1.0)*r00*x6963*x6964))+((r02*r22))+(((-1.0)*r01*x6964*x6965)))),-1);
if(!x6967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6966.value)+(((1.5707963267949)*(x6967.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6968=IKsin(j4);
IkReal x6969=IKcos(j4);
IkReal x6970=(r11*sj5);
IkReal x6971=(cj5*r00);
IkReal x6972=(cj5*r10);
IkReal x6973=(r21*sj5);
IkReal x6974=(cj5*r20);
IkReal x6975=(r01*sj5);
IkReal x6976=((1.0)*x6969);
IkReal x6977=((1.0)*x6968);
evalcond[0]=((((-1.0)*x6974*x6977))+((x6968*x6973))+(((-1.0)*r22*x6976)));
evalcond[1]=(((x6969*x6974))+(((-1.0)*r22*x6977))+(((-1.0)*x6973*x6976)));
evalcond[2]=(((x6968*x6970))+cj0+(((-1.0)*r12*x6976))+(((-1.0)*x6972*x6977)));
evalcond[3]=(((x6969*x6971))+(((-1.0)*r02*x6977))+cj0+(((-1.0)*x6975*x6976)));
evalcond[4]=(((x6969*x6972))+sj0+(((-1.0)*x6970*x6976))+(((-1.0)*r12*x6977)));
evalcond[5]=((((-1.0)*sj0))+((x6968*x6975))+(((-1.0)*r02*x6976))+(((-1.0)*x6971*x6977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6978=((1.0)*cj5);
CheckValue<IkReal> x6979=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6978)))),-1);
if(!x6979.valid){
continue;
}
CheckValue<IkReal> x6980 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6978))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6980.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6979.value)))+(x6980.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6981=IKsin(j4);
IkReal x6982=IKcos(j4);
IkReal x6983=(r11*sj5);
IkReal x6984=(cj5*r00);
IkReal x6985=(cj5*r10);
IkReal x6986=(r21*sj5);
IkReal x6987=(cj5*r20);
IkReal x6988=(r01*sj5);
IkReal x6989=((1.0)*x6982);
IkReal x6990=((1.0)*x6981);
evalcond[0]=(((x6981*x6986))+(((-1.0)*x6987*x6990))+(((-1.0)*r22*x6989)));
evalcond[1]=((((-1.0)*x6986*x6989))+((x6982*x6987))+(((-1.0)*r22*x6990)));
evalcond[2]=(cj0+(((-1.0)*x6985*x6990))+((x6981*x6983))+(((-1.0)*r12*x6989)));
evalcond[3]=(cj0+((x6982*x6984))+(((-1.0)*r02*x6990))+(((-1.0)*x6988*x6989)));
evalcond[4]=((((-1.0)*r12*x6990))+sj0+((x6982*x6985))+(((-1.0)*x6983*x6989)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6984*x6990))+((x6981*x6988))+(((-1.0)*r02*x6989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6991=((1.0)*sj5);
IkReal x6992=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x6992))+(((-1.0)*r10*x6991)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x6991))+(((-1.0)*r01*x6992)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x6992))+(((-1.0)*r10*x6991))))+IKsqr(((((-1.0)*r00*x6991))+(((-1.0)*r01*x6992))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x6992))+(((-1.0)*r10*x6991))), ((((-1.0)*r00*x6991))+(((-1.0)*r01*x6992))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6993=IKsin(j0);
IkReal x6994=IKcos(j0);
IkReal x6995=((0.1)*sj5);
IkReal x6996=(cj5*r11);
IkReal x6997=(cj5*r01);
IkReal x6998=((1.0)*sj5);
evalcond[0]=((((-1.0)*r00*x6998))+(((-1.0)*x6997))+(((-1.0)*x6994)));
evalcond[1]=((((-1.0)*x6993))+(((-1.0)*x6996))+(((-1.0)*r10*x6998)));
evalcond[2]=((((-1.0)*r00*x6995))+(((-0.1)*x6997))+(((-1.0)*px))+(((-0.134)*x6993)));
evalcond[3]=((((-1.0)*r10*x6995))+(((-0.1)*x6996))+(((-1.0)*py))+(((0.134)*x6994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6999=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6999;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x6999);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7000=((1.0)*cj5);
IkReal x7001=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7000)));
j4eval[0]=x7001;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7000))))));
j4eval[2]=IKsign(x7001);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7002=cj5*cj5;
IkReal x7003=r21*r21;
IkReal x7004=(r21*sj5);
IkReal x7005=(cj5*r20);
IkReal x7006=(x7003+(r22*r22)+(((-2.0)*x7004*x7005))+((x7002*(r20*r20)))+(((-1.0)*x7002*x7003)));
j4eval[0]=x7006;
j4eval[1]=IKsign(x7006);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x7005))+x7004))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7007=cj5*cj5;
IkReal x7008=r21*r21;
IkReal x7009=(r21*sj5);
IkReal x7010=(cj5*r20);
CheckValue<IkReal> x7011 = IKatan2WithCheck(IkReal(r22),IkReal((x7009+(((-1.0)*x7010)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7011.valid){
continue;
}
CheckValue<IkReal> x7012=IKPowWithIntegerCheck(IKsign((x7008+(((-1.0)*x7007*x7008))+(r22*r22)+(((-2.0)*x7009*x7010))+((x7007*(r20*r20))))),-1);
if(!x7012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7011.value)+(((1.5707963267949)*(x7012.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7013=IKsin(j4);
IkReal x7014=IKcos(j4);
IkReal x7015=(r11*sj5);
IkReal x7016=(r21*sj5);
IkReal x7017=(cj5*r00);
IkReal x7018=(cj5*r20);
IkReal x7019=(r01*sj5);
IkReal x7020=(cj5*r10);
IkReal x7021=((1.0)*x7014);
IkReal x7022=((1.0)*x7013);
evalcond[0]=((((-1.0)*r22*x7021))+((x7013*x7016))+(((-1.0)*x7018*x7022)));
evalcond[1]=((((-1.0)*x7019*x7021))+((x7014*x7017))+(((-1.0)*r02*x7022)));
evalcond[2]=((((-1.0)*r12*x7022))+((x7014*x7020))+(((-1.0)*x7015*x7021)));
evalcond[3]=((((-1.0)*r12*x7021))+((x7013*x7015))+cj0+(((-1.0)*x7020*x7022)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7022))+((x7014*x7018))+(((-1.0)*x7016*x7021)));
evalcond[5]=((((-1.0)*sj0))+((x7013*x7019))+(((-1.0)*r02*x7021))+(((-1.0)*x7017*x7022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7023=((1.0)*cj5);
CheckValue<IkReal> x7024=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7023)))),-1);
if(!x7024.valid){
continue;
}
CheckValue<IkReal> x7025 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7024.value)))+(x7025.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7026=IKsin(j4);
IkReal x7027=IKcos(j4);
IkReal x7028=(r11*sj5);
IkReal x7029=(r21*sj5);
IkReal x7030=(cj5*r00);
IkReal x7031=(cj5*r20);
IkReal x7032=(r01*sj5);
IkReal x7033=(cj5*r10);
IkReal x7034=((1.0)*x7027);
IkReal x7035=((1.0)*x7026);
evalcond[0]=(((x7026*x7029))+(((-1.0)*x7031*x7035))+(((-1.0)*r22*x7034)));
evalcond[1]=(((x7027*x7030))+(((-1.0)*r02*x7035))+(((-1.0)*x7032*x7034)));
evalcond[2]=(((x7027*x7033))+(((-1.0)*r12*x7035))+(((-1.0)*x7028*x7034)));
evalcond[3]=(((x7026*x7028))+cj0+(((-1.0)*r12*x7034))+(((-1.0)*x7033*x7035)));
evalcond[4]=((1.0)+((x7027*x7031))+(((-1.0)*r22*x7035))+(((-1.0)*x7029*x7034)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7034))+((x7026*x7032))+(((-1.0)*x7030*x7035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7036 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7036.valid){
continue;
}
CheckValue<IkReal> x7037=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7036.value)+(((1.5707963267949)*(x7037.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7038=IKsin(j4);
IkReal x7039=IKcos(j4);
IkReal x7040=(r11*sj5);
IkReal x7041=(r21*sj5);
IkReal x7042=(cj5*r00);
IkReal x7043=(cj5*r20);
IkReal x7044=(r01*sj5);
IkReal x7045=(cj5*r10);
IkReal x7046=((1.0)*x7039);
IkReal x7047=((1.0)*x7038);
evalcond[0]=((((-1.0)*r22*x7046))+(((-1.0)*x7043*x7047))+((x7038*x7041)));
evalcond[1]=(((x7039*x7042))+(((-1.0)*r02*x7047))+(((-1.0)*x7044*x7046)));
evalcond[2]=(((x7039*x7045))+(((-1.0)*r12*x7047))+(((-1.0)*x7040*x7046)));
evalcond[3]=(cj0+(((-1.0)*r12*x7046))+(((-1.0)*x7045*x7047))+((x7038*x7040)));
evalcond[4]=((1.0)+((x7039*x7043))+(((-1.0)*r22*x7047))+(((-1.0)*x7041*x7046)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7046))+(((-1.0)*x7042*x7047))+((x7038*x7044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((-2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((-2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((-2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7048=IKcos(j0);
IkReal x7049=IKsin(j0);
evalcond[0]=((((-0.392)*x7048))+(((-1.0)*px))+(((-0.134)*x7049)));
evalcond[1]=((((-0.392)*x7049))+(((-1.0)*py))+(((0.134)*x7048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7050=((1.0)*cj5);
IkReal x7051=((((-1.0)*r01*x7050))+(((-1.0)*r00*sj5)));
j4eval[0]=x7051;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7050))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7051);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7052=cj5*cj5;
IkReal x7053=((1.0)*r21);
IkReal x7054=(cj5*sj5);
IkReal x7055=((1.0)*r20);
IkReal x7056=(((r00*r20*x7052))+(((-1.0)*r01*x7052*x7053))+((r01*r21))+(((-1.0)*r00*x7053*x7054))+(((-1.0)*r01*x7054*x7055))+((r02*r22)));
j4eval[0]=x7056;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7055))))));
j4eval[2]=IKsign(x7056);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7057=cj5*cj5;
IkReal x7058=(r21*sj5);
IkReal x7059=(r11*r21);
IkReal x7060=((1.0)*cj5*r20);
IkReal x7061=((((-1.0)*x7057*x7059))+x7059+((r10*r20*x7057))+((r12*r22))+(((-1.0)*cj5*r10*x7058))+(((-1.0)*r11*sj5*x7060)));
j4eval[0]=x7061;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x7060))+((sj0*x7058))))));
j4eval[2]=IKsign(x7061);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7062=cj5*cj5;
IkReal x7063=(r21*sj5);
IkReal x7064=(r11*r21);
IkReal x7065=((1.0)*cj5*r20);
CheckValue<IkReal> x7066=IKPowWithIntegerCheck(IKsign((x7064+(((-1.0)*x7062*x7064))+((r12*r22))+(((-1.0)*r11*sj5*x7065))+(((-1.0)*cj5*r10*x7063))+((r10*r20*x7062)))),-1);
if(!x7066.valid){
continue;
}
CheckValue<IkReal> x7067 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x7065))+((sj0*x7063)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7066.value)))+(x7067.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7068=IKsin(j4);
IkReal x7069=IKcos(j4);
IkReal x7070=(r11*sj5);
IkReal x7071=(cj5*r00);
IkReal x7072=(cj5*r10);
IkReal x7073=(r21*sj5);
IkReal x7074=(cj5*r20);
IkReal x7075=(r01*sj5);
IkReal x7076=((1.0)*x7069);
IkReal x7077=((1.0)*x7068);
evalcond[0]=(((x7068*x7073))+(((-1.0)*x7074*x7077))+(((-1.0)*r22*x7076)));
evalcond[1]=((((-1.0)*x7073*x7076))+((x7069*x7074))+(((-1.0)*r22*x7077)));
evalcond[2]=(cj0+((x7068*x7070))+(((-1.0)*x7072*x7077))+(((-1.0)*r12*x7076)));
evalcond[3]=(cj0+(((-1.0)*r02*x7077))+((x7069*x7071))+(((-1.0)*x7075*x7076)));
evalcond[4]=(sj0+(((-1.0)*x7070*x7076))+(((-1.0)*r12*x7077))+((x7069*x7072)));
evalcond[5]=((((-1.0)*sj0))+((x7068*x7075))+(((-1.0)*r02*x7076))+(((-1.0)*x7071*x7077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7078=cj5*cj5;
IkReal x7079=((1.0)*r21);
IkReal x7080=(cj5*sj5);
IkReal x7081=((1.0)*r20);
CheckValue<IkReal> x7082 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7081)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7082.valid){
continue;
}
CheckValue<IkReal> x7083=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7078*x7079))+((r01*r21))+((r02*r22))+(((-1.0)*r00*x7079*x7080))+(((-1.0)*r01*x7080*x7081))+((r00*r20*x7078)))),-1);
if(!x7083.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7082.value)+(((1.5707963267949)*(x7083.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7084=IKsin(j4);
IkReal x7085=IKcos(j4);
IkReal x7086=(r11*sj5);
IkReal x7087=(cj5*r00);
IkReal x7088=(cj5*r10);
IkReal x7089=(r21*sj5);
IkReal x7090=(cj5*r20);
IkReal x7091=(r01*sj5);
IkReal x7092=((1.0)*x7085);
IkReal x7093=((1.0)*x7084);
evalcond[0]=((((-1.0)*r22*x7092))+(((-1.0)*x7090*x7093))+((x7084*x7089)));
evalcond[1]=((((-1.0)*x7089*x7092))+((x7085*x7090))+(((-1.0)*r22*x7093)));
evalcond[2]=(cj0+(((-1.0)*x7088*x7093))+(((-1.0)*r12*x7092))+((x7084*x7086)));
evalcond[3]=(cj0+((x7085*x7087))+(((-1.0)*x7091*x7092))+(((-1.0)*r02*x7093)));
evalcond[4]=(sj0+((x7085*x7088))+(((-1.0)*x7086*x7092))+(((-1.0)*r12*x7093)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7087*x7093))+((x7084*x7091))+(((-1.0)*r02*x7092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7094=((1.0)*cj5);
CheckValue<IkReal> x7095=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7094))+(((-1.0)*r00*sj5)))),-1);
if(!x7095.valid){
continue;
}
CheckValue<IkReal> x7096 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7094)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7095.value)))+(x7096.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7097=IKsin(j4);
IkReal x7098=IKcos(j4);
IkReal x7099=(r11*sj5);
IkReal x7100=(cj5*r00);
IkReal x7101=(cj5*r10);
IkReal x7102=(r21*sj5);
IkReal x7103=(cj5*r20);
IkReal x7104=(r01*sj5);
IkReal x7105=((1.0)*x7098);
IkReal x7106=((1.0)*x7097);
evalcond[0]=((((-1.0)*x7103*x7106))+((x7097*x7102))+(((-1.0)*r22*x7105)));
evalcond[1]=((((-1.0)*x7102*x7105))+(((-1.0)*r22*x7106))+((x7098*x7103)));
evalcond[2]=(((x7097*x7099))+cj0+(((-1.0)*r12*x7105))+(((-1.0)*x7101*x7106)));
evalcond[3]=(cj0+(((-1.0)*r02*x7106))+((x7098*x7100))+(((-1.0)*x7104*x7105)));
evalcond[4]=(sj0+(((-1.0)*r12*x7106))+(((-1.0)*x7099*x7105))+((x7098*x7101)));
evalcond[5]=((((-1.0)*sj0))+((x7097*x7104))+(((-1.0)*x7100*x7106))+(((-1.0)*r02*x7105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7107=IKsin(j0);
IkReal x7108=IKcos(j0);
IkReal x7109=((0.1)*sj5);
IkReal x7110=(cj5*r11);
IkReal x7111=(cj5*r01);
IkReal x7112=((1.0)*sj5);
evalcond[0]=(x7108+(((-1.0)*x7111))+(((-1.0)*r00*x7112)));
evalcond[1]=(x7107+(((-1.0)*x7110))+(((-1.0)*r10*x7112)));
evalcond[2]=((((-0.1)*x7111))+(((-0.134)*x7107))+(((-1.0)*px))+(((-1.0)*r00*x7109)));
evalcond[3]=((((-0.1)*x7110))+(((-1.0)*r10*x7109))+(((-1.0)*py))+(((0.134)*x7108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7113=((1.0)*sj5);
IkReal x7114=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7113)));
j4eval[0]=x7114;
j4eval[1]=IKsign(x7114);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7113))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7115=((1.0)*cj5);
IkReal x7116=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7115)));
j4eval[0]=x7116;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7115)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7116);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7117=r21*r21;
IkReal x7118=cj5*cj5;
IkReal x7119=(r21*sj5);
IkReal x7120=(cj5*r20);
IkReal x7121=(((x7117*x7118))+(((-1.0)*x7118*(r20*r20)))+(((-1.0)*x7117))+(((2.0)*x7119*x7120))+(((-1.0)*(r22*r22))));
j4eval[0]=x7121;
j4eval[1]=((IKabs((x7119+(((-1.0)*x7120)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7121);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7122=r21*r21;
IkReal x7123=cj5*cj5;
IkReal x7124=(r21*sj5);
IkReal x7125=(cj5*r20);
CheckValue<IkReal> x7126=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7123*(r20*r20)))+(((-1.0)*x7122))+(((-1.0)*(r22*r22)))+(((2.0)*x7124*x7125))+((x7122*x7123)))),-1);
if(!x7126.valid){
continue;
}
CheckValue<IkReal> x7127 = IKatan2WithCheck(IkReal(r22),IkReal((x7124+(((-1.0)*x7125)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7126.value)))+(x7127.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7128=IKsin(j4);
IkReal x7129=IKcos(j4);
IkReal x7130=(r11*sj5);
IkReal x7131=(r21*sj5);
IkReal x7132=(cj5*r00);
IkReal x7133=(cj5*r20);
IkReal x7134=(r01*sj5);
IkReal x7135=(cj5*r10);
IkReal x7136=((1.0)*x7129);
IkReal x7137=((1.0)*x7128);
evalcond[0]=((((-1.0)*r22*x7136))+(((-1.0)*x7133*x7137))+((x7128*x7131)));
evalcond[1]=(((x7129*x7132))+(((-1.0)*x7134*x7136))+(((-1.0)*r02*x7137)));
evalcond[2]=((((-1.0)*x7130*x7136))+(((-1.0)*r12*x7137))+((x7129*x7135)));
evalcond[3]=((((-1.0)*r12*x7136))+cj0+(((-1.0)*x7135*x7137))+((x7128*x7130)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7137))+((x7129*x7133))+(((-1.0)*x7131*x7136)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7132*x7137))+((x7128*x7134))+(((-1.0)*r02*x7136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7138=((1.0)*cj5);
CheckValue<IkReal> x7139=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7138))+(((-1.0)*r00*sj5)))),-1);
if(!x7139.valid){
continue;
}
CheckValue<IkReal> x7140 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7138)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7139.value)))+(x7140.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7141=IKsin(j4);
IkReal x7142=IKcos(j4);
IkReal x7143=(r11*sj5);
IkReal x7144=(r21*sj5);
IkReal x7145=(cj5*r00);
IkReal x7146=(cj5*r20);
IkReal x7147=(r01*sj5);
IkReal x7148=(cj5*r10);
IkReal x7149=((1.0)*x7142);
IkReal x7150=((1.0)*x7141);
evalcond[0]=((((-1.0)*x7146*x7150))+((x7141*x7144))+(((-1.0)*r22*x7149)));
evalcond[1]=((((-1.0)*x7147*x7149))+(((-1.0)*r02*x7150))+((x7142*x7145)));
evalcond[2]=((((-1.0)*r12*x7150))+((x7142*x7148))+(((-1.0)*x7143*x7149)));
evalcond[3]=(((x7141*x7143))+cj0+(((-1.0)*x7148*x7150))+(((-1.0)*r12*x7149)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7150))+(((-1.0)*x7144*x7149))+((x7142*x7146)));
evalcond[5]=(((x7141*x7147))+(((-1.0)*sj0))+(((-1.0)*x7145*x7150))+(((-1.0)*r02*x7149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7151=((1.0)*sj5);
CheckValue<IkReal> x7152=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7151)))),-1);
if(!x7152.valid){
continue;
}
CheckValue<IkReal> x7153 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7151))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7152.value)))+(x7153.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7154=IKsin(j4);
IkReal x7155=IKcos(j4);
IkReal x7156=(r11*sj5);
IkReal x7157=(r21*sj5);
IkReal x7158=(cj5*r00);
IkReal x7159=(cj5*r20);
IkReal x7160=(r01*sj5);
IkReal x7161=(cj5*r10);
IkReal x7162=((1.0)*x7155);
IkReal x7163=((1.0)*x7154);
evalcond[0]=((((-1.0)*x7159*x7163))+(((-1.0)*r22*x7162))+((x7154*x7157)));
evalcond[1]=((((-1.0)*r02*x7163))+(((-1.0)*x7160*x7162))+((x7155*x7158)));
evalcond[2]=((((-1.0)*x7156*x7162))+((x7155*x7161))+(((-1.0)*r12*x7163)));
evalcond[3]=(cj0+(((-1.0)*x7161*x7163))+((x7154*x7156))+(((-1.0)*r12*x7162)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7163))+(((-1.0)*x7157*x7162))+((x7155*x7159)));
evalcond[5]=((((-1.0)*r02*x7162))+(((-1.0)*sj0))+(((-1.0)*x7158*x7163))+((x7154*x7160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7164=IKsin(j0);
IkReal x7165=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.134)*x7164))+(((0.392)*x7165)));
evalcond[1]=((((0.134)*x7165))+(((-1.0)*py))+(((0.392)*x7164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7166=((1.0)*cj5);
IkReal x7167=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7166)));
j4eval[0]=x7167;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7166))))));
j4eval[2]=IKsign(x7167);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7168=((1.0)*cj5);
IkReal x7169=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7168)));
j4eval[0]=x7169;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7168))))));
j4eval[2]=IKsign(x7169);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7170=cj5*cj5;
IkReal x7171=((1.0)*sj5);
IkReal x7172=(cj5*r20);
IkReal x7173=(r11*r21);
IkReal x7174=(x7173+(((-1.0)*cj5*r10*r21*x7171))+((r12*r22))+(((-1.0)*r11*x7171*x7172))+((r10*r20*x7170))+(((-1.0)*x7170*x7173)));
j4eval[0]=x7174;
j4eval[1]=IKsign(x7174);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7171))+((cj0*x7172))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7175=cj5*cj5;
IkReal x7176=((1.0)*sj5);
IkReal x7177=(cj5*r20);
IkReal x7178=(r11*r21);
CheckValue<IkReal> x7179 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7176))+((cj0*x7177)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7179.valid){
continue;
}
CheckValue<IkReal> x7180=IKPowWithIntegerCheck(IKsign((x7178+(((-1.0)*cj5*r10*r21*x7176))+(((-1.0)*x7175*x7178))+((r12*r22))+((r10*r20*x7175))+(((-1.0)*r11*x7176*x7177)))),-1);
if(!x7180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7179.value)+(((1.5707963267949)*(x7180.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7181=IKsin(j4);
IkReal x7182=IKcos(j4);
IkReal x7183=((1.0)*sj0);
IkReal x7184=(cj5*r00);
IkReal x7185=(r11*sj5);
IkReal x7186=(cj5*r10);
IkReal x7187=(r21*sj5);
IkReal x7188=(cj5*r20);
IkReal x7189=(r01*sj5);
IkReal x7190=((1.0)*x7182);
IkReal x7191=((1.0)*x7181);
evalcond[0]=(((x7181*x7187))+(((-1.0)*x7188*x7191))+(((-1.0)*r22*x7190)));
evalcond[1]=((((-1.0)*x7187*x7190))+((x7182*x7188))+(((-1.0)*r22*x7191)));
evalcond[2]=(cj0+((x7181*x7185))+(((-1.0)*x7186*x7191))+(((-1.0)*r12*x7190)));
evalcond[3]=((((-1.0)*x7184*x7191))+((x7181*x7189))+(((-1.0)*x7183))+(((-1.0)*r02*x7190)));
evalcond[4]=((((-1.0)*x7189*x7190))+((x7182*x7184))+(((-1.0)*r02*x7191))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7185*x7190))+((x7182*x7186))+(((-1.0)*x7183))+(((-1.0)*r12*x7191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7192=((1.0)*cj5);
CheckValue<IkReal> x7193 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7192)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7193.valid){
continue;
}
CheckValue<IkReal> x7194=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7192)))),-1);
if(!x7194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7193.value)+(((1.5707963267949)*(x7194.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7195=IKsin(j4);
IkReal x7196=IKcos(j4);
IkReal x7197=((1.0)*sj0);
IkReal x7198=(cj5*r00);
IkReal x7199=(r11*sj5);
IkReal x7200=(cj5*r10);
IkReal x7201=(r21*sj5);
IkReal x7202=(cj5*r20);
IkReal x7203=(r01*sj5);
IkReal x7204=((1.0)*x7196);
IkReal x7205=((1.0)*x7195);
evalcond[0]=((((-1.0)*x7202*x7205))+((x7195*x7201))+(((-1.0)*r22*x7204)));
evalcond[1]=(((x7196*x7202))+(((-1.0)*x7201*x7204))+(((-1.0)*r22*x7205)));
evalcond[2]=(cj0+((x7195*x7199))+(((-1.0)*r12*x7204))+(((-1.0)*x7200*x7205)));
evalcond[3]=((((-1.0)*x7197))+(((-1.0)*x7198*x7205))+((x7195*x7203))+(((-1.0)*r02*x7204)));
evalcond[4]=(((x7196*x7198))+(((-1.0)*x7203*x7204))+(((-1.0)*cj0))+(((-1.0)*r02*x7205)));
evalcond[5]=((((-1.0)*x7197))+(((-1.0)*x7199*x7204))+((x7196*x7200))+(((-1.0)*r12*x7205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7206=((1.0)*cj5);
CheckValue<IkReal> x7207 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7206))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7207.valid){
continue;
}
CheckValue<IkReal> x7208=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7206)))),-1);
if(!x7208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7207.value)+(((1.5707963267949)*(x7208.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7209=IKsin(j4);
IkReal x7210=IKcos(j4);
IkReal x7211=((1.0)*sj0);
IkReal x7212=(cj5*r00);
IkReal x7213=(r11*sj5);
IkReal x7214=(cj5*r10);
IkReal x7215=(r21*sj5);
IkReal x7216=(cj5*r20);
IkReal x7217=(r01*sj5);
IkReal x7218=((1.0)*x7210);
IkReal x7219=((1.0)*x7209);
evalcond[0]=(((x7209*x7215))+(((-1.0)*x7216*x7219))+(((-1.0)*r22*x7218)));
evalcond[1]=((((-1.0)*x7215*x7218))+((x7210*x7216))+(((-1.0)*r22*x7219)));
evalcond[2]=(cj0+((x7209*x7213))+(((-1.0)*r12*x7218))+(((-1.0)*x7214*x7219)));
evalcond[3]=((((-1.0)*x7212*x7219))+((x7209*x7217))+(((-1.0)*x7211))+(((-1.0)*r02*x7218)));
evalcond[4]=((((-1.0)*x7217*x7218))+((x7210*x7212))+(((-1.0)*r02*x7219))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7213*x7218))+((x7210*x7214))+(((-1.0)*x7211))+(((-1.0)*r12*x7219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.195493438569105)*px))+(((-1.19192641276835)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.195493438569105)*py))+(((-1.19192641276835)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))))+IKsqr(((((0.195493438569105)*py))+(((-1.19192641276835)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.195493438569105)*px))+(((-1.19192641276835)*py))), ((((0.195493438569105)*py))+(((-1.19192641276835)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7220=IKcos(j0);
IkReal x7221=IKsin(j0);
evalcond[0]=((((-0.134)*x7221))+(((-1.0)*px))+(((-0.817)*x7220)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x7220))+(((-0.817)*x7221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7222=((1.0)*cj5);
IkReal x7223=((((-1.0)*r01*x7222))+(((-1.0)*r00*sj5)));
j4eval[0]=x7223;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7222)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7223);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7224=cj5*cj5;
IkReal x7225=((1.0)*r21);
IkReal x7226=(cj5*sj5);
IkReal x7227=((1.0)*r20);
IkReal x7228=(((r01*r21))+(((-1.0)*r01*x7226*x7227))+(((-1.0)*r00*x7225*x7226))+(((-1.0)*r01*x7224*x7225))+((r02*r22))+((r00*r20*x7224)));
j4eval[0]=x7228;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7227)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7228);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7229=cj5*cj5;
IkReal x7230=(r21*sj5);
IkReal x7231=(r11*r21);
IkReal x7232=((1.0)*cj5*r20);
IkReal x7233=((((-1.0)*r11*sj5*x7232))+(((-1.0)*cj5*r10*x7230))+((r10*r20*x7229))+x7231+((r12*r22))+(((-1.0)*x7229*x7231)));
j4eval[0]=x7233;
j4eval[1]=((IKabs(((((-1.0)*sj0*x7232))+((sj0*x7230)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7233);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7234=cj5*cj5;
IkReal x7235=(r21*sj5);
IkReal x7236=(r11*r21);
IkReal x7237=((1.0)*cj5*r20);
CheckValue<IkReal> x7238=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7234*x7236))+(((-1.0)*r11*sj5*x7237))+(((-1.0)*cj5*r10*x7235))+((r10*r20*x7234))+x7236+((r12*r22)))),-1);
if(!x7238.valid){
continue;
}
CheckValue<IkReal> x7239 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x7237))+((sj0*x7235)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7238.value)))+(x7239.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7240=IKsin(j4);
IkReal x7241=IKcos(j4);
IkReal x7242=(r11*sj5);
IkReal x7243=(cj5*r00);
IkReal x7244=(cj5*r10);
IkReal x7245=(r21*sj5);
IkReal x7246=(cj5*r20);
IkReal x7247=(r01*sj5);
IkReal x7248=((1.0)*x7241);
IkReal x7249=((1.0)*x7240);
evalcond[0]=(((x7240*x7245))+(((-1.0)*x7246*x7249))+(((-1.0)*r22*x7248)));
evalcond[1]=((((-1.0)*x7245*x7248))+(((-1.0)*r22*x7249))+((x7241*x7246)));
evalcond[2]=(((x7240*x7242))+(((-1.0)*r12*x7248))+cj0+(((-1.0)*x7244*x7249)));
evalcond[3]=((((-1.0)*x7247*x7248))+cj0+(((-1.0)*r02*x7249))+((x7241*x7243)));
evalcond[4]=(sj0+(((-1.0)*r12*x7249))+(((-1.0)*x7242*x7248))+((x7241*x7244)));
evalcond[5]=(((x7240*x7247))+(((-1.0)*sj0))+(((-1.0)*r02*x7248))+(((-1.0)*x7243*x7249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7250=cj5*cj5;
IkReal x7251=((1.0)*r21);
IkReal x7252=(cj5*sj5);
IkReal x7253=((1.0)*r20);
CheckValue<IkReal> x7254=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7252*x7253))+((r01*r21))+(((-1.0)*r00*x7251*x7252))+((r02*r22))+(((-1.0)*r01*x7250*x7251))+((r00*r20*x7250)))),-1);
if(!x7254.valid){
continue;
}
CheckValue<IkReal> x7255 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7253)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7254.value)))+(x7255.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7256=IKsin(j4);
IkReal x7257=IKcos(j4);
IkReal x7258=(r11*sj5);
IkReal x7259=(cj5*r00);
IkReal x7260=(cj5*r10);
IkReal x7261=(r21*sj5);
IkReal x7262=(cj5*r20);
IkReal x7263=(r01*sj5);
IkReal x7264=((1.0)*x7257);
IkReal x7265=((1.0)*x7256);
evalcond[0]=(((x7256*x7261))+(((-1.0)*r22*x7264))+(((-1.0)*x7262*x7265)));
evalcond[1]=((((-1.0)*r22*x7265))+((x7257*x7262))+(((-1.0)*x7261*x7264)));
evalcond[2]=(cj0+(((-1.0)*x7260*x7265))+(((-1.0)*r12*x7264))+((x7256*x7258)));
evalcond[3]=(((x7257*x7259))+cj0+(((-1.0)*x7263*x7264))+(((-1.0)*r02*x7265)));
evalcond[4]=(sj0+((x7257*x7260))+(((-1.0)*x7258*x7264))+(((-1.0)*r12*x7265)));
evalcond[5]=(((x7256*x7263))+(((-1.0)*sj0))+(((-1.0)*x7259*x7265))+(((-1.0)*r02*x7264)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7266=((1.0)*cj5);
CheckValue<IkReal> x7267=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7266))+(((-1.0)*r00*sj5)))),-1);
if(!x7267.valid){
continue;
}
CheckValue<IkReal> x7268 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7266)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7267.value)))+(x7268.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7269=IKsin(j4);
IkReal x7270=IKcos(j4);
IkReal x7271=(r11*sj5);
IkReal x7272=(cj5*r00);
IkReal x7273=(cj5*r10);
IkReal x7274=(r21*sj5);
IkReal x7275=(cj5*r20);
IkReal x7276=(r01*sj5);
IkReal x7277=((1.0)*x7270);
IkReal x7278=((1.0)*x7269);
evalcond[0]=((((-1.0)*r22*x7277))+((x7269*x7274))+(((-1.0)*x7275*x7278)));
evalcond[1]=((((-1.0)*r22*x7278))+(((-1.0)*x7274*x7277))+((x7270*x7275)));
evalcond[2]=(cj0+(((-1.0)*r12*x7277))+(((-1.0)*x7273*x7278))+((x7269*x7271)));
evalcond[3]=(cj0+(((-1.0)*r02*x7278))+((x7270*x7272))+(((-1.0)*x7276*x7277)));
evalcond[4]=(sj0+(((-1.0)*r12*x7278))+((x7270*x7273))+(((-1.0)*x7271*x7277)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7272*x7278))+((x7269*x7276))+(((-1.0)*r02*x7277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-1.73273825150958)*py))+(((-7.03596744552376)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((7.03596744552376)*py))+(((-1.73273825150958)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))))+IKsqr(((((7.03596744552376)*py))+(((-1.73273825150958)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.73273825150958)*py))+(((-7.03596744552376)*px))), ((((7.03596744552376)*py))+(((-1.73273825150958)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7279=IKcos(j0);
IkReal x7280=IKsin(j0);
evalcond[0]=((((-0.033)*x7279))+(((-1.0)*px))+(((-0.134)*x7280)));
evalcond[1]=((((0.134)*x7279))+(((-1.0)*py))+(((-0.033)*x7280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7281=((1.0)*cj5);
IkReal x7282=((((-1.0)*r01*x7281))+(((-1.0)*r00*sj5)));
j4eval[0]=x7282;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7281))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7282);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7283=((1.0)*cj5);
IkReal x7284=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7283)));
j4eval[0]=x7284;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7283))))));
j4eval[2]=IKsign(x7284);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7285=cj5*cj5;
IkReal x7286=((1.0)*sj5);
IkReal x7287=(cj5*r20);
IkReal x7288=(r11*r21);
IkReal x7289=(x7288+(((-1.0)*cj5*r10*r21*x7286))+(((-1.0)*x7285*x7288))+((r10*r20*x7285))+((r12*r22))+(((-1.0)*r11*x7286*x7287)));
j4eval[0]=x7289;
j4eval[1]=IKsign(x7289);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7286))+((cj0*x7287))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7290=cj5*cj5;
IkReal x7291=((1.0)*sj5);
IkReal x7292=(cj5*r20);
IkReal x7293=(r11*r21);
CheckValue<IkReal> x7294=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7291*x7292))+x7293+(((-1.0)*cj5*r10*r21*x7291))+((r10*r20*x7290))+((r12*r22))+(((-1.0)*x7290*x7293)))),-1);
if(!x7294.valid){
continue;
}
CheckValue<IkReal> x7295 = IKatan2WithCheck(IkReal((((cj0*x7292))+(((-1.0)*cj0*r21*x7291)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7294.value)))+(x7295.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7296=IKsin(j4);
IkReal x7297=IKcos(j4);
IkReal x7298=((1.0)*sj0);
IkReal x7299=(cj5*r00);
IkReal x7300=(r11*sj5);
IkReal x7301=(cj5*r10);
IkReal x7302=(r21*sj5);
IkReal x7303=(cj5*r20);
IkReal x7304=(r01*sj5);
IkReal x7305=((1.0)*x7297);
IkReal x7306=((1.0)*x7296);
evalcond[0]=(((x7296*x7302))+(((-1.0)*x7303*x7306))+(((-1.0)*r22*x7305)));
evalcond[1]=((((-1.0)*x7302*x7305))+(((-1.0)*r22*x7306))+((x7297*x7303)));
evalcond[2]=(cj0+((x7296*x7300))+(((-1.0)*x7301*x7306))+(((-1.0)*r12*x7305)));
evalcond[3]=((((-1.0)*r02*x7305))+(((-1.0)*x7298))+((x7296*x7304))+(((-1.0)*x7299*x7306)));
evalcond[4]=((((-1.0)*r02*x7306))+((x7297*x7299))+(((-1.0)*x7304*x7305))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7298))+(((-1.0)*r12*x7306))+(((-1.0)*x7300*x7305))+((x7297*x7301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7307=((1.0)*cj5);
CheckValue<IkReal> x7308 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7307))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7308.valid){
continue;
}
CheckValue<IkReal> x7309=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7307)))),-1);
if(!x7309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7308.value)+(((1.5707963267949)*(x7309.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7310=IKsin(j4);
IkReal x7311=IKcos(j4);
IkReal x7312=((1.0)*sj0);
IkReal x7313=(cj5*r00);
IkReal x7314=(r11*sj5);
IkReal x7315=(cj5*r10);
IkReal x7316=(r21*sj5);
IkReal x7317=(cj5*r20);
IkReal x7318=(r01*sj5);
IkReal x7319=((1.0)*x7311);
IkReal x7320=((1.0)*x7310);
evalcond[0]=((((-1.0)*x7317*x7320))+((x7310*x7316))+(((-1.0)*r22*x7319)));
evalcond[1]=((((-1.0)*r22*x7320))+(((-1.0)*x7316*x7319))+((x7311*x7317)));
evalcond[2]=(cj0+((x7310*x7314))+(((-1.0)*x7315*x7320))+(((-1.0)*r12*x7319)));
evalcond[3]=(((x7310*x7318))+(((-1.0)*x7313*x7320))+(((-1.0)*x7312))+(((-1.0)*r02*x7319)));
evalcond[4]=((((-1.0)*x7318*x7319))+((x7311*x7313))+(((-1.0)*cj0))+(((-1.0)*r02*x7320)));
evalcond[5]=((((-1.0)*x7312))+(((-1.0)*x7314*x7319))+(((-1.0)*r12*x7320))+((x7311*x7315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7321=((1.0)*cj5);
CheckValue<IkReal> x7322=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7321)))),-1);
if(!x7322.valid){
continue;
}
CheckValue<IkReal> x7323 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7321)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7322.value)))+(x7323.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7324=IKsin(j4);
IkReal x7325=IKcos(j4);
IkReal x7326=((1.0)*sj0);
IkReal x7327=(cj5*r00);
IkReal x7328=(r11*sj5);
IkReal x7329=(cj5*r10);
IkReal x7330=(r21*sj5);
IkReal x7331=(cj5*r20);
IkReal x7332=(r01*sj5);
IkReal x7333=((1.0)*x7325);
IkReal x7334=((1.0)*x7324);
evalcond[0]=(((x7324*x7330))+(((-1.0)*x7331*x7334))+(((-1.0)*r22*x7333)));
evalcond[1]=(((x7325*x7331))+(((-1.0)*r22*x7334))+(((-1.0)*x7330*x7333)));
evalcond[2]=(cj0+(((-1.0)*r12*x7333))+(((-1.0)*x7329*x7334))+((x7324*x7328)));
evalcond[3]=((((-1.0)*r02*x7333))+(((-1.0)*x7327*x7334))+((x7324*x7332))+(((-1.0)*x7326)));
evalcond[4]=((((-1.0)*r02*x7334))+((x7325*x7327))+(((-1.0)*x7332*x7333))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7334))+((x7325*x7329))+(((-1.0)*x7326))+(((-1.0)*x7328*x7333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7335=IKsin(j0);
IkReal x7336=IKcos(j0);
IkReal x7337=((0.1)*sj5);
IkReal x7338=(cj5*r11);
IkReal x7339=(cj5*r01);
IkReal x7340=((1.0)*sj5);
evalcond[0]=((((-1.0)*x7339))+x7336+(((-1.0)*r00*x7340)));
evalcond[1]=((((-1.0)*x7338))+x7335+(((-1.0)*r10*x7340)));
evalcond[2]=((((-0.134)*x7335))+(((-0.1)*x7339))+(((-1.0)*px))+(((-1.0)*r00*x7337)));
evalcond[3]=((((-0.1)*x7338))+(((-1.0)*py))+(((0.134)*x7336))+(((-1.0)*r10*x7337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7341=((1.0)*sj5);
IkReal x7342=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7341)));
j4eval[0]=x7342;
j4eval[1]=IKsign(x7342);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7341))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7343=((1.0)*cj5);
IkReal x7344=((((-1.0)*r01*x7343))+(((-1.0)*r00*sj5)));
j4eval[0]=x7344;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7343))))));
j4eval[2]=IKsign(x7344);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7345=r21*r21;
IkReal x7346=cj5*cj5;
IkReal x7347=(r21*sj5);
IkReal x7348=(cj5*r20);
IkReal x7349=((((2.0)*x7347*x7348))+(((-1.0)*x7346*(r20*r20)))+((x7345*x7346))+(((-1.0)*(r22*r22)))+(((-1.0)*x7345)));
j4eval[0]=x7349;
j4eval[1]=((IKabs((x7347+(((-1.0)*x7348)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7349);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7350=r21*r21;
IkReal x7351=cj5*cj5;
IkReal x7352=(r21*sj5);
IkReal x7353=(cj5*r20);
CheckValue<IkReal> x7354 = IKatan2WithCheck(IkReal(r22),IkReal((x7352+(((-1.0)*x7353)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7354.valid){
continue;
}
CheckValue<IkReal> x7355=IKPowWithIntegerCheck(IKsign((((x7350*x7351))+(((-1.0)*(r22*r22)))+(((-1.0)*x7351*(r20*r20)))+(((2.0)*x7352*x7353))+(((-1.0)*x7350)))),-1);
if(!x7355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7354.value)+(((1.5707963267949)*(x7355.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7356=IKsin(j4);
IkReal x7357=IKcos(j4);
IkReal x7358=(r11*sj5);
IkReal x7359=(r21*sj5);
IkReal x7360=(cj5*r00);
IkReal x7361=(cj5*r20);
IkReal x7362=(r01*sj5);
IkReal x7363=(cj5*r10);
IkReal x7364=((1.0)*x7357);
IkReal x7365=((1.0)*x7356);
evalcond[0]=(((x7356*x7359))+(((-1.0)*r22*x7364))+(((-1.0)*x7361*x7365)));
evalcond[1]=(((x7357*x7360))+(((-1.0)*r02*x7365))+(((-1.0)*x7362*x7364)));
evalcond[2]=((((-1.0)*r12*x7365))+((x7357*x7363))+(((-1.0)*x7358*x7364)));
evalcond[3]=(cj0+(((-1.0)*x7363*x7365))+((x7356*x7358))+(((-1.0)*r12*x7364)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7365))+((x7357*x7361))+(((-1.0)*x7359*x7364)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7360*x7365))+(((-1.0)*r02*x7364))+((x7356*x7362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7366=((1.0)*cj5);
CheckValue<IkReal> x7367 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7366))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7367.valid){
continue;
}
CheckValue<IkReal> x7368=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7366)))),-1);
if(!x7368.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7367.value)+(((1.5707963267949)*(x7368.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7369=IKsin(j4);
IkReal x7370=IKcos(j4);
IkReal x7371=(r11*sj5);
IkReal x7372=(r21*sj5);
IkReal x7373=(cj5*r00);
IkReal x7374=(cj5*r20);
IkReal x7375=(r01*sj5);
IkReal x7376=(cj5*r10);
IkReal x7377=((1.0)*x7370);
IkReal x7378=((1.0)*x7369);
evalcond[0]=((((-1.0)*x7374*x7378))+(((-1.0)*r22*x7377))+((x7369*x7372)));
evalcond[1]=(((x7370*x7373))+(((-1.0)*x7375*x7377))+(((-1.0)*r02*x7378)));
evalcond[2]=(((x7370*x7376))+(((-1.0)*r12*x7378))+(((-1.0)*x7371*x7377)));
evalcond[3]=(cj0+(((-1.0)*x7376*x7378))+(((-1.0)*r12*x7377))+((x7369*x7371)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7378))+((x7370*x7374))+(((-1.0)*x7372*x7377)));
evalcond[5]=((((-1.0)*sj0))+((x7369*x7375))+(((-1.0)*r02*x7377))+(((-1.0)*x7373*x7378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7379=((1.0)*sj5);
CheckValue<IkReal> x7380=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7379)))),-1);
if(!x7380.valid){
continue;
}
CheckValue<IkReal> x7381 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7379))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7381.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7380.value)))+(x7381.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7382=IKsin(j4);
IkReal x7383=IKcos(j4);
IkReal x7384=(r11*sj5);
IkReal x7385=(r21*sj5);
IkReal x7386=(cj5*r00);
IkReal x7387=(cj5*r20);
IkReal x7388=(r01*sj5);
IkReal x7389=(cj5*r10);
IkReal x7390=((1.0)*x7383);
IkReal x7391=((1.0)*x7382);
evalcond[0]=((((-1.0)*r22*x7390))+(((-1.0)*x7387*x7391))+((x7382*x7385)));
evalcond[1]=((((-1.0)*r02*x7391))+(((-1.0)*x7388*x7390))+((x7383*x7386)));
evalcond[2]=((((-1.0)*r12*x7391))+(((-1.0)*x7384*x7390))+((x7383*x7389)));
evalcond[3]=((((-1.0)*r12*x7390))+cj0+(((-1.0)*x7389*x7391))+((x7382*x7384)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7391))+((x7383*x7387))+(((-1.0)*x7385*x7390)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7390))+(((-1.0)*x7386*x7391))+((x7382*x7388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7392=IKsin(j0);
IkReal x7393=IKcos(j0);
evalcond[0]=((((-0.134)*x7392))+(((0.392)*x7393))+(((-1.0)*px)));
evalcond[1]=((((0.392)*x7392))+(((-1.0)*py))+(((0.134)*x7393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7394=((1.0)*cj5);
IkReal x7395=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7394)));
j4eval[0]=x7395;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7394)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7395);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7396=((1.0)*cj5);
IkReal x7397=((((-1.0)*r11*x7396))+(((-1.0)*r10*sj5)));
j4eval[0]=x7397;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7396))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7397);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7398=cj5*cj5;
IkReal x7399=((1.0)*sj5);
IkReal x7400=(cj5*r20);
IkReal x7401=(r11*r21);
IkReal x7402=(((r10*r20*x7398))+(((-1.0)*r11*x7399*x7400))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7399))+x7401+(((-1.0)*x7398*x7401)));
j4eval[0]=x7402;
j4eval[1]=IKsign(x7402);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7399))+((cj0*x7400)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7403=cj5*cj5;
IkReal x7404=((1.0)*sj5);
IkReal x7405=(cj5*r20);
IkReal x7406=(r11*r21);
CheckValue<IkReal> x7407=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7404*x7405))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7404))+x7406+(((-1.0)*x7403*x7406))+((r10*r20*x7403)))),-1);
if(!x7407.valid){
continue;
}
CheckValue<IkReal> x7408 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7404))+((cj0*x7405)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7408.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7407.value)))+(x7408.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7409=IKsin(j4);
IkReal x7410=IKcos(j4);
IkReal x7411=((1.0)*sj0);
IkReal x7412=(cj5*r00);
IkReal x7413=(r11*sj5);
IkReal x7414=(cj5*r10);
IkReal x7415=(r21*sj5);
IkReal x7416=(cj5*r20);
IkReal x7417=(r01*sj5);
IkReal x7418=((1.0)*x7410);
IkReal x7419=((1.0)*x7409);
evalcond[0]=((((-1.0)*x7416*x7419))+((x7409*x7415))+(((-1.0)*r22*x7418)));
evalcond[1]=(((x7410*x7416))+(((-1.0)*x7415*x7418))+(((-1.0)*r22*x7419)));
evalcond[2]=((((-1.0)*r12*x7418))+cj0+(((-1.0)*x7414*x7419))+((x7409*x7413)));
evalcond[3]=((((-1.0)*x7411))+((x7409*x7417))+(((-1.0)*x7412*x7419))+(((-1.0)*r02*x7418)));
evalcond[4]=(((x7410*x7412))+(((-1.0)*x7417*x7418))+(((-1.0)*cj0))+(((-1.0)*r02*x7419)));
evalcond[5]=((((-1.0)*r12*x7419))+((x7410*x7414))+(((-1.0)*x7411))+(((-1.0)*x7413*x7418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7420=((1.0)*cj5);
CheckValue<IkReal> x7421 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7420))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7421.valid){
continue;
}
CheckValue<IkReal> x7422=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7420)))),-1);
if(!x7422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7421.value)+(((1.5707963267949)*(x7422.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7423=IKsin(j4);
IkReal x7424=IKcos(j4);
IkReal x7425=((1.0)*sj0);
IkReal x7426=(cj5*r00);
IkReal x7427=(r11*sj5);
IkReal x7428=(cj5*r10);
IkReal x7429=(r21*sj5);
IkReal x7430=(cj5*r20);
IkReal x7431=(r01*sj5);
IkReal x7432=((1.0)*x7424);
IkReal x7433=((1.0)*x7423);
evalcond[0]=((((-1.0)*x7430*x7433))+(((-1.0)*r22*x7432))+((x7423*x7429)));
evalcond[1]=((((-1.0)*r22*x7433))+(((-1.0)*x7429*x7432))+((x7424*x7430)));
evalcond[2]=(cj0+(((-1.0)*r12*x7432))+(((-1.0)*x7428*x7433))+((x7423*x7427)));
evalcond[3]=((((-1.0)*r02*x7432))+(((-1.0)*x7425))+((x7423*x7431))+(((-1.0)*x7426*x7433)));
evalcond[4]=(((x7424*x7426))+(((-1.0)*r02*x7433))+(((-1.0)*cj0))+(((-1.0)*x7431*x7432)));
evalcond[5]=(((x7424*x7428))+(((-1.0)*r12*x7433))+(((-1.0)*x7427*x7432))+(((-1.0)*x7425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7434=((1.0)*cj5);
CheckValue<IkReal> x7435 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7434)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7435.valid){
continue;
}
CheckValue<IkReal> x7436=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7434))+(((-1.0)*r00*sj5)))),-1);
if(!x7436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7435.value)+(((1.5707963267949)*(x7436.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7437=IKsin(j4);
IkReal x7438=IKcos(j4);
IkReal x7439=((1.0)*sj0);
IkReal x7440=(cj5*r00);
IkReal x7441=(r11*sj5);
IkReal x7442=(cj5*r10);
IkReal x7443=(r21*sj5);
IkReal x7444=(cj5*r20);
IkReal x7445=(r01*sj5);
IkReal x7446=((1.0)*x7438);
IkReal x7447=((1.0)*x7437);
evalcond[0]=(((x7437*x7443))+(((-1.0)*x7444*x7447))+(((-1.0)*r22*x7446)));
evalcond[1]=(((x7438*x7444))+(((-1.0)*r22*x7447))+(((-1.0)*x7443*x7446)));
evalcond[2]=(cj0+(((-1.0)*x7442*x7447))+((x7437*x7441))+(((-1.0)*r12*x7446)));
evalcond[3]=((((-1.0)*x7440*x7447))+(((-1.0)*x7439))+(((-1.0)*r02*x7446))+((x7437*x7445)));
evalcond[4]=(((x7438*x7440))+(((-1.0)*r02*x7447))+(((-1.0)*x7445*x7446))+(((-1.0)*cj0)));
evalcond[5]=(((x7438*x7442))+(((-1.0)*x7439))+(((-1.0)*x7441*x7446))+(((-1.0)*r12*x7447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7448=((1.0)*sj5);
IkReal x7449=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x7448))+(((-1.0)*r11*x7449)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x7449))+(((-1.0)*r00*x7448)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x7448))+(((-1.0)*r11*x7449))))+IKsqr(((((-1.0)*r01*x7449))+(((-1.0)*r00*x7448))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x7448))+(((-1.0)*r11*x7449))), ((((-1.0)*r01*x7449))+(((-1.0)*r00*x7448))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7450=IKsin(j0);
IkReal x7451=IKcos(j0);
IkReal x7452=((0.1)*sj5);
IkReal x7453=(cj5*r11);
IkReal x7454=(cj5*r01);
IkReal x7455=((1.0)*sj5);
evalcond[0]=((((-1.0)*x7451))+(((-1.0)*x7454))+(((-1.0)*r00*x7455)));
evalcond[1]=((((-1.0)*r10*x7455))+(((-1.0)*x7450))+(((-1.0)*x7453)));
evalcond[2]=((((-0.1)*x7454))+(((-1.0)*r00*x7452))+(((-1.0)*px))+(((-0.134)*x7450)));
evalcond[3]=((((-0.1)*x7453))+(((-1.0)*r10*x7452))+(((-1.0)*py))+(((0.134)*x7451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7456=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7456;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7456);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7457=((1.0)*cj5);
IkReal x7458=((((-1.0)*r01*x7457))+(((-1.0)*r00*sj5)));
j4eval[0]=x7458;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7457)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7458);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7459=cj5*cj5;
IkReal x7460=r21*r21;
IkReal x7461=(r21*sj5);
IkReal x7462=(cj5*r20);
IkReal x7463=((r22*r22)+(((-2.0)*x7461*x7462))+(((-1.0)*x7459*x7460))+x7460+((x7459*(r20*r20))));
j4eval[0]=x7463;
j4eval[1]=IKsign(x7463);
j4eval[2]=((IKabs(((((-1.0)*x7462))+x7461)))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7464=cj5*cj5;
IkReal x7465=r21*r21;
IkReal x7466=(r21*sj5);
IkReal x7467=(cj5*r20);
CheckValue<IkReal> x7468 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7467))+x7466)),IKFAST_ATAN2_MAGTHRESH);
if(!x7468.valid){
continue;
}
CheckValue<IkReal> x7469=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x7466*x7467))+((x7464*(r20*r20)))+(((-1.0)*x7464*x7465))+x7465)),-1);
if(!x7469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7468.value)+(((1.5707963267949)*(x7469.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7470=IKsin(j4);
IkReal x7471=IKcos(j4);
IkReal x7472=(r11*sj5);
IkReal x7473=(r21*sj5);
IkReal x7474=(cj5*r00);
IkReal x7475=(cj5*r20);
IkReal x7476=(r01*sj5);
IkReal x7477=(cj5*r10);
IkReal x7478=((1.0)*x7471);
IkReal x7479=((1.0)*x7470);
evalcond[0]=(((x7470*x7473))+(((-1.0)*x7475*x7479))+(((-1.0)*r22*x7478)));
evalcond[1]=((((-1.0)*r02*x7479))+(((-1.0)*x7476*x7478))+((x7471*x7474)));
evalcond[2]=(((x7471*x7477))+(((-1.0)*x7472*x7478))+(((-1.0)*r12*x7479)));
evalcond[3]=((((-1.0)*x7477*x7479))+cj0+((x7470*x7472))+(((-1.0)*r12*x7478)));
evalcond[4]=((1.0)+((x7471*x7475))+(((-1.0)*r22*x7479))+(((-1.0)*x7473*x7478)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7478))+((x7470*x7476))+(((-1.0)*x7474*x7479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7480=((1.0)*cj5);
CheckValue<IkReal> x7481 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7480)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7481.valid){
continue;
}
CheckValue<IkReal> x7482=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7480)))),-1);
if(!x7482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7481.value)+(((1.5707963267949)*(x7482.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7483=IKsin(j4);
IkReal x7484=IKcos(j4);
IkReal x7485=(r11*sj5);
IkReal x7486=(r21*sj5);
IkReal x7487=(cj5*r00);
IkReal x7488=(cj5*r20);
IkReal x7489=(r01*sj5);
IkReal x7490=(cj5*r10);
IkReal x7491=((1.0)*x7484);
IkReal x7492=((1.0)*x7483);
evalcond[0]=((((-1.0)*x7488*x7492))+(((-1.0)*r22*x7491))+((x7483*x7486)));
evalcond[1]=(((x7484*x7487))+(((-1.0)*x7489*x7491))+(((-1.0)*r02*x7492)));
evalcond[2]=(((x7484*x7490))+(((-1.0)*r12*x7492))+(((-1.0)*x7485*x7491)));
evalcond[3]=(cj0+(((-1.0)*x7490*x7492))+(((-1.0)*r12*x7491))+((x7483*x7485)));
evalcond[4]=((1.0)+((x7484*x7488))+(((-1.0)*x7486*x7491))+(((-1.0)*r22*x7492)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7487*x7492))+(((-1.0)*r02*x7491))+((x7483*x7489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7493 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7493.valid){
continue;
}
CheckValue<IkReal> x7494=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7493.value)+(((1.5707963267949)*(x7494.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7495=IKsin(j4);
IkReal x7496=IKcos(j4);
IkReal x7497=(r11*sj5);
IkReal x7498=(r21*sj5);
IkReal x7499=(cj5*r00);
IkReal x7500=(cj5*r20);
IkReal x7501=(r01*sj5);
IkReal x7502=(cj5*r10);
IkReal x7503=((1.0)*x7496);
IkReal x7504=((1.0)*x7495);
evalcond[0]=((((-1.0)*r22*x7503))+(((-1.0)*x7500*x7504))+((x7495*x7498)));
evalcond[1]=((((-1.0)*x7501*x7503))+((x7496*x7499))+(((-1.0)*r02*x7504)));
evalcond[2]=((((-1.0)*x7497*x7503))+((x7496*x7502))+(((-1.0)*r12*x7504)));
evalcond[3]=(cj0+(((-1.0)*x7502*x7504))+((x7495*x7497))+(((-1.0)*r12*x7503)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7504))+(((-1.0)*x7498*x7503))+((x7496*x7500)));
evalcond[5]=((((-1.0)*x7499*x7504))+(((-1.0)*sj0))+(((-1.0)*r02*x7503))+((x7495*x7501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.28411607038807)*py))+(((-0.780794779163268)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.780794779163268)*py))+(((-2.28411607038807)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))))+IKsqr(((((0.780794779163268)*py))+(((-2.28411607038807)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.28411607038807)*py))+(((-0.780794779163268)*px))), ((((0.780794779163268)*py))+(((-2.28411607038807)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7505=IKcos(j0);
IkReal x7506=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.392)*x7505))+(((-0.134)*x7506)));
evalcond[1]=((((-1.0)*py))+(((0.134)*x7505))+(((-0.392)*x7506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7507=((1.0)*cj5);
IkReal x7508=((((-1.0)*r01*x7507))+(((-1.0)*r00*sj5)));
j4eval[0]=x7508;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7507))))));
j4eval[2]=IKsign(x7508);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7509=cj5*cj5;
IkReal x7510=((1.0)*r21);
IkReal x7511=(cj5*sj5);
IkReal x7512=((1.0)*r20);
IkReal x7513=(((r01*r21))+((r00*r20*x7509))+(((-1.0)*r01*x7509*x7510))+(((-1.0)*r00*x7510*x7511))+((r02*r22))+(((-1.0)*r01*x7511*x7512)));
j4eval[0]=x7513;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7512)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7513);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7514=cj5*cj5;
IkReal x7515=(r21*sj5);
IkReal x7516=(r11*r21);
IkReal x7517=((1.0)*cj5*r20);
IkReal x7518=(((r12*r22))+(((-1.0)*r11*sj5*x7517))+(((-1.0)*cj5*r10*x7515))+x7516+((r10*r20*x7514))+(((-1.0)*x7514*x7516)));
j4eval[0]=x7518;
j4eval[1]=((IKabs((((sj0*x7515))+(((-1.0)*sj0*x7517)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7518);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7519=cj5*cj5;
IkReal x7520=(r21*sj5);
IkReal x7521=(r11*r21);
IkReal x7522=((1.0)*cj5*r20);
CheckValue<IkReal> x7523 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7520))+(((-1.0)*sj0*x7522)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7523.valid){
continue;
}
CheckValue<IkReal> x7524=IKPowWithIntegerCheck(IKsign((((r12*r22))+(((-1.0)*cj5*r10*x7520))+(((-1.0)*r11*sj5*x7522))+(((-1.0)*x7519*x7521))+x7521+((r10*r20*x7519)))),-1);
if(!x7524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7523.value)+(((1.5707963267949)*(x7524.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7525=IKsin(j4);
IkReal x7526=IKcos(j4);
IkReal x7527=(r11*sj5);
IkReal x7528=(cj5*r00);
IkReal x7529=(cj5*r10);
IkReal x7530=(r21*sj5);
IkReal x7531=(cj5*r20);
IkReal x7532=(r01*sj5);
IkReal x7533=((1.0)*x7526);
IkReal x7534=((1.0)*x7525);
evalcond[0]=((((-1.0)*r22*x7533))+(((-1.0)*x7531*x7534))+((x7525*x7530)));
evalcond[1]=((((-1.0)*r22*x7534))+(((-1.0)*x7530*x7533))+((x7526*x7531)));
evalcond[2]=(((x7525*x7527))+cj0+(((-1.0)*r12*x7533))+(((-1.0)*x7529*x7534)));
evalcond[3]=(((x7526*x7528))+(((-1.0)*x7532*x7533))+cj0+(((-1.0)*r02*x7534)));
evalcond[4]=((((-1.0)*x7527*x7533))+sj0+((x7526*x7529))+(((-1.0)*r12*x7534)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7528*x7534))+((x7525*x7532))+(((-1.0)*r02*x7533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7535=cj5*cj5;
IkReal x7536=((1.0)*r21);
IkReal x7537=(cj5*sj5);
IkReal x7538=((1.0)*r20);
CheckValue<IkReal> x7539=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7537*x7538))+(((-1.0)*r00*x7536*x7537))+((r01*r21))+(((-1.0)*r01*x7535*x7536))+((r02*r22))+((r00*r20*x7535)))),-1);
if(!x7539.valid){
continue;
}
CheckValue<IkReal> x7540 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7538)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7539.value)))+(x7540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7541=IKsin(j4);
IkReal x7542=IKcos(j4);
IkReal x7543=(r11*sj5);
IkReal x7544=(cj5*r00);
IkReal x7545=(cj5*r10);
IkReal x7546=(r21*sj5);
IkReal x7547=(cj5*r20);
IkReal x7548=(r01*sj5);
IkReal x7549=((1.0)*x7542);
IkReal x7550=((1.0)*x7541);
evalcond[0]=((((-1.0)*r22*x7549))+((x7541*x7546))+(((-1.0)*x7547*x7550)));
evalcond[1]=((((-1.0)*r22*x7550))+((x7542*x7547))+(((-1.0)*x7546*x7549)));
evalcond[2]=(cj0+((x7541*x7543))+(((-1.0)*r12*x7549))+(((-1.0)*x7545*x7550)));
evalcond[3]=(cj0+((x7542*x7544))+(((-1.0)*r02*x7550))+(((-1.0)*x7548*x7549)));
evalcond[4]=((((-1.0)*x7543*x7549))+sj0+((x7542*x7545))+(((-1.0)*r12*x7550)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7544*x7550))+((x7541*x7548))+(((-1.0)*r02*x7549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7551=((1.0)*cj5);
CheckValue<IkReal> x7552 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7551)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7552.valid){
continue;
}
CheckValue<IkReal> x7553=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7551)))),-1);
if(!x7553.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7552.value)+(((1.5707963267949)*(x7553.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7554=IKsin(j4);
IkReal x7555=IKcos(j4);
IkReal x7556=(r11*sj5);
IkReal x7557=(cj5*r00);
IkReal x7558=(cj5*r10);
IkReal x7559=(r21*sj5);
IkReal x7560=(cj5*r20);
IkReal x7561=(r01*sj5);
IkReal x7562=((1.0)*x7555);
IkReal x7563=((1.0)*x7554);
evalcond[0]=((((-1.0)*r22*x7562))+(((-1.0)*x7560*x7563))+((x7554*x7559)));
evalcond[1]=((((-1.0)*x7559*x7562))+(((-1.0)*r22*x7563))+((x7555*x7560)));
evalcond[2]=(cj0+(((-1.0)*r12*x7562))+(((-1.0)*x7558*x7563))+((x7554*x7556)));
evalcond[3]=((((-1.0)*r02*x7563))+cj0+((x7555*x7557))+(((-1.0)*x7561*x7562)));
evalcond[4]=(sj0+(((-1.0)*x7556*x7562))+(((-1.0)*r12*x7563))+((x7555*x7558)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7562))+(((-1.0)*x7557*x7563))+((x7554*x7561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7564=cj1*cj1;
IkReal x7565=((500.0)*py);
IkReal x7566=(cj1*sj2);
IkReal x7567=(cj2*sj2);
IkReal x7568=(cj5*r01);
IkReal x7569=(cj2*sj1);
IkReal x7570=(cj1*sj1);
IkReal x7571=(r00*sj5);
IkReal x7572=((50.0)*r10*sj5);
IkReal x7573=((50.0)*cj5*r11);
CheckValue<IkReal> x7574=IKPowWithIntegerCheck(((((-392.0)*cj1*cj2*x7569))+(((-212.5)*cj1*x7569))+(((-392.0)*x7564*x7567))+(((196.0)*x7570))+(((-212.5)*sj2*x7564))+(((196.0)*x7567))),-1);
if(!x7574.valid){
continue;
}
CheckValue<IkReal> x7575=IKPowWithIntegerCheck(((((-1.0)*x7569))+(((-1.0)*x7566))),-1);
if(!x7575.valid){
continue;
}
if( IKabs(((x7574.value)*(((((-1.0)*x7565*x7566))+(((-1.0)*x7565*x7569))+(((-1.0)*x7566*x7572))+(((-1.0)*x7566*x7573))+(((-67.0)*x7571))+(((-67.0)*x7568))+(((-1.0)*x7569*x7573))+(((-1.0)*x7569*x7572)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7575.value)*((x7571+x7568)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7574.value)*(((((-1.0)*x7565*x7566))+(((-1.0)*x7565*x7569))+(((-1.0)*x7566*x7572))+(((-1.0)*x7566*x7573))+(((-67.0)*x7571))+(((-67.0)*x7568))+(((-1.0)*x7569*x7573))+(((-1.0)*x7569*x7572))))))+IKsqr(((x7575.value)*((x7571+x7568))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7574.value)*(((((-1.0)*x7565*x7566))+(((-1.0)*x7565*x7569))+(((-1.0)*x7566*x7572))+(((-1.0)*x7566*x7573))+(((-67.0)*x7571))+(((-67.0)*x7568))+(((-1.0)*x7569*x7573))+(((-1.0)*x7569*x7572))))), ((x7575.value)*((x7571+x7568))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7576=IKcos(j0);
IkReal x7577=IKsin(j0);
IkReal x7578=(r00*sj5);
IkReal x7579=(cj5*r11);
IkReal x7580=(r10*sj5);
IkReal x7581=((1.0)*cj2);
IkReal x7582=(cj5*r01);
IkReal x7583=((0.392)*sj2);
IkReal x7584=((0.425)*cj1);
IkReal x7585=((1.0)*cj1*sj2);
IkReal x7586=((0.392)*cj1*cj2);
IkReal x7587=(sj1*x7576);
IkReal x7588=(sj1*x7577);
evalcond[0]=((((-1.0)*x7582))+(((-1.0)*x7576*x7585))+(((-1.0)*x7581*x7587))+(((-1.0)*x7578)));
evalcond[1]=((((-1.0)*x7580))+(((-1.0)*x7581*x7588))+(((-1.0)*x7577*x7585))+(((-1.0)*x7579)));
evalcond[2]=((((-0.1)*x7578))+((x7576*x7586))+((x7576*x7584))+(((-1.0)*px))+(((-0.1)*x7582))+(((-1.0)*x7583*x7587))+(((-0.134)*x7577)));
evalcond[3]=((((-0.1)*x7579))+(((0.134)*x7576))+(((-1.0)*py))+(((-0.1)*x7580))+(((-1.0)*x7583*x7588))+((x7577*x7586))+((x7577*x7584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7589=((1.0)*cj5);
IkReal x7590=((((-1.0)*r01*x7589))+(((-1.0)*r00*sj5)));
j4eval[0]=x7590;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x7589))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7590);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7591=((1.0)*cj5);
IkReal x7592=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7591)));
j4eval[0]=x7592;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x7591))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7592);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7593=((1.0)*sj0);
IkReal x7594=((1.0)*cj0);
IkReal x7595=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7595;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x7594))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x7593)))))+(IKabs(((((-1.0)*r12*x7593))+(((-1.0)*r02*x7594))))));
j4eval[2]=IKsign(x7595);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7596=((-1.0)*r20);
IkReal x7598 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7598)==0){
continue;
}
IkReal x7597=pow(x7598,-0.5);
CheckValue<IkReal> x7599 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7596),IKFAST_ATAN2_MAGTHRESH);
if(!x7599.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7599.value));
IkReal gconst133=(r21*x7597);
IkReal gconst134=(x7596*x7597);
CheckValue<IkReal> x7600 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7600.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7600.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7601=((-1.0)*r20);
IkReal x7602=x7597;
CheckValue<IkReal> x7604 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7601),IKFAST_ATAN2_MAGTHRESH);
if(!x7604.valid){
continue;
}
IkReal x7603=((-1.0)*(x7604.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7603;
IkReal gconst132=x7603;
IkReal gconst133=(r21*x7602);
IkReal gconst134=(x7601*x7602);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7605=((-1.0)*r20);
IkReal x7606=x7597;
CheckValue<IkReal> x7608 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7605),IKFAST_ATAN2_MAGTHRESH);
if(!x7608.valid){
continue;
}
IkReal x7607=((-1.0)*(x7608.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7607;
IkReal gconst132=x7607;
IkReal gconst133=(r21*x7606);
IkReal gconst134=(x7605*x7606);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7609=((-1.0)*r20);
IkReal x7610=x7597;
CheckValue<IkReal> x7612 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7609),IKFAST_ATAN2_MAGTHRESH);
if(!x7612.valid){
continue;
}
IkReal x7611=((-1.0)*(x7612.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7611;
IkReal gconst132=x7611;
IkReal gconst133=(r21*x7610);
IkReal gconst134=(x7609*x7610);
IkReal x7613=r22*r22;
CheckValue<IkReal> x7616=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7613))),-1);
if(!x7616.valid){
continue;
}
IkReal x7614=x7616.value;
IkReal x7615=((((2.0)*x7614*(r20*r20)*(r21*r21)))+((x7614*(r20*r20*r20*r20)))+x7613+((x7614*(r21*r21*r21*r21))));
j4eval[0]=x7615;
j4eval[1]=IKsign(x7615);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7617=(gconst133*r21);
IkReal x7618=(cj1*sj2);
IkReal x7619=(gconst134*r20);
IkReal x7620=(cj2*sj1);
CheckValue<IkReal> x7621=IKPowWithIntegerCheck(IKsign(((x7619*x7619)+(r22*r22)+(((-2.0)*x7617*x7619))+(x7617*x7617))),-1);
if(!x7621.valid){
continue;
}
CheckValue<IkReal> x7622 = IKatan2WithCheck(IkReal((((r22*x7618))+((r22*x7620)))),IkReal((((x7617*x7620))+(((-1.0)*x7618*x7619))+((x7617*x7618))+(((-1.0)*x7619*x7620)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7621.value)))+(x7622.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7623=IKsin(j4);
IkReal x7624=IKcos(j4);
IkReal x7625=(sj1*sj2);
IkReal x7626=(gconst133*r11);
IkReal x7627=(gconst133*r21);
IkReal x7628=(gconst133*r01);
IkReal x7629=((1.0)*x7624);
IkReal x7630=(gconst134*x7624);
IkReal x7631=((1.0)*x7623);
IkReal x7632=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7631))+(((-1.0)*r22*x7629))+((x7623*x7627)));
evalcond[1]=((((-1.0)*gconst134*r10*x7631))+cj0+(((-1.0)*r12*x7629))+((x7623*x7626)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x7631))+(((-1.0)*r02*x7629))+((x7623*x7628)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7631))+((cj1*sj2))+(((-1.0)*x7627*x7629))+((r20*x7630)));
evalcond[4]=((((-1.0)*cj0*x7632))+((r00*x7630))+(((-1.0)*r02*x7631))+(((-1.0)*x7628*x7629))+((cj0*x7625)));
evalcond[5]=((((-1.0)*x7626*x7629))+((sj0*x7625))+((r10*x7630))+(((-1.0)*r12*x7631))+(((-1.0)*sj0*x7632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7633=((1.0)*gconst134);
CheckValue<IkReal> x7634 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst133*r21*sj0))+(((-1.0)*r20*sj0*x7633)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7634.valid){
continue;
}
CheckValue<IkReal> x7635=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7633)))),-1);
if(!x7635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7634.value)+(((1.5707963267949)*(x7635.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7636=IKsin(j4);
IkReal x7637=IKcos(j4);
IkReal x7638=(sj1*sj2);
IkReal x7639=(gconst133*r11);
IkReal x7640=(gconst133*r21);
IkReal x7641=(gconst133*r01);
IkReal x7642=((1.0)*x7637);
IkReal x7643=(gconst134*x7637);
IkReal x7644=((1.0)*x7636);
IkReal x7645=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7642))+((x7636*x7640))+(((-1.0)*gconst134*r20*x7644)));
evalcond[1]=(cj0+(((-1.0)*r12*x7642))+(((-1.0)*gconst134*r10*x7644))+((x7636*x7639)));
evalcond[2]=((((-1.0)*sj0))+((x7636*x7641))+(((-1.0)*r02*x7642))+(((-1.0)*gconst134*r00*x7644)));
evalcond[3]=((((-1.0)*r22*x7644))+((cj2*sj1))+((cj1*sj2))+((r20*x7643))+(((-1.0)*x7640*x7642)));
evalcond[4]=((((-1.0)*r02*x7644))+(((-1.0)*cj0*x7645))+((cj0*x7638))+((r00*x7643))+(((-1.0)*x7641*x7642)));
evalcond[5]=((((-1.0)*x7639*x7642))+(((-1.0)*sj0*x7645))+(((-1.0)*r12*x7644))+((r10*x7643))+((sj0*x7638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7646=((1.0)*gconst134);
CheckValue<IkReal> x7647 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7646))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7647.valid){
continue;
}
CheckValue<IkReal> x7648=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7646)))),-1);
if(!x7648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7647.value)+(((1.5707963267949)*(x7648.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7649=IKsin(j4);
IkReal x7650=IKcos(j4);
IkReal x7651=(sj1*sj2);
IkReal x7652=(gconst133*r11);
IkReal x7653=(gconst133*r21);
IkReal x7654=(gconst133*r01);
IkReal x7655=((1.0)*x7650);
IkReal x7656=(gconst134*x7650);
IkReal x7657=((1.0)*x7649);
IkReal x7658=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7655))+((x7649*x7653))+(((-1.0)*gconst134*r20*x7657)));
evalcond[1]=(cj0+(((-1.0)*gconst134*r10*x7657))+((x7649*x7652))+(((-1.0)*r12*x7655)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7655))+(((-1.0)*gconst134*r00*x7657))+((x7649*x7654)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7657))+((cj1*sj2))+(((-1.0)*x7653*x7655))+((r20*x7656)));
evalcond[4]=((((-1.0)*r02*x7657))+(((-1.0)*cj0*x7658))+(((-1.0)*x7654*x7655))+((cj0*x7651))+((r00*x7656)));
evalcond[5]=((((-1.0)*sj0*x7658))+((r10*x7656))+(((-1.0)*r12*x7657))+(((-1.0)*x7652*x7655))+((sj0*x7651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7659=((-1.0)*r21);
IkReal x7661 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7661)==0){
continue;
}
IkReal x7660=pow(x7661,-0.5);
CheckValue<IkReal> x7662 = IKatan2WithCheck(IkReal(x7659),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7662.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7662.value))));
IkReal gconst136=(x7659*x7660);
IkReal gconst137=((1.0)*r20*x7660);
CheckValue<IkReal> x7663 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7663.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7663.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7664=((-1.0)*r21);
CheckValue<IkReal> x7667 = IKatan2WithCheck(IkReal(x7664),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7667.valid){
continue;
}
IkReal x7665=((1.0)*(x7667.value));
IkReal x7666=x7660;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7665)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7665)));
IkReal gconst136=(x7664*x7666);
IkReal gconst137=((1.0)*r20*x7666);
IkReal x7668=r22*r22;
IkReal x7669=((1.0)*x7668);
CheckValue<IkReal> x7673=IKPowWithIntegerCheck(((-1.0)+x7668),-1);
if(!x7673.valid){
continue;
}
IkReal x7670=x7673.value;
if((((1.0)+(((-1.0)*x7669)))) < -0.00001)
continue;
IkReal x7671=IKsqrt(((1.0)+(((-1.0)*x7669))));
IkReal x7672=(cj0*x7670*x7671);
j4eval[0]=((IKabs(((((-1.0)*x7669*x7672))+x7672)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7674=((-1.0)*r21);
CheckValue<IkReal> x7677 = IKatan2WithCheck(IkReal(x7674),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7677.valid){
continue;
}
IkReal x7675=((1.0)*(x7677.value));
IkReal x7676=x7660;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7675)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7675)));
IkReal gconst136=(x7674*x7676);
IkReal gconst137=((1.0)*r20*x7676);
IkReal x7678=r22*r22;
IkReal x7679=((1.0)*x7678);
CheckValue<IkReal> x7683=IKPowWithIntegerCheck(((-1.0)+x7678),-1);
if(!x7683.valid){
continue;
}
IkReal x7680=x7683.value;
if((((1.0)+(((-1.0)*x7679)))) < -0.00001)
continue;
IkReal x7681=IKsqrt(((1.0)+(((-1.0)*x7679))));
IkReal x7682=(sj0*x7680*x7681);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x7679*x7682))+x7682))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7684=((-1.0)*r21);
CheckValue<IkReal> x7687 = IKatan2WithCheck(IkReal(x7684),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7687.valid){
continue;
}
IkReal x7685=((1.0)*(x7687.value));
IkReal x7686=x7660;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7685)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7685)));
IkReal gconst136=(x7684*x7686);
IkReal gconst137=((1.0)*r20*x7686);
IkReal x7688=r22*r22;
IkReal x7689=(r12*sj0);
IkReal x7690=(cj0*r02);
CheckValue<IkReal> x7694=IKPowWithIntegerCheck(((-1.0)+x7688),-1);
if(!x7694.valid){
continue;
}
IkReal x7691=x7694.value;
if((((1.0)+(((-1.0)*x7688)))) < -0.00001)
continue;
IkReal x7692=IKsqrt(((1.0)+(((-1.0)*x7688))));
IkReal x7693=(r22*x7691*x7692);
j4eval[0]=0;
j4eval[1]=((IKabs((((x7689*x7693))+((x7690*x7693)))))+(IKabs(((((-1.0)*x7690))+(((-1.0)*x7689))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7695=((1.0)*sj0);
IkReal x7696=((1.0)*cj0);
CheckValue<IkReal> x7697=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7697.valid){
continue;
}
CheckValue<IkReal> x7698 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7696))+(((-1.0)*r12*x7695)))),IkReal(((((-1.0)*gconst136*r01*x7696))+((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x7695))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7697.value)))+(x7698.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7699=IKsin(j4);
IkReal x7700=IKcos(j4);
IkReal x7701=(gconst136*r01);
IkReal x7702=(gconst137*r10);
IkReal x7703=(sj1*sj2);
IkReal x7704=(gconst137*r20);
IkReal x7705=(gconst136*r11);
IkReal x7706=(gconst136*r21);
IkReal x7707=(gconst137*r00);
IkReal x7708=((1.0)*x7700);
IkReal x7709=((1.0)*cj1*cj2);
IkReal x7710=((1.0)*x7699);
evalcond[0]=((((-1.0)*r22*x7708))+(((-1.0)*x7704*x7710))+((x7699*x7706)));
evalcond[1]=(cj0+(((-1.0)*r12*x7708))+(((-1.0)*x7702*x7710))+((x7699*x7705)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7707*x7710))+(((-1.0)*r02*x7708))+((x7699*x7701)));
evalcond[3]=(((cj2*sj1))+((x7700*x7704))+(((-1.0)*r22*x7710))+((cj1*sj2))+(((-1.0)*x7706*x7708)));
evalcond[4]=(((x7700*x7707))+((cj0*x7703))+(((-1.0)*x7701*x7708))+(((-1.0)*r02*x7710))+(((-1.0)*cj0*x7709)));
evalcond[5]=(((x7700*x7702))+(((-1.0)*r12*x7710))+((sj0*x7703))+(((-1.0)*x7705*x7708))+(((-1.0)*sj0*x7709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7711=((1.0)*gconst137);
CheckValue<IkReal> x7712=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7711))+(((-1.0)*gconst136*r10)))),-1);
if(!x7712.valid){
continue;
}
CheckValue<IkReal> x7713 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7711))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7712.value)))+(x7713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7714=IKsin(j4);
IkReal x7715=IKcos(j4);
IkReal x7716=(gconst136*r01);
IkReal x7717=(gconst137*r10);
IkReal x7718=(sj1*sj2);
IkReal x7719=(gconst137*r20);
IkReal x7720=(gconst136*r11);
IkReal x7721=(gconst136*r21);
IkReal x7722=(gconst137*r00);
IkReal x7723=((1.0)*x7715);
IkReal x7724=((1.0)*cj1*cj2);
IkReal x7725=((1.0)*x7714);
evalcond[0]=((((-1.0)*x7719*x7725))+((x7714*x7721))+(((-1.0)*r22*x7723)));
evalcond[1]=(cj0+(((-1.0)*x7717*x7725))+((x7714*x7720))+(((-1.0)*r12*x7723)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7723))+((x7714*x7716))+(((-1.0)*x7722*x7725)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x7715*x7719))+(((-1.0)*r22*x7725))+(((-1.0)*x7721*x7723)));
evalcond[4]=(((x7715*x7722))+(((-1.0)*x7716*x7723))+((cj0*x7718))+(((-1.0)*r02*x7725))+(((-1.0)*cj0*x7724)));
evalcond[5]=((((-1.0)*sj0*x7724))+((sj0*x7718))+((x7715*x7717))+(((-1.0)*x7720*x7723))+(((-1.0)*r12*x7725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7726=((1.0)*gconst137);
CheckValue<IkReal> x7727=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7726))+(((-1.0)*gconst136*r00)))),-1);
if(!x7727.valid){
continue;
}
CheckValue<IkReal> x7728 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7726))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7727.value)))+(x7728.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7729=IKsin(j4);
IkReal x7730=IKcos(j4);
IkReal x7731=(gconst136*r01);
IkReal x7732=(gconst137*r10);
IkReal x7733=(sj1*sj2);
IkReal x7734=(gconst137*r20);
IkReal x7735=(gconst136*r11);
IkReal x7736=(gconst136*r21);
IkReal x7737=(gconst137*r00);
IkReal x7738=((1.0)*x7730);
IkReal x7739=((1.0)*cj1*cj2);
IkReal x7740=((1.0)*x7729);
evalcond[0]=(((x7729*x7736))+(((-1.0)*r22*x7738))+(((-1.0)*x7734*x7740)));
evalcond[1]=(cj0+((x7729*x7735))+(((-1.0)*r12*x7738))+(((-1.0)*x7732*x7740)));
evalcond[2]=((((-1.0)*sj0))+((x7729*x7731))+(((-1.0)*x7737*x7740))+(((-1.0)*r02*x7738)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7740))+(((-1.0)*x7736*x7738))+((cj1*sj2))+((x7730*x7734)));
evalcond[4]=((((-1.0)*cj0*x7739))+(((-1.0)*x7731*x7738))+(((-1.0)*r02*x7740))+((cj0*x7733))+((x7730*x7737)));
evalcond[5]=(((x7730*x7732))+(((-1.0)*r12*x7740))+(((-1.0)*x7735*x7738))+((sj0*x7733))+(((-1.0)*sj0*x7739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7741=((-1.0)*r10);
IkReal x7743 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7743)==0){
continue;
}
IkReal x7742=pow(x7743,-0.5);
CheckValue<IkReal> x7744 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7741),IKFAST_ATAN2_MAGTHRESH);
if(!x7744.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7744.value));
IkReal gconst139=(r11*x7742);
IkReal gconst140=(x7741*x7742);
CheckValue<IkReal> x7745 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7745.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7745.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7746=((-1.0)*r10);
IkReal x7747=x7742;
CheckValue<IkReal> x7749 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7746),IKFAST_ATAN2_MAGTHRESH);
if(!x7749.valid){
continue;
}
IkReal x7748=((-1.0)*(x7749.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7748;
IkReal gconst138=x7748;
IkReal gconst139=(r11*x7747);
IkReal gconst140=(x7746*x7747);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7750=((1.0)*sj0);
IkReal x7751=((1.0)*gconst139);
CheckValue<IkReal> x7752 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7750)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x7750))+(((-1.0)*cj0*r01*x7751))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7752.valid){
continue;
}
CheckValue<IkReal> x7753=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7751)))),-1);
if(!x7753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7752.value)+(((1.5707963267949)*(x7753.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7754=IKsin(j4);
IkReal x7755=IKcos(j4);
IkReal x7756=(gconst140*r00);
IkReal x7757=(sj1*sj2);
IkReal x7758=(gconst139*r11);
IkReal x7759=(gconst139*r01);
IkReal x7760=(gconst139*r21);
IkReal x7761=((1.0)*x7755);
IkReal x7762=((1.0)*x7754);
IkReal x7763=((1.0)*cj1*cj2);
IkReal x7764=(gconst140*x7755);
evalcond[0]=((((-1.0)*r22*x7761))+((x7754*x7760))+(((-1.0)*gconst140*r20*x7762)));
evalcond[1]=(cj0+(((-1.0)*r12*x7761))+((x7754*x7758))+(((-1.0)*gconst140*r10*x7762)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7761))+(((-1.0)*x7756*x7762))+((x7754*x7759)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7760*x7761))+(((-1.0)*r22*x7762))+((cj1*sj2))+((r20*x7764)));
evalcond[4]=((((-1.0)*r02*x7762))+(((-1.0)*cj0*x7763))+((x7755*x7756))+(((-1.0)*x7759*x7761))+((cj0*x7757)));
evalcond[5]=(((sj0*x7757))+(((-1.0)*x7758*x7761))+(((-1.0)*sj0*x7763))+(((-1.0)*r12*x7762))+((r10*x7764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7765=((1.0)*gconst140);
CheckValue<IkReal> x7766 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7765)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7766.valid){
continue;
}
CheckValue<IkReal> x7767=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7765))+(((-1.0)*gconst139*r00)))),-1);
if(!x7767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7766.value)+(((1.5707963267949)*(x7767.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7768=IKsin(j4);
IkReal x7769=IKcos(j4);
IkReal x7770=(gconst140*r00);
IkReal x7771=(sj1*sj2);
IkReal x7772=(gconst139*r11);
IkReal x7773=(gconst139*r01);
IkReal x7774=(gconst139*r21);
IkReal x7775=((1.0)*x7769);
IkReal x7776=((1.0)*x7768);
IkReal x7777=((1.0)*cj1*cj2);
IkReal x7778=(gconst140*x7769);
evalcond[0]=((((-1.0)*r22*x7775))+((x7768*x7774))+(((-1.0)*gconst140*r20*x7776)));
evalcond[1]=(cj0+((x7768*x7772))+(((-1.0)*r12*x7775))+(((-1.0)*gconst140*r10*x7776)));
evalcond[2]=((((-1.0)*r02*x7775))+(((-1.0)*sj0))+((x7768*x7773))+(((-1.0)*x7770*x7776)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7776))+((cj1*sj2))+((r20*x7778))+(((-1.0)*x7774*x7775)));
evalcond[4]=((((-1.0)*r02*x7776))+(((-1.0)*cj0*x7777))+((x7769*x7770))+((cj0*x7771))+(((-1.0)*x7773*x7775)));
evalcond[5]=((((-1.0)*x7772*x7775))+((sj0*x7771))+(((-1.0)*sj0*x7777))+(((-1.0)*r12*x7776))+((r10*x7778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7779=((-1.0)*r11);
IkReal x7781 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7781)==0){
continue;
}
IkReal x7780=pow(x7781,-0.5);
CheckValue<IkReal> x7782 = IKatan2WithCheck(IkReal(x7779),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7782.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7782.value))));
IkReal gconst142=(x7779*x7780);
IkReal gconst143=((1.0)*r10*x7780);
CheckValue<IkReal> x7783 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7783.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7783.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7784=((-1.0)*r11);
CheckValue<IkReal> x7787 = IKatan2WithCheck(IkReal(x7784),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7787.valid){
continue;
}
IkReal x7785=((1.0)*(x7787.value));
IkReal x7786=x7780;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7785)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7785)));
IkReal gconst142=(x7784*x7786);
IkReal gconst143=((1.0)*r10*x7786);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7788=((-1.0)*r11);
CheckValue<IkReal> x7791 = IKatan2WithCheck(IkReal(x7788),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7791.valid){
continue;
}
IkReal x7789=((1.0)*(x7791.value));
IkReal x7790=x7780;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7789)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7789)));
IkReal gconst142=(x7788*x7790);
IkReal gconst143=((1.0)*r10*x7790);
IkReal x7792=r12*r12;
IkReal x7793=((1.0)*sj0);
IkReal x7794=(cj0*r02);
IkReal x7795=x7780;
j4eval[0]=((IKabs(((((-1.0)*r12*x7793))+(((-1.0)*x7794)))))+(IKabs((((r12*x7794*x7795))+(((-1.0)*x7793*x7795))+((sj0*x7792*x7795))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7796=((-1.0)*r11);
CheckValue<IkReal> x7799 = IKatan2WithCheck(IkReal(x7796),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7799.valid){
continue;
}
IkReal x7797=((1.0)*(x7799.value));
IkReal x7798=x7780;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7797)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7797)));
IkReal gconst142=(x7796*x7798);
IkReal gconst143=((1.0)*r10*x7798);
IkReal x7800=r12*r12;
IkReal x7801=(cj1*r22*sj2);
IkReal x7802=(cj2*r22*sj1);
CheckValue<IkReal> x7806=IKPowWithIntegerCheck(((-1.0)+x7800),-1);
if(!x7806.valid){
continue;
}
IkReal x7803=x7806.value;
if((((1.0)+(((-1.0)*x7800)))) < -0.00001)
continue;
IkReal x7804=IKsqrt(((1.0)+(((-1.0)*x7800))));
IkReal x7805=((1.0)*r12*x7803*x7804);
j4eval[0]=((IKabs((x7801+x7802)))+(IKabs(((((-1.0)*x7801*x7805))+(((-1.0)*x7802*x7805))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7807=(gconst142*r21);
IkReal x7808=(cj1*sj2);
IkReal x7809=(cj2*sj1);
IkReal x7810=(gconst143*r20);
CheckValue<IkReal> x7811 = IKatan2WithCheck(IkReal((((r22*x7809))+((r22*x7808)))),IkReal(((((-1.0)*x7808*x7810))+(((-1.0)*x7809*x7810))+((x7807*x7808))+((x7807*x7809)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7811.valid){
continue;
}
CheckValue<IkReal> x7812=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7810*x7810)+(((-2.0)*x7807*x7810))+(x7807*x7807))),-1);
if(!x7812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7811.value)+(((1.5707963267949)*(x7812.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7813=IKsin(j4);
IkReal x7814=IKcos(j4);
IkReal x7815=(sj1*sj2);
IkReal x7816=(gconst143*r20);
IkReal x7817=((1.0)*x7814);
IkReal x7818=((1.0)*cj1*cj2);
IkReal x7819=((1.0)*x7813);
IkReal x7820=(gconst142*x7813);
IkReal x7821=(gconst143*x7814);
evalcond[0]=(((r21*x7820))+(((-1.0)*r22*x7817))+(((-1.0)*x7816*x7819)));
evalcond[1]=(cj0+((r11*x7820))+(((-1.0)*r12*x7817))+(((-1.0)*gconst143*r10*x7819)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7817))+((r01*x7820))+(((-1.0)*gconst143*r00*x7819)));
evalcond[3]=(((cj2*sj1))+((x7814*x7816))+((cj1*sj2))+(((-1.0)*r22*x7819))+(((-1.0)*gconst142*r21*x7817)));
evalcond[4]=((((-1.0)*gconst142*r01*x7817))+(((-1.0)*r02*x7819))+((r00*x7821))+(((-1.0)*cj0*x7818))+((cj0*x7815)));
evalcond[5]=(((r10*x7821))+(((-1.0)*gconst142*r11*x7817))+((sj0*x7815))+(((-1.0)*r12*x7819))+(((-1.0)*sj0*x7818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7822=((1.0)*sj0);
IkReal x7823=((1.0)*gconst142);
CheckValue<IkReal> x7824=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7823))+(((-1.0)*gconst143*r21)))),-1);
if(!x7824.valid){
continue;
}
CheckValue<IkReal> x7825 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7822)))),IkReal(((((-1.0)*gconst142*r11*x7822))+((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7823))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7824.value)))+(x7825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7826=IKsin(j4);
IkReal x7827=IKcos(j4);
IkReal x7828=(sj1*sj2);
IkReal x7829=(gconst143*r20);
IkReal x7830=((1.0)*x7827);
IkReal x7831=((1.0)*cj1*cj2);
IkReal x7832=((1.0)*x7826);
IkReal x7833=(gconst142*x7826);
IkReal x7834=(gconst143*x7827);
evalcond[0]=(((r21*x7833))+(((-1.0)*x7829*x7832))+(((-1.0)*r22*x7830)));
evalcond[1]=((((-1.0)*gconst143*r10*x7832))+cj0+(((-1.0)*r12*x7830))+((r11*x7833)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x7832))+(((-1.0)*r02*x7830))+((r01*x7833)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7832))+((cj1*sj2))+((x7827*x7829))+(((-1.0)*gconst142*r21*x7830)));
evalcond[4]=((((-1.0)*cj0*x7831))+(((-1.0)*gconst142*r01*x7830))+(((-1.0)*r02*x7832))+((r00*x7834))+((cj0*x7828)));
evalcond[5]=(((r10*x7834))+((sj0*x7828))+(((-1.0)*r12*x7832))+(((-1.0)*sj0*x7831))+(((-1.0)*gconst142*r11*x7830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7835=((1.0)*gconst143);
CheckValue<IkReal> x7836=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x7835)))),-1);
if(!x7836.valid){
continue;
}
CheckValue<IkReal> x7837 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7835))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7836.value)))+(x7837.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7838=IKsin(j4);
IkReal x7839=IKcos(j4);
IkReal x7840=(sj1*sj2);
IkReal x7841=(gconst143*r20);
IkReal x7842=((1.0)*x7839);
IkReal x7843=((1.0)*cj1*cj2);
IkReal x7844=((1.0)*x7838);
IkReal x7845=(gconst142*x7838);
IkReal x7846=(gconst143*x7839);
evalcond[0]=(((r21*x7845))+(((-1.0)*r22*x7842))+(((-1.0)*x7841*x7844)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x7844))+(((-1.0)*r12*x7842))+((r11*x7845)));
evalcond[2]=((((-1.0)*gconst143*r00*x7844))+(((-1.0)*sj0))+(((-1.0)*r02*x7842))+((r01*x7845)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7844))+((cj1*sj2))+((x7839*x7841))+(((-1.0)*gconst142*r21*x7842)));
evalcond[4]=((((-1.0)*cj0*x7843))+(((-1.0)*gconst142*r01*x7842))+((cj0*x7840))+((r00*x7846))+(((-1.0)*r02*x7844)));
evalcond[5]=((((-1.0)*gconst142*r11*x7842))+((r10*x7846))+(((-1.0)*r12*x7844))+(((-1.0)*sj0*x7843))+((sj0*x7840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7847=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7847;
j4eval[1]=IKsign(x7847);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7848=((1.0)*cj5);
IkReal x7849=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7848)));
j4eval[0]=x7849;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7848))))));
j4eval[2]=IKsign(x7849);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7850=cj5*cj5;
IkReal x7851=r11*r11;
IkReal x7852=(r11*sj5);
IkReal x7853=(cj5*r10);
IkReal x7854=((r12*r12)+((x7850*(r10*r10)))+x7851+(((-2.0)*x7852*x7853))+(((-1.0)*x7850*x7851)));
j4eval[0]=x7854;
j4eval[1]=IKsign(x7854);
j4eval[2]=((IKabs(r12))+(IKabs((x7853+(((-1.0)*x7852))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7855=cj5*cj5;
IkReal x7856=r11*r11;
IkReal x7857=(cj5*r10);
IkReal x7858=(r11*sj5);
CheckValue<IkReal> x7859=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x7857*x7858))+((x7855*(r10*r10)))+(((-1.0)*x7855*x7856))+x7856)),-1);
if(!x7859.valid){
continue;
}
CheckValue<IkReal> x7860 = IKatan2WithCheck(IkReal((x7857+(((-1.0)*x7858)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7860.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7859.value)))+(x7860.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7861=IKsin(j4);
IkReal x7862=IKcos(j4);
IkReal x7863=(cj5*r10);
IkReal x7864=(r01*sj5);
IkReal x7865=(cj5*r00);
IkReal x7866=(cj5*r20);
IkReal x7867=((1.0)*x7862);
IkReal x7868=((1.0)*x7861);
IkReal x7869=(sj5*x7861);
evalcond[0]=(((r21*x7869))+(((-1.0)*x7866*x7868))+(((-1.0)*r22*x7867)));
evalcond[1]=(((x7861*x7864))+(((-1.0)*r02*x7867))+(((-1.0)*x7865*x7868)));
evalcond[2]=((((-1.0)*r11*sj5*x7867))+(((-1.0)*r12*x7868))+((x7862*x7863)));
evalcond[3]=((1.0)+(((-1.0)*x7863*x7868))+((r11*x7869))+(((-1.0)*r12*x7867)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7862*x7866))+(((-1.0)*r21*sj5*x7867))+(((-1.0)*r22*x7868)));
evalcond[5]=((((-1.0)*x7864*x7867))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7868))+((x7862*x7865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7870=((1.0)*cj5);
CheckValue<IkReal> x7871=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7870))+(((-1.0)*r00*sj5)))),-1);
if(!x7871.valid){
continue;
}
CheckValue<IkReal> x7872 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7870)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7871.value)))+(x7872.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7873=IKsin(j4);
IkReal x7874=IKcos(j4);
IkReal x7875=(cj5*r10);
IkReal x7876=(r01*sj5);
IkReal x7877=(cj5*r00);
IkReal x7878=(cj5*r20);
IkReal x7879=((1.0)*x7874);
IkReal x7880=((1.0)*x7873);
IkReal x7881=(sj5*x7873);
evalcond[0]=((((-1.0)*r22*x7879))+(((-1.0)*x7878*x7880))+((r21*x7881)));
evalcond[1]=((((-1.0)*x7877*x7880))+(((-1.0)*r02*x7879))+((x7873*x7876)));
evalcond[2]=(((x7874*x7875))+(((-1.0)*r11*sj5*x7879))+(((-1.0)*r12*x7880)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7879))+((r11*x7881))+(((-1.0)*x7875*x7880)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7880))+((x7874*x7878))+((cj1*sj2))+(((-1.0)*r21*sj5*x7879)));
evalcond[5]=(((x7874*x7877))+(((-1.0)*x7876*x7879))+(((-1.0)*r02*x7880))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7882=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7882.valid){
continue;
}
CheckValue<IkReal> x7883 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7882.value)))+(x7883.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7884=IKsin(j4);
IkReal x7885=IKcos(j4);
IkReal x7886=(cj5*r10);
IkReal x7887=(r01*sj5);
IkReal x7888=(cj5*r00);
IkReal x7889=(cj5*r20);
IkReal x7890=((1.0)*x7885);
IkReal x7891=((1.0)*x7884);
IkReal x7892=(sj5*x7884);
evalcond[0]=(((r21*x7892))+(((-1.0)*x7889*x7891))+(((-1.0)*r22*x7890)));
evalcond[1]=((((-1.0)*x7888*x7891))+((x7884*x7887))+(((-1.0)*r02*x7890)));
evalcond[2]=((((-1.0)*r11*sj5*x7890))+((x7885*x7886))+(((-1.0)*r12*x7891)));
evalcond[3]=((1.0)+(((-1.0)*x7886*x7891))+(((-1.0)*r12*x7890))+((r11*x7892)));
evalcond[4]=(((cj2*sj1))+((x7885*x7889))+((cj1*sj2))+(((-1.0)*r21*sj5*x7890))+(((-1.0)*r22*x7891)));
evalcond[5]=(((x7885*x7888))+(((-1.0)*x7887*x7890))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7893=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7893;
j4eval[1]=IKsign(x7893);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7894=((1.0)*cj5);
IkReal x7895=((((-1.0)*r21*x7894))+(((-1.0)*r20*sj5)));
j4eval[0]=x7895;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7894))))));
j4eval[2]=IKsign(x7895);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7896=cj5*cj5;
IkReal x7897=r11*r11;
IkReal x7898=(cj5*r10);
IkReal x7899=(r11*sj5);
IkReal x7900=((((-1.0)*x7896*(r10*r10)))+(((2.0)*x7898*x7899))+((x7896*x7897))+(((-1.0)*(r12*r12)))+(((-1.0)*x7897)));
j4eval[0]=x7900;
j4eval[1]=((IKabs(r12))+(IKabs((x7898+(((-1.0)*x7899))))));
j4eval[2]=IKsign(x7900);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7901=cj5*cj5;
IkReal x7902=r11*r11;
IkReal x7903=(cj5*r10);
IkReal x7904=(r11*sj5);
CheckValue<IkReal> x7905 = IKatan2WithCheck(IkReal(((((-1.0)*x7904))+x7903)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7905.valid){
continue;
}
CheckValue<IkReal> x7906=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7902))+(((-1.0)*(r12*r12)))+(((2.0)*x7903*x7904))+((x7901*x7902))+(((-1.0)*x7901*(r10*r10))))),-1);
if(!x7906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7905.value)+(((1.5707963267949)*(x7906.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7907=IKsin(j4);
IkReal x7908=IKcos(j4);
IkReal x7909=(cj5*r10);
IkReal x7910=(r01*sj5);
IkReal x7911=(cj5*r00);
IkReal x7912=(cj5*r20);
IkReal x7913=((1.0)*x7908);
IkReal x7914=((1.0)*x7907);
IkReal x7915=(sj5*x7907);
evalcond[0]=(((r21*x7915))+(((-1.0)*r22*x7913))+(((-1.0)*x7912*x7914)));
evalcond[1]=((((-1.0)*r02*x7913))+(((-1.0)*x7911*x7914))+((x7907*x7910)));
evalcond[2]=(((x7908*x7909))+(((-1.0)*r11*sj5*x7913))+(((-1.0)*r12*x7914)));
evalcond[3]=((-1.0)+((r11*x7915))+(((-1.0)*r12*x7913))+(((-1.0)*x7909*x7914)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7914))+(((-1.0)*r21*sj5*x7913))+((x7908*x7912)));
evalcond[5]=((((-1.0)*r02*x7914))+(((-1.0)*sj1*sj2))+(((-1.0)*x7910*x7913))+((x7908*x7911))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7916=((1.0)*cj5);
CheckValue<IkReal> x7917 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7916)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7917.valid){
continue;
}
CheckValue<IkReal> x7918=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7916))+(((-1.0)*r20*sj5)))),-1);
if(!x7918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7917.value)+(((1.5707963267949)*(x7918.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7919=IKsin(j4);
IkReal x7920=IKcos(j4);
IkReal x7921=(cj5*r10);
IkReal x7922=(r01*sj5);
IkReal x7923=(cj5*r00);
IkReal x7924=(cj5*r20);
IkReal x7925=((1.0)*x7920);
IkReal x7926=((1.0)*x7919);
IkReal x7927=(sj5*x7919);
evalcond[0]=((((-1.0)*x7924*x7926))+(((-1.0)*r22*x7925))+((r21*x7927)));
evalcond[1]=((((-1.0)*r02*x7925))+((x7919*x7922))+(((-1.0)*x7923*x7926)));
evalcond[2]=((((-1.0)*r11*sj5*x7925))+((x7920*x7921))+(((-1.0)*r12*x7926)));
evalcond[3]=((-1.0)+(((-1.0)*x7921*x7926))+(((-1.0)*r12*x7925))+((r11*x7927)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7926))+((x7920*x7924))+(((-1.0)*r21*sj5*x7925)));
evalcond[5]=((((-1.0)*r02*x7926))+(((-1.0)*sj1*sj2))+(((-1.0)*x7922*x7925))+((x7920*x7923))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7928 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7928.valid){
continue;
}
CheckValue<IkReal> x7929=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7928.value)+(((1.5707963267949)*(x7929.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7930=IKsin(j4);
IkReal x7931=IKcos(j4);
IkReal x7932=(cj5*r10);
IkReal x7933=(r01*sj5);
IkReal x7934=(cj5*r00);
IkReal x7935=(cj5*r20);
IkReal x7936=((1.0)*x7931);
IkReal x7937=((1.0)*x7930);
IkReal x7938=(sj5*x7930);
evalcond[0]=((((-1.0)*x7935*x7937))+((r21*x7938))+(((-1.0)*r22*x7936)));
evalcond[1]=((((-1.0)*x7934*x7937))+((x7930*x7933))+(((-1.0)*r02*x7936)));
evalcond[2]=((((-1.0)*r11*sj5*x7936))+(((-1.0)*r12*x7937))+((x7931*x7932)));
evalcond[3]=((-1.0)+(((-1.0)*x7932*x7937))+(((-1.0)*r12*x7936))+((r11*x7938)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7937))+(((-1.0)*r21*sj5*x7936))+((cj1*sj2))+((x7931*x7935)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x7937))+((x7931*x7934))+((cj1*cj2))+(((-1.0)*x7933*x7936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7939=((-1.0)*r00);
IkReal x7941 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7941)==0){
continue;
}
IkReal x7940=pow(x7941,-0.5);
CheckValue<IkReal> x7942 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7939),IKFAST_ATAN2_MAGTHRESH);
if(!x7942.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7942.value));
IkReal gconst145=(r01*x7940);
IkReal gconst146=(x7939*x7940);
CheckValue<IkReal> x7943 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7943.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7943.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7944=((-1.0)*r00);
IkReal x7945=x7940;
CheckValue<IkReal> x7947 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7944),IKFAST_ATAN2_MAGTHRESH);
if(!x7947.valid){
continue;
}
IkReal x7946=((-1.0)*(x7947.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7946;
IkReal gconst144=x7946;
IkReal gconst145=(r01*x7945);
IkReal gconst146=(x7944*x7945);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7948=((1.0)*sj0);
IkReal x7949=((1.0)*gconst145);
CheckValue<IkReal> x7950=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7949))+(((-1.0)*gconst146*r21)))),-1);
if(!x7950.valid){
continue;
}
CheckValue<IkReal> x7951 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7948))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x7949))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x7948)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7950.value)))+(x7951.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7952=IKsin(j4);
IkReal x7953=IKcos(j4);
IkReal x7954=(gconst146*r10);
IkReal x7955=(sj1*sj2);
IkReal x7956=(gconst146*r20);
IkReal x7957=(gconst146*r00);
IkReal x7958=((1.0)*x7953);
IkReal x7959=((1.0)*x7952);
IkReal x7960=(gconst145*x7952);
IkReal x7961=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x7960))+(((-1.0)*x7956*x7959))+(((-1.0)*r22*x7958)));
evalcond[1]=(((r11*x7960))+(((-1.0)*x7954*x7959))+cj0+(((-1.0)*r12*x7958)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7957*x7959))+((r01*x7960))+(((-1.0)*r02*x7958)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7959))+((cj1*sj2))+(((-1.0)*gconst145*r21*x7958))+((x7953*x7956)));
evalcond[4]=(((cj0*x7955))+(((-1.0)*gconst145*r01*x7958))+(((-1.0)*r02*x7959))+(((-1.0)*cj0*x7961))+((x7953*x7957)));
evalcond[5]=((((-1.0)*gconst145*r11*x7958))+(((-1.0)*sj0*x7961))+((sj0*x7955))+((x7953*x7954))+(((-1.0)*r12*x7959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7962=((1.0)*gconst146);
CheckValue<IkReal> x7963 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7962))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7963.valid){
continue;
}
CheckValue<IkReal> x7964=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst145*r10))+(((-1.0)*r11*x7962)))),-1);
if(!x7964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7963.value)+(((1.5707963267949)*(x7964.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7965=IKsin(j4);
IkReal x7966=IKcos(j4);
IkReal x7967=(gconst146*r10);
IkReal x7968=(sj1*sj2);
IkReal x7969=(gconst146*r20);
IkReal x7970=(gconst146*r00);
IkReal x7971=((1.0)*x7966);
IkReal x7972=((1.0)*x7965);
IkReal x7973=(gconst145*x7965);
IkReal x7974=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7971))+(((-1.0)*x7969*x7972))+((r21*x7973)));
evalcond[1]=(cj0+((r11*x7973))+(((-1.0)*x7967*x7972))+(((-1.0)*r12*x7971)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7973))+(((-1.0)*x7970*x7972))+(((-1.0)*r02*x7971)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7972))+((cj1*sj2))+(((-1.0)*gconst145*r21*x7971))+((x7966*x7969)));
evalcond[4]=((((-1.0)*gconst145*r01*x7971))+(((-1.0)*cj0*x7974))+((cj0*x7968))+(((-1.0)*r02*x7972))+((x7966*x7970)));
evalcond[5]=((((-1.0)*sj0*x7974))+(((-1.0)*r12*x7972))+((x7966*x7967))+(((-1.0)*gconst145*r11*x7971))+((sj0*x7968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7975=((-1.0)*r01);
IkReal x7977 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7977)==0){
continue;
}
IkReal x7976=pow(x7977,-0.5);
CheckValue<IkReal> x7978 = IKatan2WithCheck(IkReal(x7975),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7978.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7978.value))));
IkReal gconst148=(x7975*x7976);
IkReal gconst149=((1.0)*r00*x7976);
CheckValue<IkReal> x7979 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7979.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7979.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x7980=((-1.0)*r01);
CheckValue<IkReal> x7983 = IKatan2WithCheck(IkReal(x7980),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7983.valid){
continue;
}
IkReal x7981=((1.0)*(x7983.value));
IkReal x7982=x7976;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7981)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7981)));
IkReal gconst148=(x7980*x7982);
IkReal gconst149=((1.0)*r00*x7982);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7984=((-1.0)*r01);
CheckValue<IkReal> x7987 = IKatan2WithCheck(IkReal(x7984),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7987.valid){
continue;
}
IkReal x7985=((1.0)*(x7987.value));
IkReal x7986=x7976;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7985)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7985)));
IkReal gconst148=(x7984*x7986);
IkReal gconst149=((1.0)*r00*x7986);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7988=((-1.0)*r01);
CheckValue<IkReal> x7991 = IKatan2WithCheck(IkReal(x7988),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7991.valid){
continue;
}
IkReal x7989=((1.0)*(x7991.value));
IkReal x7990=x7976;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7989)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7989)));
IkReal gconst148=(x7988*x7990);
IkReal gconst149=((1.0)*r00*x7990);
IkReal x7992=r02*r02;
IkReal x7993=(r12*sj0);
IkReal x7994=((1.0)*cj0);
IkReal x7995=x7976;
j4eval[0]=((IKabs(((((-1.0)*x7993))+(((-1.0)*r02*x7994)))))+(IKabs((((r02*x7993*x7995))+((cj0*x7992*x7995))+(((-1.0)*x7994*x7995))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7996=((1.0)*sj0);
IkReal x7997=((1.0)*gconst148);
CheckValue<IkReal> x7998=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7997))+(((-1.0)*gconst149*r21)))),-1);
if(!x7998.valid){
continue;
}
CheckValue<IkReal> x7999 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7996))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x7996))+(((-1.0)*cj0*r01*x7997)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7998.value)))+(x7999.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8000=IKsin(j4);
IkReal x8001=IKcos(j4);
IkReal x8002=(gconst148*r11);
IkReal x8003=(sj1*sj2);
IkReal x8004=((1.0)*x8001);
IkReal x8005=(gconst149*x8001);
IkReal x8006=(gconst148*x8000);
IkReal x8007=((1.0)*cj1*cj2);
IkReal x8008=((1.0)*x8000);
evalcond[0]=(((r21*x8006))+(((-1.0)*gconst149*r20*x8008))+(((-1.0)*r22*x8004)));
evalcond[1]=(cj0+((x8000*x8002))+(((-1.0)*r12*x8004))+(((-1.0)*gconst149*r10*x8008)));
evalcond[2]=(((r01*x8006))+(((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8008))+(((-1.0)*r02*x8004)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8004))+((cj1*sj2))+((r20*x8005))+(((-1.0)*r22*x8008)));
evalcond[4]=(((r00*x8005))+(((-1.0)*cj0*x8007))+((cj0*x8003))+(((-1.0)*gconst148*r01*x8004))+(((-1.0)*r02*x8008)));
evalcond[5]=(((sj0*x8003))+(((-1.0)*r12*x8008))+(((-1.0)*sj0*x8007))+(((-1.0)*x8002*x8004))+((r10*x8005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8009=((1.0)*gconst149);
CheckValue<IkReal> x8010=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8009))+(((-1.0)*gconst148*r10)))),-1);
if(!x8010.valid){
continue;
}
CheckValue<IkReal> x8011 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8009))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8010.value)))+(x8011.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8012=IKsin(j4);
IkReal x8013=IKcos(j4);
IkReal x8014=(gconst148*r11);
IkReal x8015=(sj1*sj2);
IkReal x8016=((1.0)*x8013);
IkReal x8017=(gconst149*x8013);
IkReal x8018=(gconst148*x8012);
IkReal x8019=((1.0)*cj1*cj2);
IkReal x8020=((1.0)*x8012);
evalcond[0]=((((-1.0)*r22*x8016))+(((-1.0)*gconst149*r20*x8020))+((r21*x8018)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8020))+((x8012*x8014))+(((-1.0)*r12*x8016)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8016))+((r01*x8018))+(((-1.0)*gconst149*r00*x8020)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8016))+((cj1*sj2))+((r20*x8017))+(((-1.0)*r22*x8020)));
evalcond[4]=(((cj0*x8015))+((r00*x8017))+(((-1.0)*r02*x8020))+(((-1.0)*cj0*x8019))+(((-1.0)*gconst148*r01*x8016)));
evalcond[5]=((((-1.0)*r12*x8020))+(((-1.0)*x8014*x8016))+((sj0*x8015))+((r10*x8017))+(((-1.0)*sj0*x8019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8021=((1.0)*gconst149);
CheckValue<IkReal> x8022 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8021)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8022.valid){
continue;
}
CheckValue<IkReal> x8023=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8021)))),-1);
if(!x8023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8022.value)+(((1.5707963267949)*(x8023.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8024=IKsin(j4);
IkReal x8025=IKcos(j4);
IkReal x8026=(gconst148*r11);
IkReal x8027=(sj1*sj2);
IkReal x8028=((1.0)*x8025);
IkReal x8029=(gconst149*x8025);
IkReal x8030=(gconst148*x8024);
IkReal x8031=((1.0)*cj1*cj2);
IkReal x8032=((1.0)*x8024);
evalcond[0]=((((-1.0)*gconst149*r20*x8032))+((r21*x8030))+(((-1.0)*r22*x8028)));
evalcond[1]=((((-1.0)*r12*x8028))+cj0+((x8024*x8026))+(((-1.0)*gconst149*r10*x8032)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8028))+(((-1.0)*gconst149*r00*x8032))+((r01*x8030)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8028))+((cj1*sj2))+((r20*x8029))+(((-1.0)*r22*x8032)));
evalcond[4]=((((-1.0)*gconst148*r01*x8028))+(((-1.0)*r02*x8032))+((cj0*x8027))+((r00*x8029))+(((-1.0)*cj0*x8031)));
evalcond[5]=(((r10*x8029))+(((-1.0)*sj0*x8031))+(((-1.0)*r12*x8032))+((sj0*x8027))+(((-1.0)*x8026*x8028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8033=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8033;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8033);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8034=((1.0)*cj5);
IkReal x8035=((((-1.0)*r11*x8034))+(((-1.0)*r10*sj5)));
j4eval[0]=x8035;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8034))))));
j4eval[2]=IKsign(x8035);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8036=cj5*cj5;
IkReal x8037=r01*r01;
IkReal x8038=(r01*sj5);
IkReal x8039=(cj5*r00);
IkReal x8040=((((-1.0)*x8037))+(((-1.0)*(r02*r02)))+(((2.0)*x8038*x8039))+((x8036*x8037))+(((-1.0)*x8036*(r00*r00))));
j4eval[0]=x8040;
j4eval[1]=IKsign(x8040);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8038))+x8039))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8041=cj5*cj5;
IkReal x8042=r01*r01;
IkReal x8043=(r01*sj5);
IkReal x8044=(cj5*r00);
CheckValue<IkReal> x8045 = IKatan2WithCheck(IkReal(((((-1.0)*x8043))+x8044)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8045.valid){
continue;
}
CheckValue<IkReal> x8046=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8042))+(((-1.0)*(r02*r02)))+((x8041*x8042))+(((-1.0)*x8041*(r00*r00)))+(((2.0)*x8043*x8044)))),-1);
if(!x8046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8045.value)+(((1.5707963267949)*(x8046.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8047=IKsin(j4);
IkReal x8048=IKcos(j4);
IkReal x8049=(cj5*r10);
IkReal x8050=(r01*sj5);
IkReal x8051=(cj5*r00);
IkReal x8052=(cj5*r20);
IkReal x8053=((1.0)*x8048);
IkReal x8054=((1.0)*x8047);
IkReal x8055=(sj5*x8047);
evalcond[0]=((((-1.0)*x8052*x8054))+(((-1.0)*r22*x8053))+((r21*x8055)));
evalcond[1]=((((-1.0)*r12*x8053))+((r11*x8055))+(((-1.0)*x8049*x8054)));
evalcond[2]=((((-1.0)*x8050*x8053))+(((-1.0)*r02*x8054))+((x8048*x8051)));
evalcond[3]=((-1.0)+((x8047*x8050))+(((-1.0)*x8051*x8054))+(((-1.0)*r02*x8053)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8053))+(((-1.0)*r22*x8054))+((x8048*x8052)));
evalcond[5]=((((-1.0)*r12*x8054))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8053))+((x8048*x8049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8056=((1.0)*cj5);
CheckValue<IkReal> x8057 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8056)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8057.valid){
continue;
}
CheckValue<IkReal> x8058=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8056)))),-1);
if(!x8058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8057.value)+(((1.5707963267949)*(x8058.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8059=IKsin(j4);
IkReal x8060=IKcos(j4);
IkReal x8061=(cj5*r10);
IkReal x8062=(r01*sj5);
IkReal x8063=(cj5*r00);
IkReal x8064=(cj5*r20);
IkReal x8065=((1.0)*x8060);
IkReal x8066=((1.0)*x8059);
IkReal x8067=(sj5*x8059);
evalcond[0]=(((r21*x8067))+(((-1.0)*x8064*x8066))+(((-1.0)*r22*x8065)));
evalcond[1]=((((-1.0)*r12*x8065))+(((-1.0)*x8061*x8066))+((r11*x8067)));
evalcond[2]=(((x8060*x8063))+(((-1.0)*x8062*x8065))+(((-1.0)*r02*x8066)));
evalcond[3]=((-1.0)+((x8059*x8062))+(((-1.0)*x8063*x8066))+(((-1.0)*r02*x8065)));
evalcond[4]=(((cj2*sj1))+((x8060*x8064))+((cj1*sj2))+(((-1.0)*r21*sj5*x8065))+(((-1.0)*r22*x8066)));
evalcond[5]=(((x8060*x8061))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8066))+(((-1.0)*r11*sj5*x8065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8068=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8068.valid){
continue;
}
CheckValue<IkReal> x8069 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8068.value)))+(x8069.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8070=IKsin(j4);
IkReal x8071=IKcos(j4);
IkReal x8072=(cj5*r10);
IkReal x8073=(r01*sj5);
IkReal x8074=(cj5*r00);
IkReal x8075=(cj5*r20);
IkReal x8076=((1.0)*x8071);
IkReal x8077=((1.0)*x8070);
IkReal x8078=(sj5*x8070);
evalcond[0]=((((-1.0)*x8075*x8077))+((r21*x8078))+(((-1.0)*r22*x8076)));
evalcond[1]=((((-1.0)*x8072*x8077))+((r11*x8078))+(((-1.0)*r12*x8076)));
evalcond[2]=((((-1.0)*r02*x8077))+(((-1.0)*x8073*x8076))+((x8071*x8074)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8076))+(((-1.0)*x8074*x8077))+((x8070*x8073)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8076))+((x8071*x8075))+(((-1.0)*r22*x8077)));
evalcond[5]=((((-1.0)*r11*sj5*x8076))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8071*x8072))+(((-1.0)*r12*x8077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8079=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8079;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8079);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8080=((1.0)*cj5);
IkReal x8081=((((-1.0)*r21*x8080))+(((-1.0)*r20*sj5)));
j4eval[0]=x8081;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8080))))));
j4eval[2]=IKsign(x8081);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8082=cj5*cj5;
IkReal x8083=r01*r01;
IkReal x8084=(cj5*r00);
IkReal x8085=(r01*sj5);
IkReal x8086=(((x8082*(r00*r00)))+(((-2.0)*x8084*x8085))+x8083+(r02*r02)+(((-1.0)*x8082*x8083)));
j4eval[0]=x8086;
j4eval[1]=((IKabs(((((-1.0)*x8085))+x8084)))+(IKabs(r02)));
j4eval[2]=IKsign(x8086);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8087=cj5*cj5;
IkReal x8088=r01*r01;
IkReal x8089=(r01*sj5);
IkReal x8090=(cj5*r00);
CheckValue<IkReal> x8091 = IKatan2WithCheck(IkReal(((((-1.0)*x8089))+x8090)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8091.valid){
continue;
}
CheckValue<IkReal> x8092=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8087*x8088))+x8088+(r02*r02)+((x8087*(r00*r00)))+(((-2.0)*x8089*x8090)))),-1);
if(!x8092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8091.value)+(((1.5707963267949)*(x8092.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8093=IKsin(j4);
IkReal x8094=IKcos(j4);
IkReal x8095=(cj5*r10);
IkReal x8096=(r01*sj5);
IkReal x8097=(cj5*r00);
IkReal x8098=(cj5*r20);
IkReal x8099=((1.0)*x8094);
IkReal x8100=((1.0)*x8093);
IkReal x8101=(sj5*x8093);
evalcond[0]=((((-1.0)*x8098*x8100))+(((-1.0)*r22*x8099))+((r21*x8101)));
evalcond[1]=(((r11*x8101))+(((-1.0)*x8095*x8100))+(((-1.0)*r12*x8099)));
evalcond[2]=((((-1.0)*r02*x8100))+((x8094*x8097))+(((-1.0)*x8096*x8099)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8099))+((x8093*x8096))+(((-1.0)*x8097*x8100)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8099))+((cj1*sj2))+(((-1.0)*r22*x8100))+((x8094*x8098)));
evalcond[5]=((((-1.0)*r11*sj5*x8099))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x8094*x8095))+(((-1.0)*r12*x8100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8102=((1.0)*cj5);
CheckValue<IkReal> x8103=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8102))+(((-1.0)*r20*sj5)))),-1);
if(!x8103.valid){
continue;
}
CheckValue<IkReal> x8104 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8102)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8103.value)))+(x8104.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8105=IKsin(j4);
IkReal x8106=IKcos(j4);
IkReal x8107=(cj5*r10);
IkReal x8108=(r01*sj5);
IkReal x8109=(cj5*r00);
IkReal x8110=(cj5*r20);
IkReal x8111=((1.0)*x8106);
IkReal x8112=((1.0)*x8105);
IkReal x8113=(sj5*x8105);
evalcond[0]=((((-1.0)*x8110*x8112))+((r21*x8113))+(((-1.0)*r22*x8111)));
evalcond[1]=((((-1.0)*r12*x8111))+((r11*x8113))+(((-1.0)*x8107*x8112)));
evalcond[2]=(((x8106*x8109))+(((-1.0)*x8108*x8111))+(((-1.0)*r02*x8112)));
evalcond[3]=((1.0)+(((-1.0)*x8109*x8112))+(((-1.0)*r02*x8111))+((x8105*x8108)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8111))+((x8106*x8110))+((cj1*sj2))+(((-1.0)*r22*x8112)));
evalcond[5]=(((x8106*x8107))+(((-1.0)*r11*sj5*x8111))+(((-1.0)*r12*x8112))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8114 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8114.valid){
continue;
}
CheckValue<IkReal> x8115=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8114.value)+(((1.5707963267949)*(x8115.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8116=IKsin(j4);
IkReal x8117=IKcos(j4);
IkReal x8118=(cj5*r10);
IkReal x8119=(r01*sj5);
IkReal x8120=(cj5*r00);
IkReal x8121=(cj5*r20);
IkReal x8122=((1.0)*x8117);
IkReal x8123=((1.0)*x8116);
IkReal x8124=(sj5*x8116);
evalcond[0]=((((-1.0)*x8121*x8123))+((r21*x8124))+(((-1.0)*r22*x8122)));
evalcond[1]=((((-1.0)*r12*x8122))+((r11*x8124))+(((-1.0)*x8118*x8123)));
evalcond[2]=(((x8117*x8120))+(((-1.0)*r02*x8123))+(((-1.0)*x8119*x8122)));
evalcond[3]=((1.0)+((x8116*x8119))+(((-1.0)*r02*x8122))+(((-1.0)*x8120*x8123)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8122))+((cj1*sj2))+((x8117*x8121))+(((-1.0)*r22*x8123)));
evalcond[5]=((((-1.0)*r11*sj5*x8122))+(((-1.0)*r12*x8123))+(((-1.0)*sj1*sj2))+((x8117*x8118))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8125=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8125);
rxp1_1=(px*r21);
rxp1_2=(r11*x8125);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8126=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8126);
rxp1_1=(px*r21);
rxp1_2=(r11*x8126);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8127=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8127);
rxp1_1=(px*r21);
rxp1_2=(r11*x8127);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8130=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8130.valid){
continue;
}
IkReal x8128=x8130.value;
IkReal x8129=(sj0*x8128);
cj4array[0]=(((cj1*cj2*x8129))+(((-1.0)*sj1*sj2*x8129)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8131=IKsin(j4);
IkReal x8132=IKcos(j4);
IkReal x8133=(r21*sj5);
IkReal x8134=(cj5*r20);
IkReal x8135=((1.0)*x8131);
IkReal x8136=((1.0)*x8132);
evalcond[0]=((-1.0)*r02*x8131);
evalcond[1]=((((-1.0)*r02*x8136))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x8134*x8135))+((x8131*x8133)));
evalcond[3]=((((-1.0)*cj5*r10*x8135))+((r11*sj5*x8131)));
evalcond[4]=(((cj2*sj1))+((x8132*x8134))+((cj1*sj2))+(((-1.0)*x8133*x8136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8139=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8139.valid){
continue;
}
IkReal x8137=x8139.value;
IkReal x8138=((1.0)*x8137);
cj4array[0]=((((-1.0)*cj1*sj2*x8138))+(((-1.0)*cj2*sj1*x8138)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8140=IKsin(j4);
IkReal x8141=IKcos(j4);
IkReal x8142=(r11*sj5);
IkReal x8143=((1.0)*sj0);
IkReal x8144=((1.0)*x8141);
IkReal x8145=((1.0)*cj5*x8140);
evalcond[0]=((-1.0)*r02*x8140);
evalcond[1]=((((-1.0)*r02*x8144))+(((-1.0)*x8143)));
evalcond[2]=((((-1.0)*r20*x8145))+((r21*sj5*x8140)));
evalcond[3]=((((-1.0)*r10*x8145))+((x8140*x8142)));
evalcond[4]=(((cj5*r10*x8141))+(((-1.0)*cj1*cj2*x8143))+((sj0*sj1*sj2))+(((-1.0)*x8142*x8144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8146=IKPowWithIntegerCheck(r02,-1);
if(!x8146.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8146.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8147=IKsin(j4);
IkReal x8148=IKcos(j4);
IkReal x8149=(cj5*x8148);
IkReal x8150=(sj5*x8147);
IkReal x8151=((1.0)*sj5*x8148);
IkReal x8152=((1.0)*cj5*x8147);
evalcond[0]=((-1.0)*r02*x8147);
evalcond[1]=(((r21*x8150))+(((-1.0)*r20*x8152)));
evalcond[2]=((((-1.0)*r10*x8152))+((r11*x8150)));
evalcond[3]=(((cj2*sj1))+((r20*x8149))+((cj1*sj2))+(((-1.0)*r21*x8151)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((r10*x8149))+((sj0*sj1*sj2))+(((-1.0)*r11*x8151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8153=((1.0)*sj0);
IkReal x8154=((1.0)*cj0);
CheckValue<IkReal> x8155 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8154))+(((-1.0)*r12*x8153)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8153))+(((-1.0)*r01*sj5*x8154)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8155.valid){
continue;
}
CheckValue<IkReal> x8156=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8155.value)+(((1.5707963267949)*(x8156.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8157=IKsin(j4);
IkReal x8158=IKcos(j4);
IkReal x8159=(cj5*r10);
IkReal x8160=(sj1*sj2);
IkReal x8161=(r01*sj5);
IkReal x8162=(cj5*r00);
IkReal x8163=(cj5*r20);
IkReal x8164=((1.0)*x8158);
IkReal x8165=((1.0)*cj1*cj2);
IkReal x8166=((1.0)*x8157);
IkReal x8167=(sj5*x8157);
evalcond[0]=(((r21*x8167))+(((-1.0)*x8163*x8166))+(((-1.0)*r22*x8164)));
evalcond[1]=(((r11*x8167))+cj0+(((-1.0)*x8159*x8166))+(((-1.0)*r12*x8164)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8164))+(((-1.0)*x8162*x8166))+((x8157*x8161)));
evalcond[3]=(((cj2*sj1))+((x8158*x8163))+(((-1.0)*r21*sj5*x8164))+((cj1*sj2))+(((-1.0)*r22*x8166)));
evalcond[4]=(((cj0*x8160))+((x8158*x8162))+(((-1.0)*r02*x8166))+(((-1.0)*x8161*x8164))+(((-1.0)*cj0*x8165)));
evalcond[5]=(((x8158*x8159))+(((-1.0)*r12*x8166))+((sj0*x8160))+(((-1.0)*r11*sj5*x8164))+(((-1.0)*sj0*x8165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8168=((1.0)*cj5);
CheckValue<IkReal> x8169=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8168)))),-1);
if(!x8169.valid){
continue;
}
CheckValue<IkReal> x8170 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8168))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8169.value)))+(x8170.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8171=IKsin(j4);
IkReal x8172=IKcos(j4);
IkReal x8173=(cj5*r10);
IkReal x8174=(sj1*sj2);
IkReal x8175=(r01*sj5);
IkReal x8176=(cj5*r00);
IkReal x8177=(cj5*r20);
IkReal x8178=((1.0)*x8172);
IkReal x8179=((1.0)*cj1*cj2);
IkReal x8180=((1.0)*x8171);
IkReal x8181=(sj5*x8171);
evalcond[0]=(((r21*x8181))+(((-1.0)*r22*x8178))+(((-1.0)*x8177*x8180)));
evalcond[1]=(((r11*x8181))+(((-1.0)*r12*x8178))+cj0+(((-1.0)*x8173*x8180)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8176*x8180))+(((-1.0)*r02*x8178))+((x8171*x8175)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8180))+((cj1*sj2))+((x8172*x8177))+(((-1.0)*r21*sj5*x8178)));
evalcond[4]=((((-1.0)*r02*x8180))+(((-1.0)*x8175*x8178))+(((-1.0)*cj0*x8179))+((cj0*x8174))+((x8172*x8176)));
evalcond[5]=(((sj0*x8174))+(((-1.0)*sj0*x8179))+(((-1.0)*r12*x8180))+((x8172*x8173))+(((-1.0)*r11*sj5*x8178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8182=((1.0)*cj5);
CheckValue<IkReal> x8183=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8182))+(((-1.0)*r00*sj5)))),-1);
if(!x8183.valid){
continue;
}
CheckValue<IkReal> x8184 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8182)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8183.value)))+(x8184.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8185=IKsin(j4);
IkReal x8186=IKcos(j4);
IkReal x8187=(cj5*r10);
IkReal x8188=(sj1*sj2);
IkReal x8189=(r01*sj5);
IkReal x8190=(cj5*r00);
IkReal x8191=(cj5*r20);
IkReal x8192=((1.0)*x8186);
IkReal x8193=((1.0)*cj1*cj2);
IkReal x8194=((1.0)*x8185);
IkReal x8195=(sj5*x8185);
evalcond[0]=(((r21*x8195))+(((-1.0)*r22*x8192))+(((-1.0)*x8191*x8194)));
evalcond[1]=(((r11*x8195))+cj0+(((-1.0)*r12*x8192))+(((-1.0)*x8187*x8194)));
evalcond[2]=((((-1.0)*r02*x8192))+(((-1.0)*sj0))+((x8185*x8189))+(((-1.0)*x8190*x8194)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8194))+((cj1*sj2))+((x8186*x8191))+(((-1.0)*r21*sj5*x8192)));
evalcond[4]=((((-1.0)*r02*x8194))+((x8186*x8190))+(((-1.0)*x8189*x8192))+(((-1.0)*cj0*x8193))+((cj0*x8188)));
evalcond[5]=(((x8186*x8187))+((sj0*x8188))+(((-1.0)*r12*x8194))+(((-1.0)*sj0*x8193))+(((-1.0)*r11*sj5*x8192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8196=cj5*cj5;
IkReal x8197=r21*r21;
IkReal x8198=(cj2*sj1);
IkReal x8199=(cj1*sj2);
IkReal x8200=(r21*sj5);
IkReal x8201=((1.0)*cj5*r20);
CheckValue<IkReal> x8202=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj5*r20*x8200))+(r22*r22)+((x8196*(r20*r20)))+(((-1.0)*x8196*x8197))+x8197)),-1);
if(!x8202.valid){
continue;
}
CheckValue<IkReal> x8203 = IKatan2WithCheck(IkReal((((r22*x8198))+((r22*x8199)))),IkReal(((((-1.0)*x8198*x8201))+((x8199*x8200))+((x8198*x8200))+(((-1.0)*x8199*x8201)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8202.value)))+(x8203.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8204=IKsin(j4);
IkReal x8205=IKcos(j4);
IkReal x8206=(r21*sj5);
IkReal x8207=(cj5*r20);
IkReal x8208=((1.0)*x8205);
IkReal x8209=((1.0)*x8204);
evalcond[0]=(((x8204*x8206))+(((-1.0)*r22*x8208))+(((-1.0)*x8207*x8209)));
evalcond[1]=(((cj2*sj1))+((x8205*x8207))+((cj1*sj2))+(((-1.0)*r22*x8209))+(((-1.0)*x8206*x8208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8210=(cj5*sj4);
IkReal x8211=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x8211))+(((-1.0)*r00*x8210)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x8211))+((r10*x8210))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x8211))+(((-1.0)*r00*x8210))))+IKsqr(((((-1.0)*r11*x8211))+((r10*x8210))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x8211))+(((-1.0)*r00*x8210))), ((((-1.0)*r11*x8211))+((r10*x8210))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8212=IKcos(j0);
IkReal x8213=IKsin(j0);
IkReal x8214=(cj4*cj5);
IkReal x8215=((0.1)*sj5);
IkReal x8216=((0.392)*sj1);
IkReal x8217=(cj5*r11);
IkReal x8218=((1.0)*cj1);
IkReal x8219=(r11*sj5);
IkReal x8220=((1.0)*sj5);
IkReal x8221=((1.0)*sj4);
IkReal x8222=((0.392)*cj1);
IkReal x8223=((1.0)*sj1);
IkReal x8224=(cj5*r01);
IkReal x8225=((0.425)*cj1);
IkReal x8226=((1.0)*cj4);
IkReal x8227=(sj2*x8213);
IkReal x8228=(sj2*x8212);
IkReal x8229=(cj2*x8212);
IkReal x8230=(cj2*x8213);
evalcond[0]=((((-1.0)*cj5*r10*x8221))+(((-1.0)*r12*x8226))+((sj4*x8219))+x8212);
evalcond[1]=((((-1.0)*r02*x8226))+((r01*sj4*sj5))+(((-1.0)*cj5*r00*x8221))+(((-1.0)*x8213)));
evalcond[2]=((((-1.0)*x8223*x8229))+(((-1.0)*x8218*x8228))+(((-1.0)*x8224))+(((-1.0)*r00*x8220)));
evalcond[3]=((((-1.0)*x8218*x8227))+(((-1.0)*x8217))+(((-1.0)*r10*x8220))+(((-1.0)*x8223*x8230)));
evalcond[4]=((((-1.0)*r02*x8221))+(((-1.0)*x8218*x8229))+((r00*x8214))+((sj1*x8228))+(((-1.0)*cj4*r01*x8220)));
evalcond[5]=((((-1.0)*x8219*x8226))+(((-1.0)*x8218*x8230))+(((-1.0)*r12*x8221))+((sj1*x8227))+((r10*x8214)));
evalcond[6]=(((x8222*x8229))+(((-1.0)*r00*x8215))+(((-1.0)*px))+(((-0.134)*x8213))+((x8212*x8225))+(((-0.1)*x8224))+(((-1.0)*x8216*x8228)));
evalcond[7]=(((x8222*x8230))+(((-0.1)*x8217))+(((0.134)*x8212))+((x8213*x8225))+(((-1.0)*py))+(((-1.0)*r10*x8215))+(((-1.0)*x8216*x8227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8231 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8231.valid){
continue;
}
CheckValue<IkReal> x8232=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x8232.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8231.value)+(((1.5707963267949)*(x8232.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8233=IKcos(j0);
IkReal x8234=IKsin(j0);
IkReal x8235=(r00*sj5);
IkReal x8236=(cj5*r11);
IkReal x8237=(r10*sj5);
IkReal x8238=((1.0)*cj2);
IkReal x8239=(cj5*r01);
IkReal x8240=((0.392)*sj2);
IkReal x8241=((0.425)*cj1);
IkReal x8242=((1.0)*cj1*sj2);
IkReal x8243=((0.392)*cj1*cj2);
IkReal x8244=(sj1*x8233);
IkReal x8245=(sj1*x8234);
evalcond[0]=((((-1.0)*x8238*x8244))+(((-1.0)*x8235))+(((-1.0)*x8239))+(((-1.0)*x8233*x8242)));
evalcond[1]=((((-1.0)*x8238*x8245))+(((-1.0)*x8237))+(((-1.0)*x8236))+(((-1.0)*x8234*x8242)));
evalcond[2]=((((-1.0)*x8240*x8244))+(((-1.0)*px))+(((-0.134)*x8234))+(((-0.1)*x8235))+(((-0.1)*x8239))+((x8233*x8243))+((x8233*x8241)));
evalcond[3]=((((-1.0)*x8240*x8245))+(((0.134)*x8233))+((x8234*x8241))+((x8234*x8243))+(((-1.0)*py))+(((-0.1)*x8236))+(((-0.1)*x8237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8246=((1.0)*cj5);
IkReal x8247=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8246)));
j4eval[0]=x8247;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8246)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8247);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8248=((1.0)*cj5);
IkReal x8249=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8248)));
j4eval[0]=x8249;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8248))))));
j4eval[2]=IKsign(x8249);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8250=((1.0)*sj0);
IkReal x8251=((1.0)*cj0);
IkReal x8252=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8252;
j4eval[1]=((IKabs(((((-1.0)*r12*x8250))+(((-1.0)*r02*x8251)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8250))+(((-1.0)*r01*sj5*x8251))))));
j4eval[2]=IKsign(x8252);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8253=((-1.0)*r20);
IkReal x8255 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8255)==0){
continue;
}
IkReal x8254=pow(x8255,-0.5);
CheckValue<IkReal> x8256 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8253),IKFAST_ATAN2_MAGTHRESH);
if(!x8256.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8256.value));
IkReal gconst133=(r21*x8254);
IkReal gconst134=(x8253*x8254);
CheckValue<IkReal> x8257 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8257.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8257.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8258=((-1.0)*r20);
IkReal x8259=x8254;
CheckValue<IkReal> x8261 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8258),IKFAST_ATAN2_MAGTHRESH);
if(!x8261.valid){
continue;
}
IkReal x8260=((-1.0)*(x8261.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8260;
IkReal gconst132=x8260;
IkReal gconst133=(r21*x8259);
IkReal gconst134=(x8258*x8259);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8262=((-1.0)*r20);
IkReal x8263=x8254;
CheckValue<IkReal> x8265 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8262),IKFAST_ATAN2_MAGTHRESH);
if(!x8265.valid){
continue;
}
IkReal x8264=((-1.0)*(x8265.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8264;
IkReal gconst132=x8264;
IkReal gconst133=(r21*x8263);
IkReal gconst134=(x8262*x8263);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8266=((-1.0)*r20);
IkReal x8267=x8254;
CheckValue<IkReal> x8269 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8266),IKFAST_ATAN2_MAGTHRESH);
if(!x8269.valid){
continue;
}
IkReal x8268=((-1.0)*(x8269.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8268;
IkReal gconst132=x8268;
IkReal gconst133=(r21*x8267);
IkReal gconst134=(x8266*x8267);
IkReal x8270=r22*r22;
CheckValue<IkReal> x8273=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8270))),-1);
if(!x8273.valid){
continue;
}
IkReal x8271=x8273.value;
IkReal x8272=(((x8271*(r21*r21*r21*r21)))+((x8271*(r20*r20*r20*r20)))+(((2.0)*x8271*(r20*r20)*(r21*r21)))+x8270);
j4eval[0]=x8272;
j4eval[1]=IKsign(x8272);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8274=(gconst133*r21);
IkReal x8275=(cj1*sj2);
IkReal x8276=(gconst134*r20);
IkReal x8277=(cj2*sj1);
CheckValue<IkReal> x8278 = IKatan2WithCheck(IkReal((((r22*x8277))+((r22*x8275)))),IkReal(((((-1.0)*x8275*x8276))+((x8274*x8275))+((x8274*x8277))+(((-1.0)*x8276*x8277)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8278.valid){
continue;
}
CheckValue<IkReal> x8279=IKPowWithIntegerCheck(IKsign(((x8276*x8276)+(r22*r22)+(((-2.0)*x8274*x8276))+(x8274*x8274))),-1);
if(!x8279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8278.value)+(((1.5707963267949)*(x8279.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8280=IKsin(j4);
IkReal x8281=IKcos(j4);
IkReal x8282=(sj1*sj2);
IkReal x8283=(gconst133*r11);
IkReal x8284=(gconst133*r21);
IkReal x8285=(gconst133*r01);
IkReal x8286=((1.0)*x8281);
IkReal x8287=(gconst134*x8281);
IkReal x8288=((1.0)*x8280);
IkReal x8289=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x8288))+(((-1.0)*r22*x8286))+((x8280*x8284)));
evalcond[1]=((((-1.0)*r12*x8286))+cj0+(((-1.0)*gconst134*r10*x8288))+((x8280*x8283)));
evalcond[2]=((((-1.0)*r02*x8286))+(((-1.0)*sj0))+(((-1.0)*gconst134*r00*x8288))+((x8280*x8285)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8287))+(((-1.0)*r22*x8288))+(((-1.0)*x8284*x8286)));
evalcond[4]=((((-1.0)*r02*x8288))+(((-1.0)*x8285*x8286))+((r00*x8287))+(((-1.0)*cj0*x8289))+((cj0*x8282)));
evalcond[5]=((((-1.0)*r12*x8288))+(((-1.0)*x8283*x8286))+((r10*x8287))+((sj0*x8282))+(((-1.0)*sj0*x8289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8290=((1.0)*gconst134);
CheckValue<IkReal> x8291=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8290))+(((-1.0)*gconst133*r10)))),-1);
if(!x8291.valid){
continue;
}
CheckValue<IkReal> x8292 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8290))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8291.value)))+(x8292.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8293=IKsin(j4);
IkReal x8294=IKcos(j4);
IkReal x8295=(sj1*sj2);
IkReal x8296=(gconst133*r11);
IkReal x8297=(gconst133*r21);
IkReal x8298=(gconst133*r01);
IkReal x8299=((1.0)*x8294);
IkReal x8300=(gconst134*x8294);
IkReal x8301=((1.0)*x8293);
IkReal x8302=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x8301))+((x8293*x8297))+(((-1.0)*r22*x8299)));
evalcond[1]=((((-1.0)*r12*x8299))+cj0+(((-1.0)*gconst134*r10*x8301))+((x8293*x8296)));
evalcond[2]=((((-1.0)*gconst134*r00*x8301))+(((-1.0)*sj0))+((x8293*x8298))+(((-1.0)*r02*x8299)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8297*x8299))+(((-1.0)*r22*x8301))+((cj1*sj2))+((r20*x8300)));
evalcond[4]=(((r00*x8300))+((cj0*x8295))+(((-1.0)*r02*x8301))+(((-1.0)*cj0*x8302))+(((-1.0)*x8298*x8299)));
evalcond[5]=((((-1.0)*r12*x8301))+((r10*x8300))+((sj0*x8295))+(((-1.0)*sj0*x8302))+(((-1.0)*x8296*x8299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8303=((1.0)*gconst134);
CheckValue<IkReal> x8304 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8303))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8304.valid){
continue;
}
CheckValue<IkReal> x8305=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x8303)))),-1);
if(!x8305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8304.value)+(((1.5707963267949)*(x8305.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8306=IKsin(j4);
IkReal x8307=IKcos(j4);
IkReal x8308=(sj1*sj2);
IkReal x8309=(gconst133*r11);
IkReal x8310=(gconst133*r21);
IkReal x8311=(gconst133*r01);
IkReal x8312=((1.0)*x8307);
IkReal x8313=(gconst134*x8307);
IkReal x8314=((1.0)*x8306);
IkReal x8315=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8312))+((x8306*x8310))+(((-1.0)*gconst134*r20*x8314)));
evalcond[1]=(((x8306*x8309))+(((-1.0)*gconst134*r10*x8314))+cj0+(((-1.0)*r12*x8312)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8312))+((x8306*x8311))+(((-1.0)*gconst134*r00*x8314)));
evalcond[3]=(((cj2*sj1))+((r20*x8313))+(((-1.0)*x8310*x8312))+((cj1*sj2))+(((-1.0)*r22*x8314)));
evalcond[4]=(((r00*x8313))+(((-1.0)*r02*x8314))+(((-1.0)*x8311*x8312))+((cj0*x8308))+(((-1.0)*cj0*x8315)));
evalcond[5]=(((sj0*x8308))+(((-1.0)*sj0*x8315))+((r10*x8313))+(((-1.0)*x8309*x8312))+(((-1.0)*r12*x8314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8316=((-1.0)*r21);
IkReal x8318 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8318)==0){
continue;
}
IkReal x8317=pow(x8318,-0.5);
CheckValue<IkReal> x8319 = IKatan2WithCheck(IkReal(x8316),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8319.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8319.value))));
IkReal gconst136=(x8316*x8317);
IkReal gconst137=((1.0)*r20*x8317);
CheckValue<IkReal> x8320 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8320.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8320.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8321=((-1.0)*r21);
CheckValue<IkReal> x8324 = IKatan2WithCheck(IkReal(x8321),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8324.valid){
continue;
}
IkReal x8322=((1.0)*(x8324.value));
IkReal x8323=x8317;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8322)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8322)));
IkReal gconst136=(x8321*x8323);
IkReal gconst137=((1.0)*r20*x8323);
IkReal x8325=r22*r22;
IkReal x8326=((1.0)*x8325);
CheckValue<IkReal> x8330=IKPowWithIntegerCheck(((-1.0)+x8325),-1);
if(!x8330.valid){
continue;
}
IkReal x8327=x8330.value;
if((((1.0)+(((-1.0)*x8326)))) < -0.00001)
continue;
IkReal x8328=IKsqrt(((1.0)+(((-1.0)*x8326))));
IkReal x8329=(cj0*x8327*x8328);
j4eval[0]=((IKabs((x8329+(((-1.0)*x8326*x8329)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8331=((-1.0)*r21);
CheckValue<IkReal> x8334 = IKatan2WithCheck(IkReal(x8331),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8334.valid){
continue;
}
IkReal x8332=((1.0)*(x8334.value));
IkReal x8333=x8317;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8332)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8332)));
IkReal gconst136=(x8331*x8333);
IkReal gconst137=((1.0)*r20*x8333);
IkReal x8335=r22*r22;
IkReal x8336=((1.0)*x8335);
CheckValue<IkReal> x8340=IKPowWithIntegerCheck(((-1.0)+x8335),-1);
if(!x8340.valid){
continue;
}
IkReal x8337=x8340.value;
if((((1.0)+(((-1.0)*x8336)))) < -0.00001)
continue;
IkReal x8338=IKsqrt(((1.0)+(((-1.0)*x8336))));
IkReal x8339=(sj0*x8337*x8338);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x8339+(((-1.0)*x8336*x8339))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8341=((-1.0)*r21);
CheckValue<IkReal> x8344 = IKatan2WithCheck(IkReal(x8341),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8344.valid){
continue;
}
IkReal x8342=((1.0)*(x8344.value));
IkReal x8343=x8317;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8342)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8342)));
IkReal gconst136=(x8341*x8343);
IkReal gconst137=((1.0)*r20*x8343);
IkReal x8345=r22*r22;
IkReal x8346=(r12*sj0);
IkReal x8347=(cj0*r02);
CheckValue<IkReal> x8351=IKPowWithIntegerCheck(((-1.0)+x8345),-1);
if(!x8351.valid){
continue;
}
IkReal x8348=x8351.value;
if((((1.0)+(((-1.0)*x8345)))) < -0.00001)
continue;
IkReal x8349=IKsqrt(((1.0)+(((-1.0)*x8345))));
IkReal x8350=(r22*x8348*x8349);
j4eval[0]=0;
j4eval[1]=((IKabs((((x8346*x8350))+((x8347*x8350)))))+(IKabs(((((-1.0)*x8347))+(((-1.0)*x8346))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8352=((1.0)*sj0);
IkReal x8353=((1.0)*cj0);
CheckValue<IkReal> x8354=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x8354.valid){
continue;
}
CheckValue<IkReal> x8355 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8353))+(((-1.0)*r12*x8352)))),IkReal(((((-1.0)*gconst136*r11*x8352))+((gconst137*r10*sj0))+((cj0*gconst137*r00))+(((-1.0)*gconst136*r01*x8353)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8354.value)))+(x8355.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8356=IKsin(j4);
IkReal x8357=IKcos(j4);
IkReal x8358=(gconst136*r01);
IkReal x8359=(gconst137*r10);
IkReal x8360=(sj1*sj2);
IkReal x8361=(gconst137*r20);
IkReal x8362=(gconst136*r11);
IkReal x8363=(gconst136*r21);
IkReal x8364=(gconst137*r00);
IkReal x8365=((1.0)*x8357);
IkReal x8366=((1.0)*cj1*cj2);
IkReal x8367=((1.0)*x8356);
evalcond[0]=(((x8356*x8363))+(((-1.0)*x8361*x8367))+(((-1.0)*r22*x8365)));
evalcond[1]=(((x8356*x8362))+cj0+(((-1.0)*x8359*x8367))+(((-1.0)*r12*x8365)));
evalcond[2]=((((-1.0)*sj0))+((x8356*x8358))+(((-1.0)*x8364*x8367))+(((-1.0)*r02*x8365)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8367))+((x8357*x8361))+(((-1.0)*x8363*x8365)));
evalcond[4]=((((-1.0)*r02*x8367))+(((-1.0)*cj0*x8366))+((x8357*x8364))+(((-1.0)*x8358*x8365))+((cj0*x8360)));
evalcond[5]=((((-1.0)*x8362*x8365))+(((-1.0)*r12*x8367))+((x8357*x8359))+((sj0*x8360))+(((-1.0)*sj0*x8366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8368=((1.0)*gconst137);
CheckValue<IkReal> x8369=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8368))+(((-1.0)*gconst136*r10)))),-1);
if(!x8369.valid){
continue;
}
CheckValue<IkReal> x8370 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8368))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8369.value)))+(x8370.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8371=IKsin(j4);
IkReal x8372=IKcos(j4);
IkReal x8373=(gconst136*r01);
IkReal x8374=(gconst137*r10);
IkReal x8375=(sj1*sj2);
IkReal x8376=(gconst137*r20);
IkReal x8377=(gconst136*r11);
IkReal x8378=(gconst136*r21);
IkReal x8379=(gconst137*r00);
IkReal x8380=((1.0)*x8372);
IkReal x8381=((1.0)*cj1*cj2);
IkReal x8382=((1.0)*x8371);
evalcond[0]=(((x8371*x8378))+(((-1.0)*x8376*x8382))+(((-1.0)*r22*x8380)));
evalcond[1]=(cj0+((x8371*x8377))+(((-1.0)*r12*x8380))+(((-1.0)*x8374*x8382)));
evalcond[2]=((((-1.0)*x8379*x8382))+(((-1.0)*sj0))+(((-1.0)*r02*x8380))+((x8371*x8373)));
evalcond[3]=(((cj2*sj1))+((x8372*x8376))+((cj1*sj2))+(((-1.0)*r22*x8382))+(((-1.0)*x8378*x8380)));
evalcond[4]=((((-1.0)*r02*x8382))+((cj0*x8375))+((x8372*x8379))+(((-1.0)*x8373*x8380))+(((-1.0)*cj0*x8381)));
evalcond[5]=((((-1.0)*sj0*x8381))+((sj0*x8375))+((x8372*x8374))+(((-1.0)*x8377*x8380))+(((-1.0)*r12*x8382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8383=((1.0)*gconst137);
CheckValue<IkReal> x8384 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x8383)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8384.valid){
continue;
}
CheckValue<IkReal> x8385=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x8383)))),-1);
if(!x8385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8384.value)+(((1.5707963267949)*(x8385.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8386=IKsin(j4);
IkReal x8387=IKcos(j4);
IkReal x8388=(gconst136*r01);
IkReal x8389=(gconst137*r10);
IkReal x8390=(sj1*sj2);
IkReal x8391=(gconst137*r20);
IkReal x8392=(gconst136*r11);
IkReal x8393=(gconst136*r21);
IkReal x8394=(gconst137*r00);
IkReal x8395=((1.0)*x8387);
IkReal x8396=((1.0)*cj1*cj2);
IkReal x8397=((1.0)*x8386);
evalcond[0]=((((-1.0)*x8391*x8397))+((x8386*x8393))+(((-1.0)*r22*x8395)));
evalcond[1]=(cj0+((x8386*x8392))+(((-1.0)*x8389*x8397))+(((-1.0)*r12*x8395)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8395))+((x8386*x8388))+(((-1.0)*x8394*x8397)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8393*x8395))+((cj1*sj2))+((x8387*x8391))+(((-1.0)*r22*x8397)));
evalcond[4]=((((-1.0)*x8388*x8395))+(((-1.0)*r02*x8397))+(((-1.0)*cj0*x8396))+((x8387*x8394))+((cj0*x8390)));
evalcond[5]=((((-1.0)*sj0*x8396))+((sj0*x8390))+(((-1.0)*x8392*x8395))+((x8387*x8389))+(((-1.0)*r12*x8397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8398=((-1.0)*r10);
IkReal x8400 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8400)==0){
continue;
}
IkReal x8399=pow(x8400,-0.5);
CheckValue<IkReal> x8401 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8398),IKFAST_ATAN2_MAGTHRESH);
if(!x8401.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8401.value));
IkReal gconst139=(r11*x8399);
IkReal gconst140=(x8398*x8399);
CheckValue<IkReal> x8402 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8402.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8402.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8403=((-1.0)*r10);
IkReal x8404=x8399;
CheckValue<IkReal> x8406 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8403),IKFAST_ATAN2_MAGTHRESH);
if(!x8406.valid){
continue;
}
IkReal x8405=((-1.0)*(x8406.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8405;
IkReal gconst138=x8405;
IkReal gconst139=(r11*x8404);
IkReal gconst140=(x8403*x8404);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8407=((1.0)*sj0);
IkReal x8408=((1.0)*gconst139);
CheckValue<IkReal> x8409=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8408))+(((-1.0)*gconst140*r21)))),-1);
if(!x8409.valid){
continue;
}
CheckValue<IkReal> x8410 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8407)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*gconst139*r11*x8407))+(((-1.0)*cj0*r01*x8408))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8409.value)))+(x8410.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8411=IKsin(j4);
IkReal x8412=IKcos(j4);
IkReal x8413=(gconst140*r00);
IkReal x8414=(sj1*sj2);
IkReal x8415=(gconst139*r11);
IkReal x8416=(gconst139*r01);
IkReal x8417=(gconst139*r21);
IkReal x8418=((1.0)*x8412);
IkReal x8419=((1.0)*x8411);
IkReal x8420=((1.0)*cj1*cj2);
IkReal x8421=(gconst140*x8412);
evalcond[0]=(((x8411*x8417))+(((-1.0)*gconst140*r20*x8419))+(((-1.0)*r22*x8418)));
evalcond[1]=((((-1.0)*r12*x8418))+cj0+((x8411*x8415))+(((-1.0)*gconst140*r10*x8419)));
evalcond[2]=((((-1.0)*sj0))+((x8411*x8416))+(((-1.0)*r02*x8418))+(((-1.0)*x8413*x8419)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8421))+(((-1.0)*x8417*x8418))+(((-1.0)*r22*x8419)));
evalcond[4]=(((x8412*x8413))+(((-1.0)*cj0*x8420))+(((-1.0)*x8416*x8418))+(((-1.0)*r02*x8419))+((cj0*x8414)));
evalcond[5]=((((-1.0)*r12*x8419))+((r10*x8421))+(((-1.0)*x8415*x8418))+(((-1.0)*sj0*x8420))+((sj0*x8414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8422=((1.0)*gconst140);
CheckValue<IkReal> x8423=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x8422)))),-1);
if(!x8423.valid){
continue;
}
CheckValue<IkReal> x8424 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x8422)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8423.value)))+(x8424.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8425=IKsin(j4);
IkReal x8426=IKcos(j4);
IkReal x8427=(gconst140*r00);
IkReal x8428=(sj1*sj2);
IkReal x8429=(gconst139*r11);
IkReal x8430=(gconst139*r01);
IkReal x8431=(gconst139*r21);
IkReal x8432=((1.0)*x8426);
IkReal x8433=((1.0)*x8425);
IkReal x8434=((1.0)*cj1*cj2);
IkReal x8435=(gconst140*x8426);
evalcond[0]=((((-1.0)*gconst140*r20*x8433))+((x8425*x8431))+(((-1.0)*r22*x8432)));
evalcond[1]=(cj0+((x8425*x8429))+(((-1.0)*r12*x8432))+(((-1.0)*gconst140*r10*x8433)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8427*x8433))+((x8425*x8430))+(((-1.0)*r02*x8432)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8431*x8432))+(((-1.0)*r22*x8433))+((r20*x8435)));
evalcond[4]=(((cj0*x8428))+(((-1.0)*x8430*x8432))+(((-1.0)*r02*x8433))+(((-1.0)*cj0*x8434))+((x8426*x8427)));
evalcond[5]=((((-1.0)*sj0*x8434))+(((-1.0)*x8429*x8432))+(((-1.0)*r12*x8433))+((sj0*x8428))+((r10*x8435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8436=((-1.0)*r11);
IkReal x8438 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8438)==0){
continue;
}
IkReal x8437=pow(x8438,-0.5);
CheckValue<IkReal> x8439 = IKatan2WithCheck(IkReal(x8436),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8439.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8439.value))));
IkReal gconst142=(x8436*x8437);
IkReal gconst143=((1.0)*r10*x8437);
CheckValue<IkReal> x8440 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8440.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8440.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8441=((-1.0)*r11);
CheckValue<IkReal> x8444 = IKatan2WithCheck(IkReal(x8441),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8444.valid){
continue;
}
IkReal x8442=((1.0)*(x8444.value));
IkReal x8443=x8437;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8442)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8442)));
IkReal gconst142=(x8441*x8443);
IkReal gconst143=((1.0)*r10*x8443);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8445=((-1.0)*r11);
CheckValue<IkReal> x8448 = IKatan2WithCheck(IkReal(x8445),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8448.valid){
continue;
}
IkReal x8446=((1.0)*(x8448.value));
IkReal x8447=x8437;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8446)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8446)));
IkReal gconst142=(x8445*x8447);
IkReal gconst143=((1.0)*r10*x8447);
IkReal x8449=r12*r12;
IkReal x8450=((1.0)*sj0);
IkReal x8451=(cj0*r02);
IkReal x8452=x8437;
j4eval[0]=((IKabs((((r12*x8451*x8452))+(((-1.0)*x8450*x8452))+((sj0*x8449*x8452)))))+(IKabs(((((-1.0)*x8451))+(((-1.0)*r12*x8450))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8453=((-1.0)*r11);
CheckValue<IkReal> x8456 = IKatan2WithCheck(IkReal(x8453),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8456.valid){
continue;
}
IkReal x8454=((1.0)*(x8456.value));
IkReal x8455=x8437;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8454)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8454)));
IkReal gconst142=(x8453*x8455);
IkReal gconst143=((1.0)*r10*x8455);
IkReal x8457=r12*r12;
IkReal x8458=(cj1*r22*sj2);
IkReal x8459=(cj2*r22*sj1);
CheckValue<IkReal> x8463=IKPowWithIntegerCheck(((-1.0)+x8457),-1);
if(!x8463.valid){
continue;
}
IkReal x8460=x8463.value;
if((((1.0)+(((-1.0)*x8457)))) < -0.00001)
continue;
IkReal x8461=IKsqrt(((1.0)+(((-1.0)*x8457))));
IkReal x8462=((1.0)*r12*x8460*x8461);
j4eval[0]=((IKabs((x8459+x8458)))+(IKabs(((((-1.0)*x8459*x8462))+(((-1.0)*x8458*x8462))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8464=(gconst142*r21);
IkReal x8465=(cj1*sj2);
IkReal x8466=(cj2*sj1);
IkReal x8467=(gconst143*r20);
CheckValue<IkReal> x8468=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8467*x8467)+(((-2.0)*x8464*x8467))+(x8464*x8464))),-1);
if(!x8468.valid){
continue;
}
CheckValue<IkReal> x8469 = IKatan2WithCheck(IkReal((((r22*x8466))+((r22*x8465)))),IkReal((((x8464*x8465))+((x8464*x8466))+(((-1.0)*x8466*x8467))+(((-1.0)*x8465*x8467)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8468.value)))+(x8469.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8470=IKsin(j4);
IkReal x8471=IKcos(j4);
IkReal x8472=(sj1*sj2);
IkReal x8473=(gconst143*r20);
IkReal x8474=((1.0)*x8471);
IkReal x8475=((1.0)*cj1*cj2);
IkReal x8476=((1.0)*x8470);
IkReal x8477=(gconst142*x8470);
IkReal x8478=(gconst143*x8471);
evalcond[0]=((((-1.0)*x8473*x8476))+((r21*x8477))+(((-1.0)*r22*x8474)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x8476))+((r11*x8477))+(((-1.0)*r12*x8474)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8477))+(((-1.0)*r02*x8474))+(((-1.0)*gconst143*r00*x8476)));
evalcond[3]=(((cj2*sj1))+((x8471*x8473))+((cj1*sj2))+(((-1.0)*r22*x8476))+(((-1.0)*gconst142*r21*x8474)));
evalcond[4]=(((r00*x8478))+(((-1.0)*r02*x8476))+(((-1.0)*gconst142*r01*x8474))+((cj0*x8472))+(((-1.0)*cj0*x8475)));
evalcond[5]=((((-1.0)*sj0*x8475))+((r10*x8478))+(((-1.0)*r12*x8476))+(((-1.0)*gconst142*r11*x8474))+((sj0*x8472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8479=((1.0)*sj0);
IkReal x8480=((1.0)*gconst142);
CheckValue<IkReal> x8481 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8479)))),IkReal(((((-1.0)*cj0*r01*x8480))+((cj0*gconst143*r00))+((gconst143*r10*sj0))+(((-1.0)*gconst142*r11*x8479)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8481.valid){
continue;
}
CheckValue<IkReal> x8482=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8480))+(((-1.0)*gconst143*r21)))),-1);
if(!x8482.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8481.value)+(((1.5707963267949)*(x8482.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8483=IKsin(j4);
IkReal x8484=IKcos(j4);
IkReal x8485=(sj1*sj2);
IkReal x8486=(gconst143*r20);
IkReal x8487=((1.0)*x8484);
IkReal x8488=((1.0)*cj1*cj2);
IkReal x8489=((1.0)*x8483);
IkReal x8490=(gconst142*x8483);
IkReal x8491=(gconst143*x8484);
evalcond[0]=((((-1.0)*r22*x8487))+(((-1.0)*x8486*x8489))+((r21*x8490)));
evalcond[1]=(cj0+(((-1.0)*r12*x8487))+(((-1.0)*gconst143*r10*x8489))+((r11*x8490)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8487))+(((-1.0)*gconst143*r00*x8489))+((r01*x8490)));
evalcond[3]=(((cj2*sj1))+((x8484*x8486))+((cj1*sj2))+(((-1.0)*r22*x8489))+(((-1.0)*gconst142*r21*x8487)));
evalcond[4]=(((r00*x8491))+((cj0*x8485))+(((-1.0)*cj0*x8488))+(((-1.0)*r02*x8489))+(((-1.0)*gconst142*r01*x8487)));
evalcond[5]=(((r10*x8491))+(((-1.0)*sj0*x8488))+((sj0*x8485))+(((-1.0)*gconst142*r11*x8487))+(((-1.0)*r12*x8489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8492=((1.0)*gconst143);
CheckValue<IkReal> x8493=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x8492)))),-1);
if(!x8493.valid){
continue;
}
CheckValue<IkReal> x8494 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8492))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8493.value)))+(x8494.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8495=IKsin(j4);
IkReal x8496=IKcos(j4);
IkReal x8497=(sj1*sj2);
IkReal x8498=(gconst143*r20);
IkReal x8499=((1.0)*x8496);
IkReal x8500=((1.0)*cj1*cj2);
IkReal x8501=((1.0)*x8495);
IkReal x8502=(gconst142*x8495);
IkReal x8503=(gconst143*x8496);
evalcond[0]=((((-1.0)*x8498*x8501))+((r21*x8502))+(((-1.0)*r22*x8499)));
evalcond[1]=((((-1.0)*gconst143*r10*x8501))+cj0+((r11*x8502))+(((-1.0)*r12*x8499)));
evalcond[2]=((((-1.0)*r02*x8499))+(((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8501))+((r01*x8502)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8501))+((x8496*x8498))+(((-1.0)*gconst142*r21*x8499)));
evalcond[4]=((((-1.0)*gconst142*r01*x8499))+(((-1.0)*r02*x8501))+(((-1.0)*cj0*x8500))+((r00*x8503))+((cj0*x8497)));
evalcond[5]=(((r10*x8503))+((sj0*x8497))+(((-1.0)*gconst142*r11*x8499))+(((-1.0)*r12*x8501))+(((-1.0)*sj0*x8500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8504=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8504;
j4eval[1]=IKsign(x8504);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8505=((1.0)*cj5);
IkReal x8506=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8505)));
j4eval[0]=x8506;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8505)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8506);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8507=cj5*cj5;
IkReal x8508=r11*r11;
IkReal x8509=(r11*sj5);
IkReal x8510=(cj5*r10);
IkReal x8511=((r12*r12)+x8508+((x8507*(r10*r10)))+(((-1.0)*x8507*x8508))+(((-2.0)*x8509*x8510)));
j4eval[0]=x8511;
j4eval[1]=IKsign(x8511);
j4eval[2]=((IKabs(r12))+(IKabs((x8510+(((-1.0)*x8509))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8512=cj5*cj5;
IkReal x8513=r11*r11;
IkReal x8514=(cj5*r10);
IkReal x8515=(r11*sj5);
CheckValue<IkReal> x8516=IKPowWithIntegerCheck(IKsign(((r12*r12)+x8513+(((-1.0)*x8512*x8513))+(((-2.0)*x8514*x8515))+((x8512*(r10*r10))))),-1);
if(!x8516.valid){
continue;
}
CheckValue<IkReal> x8517 = IKatan2WithCheck(IkReal((x8514+(((-1.0)*x8515)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8516.value)))+(x8517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8518=IKsin(j4);
IkReal x8519=IKcos(j4);
IkReal x8520=(cj5*r10);
IkReal x8521=(r01*sj5);
IkReal x8522=(cj5*r00);
IkReal x8523=(cj5*r20);
IkReal x8524=((1.0)*x8519);
IkReal x8525=((1.0)*x8518);
IkReal x8526=(sj5*x8518);
evalcond[0]=((((-1.0)*x8523*x8525))+((r21*x8526))+(((-1.0)*r22*x8524)));
evalcond[1]=(((x8518*x8521))+(((-1.0)*r02*x8524))+(((-1.0)*x8522*x8525)));
evalcond[2]=((((-1.0)*r11*sj5*x8524))+((x8519*x8520))+(((-1.0)*r12*x8525)));
evalcond[3]=((1.0)+((r11*x8526))+(((-1.0)*r12*x8524))+(((-1.0)*x8520*x8525)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8524))+((cj1*sj2))+(((-1.0)*r22*x8525))+((x8519*x8523)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8525))+((x8519*x8522))+(((-1.0)*x8521*x8524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8527=((1.0)*cj5);
CheckValue<IkReal> x8528=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8527)))),-1);
if(!x8528.valid){
continue;
}
CheckValue<IkReal> x8529 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8527)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8528.value)))+(x8529.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8530=IKsin(j4);
IkReal x8531=IKcos(j4);
IkReal x8532=(cj5*r10);
IkReal x8533=(r01*sj5);
IkReal x8534=(cj5*r00);
IkReal x8535=(cj5*r20);
IkReal x8536=((1.0)*x8531);
IkReal x8537=((1.0)*x8530);
IkReal x8538=(sj5*x8530);
evalcond[0]=((((-1.0)*r22*x8536))+((r21*x8538))+(((-1.0)*x8535*x8537)));
evalcond[1]=((((-1.0)*r02*x8536))+((x8530*x8533))+(((-1.0)*x8534*x8537)));
evalcond[2]=(((x8531*x8532))+(((-1.0)*r11*sj5*x8536))+(((-1.0)*r12*x8537)));
evalcond[3]=((1.0)+(((-1.0)*x8532*x8537))+(((-1.0)*r12*x8536))+((r11*x8538)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8537))+((cj1*sj2))+((x8531*x8535))+(((-1.0)*r21*sj5*x8536)));
evalcond[5]=((((-1.0)*r02*x8537))+(((-1.0)*x8533*x8536))+((x8531*x8534))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8539=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8539.valid){
continue;
}
CheckValue<IkReal> x8540 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8539.value)))+(x8540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8541=IKsin(j4);
IkReal x8542=IKcos(j4);
IkReal x8543=(cj5*r10);
IkReal x8544=(r01*sj5);
IkReal x8545=(cj5*r00);
IkReal x8546=(cj5*r20);
IkReal x8547=((1.0)*x8542);
IkReal x8548=((1.0)*x8541);
IkReal x8549=(sj5*x8541);
evalcond[0]=((((-1.0)*r22*x8547))+((r21*x8549))+(((-1.0)*x8546*x8548)));
evalcond[1]=((((-1.0)*r02*x8547))+((x8541*x8544))+(((-1.0)*x8545*x8548)));
evalcond[2]=((((-1.0)*r11*sj5*x8547))+((x8542*x8543))+(((-1.0)*r12*x8548)));
evalcond[3]=((1.0)+(((-1.0)*x8543*x8548))+(((-1.0)*r12*x8547))+((r11*x8549)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8542*x8546))+(((-1.0)*r22*x8548))+(((-1.0)*r21*sj5*x8547)));
evalcond[5]=((((-1.0)*r02*x8548))+((x8542*x8545))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8544*x8547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8550=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8550;
j4eval[1]=IKsign(x8550);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8551=((1.0)*cj5);
IkReal x8552=((((-1.0)*r21*x8551))+(((-1.0)*r20*sj5)));
j4eval[0]=x8552;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x8551))))));
j4eval[2]=IKsign(x8552);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8553=cj5*cj5;
IkReal x8554=r11*r11;
IkReal x8555=(cj5*r10);
IkReal x8556=(r11*sj5);
IkReal x8557=((((-1.0)*x8553*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x8555*x8556))+((x8553*x8554))+(((-1.0)*x8554)));
j4eval[0]=x8557;
j4eval[1]=((IKabs(r12))+(IKabs((x8555+(((-1.0)*x8556))))));
j4eval[2]=IKsign(x8557);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8558=cj5*cj5;
IkReal x8559=r11*r11;
IkReal x8560=(cj5*r10);
IkReal x8561=(r11*sj5);
CheckValue<IkReal> x8562 = IKatan2WithCheck(IkReal((x8560+(((-1.0)*x8561)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8562.valid){
continue;
}
CheckValue<IkReal> x8563=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8558*(r10*r10)))+(((-1.0)*(r12*r12)))+((x8558*x8559))+(((2.0)*x8560*x8561))+(((-1.0)*x8559)))),-1);
if(!x8563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8562.value)+(((1.5707963267949)*(x8563.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8564=IKsin(j4);
IkReal x8565=IKcos(j4);
IkReal x8566=(cj5*r10);
IkReal x8567=(r01*sj5);
IkReal x8568=(cj5*r00);
IkReal x8569=(cj5*r20);
IkReal x8570=((1.0)*x8565);
IkReal x8571=((1.0)*x8564);
IkReal x8572=(sj5*x8564);
evalcond[0]=(((r21*x8572))+(((-1.0)*x8569*x8571))+(((-1.0)*r22*x8570)));
evalcond[1]=((((-1.0)*r02*x8570))+((x8564*x8567))+(((-1.0)*x8568*x8571)));
evalcond[2]=((((-1.0)*r11*sj5*x8570))+((x8565*x8566))+(((-1.0)*r12*x8571)));
evalcond[3]=((-1.0)+((r11*x8572))+(((-1.0)*x8566*x8571))+(((-1.0)*r12*x8570)));
evalcond[4]=((((-1.0)*r21*sj5*x8570))+((cj2*sj1))+((cj1*sj2))+((x8565*x8569))+(((-1.0)*r22*x8571)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x8571))+((x8565*x8568))+(((-1.0)*x8567*x8570))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8573=((1.0)*cj5);
CheckValue<IkReal> x8574=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8573))+(((-1.0)*r20*sj5)))),-1);
if(!x8574.valid){
continue;
}
CheckValue<IkReal> x8575 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x8573)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8574.value)))+(x8575.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8576=IKsin(j4);
IkReal x8577=IKcos(j4);
IkReal x8578=(cj5*r10);
IkReal x8579=(r01*sj5);
IkReal x8580=(cj5*r00);
IkReal x8581=(cj5*r20);
IkReal x8582=((1.0)*x8577);
IkReal x8583=((1.0)*x8576);
IkReal x8584=(sj5*x8576);
evalcond[0]=((((-1.0)*r22*x8582))+((r21*x8584))+(((-1.0)*x8581*x8583)));
evalcond[1]=((((-1.0)*x8580*x8583))+(((-1.0)*r02*x8582))+((x8576*x8579)));
evalcond[2]=(((x8577*x8578))+(((-1.0)*r12*x8583))+(((-1.0)*r11*sj5*x8582)));
evalcond[3]=((-1.0)+((r11*x8584))+(((-1.0)*r12*x8582))+(((-1.0)*x8578*x8583)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8583))+(((-1.0)*r21*sj5*x8582))+((x8577*x8581))+((cj1*sj2)));
evalcond[5]=(((x8577*x8580))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x8583))+((cj1*cj2))+(((-1.0)*x8579*x8582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8585 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8585.valid){
continue;
}
CheckValue<IkReal> x8586=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8585.value)+(((1.5707963267949)*(x8586.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8587=IKsin(j4);
IkReal x8588=IKcos(j4);
IkReal x8589=(cj5*r10);
IkReal x8590=(r01*sj5);
IkReal x8591=(cj5*r00);
IkReal x8592=(cj5*r20);
IkReal x8593=((1.0)*x8588);
IkReal x8594=((1.0)*x8587);
IkReal x8595=(sj5*x8587);
evalcond[0]=((((-1.0)*r22*x8593))+(((-1.0)*x8592*x8594))+((r21*x8595)));
evalcond[1]=((((-1.0)*r02*x8593))+((x8587*x8590))+(((-1.0)*x8591*x8594)));
evalcond[2]=(((x8588*x8589))+(((-1.0)*r11*sj5*x8593))+(((-1.0)*r12*x8594)));
evalcond[3]=((-1.0)+(((-1.0)*x8589*x8594))+(((-1.0)*r12*x8593))+((r11*x8595)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8594))+((cj1*sj2))+((x8588*x8592))+(((-1.0)*r21*sj5*x8593)));
evalcond[5]=((((-1.0)*r02*x8594))+(((-1.0)*sj1*sj2))+((x8588*x8591))+(((-1.0)*x8590*x8593))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8596=((-1.0)*r00);
IkReal x8598 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8598)==0){
continue;
}
IkReal x8597=pow(x8598,-0.5);
CheckValue<IkReal> x8599 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8596),IKFAST_ATAN2_MAGTHRESH);
if(!x8599.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8599.value));
IkReal gconst145=(r01*x8597);
IkReal gconst146=(x8596*x8597);
CheckValue<IkReal> x8600 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8600.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8600.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8601=((-1.0)*r00);
IkReal x8602=x8597;
CheckValue<IkReal> x8604 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8601),IKFAST_ATAN2_MAGTHRESH);
if(!x8604.valid){
continue;
}
IkReal x8603=((-1.0)*(x8604.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8603;
IkReal gconst144=x8603;
IkReal gconst145=(r01*x8602);
IkReal gconst146=(x8601*x8602);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8605=((1.0)*sj0);
IkReal x8606=((1.0)*gconst145);
CheckValue<IkReal> x8607 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8605))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x8606))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x8605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8607.valid){
continue;
}
CheckValue<IkReal> x8608=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8606))+(((-1.0)*gconst146*r21)))),-1);
if(!x8608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8607.value)+(((1.5707963267949)*(x8608.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8609=IKsin(j4);
IkReal x8610=IKcos(j4);
IkReal x8611=(gconst146*r10);
IkReal x8612=(sj1*sj2);
IkReal x8613=(gconst146*r20);
IkReal x8614=(gconst146*r00);
IkReal x8615=((1.0)*x8610);
IkReal x8616=((1.0)*x8609);
IkReal x8617=(gconst145*x8609);
IkReal x8618=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8615))+(((-1.0)*x8613*x8616))+((r21*x8617)));
evalcond[1]=(cj0+((r11*x8617))+(((-1.0)*r12*x8615))+(((-1.0)*x8611*x8616)));
evalcond[2]=((((-1.0)*x8614*x8616))+(((-1.0)*sj0))+(((-1.0)*r02*x8615))+((r01*x8617)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8615))+((cj1*sj2))+(((-1.0)*r22*x8616))+((x8610*x8613)));
evalcond[4]=((((-1.0)*r02*x8616))+(((-1.0)*gconst145*r01*x8615))+((x8610*x8614))+((cj0*x8612))+(((-1.0)*cj0*x8618)));
evalcond[5]=((((-1.0)*gconst145*r11*x8615))+(((-1.0)*r12*x8616))+((x8610*x8611))+(((-1.0)*sj0*x8618))+((sj0*x8612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8619=((1.0)*gconst146);
CheckValue<IkReal> x8620 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8619))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8620.valid){
continue;
}
CheckValue<IkReal> x8621=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8619))+(((-1.0)*gconst145*r10)))),-1);
if(!x8621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8620.value)+(((1.5707963267949)*(x8621.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8622=IKsin(j4);
IkReal x8623=IKcos(j4);
IkReal x8624=(gconst146*r10);
IkReal x8625=(sj1*sj2);
IkReal x8626=(gconst146*r20);
IkReal x8627=(gconst146*r00);
IkReal x8628=((1.0)*x8623);
IkReal x8629=((1.0)*x8622);
IkReal x8630=(gconst145*x8622);
IkReal x8631=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8630))+(((-1.0)*x8626*x8629))+(((-1.0)*r22*x8628)));
evalcond[1]=((((-1.0)*r12*x8628))+cj0+(((-1.0)*x8624*x8629))+((r11*x8630)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8627*x8629))+((r01*x8630))+(((-1.0)*r02*x8628)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8628))+((x8623*x8626))+((cj1*sj2))+(((-1.0)*r22*x8629)));
evalcond[4]=(((x8623*x8627))+((cj0*x8625))+(((-1.0)*cj0*x8631))+(((-1.0)*r02*x8629))+(((-1.0)*gconst145*r01*x8628)));
evalcond[5]=((((-1.0)*r12*x8629))+((x8623*x8624))+(((-1.0)*gconst145*r11*x8628))+((sj0*x8625))+(((-1.0)*sj0*x8631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8632=((-1.0)*r01);
IkReal x8634 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8634)==0){
continue;
}
IkReal x8633=pow(x8634,-0.5);
CheckValue<IkReal> x8635 = IKatan2WithCheck(IkReal(x8632),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8635.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8635.value))));
IkReal gconst148=(x8632*x8633);
IkReal gconst149=((1.0)*r00*x8633);
CheckValue<IkReal> x8636 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8636.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8636.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8637=((-1.0)*r01);
CheckValue<IkReal> x8640 = IKatan2WithCheck(IkReal(x8637),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8640.valid){
continue;
}
IkReal x8638=((1.0)*(x8640.value));
IkReal x8639=x8633;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8638)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8638)));
IkReal gconst148=(x8637*x8639);
IkReal gconst149=((1.0)*r00*x8639);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8641=((-1.0)*r01);
CheckValue<IkReal> x8644 = IKatan2WithCheck(IkReal(x8641),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8644.valid){
continue;
}
IkReal x8642=((1.0)*(x8644.value));
IkReal x8643=x8633;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8642)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8642)));
IkReal gconst148=(x8641*x8643);
IkReal gconst149=((1.0)*r00*x8643);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8645=((-1.0)*r01);
CheckValue<IkReal> x8648 = IKatan2WithCheck(IkReal(x8645),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8648.valid){
continue;
}
IkReal x8646=((1.0)*(x8648.value));
IkReal x8647=x8633;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8646)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8646)));
IkReal gconst148=(x8645*x8647);
IkReal gconst149=((1.0)*r00*x8647);
IkReal x8649=r02*r02;
IkReal x8650=(r12*sj0);
IkReal x8651=((1.0)*cj0);
IkReal x8652=x8633;
j4eval[0]=((IKabs((((cj0*x8649*x8652))+((r02*x8650*x8652))+(((-1.0)*x8651*x8652)))))+(IKabs(((((-1.0)*x8650))+(((-1.0)*r02*x8651))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8653=((1.0)*sj0);
IkReal x8654=((1.0)*gconst148);
CheckValue<IkReal> x8655 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8653))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*cj0*r01*x8654))+(((-1.0)*gconst148*r11*x8653)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8655.valid){
continue;
}
CheckValue<IkReal> x8656=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8654))+(((-1.0)*gconst149*r21)))),-1);
if(!x8656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8655.value)+(((1.5707963267949)*(x8656.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8657=IKsin(j4);
IkReal x8658=IKcos(j4);
IkReal x8659=(gconst148*r11);
IkReal x8660=(sj1*sj2);
IkReal x8661=((1.0)*x8658);
IkReal x8662=(gconst149*x8658);
IkReal x8663=(gconst148*x8657);
IkReal x8664=((1.0)*cj1*cj2);
IkReal x8665=((1.0)*x8657);
evalcond[0]=((((-1.0)*r22*x8661))+(((-1.0)*gconst149*r20*x8665))+((r21*x8663)));
evalcond[1]=(cj0+(((-1.0)*r12*x8661))+((x8657*x8659))+(((-1.0)*gconst149*r10*x8665)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8661))+((r01*x8663))+(((-1.0)*gconst149*r00*x8665)));
evalcond[3]=(((cj2*sj1))+((r20*x8662))+((cj1*sj2))+(((-1.0)*r22*x8665))+(((-1.0)*gconst148*r21*x8661)));
evalcond[4]=(((cj0*x8660))+(((-1.0)*cj0*x8664))+(((-1.0)*r02*x8665))+((r00*x8662))+(((-1.0)*gconst148*r01*x8661)));
evalcond[5]=((((-1.0)*sj0*x8664))+((sj0*x8660))+(((-1.0)*r12*x8665))+(((-1.0)*x8659*x8661))+((r10*x8662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8666=((1.0)*gconst149);
CheckValue<IkReal> x8667 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8666))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8667.valid){
continue;
}
CheckValue<IkReal> x8668=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8666))+(((-1.0)*gconst148*r10)))),-1);
if(!x8668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8667.value)+(((1.5707963267949)*(x8668.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8669=IKsin(j4);
IkReal x8670=IKcos(j4);
IkReal x8671=(gconst148*r11);
IkReal x8672=(sj1*sj2);
IkReal x8673=((1.0)*x8670);
IkReal x8674=(gconst149*x8670);
IkReal x8675=(gconst148*x8669);
IkReal x8676=((1.0)*cj1*cj2);
IkReal x8677=((1.0)*x8669);
evalcond[0]=((((-1.0)*r22*x8673))+(((-1.0)*gconst149*r20*x8677))+((r21*x8675)));
evalcond[1]=(((x8669*x8671))+cj0+(((-1.0)*r12*x8673))+(((-1.0)*gconst149*r10*x8677)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8673))+((r01*x8675))+(((-1.0)*gconst149*r00*x8677)));
evalcond[3]=(((r20*x8674))+((cj2*sj1))+(((-1.0)*r22*x8677))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8673)));
evalcond[4]=((((-1.0)*gconst148*r01*x8673))+((cj0*x8672))+(((-1.0)*cj0*x8676))+(((-1.0)*r02*x8677))+((r00*x8674)));
evalcond[5]=((((-1.0)*r12*x8677))+((r10*x8674))+(((-1.0)*x8671*x8673))+(((-1.0)*sj0*x8676))+((sj0*x8672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8678=((1.0)*gconst149);
CheckValue<IkReal> x8679=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8678))+(((-1.0)*gconst148*r00)))),-1);
if(!x8679.valid){
continue;
}
CheckValue<IkReal> x8680 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8678))+((cj0*gconst148*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8679.value)))+(x8680.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8681=IKsin(j4);
IkReal x8682=IKcos(j4);
IkReal x8683=(gconst148*r11);
IkReal x8684=(sj1*sj2);
IkReal x8685=((1.0)*x8682);
IkReal x8686=(gconst149*x8682);
IkReal x8687=(gconst148*x8681);
IkReal x8688=((1.0)*cj1*cj2);
IkReal x8689=((1.0)*x8681);
evalcond[0]=((((-1.0)*gconst149*r20*x8689))+(((-1.0)*r22*x8685))+((r21*x8687)));
evalcond[1]=(((x8681*x8683))+cj0+(((-1.0)*r12*x8685))+(((-1.0)*gconst149*r10*x8689)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8685))+((r01*x8687))+(((-1.0)*gconst149*r00*x8689)));
evalcond[3]=(((cj2*sj1))+((r20*x8686))+(((-1.0)*gconst148*r21*x8685))+((cj1*sj2))+(((-1.0)*r22*x8689)));
evalcond[4]=((((-1.0)*cj0*x8688))+(((-1.0)*r02*x8689))+((r00*x8686))+(((-1.0)*gconst148*r01*x8685))+((cj0*x8684)));
evalcond[5]=((((-1.0)*x8683*x8685))+(((-1.0)*r12*x8689))+((r10*x8686))+(((-1.0)*sj0*x8688))+((sj0*x8684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8690=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8690;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8690);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8691=((1.0)*cj5);
IkReal x8692=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8691)));
j4eval[0]=x8692;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8691))))));
j4eval[2]=IKsign(x8692);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8693=cj5*cj5;
IkReal x8694=r01*r01;
IkReal x8695=(r01*sj5);
IkReal x8696=(cj5*r00);
IkReal x8697=((((-1.0)*x8694))+(((-1.0)*(r02*r02)))+(((-1.0)*x8693*(r00*r00)))+(((2.0)*x8695*x8696))+((x8693*x8694)));
j4eval[0]=x8697;
j4eval[1]=IKsign(x8697);
j4eval[2]=((IKabs(r02))+(IKabs((x8696+(((-1.0)*x8695))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8698=cj5*cj5;
IkReal x8699=r01*r01;
IkReal x8700=(r01*sj5);
IkReal x8701=(cj5*r00);
CheckValue<IkReal> x8702 = IKatan2WithCheck(IkReal((x8701+(((-1.0)*x8700)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8702.valid){
continue;
}
CheckValue<IkReal> x8703=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8698*(r00*r00)))+(((2.0)*x8700*x8701))+((x8698*x8699))+(((-1.0)*x8699))+(((-1.0)*(r02*r02))))),-1);
if(!x8703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8702.value)+(((1.5707963267949)*(x8703.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8704=IKsin(j4);
IkReal x8705=IKcos(j4);
IkReal x8706=(cj5*r10);
IkReal x8707=(r01*sj5);
IkReal x8708=(cj5*r00);
IkReal x8709=(cj5*r20);
IkReal x8710=((1.0)*x8705);
IkReal x8711=((1.0)*x8704);
IkReal x8712=(sj5*x8704);
evalcond[0]=((((-1.0)*x8709*x8711))+(((-1.0)*r22*x8710))+((r21*x8712)));
evalcond[1]=((((-1.0)*x8706*x8711))+(((-1.0)*r12*x8710))+((r11*x8712)));
evalcond[2]=((((-1.0)*x8707*x8710))+(((-1.0)*r02*x8711))+((x8705*x8708)));
evalcond[3]=((-1.0)+((x8704*x8707))+(((-1.0)*r02*x8710))+(((-1.0)*x8708*x8711)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8711))+(((-1.0)*r21*sj5*x8710))+((x8705*x8709)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8711))+(((-1.0)*r11*sj5*x8710))+((x8705*x8706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8713=((1.0)*cj5);
CheckValue<IkReal> x8714=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8713)))),-1);
if(!x8714.valid){
continue;
}
CheckValue<IkReal> x8715 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8713))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8714.value)))+(x8715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8716=IKsin(j4);
IkReal x8717=IKcos(j4);
IkReal x8718=(cj5*r10);
IkReal x8719=(r01*sj5);
IkReal x8720=(cj5*r00);
IkReal x8721=(cj5*r20);
IkReal x8722=((1.0)*x8717);
IkReal x8723=((1.0)*x8716);
IkReal x8724=(sj5*x8716);
evalcond[0]=(((r21*x8724))+(((-1.0)*x8721*x8723))+(((-1.0)*r22*x8722)));
evalcond[1]=(((r11*x8724))+(((-1.0)*x8718*x8723))+(((-1.0)*r12*x8722)));
evalcond[2]=(((x8717*x8720))+(((-1.0)*r02*x8723))+(((-1.0)*x8719*x8722)));
evalcond[3]=((-1.0)+(((-1.0)*x8720*x8723))+(((-1.0)*r02*x8722))+((x8716*x8719)));
evalcond[4]=(((cj2*sj1))+((x8717*x8721))+((cj1*sj2))+(((-1.0)*r21*sj5*x8722))+(((-1.0)*r22*x8723)));
evalcond[5]=((((-1.0)*r11*sj5*x8722))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8717*x8718))+(((-1.0)*r12*x8723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8725=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8725.valid){
continue;
}
CheckValue<IkReal> x8726 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8725.value)))+(x8726.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8727=IKsin(j4);
IkReal x8728=IKcos(j4);
IkReal x8729=(cj5*r10);
IkReal x8730=(r01*sj5);
IkReal x8731=(cj5*r00);
IkReal x8732=(cj5*r20);
IkReal x8733=((1.0)*x8728);
IkReal x8734=((1.0)*x8727);
IkReal x8735=(sj5*x8727);
evalcond[0]=(((r21*x8735))+(((-1.0)*x8732*x8734))+(((-1.0)*r22*x8733)));
evalcond[1]=((((-1.0)*x8729*x8734))+((r11*x8735))+(((-1.0)*r12*x8733)));
evalcond[2]=(((x8728*x8731))+(((-1.0)*r02*x8734))+(((-1.0)*x8730*x8733)));
evalcond[3]=((-1.0)+((x8727*x8730))+(((-1.0)*x8731*x8734))+(((-1.0)*r02*x8733)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8728*x8732))+(((-1.0)*r21*sj5*x8733))+(((-1.0)*r22*x8734)));
evalcond[5]=((((-1.0)*r11*sj5*x8733))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8728*x8729))+(((-1.0)*r12*x8734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8736=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8736;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8736);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8737=((1.0)*cj5);
IkReal x8738=((((-1.0)*r21*x8737))+(((-1.0)*r20*sj5)));
j4eval[0]=x8738;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x8737)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8738);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8739=cj5*cj5;
IkReal x8740=r01*r01;
IkReal x8741=(cj5*r00);
IkReal x8742=(r01*sj5);
IkReal x8743=(x8740+(((-2.0)*x8741*x8742))+(((-1.0)*x8739*x8740))+((x8739*(r00*r00)))+(r02*r02));
j4eval[0]=x8743;
j4eval[1]=((IKabs(r02))+(IKabs((x8741+(((-1.0)*x8742))))));
j4eval[2]=IKsign(x8743);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8744=cj5*cj5;
IkReal x8745=r01*r01;
IkReal x8746=(r01*sj5);
IkReal x8747=(cj5*r00);
CheckValue<IkReal> x8748 = IKatan2WithCheck(IkReal((x8747+(((-1.0)*x8746)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8748.valid){
continue;
}
CheckValue<IkReal> x8749=IKPowWithIntegerCheck(IKsign((((x8744*(r00*r00)))+x8745+(((-2.0)*x8746*x8747))+(r02*r02)+(((-1.0)*x8744*x8745)))),-1);
if(!x8749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8748.value)+(((1.5707963267949)*(x8749.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8750=IKsin(j4);
IkReal x8751=IKcos(j4);
IkReal x8752=(cj5*r10);
IkReal x8753=(r01*sj5);
IkReal x8754=(cj5*r00);
IkReal x8755=(cj5*r20);
IkReal x8756=((1.0)*x8751);
IkReal x8757=((1.0)*x8750);
IkReal x8758=(sj5*x8750);
evalcond[0]=((((-1.0)*x8755*x8757))+(((-1.0)*r22*x8756))+((r21*x8758)));
evalcond[1]=(((r11*x8758))+(((-1.0)*r12*x8756))+(((-1.0)*x8752*x8757)));
evalcond[2]=((((-1.0)*r02*x8757))+((x8751*x8754))+(((-1.0)*x8753*x8756)));
evalcond[3]=((1.0)+(((-1.0)*x8754*x8757))+((x8750*x8753))+(((-1.0)*r02*x8756)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8757))+((cj1*sj2))+((x8751*x8755))+(((-1.0)*r21*sj5*x8756)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8756))+((x8751*x8752))+(((-1.0)*r12*x8757))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8759=((1.0)*cj5);
CheckValue<IkReal> x8760 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x8759))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8760.valid){
continue;
}
CheckValue<IkReal> x8761=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8759))+(((-1.0)*r20*sj5)))),-1);
if(!x8761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8760.value)+(((1.5707963267949)*(x8761.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8762=IKsin(j4);
IkReal x8763=IKcos(j4);
IkReal x8764=(cj5*r10);
IkReal x8765=(r01*sj5);
IkReal x8766=(cj5*r00);
IkReal x8767=(cj5*r20);
IkReal x8768=((1.0)*x8763);
IkReal x8769=((1.0)*x8762);
IkReal x8770=(sj5*x8762);
evalcond[0]=((((-1.0)*x8767*x8769))+(((-1.0)*r22*x8768))+((r21*x8770)));
evalcond[1]=((((-1.0)*r12*x8768))+((r11*x8770))+(((-1.0)*x8764*x8769)));
evalcond[2]=((((-1.0)*r02*x8769))+(((-1.0)*x8765*x8768))+((x8763*x8766)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8768))+(((-1.0)*x8766*x8769))+((x8762*x8765)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8769))+(((-1.0)*r21*sj5*x8768))+((x8763*x8767)));
evalcond[5]=((((-1.0)*r11*sj5*x8768))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8769))+((cj1*cj2))+((x8763*x8764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8771 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8771.valid){
continue;
}
CheckValue<IkReal> x8772=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8771.value)+(((1.5707963267949)*(x8772.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8773=IKsin(j4);
IkReal x8774=IKcos(j4);
IkReal x8775=(cj5*r10);
IkReal x8776=(r01*sj5);
IkReal x8777=(cj5*r00);
IkReal x8778=(cj5*r20);
IkReal x8779=((1.0)*x8774);
IkReal x8780=((1.0)*x8773);
IkReal x8781=(sj5*x8773);
evalcond[0]=(((r21*x8781))+(((-1.0)*x8778*x8780))+(((-1.0)*r22*x8779)));
evalcond[1]=(((r11*x8781))+(((-1.0)*x8775*x8780))+(((-1.0)*r12*x8779)));
evalcond[2]=((((-1.0)*x8776*x8779))+((x8774*x8777))+(((-1.0)*r02*x8780)));
evalcond[3]=((1.0)+((x8773*x8776))+(((-1.0)*r02*x8779))+(((-1.0)*x8777*x8780)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8779))+((x8774*x8778))+(((-1.0)*r22*x8780)));
evalcond[5]=((((-1.0)*r11*sj5*x8779))+(((-1.0)*sj1*sj2))+((x8774*x8775))+((cj1*cj2))+(((-1.0)*r12*x8780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8782=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8782);
rxp1_1=(px*r21);
rxp1_2=(r11*x8782);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8783=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8783);
rxp1_1=(px*r21);
rxp1_2=(r11*x8783);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8784=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8784);
rxp1_1=(px*r21);
rxp1_2=(r11*x8784);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8787=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8787.valid){
continue;
}
IkReal x8785=x8787.value;
IkReal x8786=(sj0*x8785);
cj4array[0]=((((-1.0)*sj1*sj2*x8786))+((cj1*cj2*x8786)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8788=IKsin(j4);
IkReal x8789=IKcos(j4);
IkReal x8790=(r21*sj5);
IkReal x8791=(cj5*r20);
IkReal x8792=((1.0)*x8788);
IkReal x8793=((1.0)*x8789);
evalcond[0]=((-1.0)*r02*x8788);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8793)));
evalcond[2]=(((x8788*x8790))+(((-1.0)*x8791*x8792)));
evalcond[3]=(((r11*sj5*x8788))+(((-1.0)*cj5*r10*x8792)));
evalcond[4]=(((cj2*sj1))+((x8789*x8791))+((cj1*sj2))+(((-1.0)*x8790*x8793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8796=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8796.valid){
continue;
}
IkReal x8794=x8796.value;
IkReal x8795=((1.0)*x8794);
cj4array[0]=((((-1.0)*cj1*sj2*x8795))+(((-1.0)*cj2*sj1*x8795)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8797=IKsin(j4);
IkReal x8798=IKcos(j4);
IkReal x8799=(r11*sj5);
IkReal x8800=((1.0)*sj0);
IkReal x8801=((1.0)*x8798);
IkReal x8802=((1.0)*cj5*x8797);
evalcond[0]=((-1.0)*r02*x8797);
evalcond[1]=((((-1.0)*r02*x8801))+(((-1.0)*x8800)));
evalcond[2]=(((r21*sj5*x8797))+(((-1.0)*r20*x8802)));
evalcond[3]=((((-1.0)*r10*x8802))+((x8797*x8799)));
evalcond[4]=((((-1.0)*cj1*cj2*x8800))+((cj5*r10*x8798))+((sj0*sj1*sj2))+(((-1.0)*x8799*x8801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8803=IKPowWithIntegerCheck(r02,-1);
if(!x8803.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8803.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8804=IKsin(j4);
IkReal x8805=IKcos(j4);
IkReal x8806=(cj5*x8805);
IkReal x8807=(sj5*x8804);
IkReal x8808=((1.0)*sj5*x8805);
IkReal x8809=((1.0)*cj5*x8804);
evalcond[0]=((-1.0)*r02*x8804);
evalcond[1]=(((r21*x8807))+(((-1.0)*r20*x8809)));
evalcond[2]=((((-1.0)*r10*x8809))+((r11*x8807)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r21*x8808))+((cj1*sj2))+((r20*x8806)));
evalcond[4]=((((-1.0)*r11*x8808))+((r10*x8806))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8810=((1.0)*sj0);
IkReal x8811=((1.0)*cj0);
CheckValue<IkReal> x8812 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8810))+(((-1.0)*r02*x8811)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8811))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8810)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8812.valid){
continue;
}
CheckValue<IkReal> x8813=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8812.value)+(((1.5707963267949)*(x8813.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8814=IKsin(j4);
IkReal x8815=IKcos(j4);
IkReal x8816=(cj5*r10);
IkReal x8817=(sj1*sj2);
IkReal x8818=(r01*sj5);
IkReal x8819=(cj5*r00);
IkReal x8820=(cj5*r20);
IkReal x8821=((1.0)*x8815);
IkReal x8822=((1.0)*cj1*cj2);
IkReal x8823=((1.0)*x8814);
IkReal x8824=(sj5*x8814);
evalcond[0]=(((r21*x8824))+(((-1.0)*x8820*x8823))+(((-1.0)*r22*x8821)));
evalcond[1]=((((-1.0)*r12*x8821))+cj0+(((-1.0)*x8816*x8823))+((r11*x8824)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8821))+((x8814*x8818))+(((-1.0)*x8819*x8823)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8821))+((x8815*x8820))+(((-1.0)*r22*x8823)));
evalcond[4]=((((-1.0)*r02*x8823))+(((-1.0)*x8818*x8821))+((x8815*x8819))+(((-1.0)*cj0*x8822))+((cj0*x8817)));
evalcond[5]=((((-1.0)*r11*sj5*x8821))+(((-1.0)*r12*x8823))+(((-1.0)*sj0*x8822))+((sj0*x8817))+((x8815*x8816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8825=((1.0)*cj5);
CheckValue<IkReal> x8826=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8825))+(((-1.0)*r10*sj5)))),-1);
if(!x8826.valid){
continue;
}
CheckValue<IkReal> x8827 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8825))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8826.value)))+(x8827.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8828=IKsin(j4);
IkReal x8829=IKcos(j4);
IkReal x8830=(cj5*r10);
IkReal x8831=(sj1*sj2);
IkReal x8832=(r01*sj5);
IkReal x8833=(cj5*r00);
IkReal x8834=(cj5*r20);
IkReal x8835=((1.0)*x8829);
IkReal x8836=((1.0)*cj1*cj2);
IkReal x8837=((1.0)*x8828);
IkReal x8838=(sj5*x8828);
evalcond[0]=((((-1.0)*x8834*x8837))+((r21*x8838))+(((-1.0)*r22*x8835)));
evalcond[1]=(cj0+((r11*x8838))+(((-1.0)*x8830*x8837))+(((-1.0)*r12*x8835)));
evalcond[2]=(((x8828*x8832))+(((-1.0)*sj0))+(((-1.0)*x8833*x8837))+(((-1.0)*r02*x8835)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8835))+(((-1.0)*r22*x8837))+((x8829*x8834)));
evalcond[4]=((((-1.0)*x8832*x8835))+(((-1.0)*cj0*x8836))+((cj0*x8831))+(((-1.0)*r02*x8837))+((x8829*x8833)));
evalcond[5]=((((-1.0)*sj0*x8836))+((sj0*x8831))+(((-1.0)*r11*sj5*x8835))+(((-1.0)*r12*x8837))+((x8829*x8830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8839=((1.0)*cj5);
CheckValue<IkReal> x8840 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8839)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8840.valid){
continue;
}
CheckValue<IkReal> x8841=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8839)))),-1);
if(!x8841.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8840.value)+(((1.5707963267949)*(x8841.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8842=IKsin(j4);
IkReal x8843=IKcos(j4);
IkReal x8844=(cj5*r10);
IkReal x8845=(sj1*sj2);
IkReal x8846=(r01*sj5);
IkReal x8847=(cj5*r00);
IkReal x8848=(cj5*r20);
IkReal x8849=((1.0)*x8843);
IkReal x8850=((1.0)*cj1*cj2);
IkReal x8851=((1.0)*x8842);
IkReal x8852=(sj5*x8842);
evalcond[0]=((((-1.0)*x8848*x8851))+((r21*x8852))+(((-1.0)*r22*x8849)));
evalcond[1]=(cj0+((r11*x8852))+(((-1.0)*x8844*x8851))+(((-1.0)*r12*x8849)));
evalcond[2]=((((-1.0)*sj0))+((x8842*x8846))+(((-1.0)*x8847*x8851))+(((-1.0)*r02*x8849)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8851))+((cj1*sj2))+(((-1.0)*r21*sj5*x8849))+((x8843*x8848)));
evalcond[4]=(((cj0*x8845))+(((-1.0)*cj0*x8850))+((x8843*x8847))+(((-1.0)*r02*x8851))+(((-1.0)*x8846*x8849)));
evalcond[5]=((((-1.0)*r12*x8851))+((sj0*x8845))+((x8843*x8844))+(((-1.0)*r11*sj5*x8849))+(((-1.0)*sj0*x8850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8853=cj1*cj1;
IkReal x8854=cj2*cj2;
IkReal x8855=(r10*sj5);
IkReal x8856=(cj1*px);
IkReal x8857=((98000.0)*cj2);
IkReal x8858=(r00*sj5);
IkReal x8859=(cj5*r11);
IkReal x8860=(cj5*r01);
IkReal x8861=((10625.0)*cj1);
IkReal x8862=(sj1*sj2);
IkReal x8863=(cj1*py);
IkReal x8864=((9800.0)*x8862);
IkReal x8865=((9800.0)*cj1*cj2);
CheckValue<IkReal> x8866=IKPowWithIntegerCheck(IKsign(((42905.0)+(((6740.25)*x8853))+(((-83300.0)*cj1*x8862))+(((83300.0)*cj2*x8853))+(((-38416.0)*x8854))+(((76832.0)*x8853*x8854))+(((-76832.0)*cj1*cj2*x8862)))),-1);
if(!x8866.valid){
continue;
}
CheckValue<IkReal> x8867 = IKatan2WithCheck(IkReal(((((-98000.0)*py*x8862))+((x8855*x8861))+((x8855*x8865))+((x8859*x8865))+((x8859*x8861))+(((-1.0)*x8855*x8864))+(((-3350.0)*x8858))+(((-3350.0)*x8860))+((x8857*x8863))+(((-33500.0)*px))+(((106250.0)*x8863))+(((-1.0)*x8859*x8864)))),IkReal((((x8860*x8865))+((x8860*x8861))+(((3350.0)*x8859))+(((3350.0)*x8855))+(((33500.0)*py))+(((106250.0)*x8856))+((x8858*x8861))+((x8858*x8865))+(((-1.0)*x8860*x8864))+(((-98000.0)*px*x8862))+((x8856*x8857))+(((-1.0)*x8858*x8864)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8867.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8866.value)))+(x8867.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8868=IKcos(j0);
IkReal x8869=IKsin(j0);
IkReal x8870=((0.1)*sj5);
IkReal x8871=((0.425)*cj1);
IkReal x8872=((0.1)*cj5);
IkReal x8873=((0.392)*cj1*cj2);
IkReal x8874=((0.392)*sj1*sj2);
evalcond[0]=((((-1.0)*r01*x8872))+(((-1.0)*x8868*x8874))+(((-1.0)*px))+((x8868*x8873))+((x8868*x8871))+(((-0.134)*x8869))+(((-1.0)*r00*x8870)));
evalcond[1]=((((-1.0)*x8869*x8874))+(((-1.0)*py))+(((-1.0)*r10*x8870))+(((0.134)*x8868))+(((-1.0)*r11*x8872))+((x8869*x8871))+((x8869*x8873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8875=((1.0)*cj5);
IkReal x8876=((((-1.0)*r01*x8875))+(((-1.0)*r00*sj5)));
j4eval[0]=x8876;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8875)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8876);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8877=((1.0)*cj5);
IkReal x8878=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8877)));
j4eval[0]=x8878;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8877)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x8878);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8879=((1.0)*sj0);
IkReal x8880=((1.0)*cj0);
IkReal x8881=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8881;
j4eval[1]=((IKabs(((((-1.0)*r02*x8880))+(((-1.0)*r12*x8879)))))+(IKabs(((((-1.0)*r11*sj5*x8879))+(((-1.0)*r01*sj5*x8880))+((cj0*cj5*r00))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x8881);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8882=((-1.0)*r20);
IkReal x8884 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8884)==0){
continue;
}
IkReal x8883=pow(x8884,-0.5);
CheckValue<IkReal> x8885 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8882),IKFAST_ATAN2_MAGTHRESH);
if(!x8885.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8885.value));
IkReal gconst1=(r21*x8883);
IkReal gconst2=(x8882*x8883);
CheckValue<IkReal> x8886 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8886.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8886.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8887=((-1.0)*r20);
IkReal x8888=x8883;
CheckValue<IkReal> x8890 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8887),IKFAST_ATAN2_MAGTHRESH);
if(!x8890.valid){
continue;
}
IkReal x8889=((-1.0)*(x8890.value));
sj5=gconst1;
cj5=gconst2;
j5=x8889;
IkReal gconst0=x8889;
IkReal gconst1=(r21*x8888);
IkReal gconst2=(x8887*x8888);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8891=((-1.0)*r20);
IkReal x8892=x8883;
CheckValue<IkReal> x8894 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8891),IKFAST_ATAN2_MAGTHRESH);
if(!x8894.valid){
continue;
}
IkReal x8893=((-1.0)*(x8894.value));
sj5=gconst1;
cj5=gconst2;
j5=x8893;
IkReal gconst0=x8893;
IkReal gconst1=(r21*x8892);
IkReal gconst2=(x8891*x8892);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8895=((-1.0)*r20);
IkReal x8896=x8883;
CheckValue<IkReal> x8898 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8895),IKFAST_ATAN2_MAGTHRESH);
if(!x8898.valid){
continue;
}
IkReal x8897=((-1.0)*(x8898.value));
sj5=gconst1;
cj5=gconst2;
j5=x8897;
IkReal gconst0=x8897;
IkReal gconst1=(r21*x8896);
IkReal gconst2=(x8895*x8896);
IkReal x8899=r22*r22;
CheckValue<IkReal> x8903=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8899))),-1);
if(!x8903.valid){
continue;
}
IkReal x8900=x8903.value;
IkReal x8901=(sj3*x8900);
IkReal x8902=((((2.0)*x8901*(r20*r20)*(r21*r21)))+((x8901*(r21*r21*r21*r21)))+((sj3*x8899))+((x8901*(r20*r20*r20*r20))));
j4eval[0]=x8902;
j4eval[1]=IKsign(x8902);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8904=((-1.0)*r20);
IkReal x8905=x8883;
CheckValue<IkReal> x8907 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8904),IKFAST_ATAN2_MAGTHRESH);
if(!x8907.valid){
continue;
}
IkReal x8906=((-1.0)*(x8907.value));
sj5=gconst1;
cj5=gconst2;
j5=x8906;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8906;
IkReal gconst1=(r21*x8905);
IkReal gconst2=(x8904*x8905);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8908=((-1.0)*r20);
IkReal x8909=x8883;
CheckValue<IkReal> x8911 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8908),IKFAST_ATAN2_MAGTHRESH);
if(!x8911.valid){
continue;
}
IkReal x8910=((-1.0)*(x8911.value));
sj5=gconst1;
cj5=gconst2;
j5=x8910;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8910;
IkReal gconst1=(r21*x8909);
IkReal gconst2=(x8908*x8909);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8912=((-1.0)*r20);
IkReal x8913=x8883;
CheckValue<IkReal> x8915 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8912),IKFAST_ATAN2_MAGTHRESH);
if(!x8915.valid){
continue;
}
IkReal x8914=((-1.0)*(x8915.value));
sj5=gconst1;
cj5=gconst2;
j5=x8914;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8914;
IkReal gconst1=(r21*x8913);
IkReal gconst2=(x8912*x8913);
IkReal x8916=((1.0)*(r22*r22));
CheckValue<IkReal> x8920=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8916))),-1);
if(!x8920.valid){
continue;
}
IkReal x8917=x8920.value;
IkReal x8918=((1.0)*x8917);
IkReal x8919=((((-1.0)*x8916))+(((-1.0)*x8918*(r21*r21*r21*r21)))+(((-1.0)*x8918*(r20*r20*r20*r20)))+(((-2.0)*x8917*(r20*r20)*(r21*r21))));
j4eval[0]=x8919;
j4eval[1]=IKsign(x8919);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8921=((-1.0)*r20);
IkReal x8922=x8883;
CheckValue<IkReal> x8924 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8921),IKFAST_ATAN2_MAGTHRESH);
if(!x8924.valid){
continue;
}
IkReal x8923=((-1.0)*(x8924.value));
sj5=gconst1;
cj5=gconst2;
j5=x8923;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8923;
IkReal gconst1=(r21*x8922);
IkReal gconst2=(x8921*x8922);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8925=((-1.0)*r20);
IkReal x8926=x8883;
CheckValue<IkReal> x8928 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8925),IKFAST_ATAN2_MAGTHRESH);
if(!x8928.valid){
continue;
}
IkReal x8927=((-1.0)*(x8928.value));
sj5=gconst1;
cj5=gconst2;
j5=x8927;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8927;
IkReal gconst1=(r21*x8926);
IkReal gconst2=(x8925*x8926);
IkReal x8929=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8933=IKPowWithIntegerCheck(x8929,-1);
if(!x8933.valid){
continue;
}
IkReal x8930=x8933.value;
IkReal x8931=((1.0)*x8930);
IkReal x8932=((((-1.0)*x8931*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x8930))+(((-1.0)*x8931*(r10*r10)*(r20*r20))));
j4eval[0]=x8932;
j4eval[1]=r12;
j4eval[2]=x8929;
j4eval[3]=IKsign(x8932);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8934=((-1.0)*r20);
IkReal x8935=x8883;
CheckValue<IkReal> x8937 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8934),IKFAST_ATAN2_MAGTHRESH);
if(!x8937.valid){
continue;
}
IkReal x8936=((-1.0)*(x8937.value));
sj5=gconst1;
cj5=gconst2;
j5=x8936;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8936;
IkReal gconst1=(r21*x8935);
IkReal gconst2=(x8934*x8935);
IkReal x8938=r22*r22;
IkReal x8939=(cj1*r12*sj2);
IkReal x8940=(cj2*r12*sj1);
CheckValue<IkReal> x8944=IKPowWithIntegerCheck(((-1.0)+x8938),-1);
if(!x8944.valid){
continue;
}
IkReal x8941=x8944.value;
if((((1.0)+(((-1.0)*x8938)))) < -0.00001)
continue;
IkReal x8942=IKsqrt(((1.0)+(((-1.0)*x8938))));
IkReal x8943=(r22*x8941*x8942);
j4eval[0]=((IKabs((((x8939*x8943))+((x8940*x8943)))))+(IKabs(((((-1.0)*x8940))+(((-1.0)*x8939))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8945=(cj1*sj2);
IkReal x8946=(cj2*sj1);
IkReal x8947=((1.0)*r12);
IkReal x8948=(gconst1*r11);
IkReal x8949=((1.0)*gconst2*r10);
CheckValue<IkReal> x8950 = IKatan2WithCheck(IkReal(((((-1.0)*x8946*x8949))+((x8946*x8948))+((x8945*x8948))+(((-1.0)*x8945*x8949)))),IkReal(((((-1.0)*x8946*x8947))+(((-1.0)*x8945*x8947)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8950.valid){
continue;
}
CheckValue<IkReal> x8951=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8950.value)+(((1.5707963267949)*(x8951.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8952=IKcos(j4);
IkReal x8953=IKsin(j4);
IkReal x8954=((1.0)*x8952);
IkReal x8955=(gconst1*x8952);
IkReal x8956=(gconst1*x8953);
IkReal x8957=((1.0)*gconst2*x8953);
evalcond[0]=((((-1.0)*gconst2*r10*x8954))+((r12*x8953))+((r11*x8955)));
evalcond[1]=((((-1.0)*r22*x8954))+(((-1.0)*r20*x8957))+((r21*x8956)));
evalcond[2]=((((-1.0)*r00*x8957))+((r01*x8956))+(((-1.0)*r02*x8954)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8957))+(((-1.0)*r12*x8954))+((r11*x8956)));
evalcond[4]=(((r22*x8953))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8954))+((r21*x8955)));
evalcond[5]=(((r02*x8953))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8955))+(((-1.0)*gconst2*r00*x8954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8958=(gconst2*r10);
IkReal x8959=(gconst1*r11);
CheckValue<IkReal> x8960=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8958*x8958)))+(((2.0)*x8958*x8959))+(((-1.0)*(x8959*x8959)))+(((-1.0)*(r12*r12))))),-1);
if(!x8960.valid){
continue;
}
CheckValue<IkReal> x8961 = IKatan2WithCheck(IkReal((x8959+(((-1.0)*x8958)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8960.value)))+(x8961.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8962=IKcos(j4);
IkReal x8963=IKsin(j4);
IkReal x8964=((1.0)*x8962);
IkReal x8965=(gconst1*x8962);
IkReal x8966=(gconst1*x8963);
IkReal x8967=((1.0)*gconst2*x8963);
evalcond[0]=(((r11*x8965))+(((-1.0)*gconst2*r10*x8964))+((r12*x8963)));
evalcond[1]=((((-1.0)*r22*x8964))+(((-1.0)*r20*x8967))+((r21*x8966)));
evalcond[2]=((((-1.0)*r00*x8967))+((r01*x8966))+(((-1.0)*r02*x8964)));
evalcond[3]=((1.0)+((r11*x8966))+(((-1.0)*r10*x8967))+(((-1.0)*r12*x8964)));
evalcond[4]=(((cj2*sj1))+((r22*x8963))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8964))+((r21*x8965)));
evalcond[5]=(((r02*x8963))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8965))+(((-1.0)*gconst2*r00*x8964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8968=((1.0)*gconst2);
CheckValue<IkReal> x8969 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x8968)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8969.valid){
continue;
}
CheckValue<IkReal> x8970=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8968))+(((-1.0)*gconst1*r00)))),-1);
if(!x8970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8969.value)+(((1.5707963267949)*(x8970.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8971=IKcos(j4);
IkReal x8972=IKsin(j4);
IkReal x8973=((1.0)*x8971);
IkReal x8974=(gconst1*x8971);
IkReal x8975=(gconst1*x8972);
IkReal x8976=((1.0)*gconst2*x8972);
evalcond[0]=(((r11*x8974))+((r12*x8972))+(((-1.0)*gconst2*r10*x8973)));
evalcond[1]=(((r21*x8975))+(((-1.0)*r22*x8973))+(((-1.0)*r20*x8976)));
evalcond[2]=(((r01*x8975))+(((-1.0)*r02*x8973))+(((-1.0)*r00*x8976)));
evalcond[3]=((1.0)+(((-1.0)*r10*x8976))+((r11*x8975))+(((-1.0)*r12*x8973)));
evalcond[4]=(((r21*x8974))+((cj2*sj1))+(((-1.0)*gconst2*r20*x8973))+((cj1*sj2))+((r22*x8972)));
evalcond[5]=(((r01*x8974))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x8973))+((r02*x8972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8977=((-1.0)*r20);
IkReal x8978=x8883;
CheckValue<IkReal> x8980 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8977),IKFAST_ATAN2_MAGTHRESH);
if(!x8980.valid){
continue;
}
IkReal x8979=((-1.0)*(x8980.value));
sj5=gconst1;
cj5=gconst2;
j5=x8979;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8979;
IkReal gconst1=(r21*x8978);
IkReal gconst2=(x8977*x8978);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8981=((-1.0)*r20);
IkReal x8982=x8883;
CheckValue<IkReal> x8984 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8981),IKFAST_ATAN2_MAGTHRESH);
if(!x8984.valid){
continue;
}
IkReal x8983=((-1.0)*(x8984.value));
sj5=gconst1;
cj5=gconst2;
j5=x8983;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8983;
IkReal gconst1=(r21*x8982);
IkReal gconst2=(x8981*x8982);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8985=((-1.0)*r20);
IkReal x8986=x8883;
CheckValue<IkReal> x8988 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8985),IKFAST_ATAN2_MAGTHRESH);
if(!x8988.valid){
continue;
}
IkReal x8987=((-1.0)*(x8988.value));
sj5=gconst1;
cj5=gconst2;
j5=x8987;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8987;
IkReal gconst1=(r21*x8986);
IkReal gconst2=(x8985*x8986);
IkReal x8989=r22*r22;
IkReal x8990=(cj1*r12*sj2);
IkReal x8991=(cj2*r12*sj1);
CheckValue<IkReal> x8995=IKPowWithIntegerCheck(((-1.0)+x8989),-1);
if(!x8995.valid){
continue;
}
IkReal x8992=x8995.value;
if((((1.0)+(((-1.0)*x8989)))) < -0.00001)
continue;
IkReal x8993=IKsqrt(((1.0)+(((-1.0)*x8989))));
IkReal x8994=(r22*x8992*x8993);
j4eval[0]=((IKabs((((x8991*x8994))+((x8990*x8994)))))+(IKabs(((((-1.0)*x8990))+(((-1.0)*x8991))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8996=(cj1*sj2);
IkReal x8997=(cj2*sj1);
IkReal x8998=((1.0)*r12);
IkReal x8999=(gconst1*r11);
IkReal x9000=((1.0)*gconst2*r10);
CheckValue<IkReal> x9001 = IKatan2WithCheck(IkReal(((((-1.0)*x8996*x9000))+((x8997*x8999))+((x8996*x8999))+(((-1.0)*x8997*x9000)))),IkReal(((((-1.0)*x8997*x8998))+(((-1.0)*x8996*x8998)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9001.valid){
continue;
}
CheckValue<IkReal> x9002=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9001.value)+(((1.5707963267949)*(x9002.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9003=IKcos(j4);
IkReal x9004=IKsin(j4);
IkReal x9005=((1.0)*x9003);
IkReal x9006=(gconst1*x9003);
IkReal x9007=(gconst1*x9004);
IkReal x9008=((1.0)*gconst2*x9004);
evalcond[0]=((((-1.0)*gconst2*r10*x9005))+((r11*x9006))+((r12*x9004)));
evalcond[1]=((((-1.0)*r22*x9005))+((r21*x9007))+(((-1.0)*r20*x9008)));
evalcond[2]=((((-1.0)*r02*x9005))+(((-1.0)*r00*x9008))+((r01*x9007)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9005))+(((-1.0)*r10*x9008))+((r11*x9007)));
evalcond[4]=(((cj2*sj1))+((r21*x9006))+((r22*x9004))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9005)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x9004))+(((-1.0)*gconst2*r00*x9005))+((cj1*cj2))+((r01*x9006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9009=(gconst1*r11);
IkReal x9010=(gconst2*r10);
CheckValue<IkReal> x9011=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9009*x9010))+(x9009*x9009)+(x9010*x9010))),-1);
if(!x9011.valid){
continue;
}
CheckValue<IkReal> x9012 = IKatan2WithCheck(IkReal(((((-1.0)*x9010))+x9009)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9011.value)))+(x9012.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9013=IKcos(j4);
IkReal x9014=IKsin(j4);
IkReal x9015=((1.0)*x9013);
IkReal x9016=(gconst1*x9013);
IkReal x9017=(gconst1*x9014);
IkReal x9018=((1.0)*gconst2*x9014);
evalcond[0]=(((r12*x9014))+(((-1.0)*gconst2*r10*x9015))+((r11*x9016)));
evalcond[1]=((((-1.0)*r22*x9015))+(((-1.0)*r20*x9018))+((r21*x9017)));
evalcond[2]=((((-1.0)*r00*x9018))+(((-1.0)*r02*x9015))+((r01*x9017)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9018))+(((-1.0)*r12*x9015))+((r11*x9017)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9015))+((cj1*sj2))+((r22*x9014))+((r21*x9016)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x9014))+((cj1*cj2))+((r01*x9016))+(((-1.0)*gconst2*r00*x9015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9019 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9019.valid){
continue;
}
CheckValue<IkReal> x9020=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9019.value)+(((1.5707963267949)*(x9020.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9021=IKcos(j4);
IkReal x9022=IKsin(j4);
IkReal x9023=((1.0)*x9021);
IkReal x9024=(gconst1*x9021);
IkReal x9025=(gconst1*x9022);
IkReal x9026=((1.0)*gconst2*x9022);
evalcond[0]=((((-1.0)*gconst2*r10*x9023))+((r11*x9024))+((r12*x9022)));
evalcond[1]=(((r21*x9025))+(((-1.0)*r20*x9026))+(((-1.0)*r22*x9023)));
evalcond[2]=(((r01*x9025))+(((-1.0)*r02*x9023))+(((-1.0)*r00*x9026)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9023))+((r11*x9025))+(((-1.0)*r10*x9026)));
evalcond[4]=((((-1.0)*gconst2*r20*x9023))+((cj2*sj1))+((cj1*sj2))+((r21*x9024))+((r22*x9022)));
evalcond[5]=((((-1.0)*gconst2*r00*x9023))+((r01*x9024))+(((-1.0)*sj1*sj2))+((r02*x9022))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9027=((-1.0)*r20);
IkReal x9028=x8883;
CheckValue<IkReal> x9030 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9027),IKFAST_ATAN2_MAGTHRESH);
if(!x9030.valid){
continue;
}
IkReal x9029=((-1.0)*(x9030.value));
sj5=gconst1;
cj5=gconst2;
j5=x9029;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9029;
IkReal gconst1=(r21*x9028);
IkReal gconst2=(x9027*x9028);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9031=((-1.0)*r20);
IkReal x9032=x8883;
CheckValue<IkReal> x9034 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9031),IKFAST_ATAN2_MAGTHRESH);
if(!x9034.valid){
continue;
}
IkReal x9033=((-1.0)*(x9034.value));
sj5=gconst1;
cj5=gconst2;
j5=x9033;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9033;
IkReal gconst1=(r21*x9032);
IkReal gconst2=(x9031*x9032);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9035=((-1.0)*r20);
IkReal x9036=x8883;
CheckValue<IkReal> x9038 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9035),IKFAST_ATAN2_MAGTHRESH);
if(!x9038.valid){
continue;
}
IkReal x9037=((-1.0)*(x9038.value));
sj5=gconst1;
cj5=gconst2;
j5=x9037;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9037;
IkReal gconst1=(r21*x9036);
IkReal gconst2=(x9035*x9036);
IkReal x9039=r22*r22;
IkReal x9040=((1.0)*r02);
IkReal x9041=(cj1*sj2);
IkReal x9042=(cj2*sj1);
CheckValue<IkReal> x9046=IKPowWithIntegerCheck(((-1.0)+x9039),-1);
if(!x9046.valid){
continue;
}
IkReal x9043=x9046.value;
if((((1.0)+(((-1.0)*x9039)))) < -0.00001)
continue;
IkReal x9044=IKsqrt(((1.0)+(((-1.0)*x9039))));
IkReal x9045=(r02*r22*x9043*x9044);
j4eval[0]=((IKabs(((((-1.0)*x9040*x9041))+(((-1.0)*x9040*x9042)))))+(IKabs((((x9041*x9045))+((x9042*x9045))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9047=(cj1*sj2);
IkReal x9048=(gconst1*r01);
IkReal x9049=((1.0)*r02);
IkReal x9050=(cj2*sj1);
IkReal x9051=((1.0)*gconst2*r00);
CheckValue<IkReal> x9052=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9052.valid){
continue;
}
CheckValue<IkReal> x9053 = IKatan2WithCheck(IkReal((((x9048*x9050))+(((-1.0)*x9047*x9051))+(((-1.0)*x9050*x9051))+((x9047*x9048)))),IkReal(((((-1.0)*x9049*x9050))+(((-1.0)*x9047*x9049)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9052.value)))+(x9053.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9054=IKcos(j4);
IkReal x9055=IKsin(j4);
IkReal x9056=((1.0)*x9054);
IkReal x9057=(gconst1*x9054);
IkReal x9058=(gconst1*x9055);
IkReal x9059=((1.0)*gconst2*x9055);
evalcond[0]=(((r01*x9057))+(((-1.0)*gconst2*r00*x9056))+((r02*x9055)));
evalcond[1]=((((-1.0)*r22*x9056))+(((-1.0)*r20*x9059))+((r21*x9058)));
evalcond[2]=((((-1.0)*r12*x9056))+(((-1.0)*r10*x9059))+((r11*x9058)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9056))+(((-1.0)*r00*x9059))+((r01*x9058)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9055))+(((-1.0)*gconst2*r20*x9056))+((r21*x9057)));
evalcond[5]=((((-1.0)*gconst2*r10*x9056))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9055))+((r11*x9057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9060=(gconst1*r01);
IkReal x9061=(gconst2*r00);
CheckValue<IkReal> x9062=IKPowWithIntegerCheck(IKsign(((x9060*x9060)+(x9061*x9061)+(((-2.0)*x9060*x9061))+(r02*r02))),-1);
if(!x9062.valid){
continue;
}
CheckValue<IkReal> x9063 = IKatan2WithCheck(IkReal((x9060+(((-1.0)*x9061)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9062.value)))+(x9063.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9064=IKcos(j4);
IkReal x9065=IKsin(j4);
IkReal x9066=((1.0)*x9064);
IkReal x9067=(gconst1*x9064);
IkReal x9068=(gconst1*x9065);
IkReal x9069=((1.0)*gconst2*x9065);
evalcond[0]=(((r01*x9067))+(((-1.0)*gconst2*r00*x9066))+((r02*x9065)));
evalcond[1]=((((-1.0)*r20*x9069))+((r21*x9068))+(((-1.0)*r22*x9066)));
evalcond[2]=(((r11*x9068))+(((-1.0)*r10*x9069))+(((-1.0)*r12*x9066)));
evalcond[3]=((-1.0)+((r01*x9068))+(((-1.0)*r02*x9066))+(((-1.0)*r00*x9069)));
evalcond[4]=(((cj2*sj1))+((r22*x9065))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9066))+((r21*x9067)));
evalcond[5]=(((r11*x9067))+((r12*x9065))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9070=((1.0)*gconst2);
CheckValue<IkReal> x9071=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9070)))),-1);
if(!x9071.valid){
continue;
}
CheckValue<IkReal> x9072 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9070)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9071.value)))+(x9072.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9073=IKcos(j4);
IkReal x9074=IKsin(j4);
IkReal x9075=((1.0)*x9073);
IkReal x9076=(gconst1*x9073);
IkReal x9077=(gconst1*x9074);
IkReal x9078=((1.0)*gconst2*x9074);
evalcond[0]=((((-1.0)*gconst2*r00*x9075))+((r01*x9076))+((r02*x9074)));
evalcond[1]=(((r21*x9077))+(((-1.0)*r22*x9075))+(((-1.0)*r20*x9078)));
evalcond[2]=((((-1.0)*r12*x9075))+((r11*x9077))+(((-1.0)*r10*x9078)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9075))+(((-1.0)*r00*x9078))+((r01*x9077)));
evalcond[4]=(((cj2*sj1))+((r21*x9076))+((cj1*sj2))+((r22*x9074))+(((-1.0)*gconst2*r20*x9075)));
evalcond[5]=((((-1.0)*gconst2*r10*x9075))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x9076))+((r12*x9074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9079=((-1.0)*r20);
IkReal x9080=x8883;
CheckValue<IkReal> x9082 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9079),IKFAST_ATAN2_MAGTHRESH);
if(!x9082.valid){
continue;
}
IkReal x9081=((-1.0)*(x9082.value));
sj5=gconst1;
cj5=gconst2;
j5=x9081;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9081;
IkReal gconst1=(r21*x9080);
IkReal gconst2=(x9079*x9080);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9083=((-1.0)*r20);
IkReal x9084=x8883;
CheckValue<IkReal> x9086 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9083),IKFAST_ATAN2_MAGTHRESH);
if(!x9086.valid){
continue;
}
IkReal x9085=((-1.0)*(x9086.value));
sj5=gconst1;
cj5=gconst2;
j5=x9085;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9085;
IkReal gconst1=(r21*x9084);
IkReal gconst2=(x9083*x9084);
IkReal x9087=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9091=IKPowWithIntegerCheck(x9087,-1);
if(!x9091.valid){
continue;
}
IkReal x9088=x9091.value;
IkReal x9089=((1.0)*x9088);
IkReal x9090=((((-1.0)*x9089*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9088))+(((-1.0)*x9089*(r01*r01)*(r21*r21))));
j4eval[0]=x9090;
j4eval[1]=IKsign(x9090);
j4eval[2]=r02;
j4eval[3]=x9087;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9092=((-1.0)*r20);
IkReal x9093=x8883;
CheckValue<IkReal> x9095 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9092),IKFAST_ATAN2_MAGTHRESH);
if(!x9095.valid){
continue;
}
IkReal x9094=((-1.0)*(x9095.value));
sj5=gconst1;
cj5=gconst2;
j5=x9094;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9094;
IkReal gconst1=(r21*x9093);
IkReal gconst2=(x9092*x9093);
IkReal x9096=r22*r22;
IkReal x9097=((1.0)*r02);
IkReal x9098=(cj1*sj2);
IkReal x9099=(cj2*sj1);
CheckValue<IkReal> x9103=IKPowWithIntegerCheck(((-1.0)+x9096),-1);
if(!x9103.valid){
continue;
}
IkReal x9100=x9103.value;
if((((1.0)+(((-1.0)*x9096)))) < -0.00001)
continue;
IkReal x9101=IKsqrt(((1.0)+(((-1.0)*x9096))));
IkReal x9102=(r02*r22*x9100*x9101);
j4eval[0]=((IKabs((((x9098*x9102))+((x9099*x9102)))))+(IKabs(((((-1.0)*x9097*x9099))+(((-1.0)*x9097*x9098))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9104=(cj1*sj2);
IkReal x9105=(gconst1*r01);
IkReal x9106=((1.0)*r02);
IkReal x9107=(cj2*sj1);
IkReal x9108=((1.0)*gconst2*r00);
CheckValue<IkReal> x9109 = IKatan2WithCheck(IkReal((((x9105*x9107))+((x9104*x9105))+(((-1.0)*x9107*x9108))+(((-1.0)*x9104*x9108)))),IkReal(((((-1.0)*x9106*x9107))+(((-1.0)*x9104*x9106)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9109.valid){
continue;
}
CheckValue<IkReal> x9110=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9109.value)+(((1.5707963267949)*(x9110.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9111=IKcos(j4);
IkReal x9112=IKsin(j4);
IkReal x9113=((1.0)*x9111);
IkReal x9114=(gconst1*x9111);
IkReal x9115=(gconst1*x9112);
IkReal x9116=((1.0)*gconst2*x9112);
evalcond[0]=((((-1.0)*gconst2*r00*x9113))+((r01*x9114))+((r02*x9112)));
evalcond[1]=(((r21*x9115))+(((-1.0)*r22*x9113))+(((-1.0)*r20*x9116)));
evalcond[2]=((((-1.0)*r10*x9116))+((r11*x9115))+(((-1.0)*r12*x9113)));
evalcond[3]=((1.0)+((r01*x9115))+(((-1.0)*r02*x9113))+(((-1.0)*r00*x9116)));
evalcond[4]=(((r21*x9114))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9113))+((r22*x9112)));
evalcond[5]=(((r12*x9112))+(((-1.0)*sj1*sj2))+((r11*x9114))+(((-1.0)*gconst2*r10*x9113))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9117=(gconst1*r01);
IkReal x9118=(gconst2*r00);
CheckValue<IkReal> x9119=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9118*x9118)))+(((2.0)*x9117*x9118))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9117*x9117))))),-1);
if(!x9119.valid){
continue;
}
CheckValue<IkReal> x9120 = IKatan2WithCheck(IkReal((x9117+(((-1.0)*x9118)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9119.value)))+(x9120.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9121=IKcos(j4);
IkReal x9122=IKsin(j4);
IkReal x9123=((1.0)*x9121);
IkReal x9124=(gconst1*x9121);
IkReal x9125=(gconst1*x9122);
IkReal x9126=((1.0)*gconst2*x9122);
evalcond[0]=((((-1.0)*gconst2*r00*x9123))+((r02*x9122))+((r01*x9124)));
evalcond[1]=((((-1.0)*r20*x9126))+(((-1.0)*r22*x9123))+((r21*x9125)));
evalcond[2]=((((-1.0)*r12*x9123))+(((-1.0)*r10*x9126))+((r11*x9125)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9123))+((r01*x9125))+(((-1.0)*r00*x9126)));
evalcond[4]=(((r22*x9122))+((cj2*sj1))+(((-1.0)*gconst2*r20*x9123))+((cj1*sj2))+((r21*x9124)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9123))+((cj1*cj2))+((r11*x9124))+((r12*x9122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9127 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9127.valid){
continue;
}
CheckValue<IkReal> x9128=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9127.value)+(((1.5707963267949)*(x9128.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9129=IKcos(j4);
IkReal x9130=IKsin(j4);
IkReal x9131=((1.0)*x9129);
IkReal x9132=(gconst1*x9129);
IkReal x9133=(gconst1*x9130);
IkReal x9134=((1.0)*gconst2*x9130);
evalcond[0]=(((r02*x9130))+(((-1.0)*gconst2*r00*x9131))+((r01*x9132)));
evalcond[1]=((((-1.0)*r22*x9131))+(((-1.0)*r20*x9134))+((r21*x9133)));
evalcond[2]=((((-1.0)*r12*x9131))+(((-1.0)*r10*x9134))+((r11*x9133)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9131))+(((-1.0)*r00*x9134))+((r01*x9133)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9130))+((r21*x9132))+(((-1.0)*gconst2*r20*x9131)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9131))+((r12*x9130))+((r11*x9132))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9135=((-1.0)*r20);
IkReal x9136=((-1.0)*px);
CheckValue<IkReal> x9138 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9135),IKFAST_ATAN2_MAGTHRESH);
if(!x9138.valid){
continue;
}
IkReal x9137=((-1.0)*(x9138.value));
sj5=gconst1;
cj5=gconst2;
j5=x9137;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9136);
rxp1_1=(px*r21);
rxp1_2=(r11*x9136);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9137;
IkReal gconst1=r21;
IkReal gconst2=x9135;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9139=((-1.0)*r20);
IkReal x9140=((-1.0)*px);
CheckValue<IkReal> x9142 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9139),IKFAST_ATAN2_MAGTHRESH);
if(!x9142.valid){
continue;
}
IkReal x9141=((-1.0)*(x9142.value));
sj5=gconst1;
cj5=gconst2;
j5=x9141;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9140);
rxp1_1=(px*r21);
rxp1_2=(r11*x9140);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9141;
IkReal gconst1=r21;
IkReal gconst2=x9139;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9143=((-1.0)*r20);
IkReal x9144=((-1.0)*px);
CheckValue<IkReal> x9146 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9143),IKFAST_ATAN2_MAGTHRESH);
if(!x9146.valid){
continue;
}
IkReal x9145=((-1.0)*(x9146.value));
sj5=gconst1;
cj5=gconst2;
j5=x9145;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9144);
rxp1_1=(px*r21);
rxp1_2=(r11*x9144);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9145;
IkReal gconst1=r21;
IkReal gconst2=x9143;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9149=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9149.valid){
continue;
}
IkReal x9147=x9149.value;
IkReal x9148=(sj0*x9147);
cj4array[0]=((((-1.0)*sj1*sj2*x9148))+((cj1*cj2*x9148)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9150=IKsin(j4);
IkReal x9151=IKcos(j4);
IkReal x9152=((1.0)*gconst2);
IkReal x9153=(gconst1*r21);
evalcond[0]=(r02*x9150);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9151)));
evalcond[2]=(((x9150*x9153))+(((-1.0)*r20*x9150*x9152)));
evalcond[3]=(((gconst1*r11*x9150))+(((-1.0)*r10*x9150*x9152)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x9151*x9152))+((x9151*x9153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9156=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9156.valid){
continue;
}
IkReal x9154=x9156.value;
IkReal x9155=((1.0)*x9154);
cj4array[0]=((((-1.0)*cj1*sj2*x9155))+(((-1.0)*cj2*sj1*x9155)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9157=IKsin(j4);
IkReal x9158=IKcos(j4);
IkReal x9159=((1.0)*sj0);
IkReal x9160=(gconst1*x9157);
IkReal x9161=((1.0)*x9158);
IkReal x9162=((1.0)*gconst2*x9157);
evalcond[0]=(r02*x9157);
evalcond[1]=((((-1.0)*r02*x9161))+(((-1.0)*x9159)));
evalcond[2]=(((r21*x9160))+(((-1.0)*r20*x9162)));
evalcond[3]=((((-1.0)*r10*x9162))+((r11*x9160)));
evalcond[4]=((((-1.0)*gconst2*r10*x9161))+((gconst1*r11*x9158))+(((-1.0)*cj1*cj2*x9159))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9163=IKPowWithIntegerCheck(r02,-1);
if(!x9163.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9163.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9164=IKsin(j4);
IkReal x9165=IKcos(j4);
IkReal x9166=(gconst1*r21);
IkReal x9167=(gconst1*r11);
IkReal x9168=((1.0)*gconst2*r10);
IkReal x9169=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9164);
evalcond[1]=(((x9164*x9166))+(((-1.0)*x9164*x9169)));
evalcond[2]=(((x9164*x9167))+(((-1.0)*x9164*x9168)));
evalcond[3]=(((cj2*sj1))+((x9165*x9166))+((cj1*sj2))+(((-1.0)*x9165*x9169)));
evalcond[4]=(((x9165*x9167))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*x9165*x9168))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9170=(cj2*sj1);
IkReal x9171=(cj1*sj2);
IkReal x9172=(gconst1*r21);
IkReal x9173=((1.0)*gconst2*r20);
CheckValue<IkReal> x9174 = IKatan2WithCheck(IkReal((((r22*x9171))+((r22*x9170)))),IkReal((((x9170*x9172))+(((-1.0)*x9170*x9173))+(((-1.0)*x9171*x9173))+((x9171*x9172)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9174.valid){
continue;
}
CheckValue<IkReal> x9175=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9172*x9172)))+(((-1.0)*gconst2*r20*x9173))+(((-1.0)*(r22*r22)))+(((2.0)*gconst2*r20*x9172)))),-1);
if(!x9175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9174.value)+(((1.5707963267949)*(x9175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9176=IKsin(j4);
IkReal x9177=IKcos(j4);
IkReal x9178=(sj1*sj2);
IkReal x9179=(gconst2*r10);
IkReal x9180=(gconst2*r00);
IkReal x9181=(gconst2*r20);
IkReal x9182=((1.0)*x9177);
IkReal x9183=(gconst1*x9177);
IkReal x9184=((1.0)*cj1*cj2);
IkReal x9185=(gconst1*x9176);
IkReal x9186=((1.0)*x9176);
evalcond[0]=((((-1.0)*r22*x9182))+(((-1.0)*x9181*x9186))+((r21*x9185)));
evalcond[1]=((((-1.0)*r12*x9182))+((r11*x9185))+cj0+(((-1.0)*x9179*x9186)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x9182))+((r01*x9185))+(((-1.0)*x9180*x9186)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9181*x9182))+((r21*x9183))+((r22*x9176)));
evalcond[4]=(((r02*x9176))+(((-1.0)*cj0*x9184))+((cj0*x9178))+((r01*x9183))+(((-1.0)*x9180*x9182)));
evalcond[5]=(((r11*x9183))+((sj0*x9178))+(((-1.0)*x9179*x9182))+((r12*x9176))+(((-1.0)*sj0*x9184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9187=((1.0)*gconst2);
CheckValue<IkReal> x9188=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9187)))),-1);
if(!x9188.valid){
continue;
}
CheckValue<IkReal> x9189 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9187))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9188.value)))+(x9189.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9190=IKsin(j4);
IkReal x9191=IKcos(j4);
IkReal x9192=(sj1*sj2);
IkReal x9193=(gconst2*r10);
IkReal x9194=(gconst2*r00);
IkReal x9195=(gconst2*r20);
IkReal x9196=((1.0)*x9191);
IkReal x9197=(gconst1*x9191);
IkReal x9198=((1.0)*cj1*cj2);
IkReal x9199=(gconst1*x9190);
IkReal x9200=((1.0)*x9190);
evalcond[0]=((((-1.0)*r22*x9196))+((r21*x9199))+(((-1.0)*x9195*x9200)));
evalcond[1]=(cj0+(((-1.0)*r12*x9196))+(((-1.0)*x9193*x9200))+((r11*x9199)));
evalcond[2]=((((-1.0)*x9194*x9200))+(((-1.0)*sj0))+((r01*x9199))+(((-1.0)*r02*x9196)));
evalcond[3]=(((cj2*sj1))+((r22*x9190))+((cj1*sj2))+((r21*x9197))+(((-1.0)*x9195*x9196)));
evalcond[4]=(((r01*x9197))+(((-1.0)*cj0*x9198))+(((-1.0)*x9194*x9196))+((r02*x9190))+((cj0*x9192)));
evalcond[5]=(((sj0*x9192))+(((-1.0)*sj0*x9198))+((r12*x9190))+(((-1.0)*x9193*x9196))+((r11*x9197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9201=((1.0)*gconst2);
CheckValue<IkReal> x9202=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9201)))),-1);
if(!x9202.valid){
continue;
}
CheckValue<IkReal> x9203 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9201)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9202.value)))+(x9203.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9204=IKsin(j4);
IkReal x9205=IKcos(j4);
IkReal x9206=(sj1*sj2);
IkReal x9207=(gconst2*r10);
IkReal x9208=(gconst2*r00);
IkReal x9209=(gconst2*r20);
IkReal x9210=((1.0)*x9205);
IkReal x9211=(gconst1*x9205);
IkReal x9212=((1.0)*cj1*cj2);
IkReal x9213=(gconst1*x9204);
IkReal x9214=((1.0)*x9204);
evalcond[0]=(((r21*x9213))+(((-1.0)*x9209*x9214))+(((-1.0)*r22*x9210)));
evalcond[1]=(cj0+((r11*x9213))+(((-1.0)*x9207*x9214))+(((-1.0)*r12*x9210)));
evalcond[2]=((((-1.0)*r02*x9210))+(((-1.0)*sj0))+(((-1.0)*x9208*x9214))+((r01*x9213)));
evalcond[3]=(((cj2*sj1))+((r21*x9211))+((r22*x9204))+((cj1*sj2))+(((-1.0)*x9209*x9210)));
evalcond[4]=((((-1.0)*x9208*x9210))+(((-1.0)*cj0*x9212))+((r02*x9204))+((cj0*x9206))+((r01*x9211)));
evalcond[5]=(((r11*x9211))+((r12*x9204))+(((-1.0)*x9207*x9210))+(((-1.0)*sj0*x9212))+((sj0*x9206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9215=((-1.0)*r20);
IkReal x9216=x8883;
CheckValue<IkReal> x9218 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9215),IKFAST_ATAN2_MAGTHRESH);
if(!x9218.valid){
continue;
}
IkReal x9217=((-1.0)*(x9218.value));
sj5=gconst1;
cj5=gconst2;
j5=x9217;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9217;
IkReal gconst1=(r21*x9216);
IkReal gconst2=(x9215*x9216);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9219=((-1.0)*r20);
IkReal x9220=x8883;
CheckValue<IkReal> x9222 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9219),IKFAST_ATAN2_MAGTHRESH);
if(!x9222.valid){
continue;
}
IkReal x9221=((-1.0)*(x9222.value));
sj5=gconst1;
cj5=gconst2;
j5=x9221;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9221;
IkReal gconst1=(r21*x9220);
IkReal gconst2=(x9219*x9220);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9223=((-1.0)*r20);
IkReal x9224=x8883;
CheckValue<IkReal> x9226 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9223),IKFAST_ATAN2_MAGTHRESH);
if(!x9226.valid){
continue;
}
IkReal x9225=((-1.0)*(x9226.value));
sj5=gconst1;
cj5=gconst2;
j5=x9225;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9225;
IkReal gconst1=(r21*x9224);
IkReal gconst2=(x9223*x9224);
IkReal x9227=r22*r22;
CheckValue<IkReal> x9230=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9227))),-1);
if(!x9230.valid){
continue;
}
IkReal x9228=x9230.value;
IkReal x9229=((((2.0)*x9228*(r20*r20)*(r21*r21)))+x9227+((x9228*(r20*r20*r20*r20)))+((x9228*(r21*r21*r21*r21))));
j4eval[0]=x9229;
j4eval[1]=IKsign(x9229);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9231=((-1.0)*r20);
IkReal x9232=x8883;
CheckValue<IkReal> x9234 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9231),IKFAST_ATAN2_MAGTHRESH);
if(!x9234.valid){
continue;
}
IkReal x9233=((-1.0)*(x9234.value));
sj5=gconst1;
cj5=gconst2;
j5=x9233;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9233;
IkReal gconst1=(r21*x9232);
IkReal gconst2=(x9231*x9232);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9235=((-1.0)*r20);
IkReal x9236=x8883;
CheckValue<IkReal> x9238 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9235),IKFAST_ATAN2_MAGTHRESH);
if(!x9238.valid){
continue;
}
IkReal x9237=((-1.0)*(x9238.value));
sj5=gconst1;
cj5=gconst2;
j5=x9237;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9237;
IkReal gconst1=(r21*x9236);
IkReal gconst2=(x9235*x9236);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9239=((-1.0)*r20);
IkReal x9240=x8883;
CheckValue<IkReal> x9242 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9239),IKFAST_ATAN2_MAGTHRESH);
if(!x9242.valid){
continue;
}
IkReal x9241=((-1.0)*(x9242.value));
sj5=gconst1;
cj5=gconst2;
j5=x9241;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9241;
IkReal gconst1=(r21*x9240);
IkReal gconst2=(x9239*x9240);
IkReal x9243=r22*r22;
IkReal x9244=(cj1*r12*sj2);
IkReal x9245=(cj2*r12*sj1);
CheckValue<IkReal> x9249=IKPowWithIntegerCheck(((-1.0)+x9243),-1);
if(!x9249.valid){
continue;
}
IkReal x9246=x9249.value;
if((((1.0)+(((-1.0)*x9243)))) < -0.00001)
continue;
IkReal x9247=IKsqrt(((1.0)+(((-1.0)*x9243))));
IkReal x9248=((1.0)*r22*x9246*x9247);
j4eval[0]=((IKabs((x9245+x9244)))+(IKabs(((((-1.0)*x9244*x9248))+(((-1.0)*x9245*x9248))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9250=((1.0)*gconst1);
IkReal x9251=(cj2*sj1);
IkReal x9252=(gconst2*r10);
IkReal x9253=(cj1*sj2);
CheckValue<IkReal> x9254 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9250*x9253))+(((-1.0)*r11*x9250*x9251))+((x9251*x9252))+((x9252*x9253)))),IkReal((((r12*x9253))+((r12*x9251)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9254.valid){
continue;
}
CheckValue<IkReal> x9255=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9250))+(((-1.0)*gconst2*r01)))),-1);
if(!x9255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9254.value)+(((1.5707963267949)*(x9255.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9256=IKsin(j4);
IkReal x9257=IKcos(j4);
IkReal x9258=((1.0)*x9257);
IkReal x9259=(gconst2*x9257);
IkReal x9260=(gconst1*x9256);
IkReal x9261=((1.0)*x9256);
evalcond[0]=((((-1.0)*gconst2*r20*x9261))+(((-1.0)*r22*x9258))+((r21*x9260)));
evalcond[1]=((((-1.0)*gconst2*r00*x9261))+((r01*x9260))+(((-1.0)*r02*x9258)));
evalcond[2]=(((r10*x9259))+(((-1.0)*r12*x9261))+(((-1.0)*gconst1*r11*x9258)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9258))+(((-1.0)*gconst2*r10*x9261))+((r11*x9260)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9261))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9258))+((r20*x9259)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9261))+((r00*x9259))+(((-1.0)*gconst1*r01*x9258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9262=(gconst1*r11);
IkReal x9263=(gconst2*r10);
CheckValue<IkReal> x9264=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9262*x9263))+(x9263*x9263)+(x9262*x9262))),-1);
if(!x9264.valid){
continue;
}
CheckValue<IkReal> x9265 = IKatan2WithCheck(IkReal((x9263+(((-1.0)*x9262)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9264.value)))+(x9265.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9266=IKsin(j4);
IkReal x9267=IKcos(j4);
IkReal x9268=((1.0)*x9267);
IkReal x9269=(gconst2*x9267);
IkReal x9270=(gconst1*x9266);
IkReal x9271=((1.0)*x9266);
evalcond[0]=((((-1.0)*gconst2*r20*x9271))+(((-1.0)*r22*x9268))+((r21*x9270)));
evalcond[1]=((((-1.0)*gconst2*r00*x9271))+((r01*x9270))+(((-1.0)*r02*x9268)));
evalcond[2]=((((-1.0)*gconst1*r11*x9268))+((r10*x9269))+(((-1.0)*r12*x9271)));
evalcond[3]=((1.0)+((r11*x9270))+(((-1.0)*gconst2*r10*x9271))+(((-1.0)*r12*x9268)));
evalcond[4]=((((-1.0)*gconst1*r21*x9268))+((cj2*sj1))+(((-1.0)*r22*x9271))+((cj1*sj2))+((r20*x9269)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9268))+((r00*x9269))+(((-1.0)*r02*x9271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9272=((1.0)*gconst2);
CheckValue<IkReal> x9273=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9272)))),-1);
if(!x9273.valid){
continue;
}
CheckValue<IkReal> x9274 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9272))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9273.value)))+(x9274.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9275=IKsin(j4);
IkReal x9276=IKcos(j4);
IkReal x9277=((1.0)*x9276);
IkReal x9278=(gconst2*x9276);
IkReal x9279=(gconst1*x9275);
IkReal x9280=((1.0)*x9275);
evalcond[0]=((((-1.0)*gconst2*r20*x9280))+(((-1.0)*r22*x9277))+((r21*x9279)));
evalcond[1]=((((-1.0)*gconst2*r00*x9280))+((r01*x9279))+(((-1.0)*r02*x9277)));
evalcond[2]=((((-1.0)*r12*x9280))+(((-1.0)*gconst1*r11*x9277))+((r10*x9278)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9280))+((r11*x9279))+(((-1.0)*r12*x9277)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9277))+((cj1*sj2))+((r20*x9278))+(((-1.0)*r22*x9280)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9280))+(((-1.0)*gconst1*r01*x9277))+((r00*x9278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9281=((-1.0)*r20);
IkReal x9282=x8883;
CheckValue<IkReal> x9284 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9281),IKFAST_ATAN2_MAGTHRESH);
if(!x9284.valid){
continue;
}
IkReal x9283=((-1.0)*(x9284.value));
sj5=gconst1;
cj5=gconst2;
j5=x9283;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9283;
IkReal gconst1=(r21*x9282);
IkReal gconst2=(x9281*x9282);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9285=((-1.0)*r20);
IkReal x9286=x8883;
CheckValue<IkReal> x9288 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9285),IKFAST_ATAN2_MAGTHRESH);
if(!x9288.valid){
continue;
}
IkReal x9287=((-1.0)*(x9288.value));
sj5=gconst1;
cj5=gconst2;
j5=x9287;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9287;
IkReal gconst1=(r21*x9286);
IkReal gconst2=(x9285*x9286);
IkReal x9289=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9293=IKPowWithIntegerCheck(x9289,-1);
if(!x9293.valid){
continue;
}
IkReal x9290=x9293.value;
IkReal x9291=((1.0)*x9290);
IkReal x9292=((((-1.0)*(r12*r12)))+(((-1.0)*x9291*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x9290))+(((-1.0)*x9291*(r11*r11)*(r21*r21))));
j4eval[0]=x9292;
j4eval[1]=r12;
j4eval[2]=x9289;
j4eval[3]=IKsign(x9292);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9294=((-1.0)*r20);
IkReal x9295=x8883;
CheckValue<IkReal> x9297 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9294),IKFAST_ATAN2_MAGTHRESH);
if(!x9297.valid){
continue;
}
IkReal x9296=((-1.0)*(x9297.value));
sj5=gconst1;
cj5=gconst2;
j5=x9296;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9296;
IkReal gconst1=(r21*x9295);
IkReal gconst2=(x9294*x9295);
IkReal x9298=r22*r22;
IkReal x9299=(cj1*r12*sj2);
IkReal x9300=(cj2*r12*sj1);
CheckValue<IkReal> x9304=IKPowWithIntegerCheck(((-1.0)+x9298),-1);
if(!x9304.valid){
continue;
}
IkReal x9301=x9304.value;
if((((1.0)+(((-1.0)*x9298)))) < -0.00001)
continue;
IkReal x9302=IKsqrt(((1.0)+(((-1.0)*x9298))));
IkReal x9303=((1.0)*r22*x9301*x9302);
j4eval[0]=((IKabs((x9300+x9299)))+(IKabs(((((-1.0)*x9300*x9303))+(((-1.0)*x9299*x9303))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9305=((1.0)*gconst1);
IkReal x9306=(cj2*sj1);
IkReal x9307=(gconst2*r10);
IkReal x9308=(cj1*sj2);
CheckValue<IkReal> x9309=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9305))+(((-1.0)*gconst2*r01)))),-1);
if(!x9309.valid){
continue;
}
CheckValue<IkReal> x9310 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9305*x9308))+(((-1.0)*r11*x9305*x9306))+((x9306*x9307))+((x9307*x9308)))),IkReal((((r12*x9306))+((r12*x9308)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9309.value)))+(x9310.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9311=IKsin(j4);
IkReal x9312=IKcos(j4);
IkReal x9313=((1.0)*x9312);
IkReal x9314=(gconst2*x9312);
IkReal x9315=(gconst1*x9311);
IkReal x9316=((1.0)*x9311);
evalcond[0]=(((r21*x9315))+(((-1.0)*r22*x9313))+(((-1.0)*gconst2*r20*x9316)));
evalcond[1]=((((-1.0)*gconst2*r00*x9316))+((r01*x9315))+(((-1.0)*r02*x9313)));
evalcond[2]=((((-1.0)*gconst1*r11*x9313))+((r10*x9314))+(((-1.0)*r12*x9316)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9316))+((r11*x9315))+(((-1.0)*r12*x9313)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9313))+((cj1*sj2))+((r20*x9314))+(((-1.0)*r22*x9316)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst1*r01*x9313))+(((-1.0)*r02*x9316))+((r00*x9314))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9317=(gconst1*r11);
IkReal x9318=(gconst2*r10);
CheckValue<IkReal> x9319 = IKatan2WithCheck(IkReal((x9318+(((-1.0)*x9317)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9319.valid){
continue;
}
CheckValue<IkReal> x9320=IKPowWithIntegerCheck(IKsign(((((2.0)*x9317*x9318))+(((-1.0)*(x9318*x9318)))+(((-1.0)*(x9317*x9317)))+(((-1.0)*(r12*r12))))),-1);
if(!x9320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9319.value)+(((1.5707963267949)*(x9320.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9321=IKsin(j4);
IkReal x9322=IKcos(j4);
IkReal x9323=((1.0)*x9322);
IkReal x9324=(gconst2*x9322);
IkReal x9325=(gconst1*x9321);
IkReal x9326=((1.0)*x9321);
evalcond[0]=((((-1.0)*r22*x9323))+(((-1.0)*gconst2*r20*x9326))+((r21*x9325)));
evalcond[1]=((((-1.0)*r02*x9323))+((r01*x9325))+(((-1.0)*gconst2*r00*x9326)));
evalcond[2]=((((-1.0)*r12*x9326))+((r10*x9324))+(((-1.0)*gconst1*r11*x9323)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9323))+(((-1.0)*gconst2*r10*x9326))+((r11*x9325)));
evalcond[4]=(((cj2*sj1))+((r20*x9324))+(((-1.0)*r22*x9326))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9323)));
evalcond[5]=((((-1.0)*gconst1*r01*x9323))+(((-1.0)*r02*x9326))+((r00*x9324))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9327 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9327.valid){
continue;
}
CheckValue<IkReal> x9328=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9327.value)+(((1.5707963267949)*(x9328.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9329=IKsin(j4);
IkReal x9330=IKcos(j4);
IkReal x9331=((1.0)*x9330);
IkReal x9332=(gconst2*x9330);
IkReal x9333=(gconst1*x9329);
IkReal x9334=((1.0)*x9329);
evalcond[0]=((((-1.0)*r22*x9331))+(((-1.0)*gconst2*r20*x9334))+((r21*x9333)));
evalcond[1]=((((-1.0)*r02*x9331))+((r01*x9333))+(((-1.0)*gconst2*r00*x9334)));
evalcond[2]=((((-1.0)*r12*x9334))+((r10*x9332))+(((-1.0)*gconst1*r11*x9331)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9334))+(((-1.0)*r12*x9331))+((r11*x9333)));
evalcond[4]=(((cj2*sj1))+((r20*x9332))+(((-1.0)*r22*x9334))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9331)));
evalcond[5]=((((-1.0)*r02*x9334))+((r00*x9332))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst1*r01*x9331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9335=((-1.0)*r20);
IkReal x9336=x8883;
CheckValue<IkReal> x9338 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9335),IKFAST_ATAN2_MAGTHRESH);
if(!x9338.valid){
continue;
}
IkReal x9337=((-1.0)*(x9338.value));
sj5=gconst1;
cj5=gconst2;
j5=x9337;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9337;
IkReal gconst1=(r21*x9336);
IkReal gconst2=(x9335*x9336);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9339=((-1.0)*r20);
IkReal x9340=x8883;
CheckValue<IkReal> x9342 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9339),IKFAST_ATAN2_MAGTHRESH);
if(!x9342.valid){
continue;
}
IkReal x9341=((-1.0)*(x9342.value));
sj5=gconst1;
cj5=gconst2;
j5=x9341;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9341;
IkReal gconst1=(r21*x9340);
IkReal gconst2=(x9339*x9340);
IkReal x9343=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9347=IKPowWithIntegerCheck(x9343,-1);
if(!x9347.valid){
continue;
}
IkReal x9344=x9347.value;
IkReal x9345=((1.0)*x9344);
IkReal x9346=((((-1.0)*(r02*r02)))+(((-1.0)*x9345*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x9344))+(((-1.0)*x9345*(r00*r00)*(r20*r20))));
j4eval[0]=x9346;
j4eval[1]=IKsign(x9346);
j4eval[2]=r02;
j4eval[3]=x9343;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9348=((-1.0)*r20);
IkReal x9349=x8883;
CheckValue<IkReal> x9351 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9348),IKFAST_ATAN2_MAGTHRESH);
if(!x9351.valid){
continue;
}
IkReal x9350=((-1.0)*(x9351.value));
sj5=gconst1;
cj5=gconst2;
j5=x9350;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9350;
IkReal gconst1=(r21*x9349);
IkReal gconst2=(x9348*x9349);
IkReal x9352=r22*r22;
IkReal x9353=(cj1*r02*sj2);
IkReal x9354=(cj2*r02*sj1);
CheckValue<IkReal> x9358=IKPowWithIntegerCheck(((-1.0)+x9352),-1);
if(!x9358.valid){
continue;
}
IkReal x9355=x9358.value;
if((((1.0)+(((-1.0)*x9352)))) < -0.00001)
continue;
IkReal x9356=IKsqrt(((1.0)+(((-1.0)*x9352))));
IkReal x9357=((1.0)*r22*x9355*x9356);
j4eval[0]=((IKabs((x9353+x9354)))+(IKabs(((((-1.0)*x9353*x9357))+(((-1.0)*x9354*x9357))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9359=(cj2*sj1);
IkReal x9360=(cj1*sj2);
IkReal x9361=(gconst2*r00);
IkReal x9362=((1.0)*gconst1*r01);
CheckValue<IkReal> x9363=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9363.valid){
continue;
}
CheckValue<IkReal> x9364 = IKatan2WithCheck(IkReal(((((-1.0)*x9360*x9362))+(((-1.0)*x9359*x9362))+((x9359*x9361))+((x9360*x9361)))),IkReal((((r02*x9360))+((r02*x9359)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9363.value)))+(x9364.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9365=IKsin(j4);
IkReal x9366=IKcos(j4);
IkReal x9367=(gconst1*r11);
IkReal x9368=(gconst1*r21);
IkReal x9369=(gconst1*r01);
IkReal x9370=((1.0)*x9366);
IkReal x9371=(gconst2*x9366);
IkReal x9372=((1.0)*x9365);
evalcond[0]=(((x9365*x9368))+(((-1.0)*r22*x9370))+(((-1.0)*gconst2*r20*x9372)));
evalcond[1]=((((-1.0)*gconst2*r10*x9372))+((x9365*x9367))+(((-1.0)*r12*x9370)));
evalcond[2]=((((-1.0)*x9369*x9370))+(((-1.0)*r02*x9372))+((r00*x9371)));
evalcond[3]=((-1.0)+((x9365*x9369))+(((-1.0)*r02*x9370))+(((-1.0)*gconst2*r00*x9372)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9368*x9370))+(((-1.0)*r22*x9372))+((r20*x9371)));
evalcond[5]=((((-1.0)*x9367*x9370))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9372))+((r10*x9371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9373=(gconst2*r00);
IkReal x9374=(gconst1*r01);
CheckValue<IkReal> x9375=IKPowWithIntegerCheck(IKsign(((((2.0)*x9373*x9374))+(((-1.0)*(x9374*x9374)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9373*x9373))))),-1);
if(!x9375.valid){
continue;
}
CheckValue<IkReal> x9376 = IKatan2WithCheck(IkReal((x9373+(((-1.0)*x9374)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9375.value)))+(x9376.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9377=IKsin(j4);
IkReal x9378=IKcos(j4);
IkReal x9379=(gconst1*r11);
IkReal x9380=(gconst1*r21);
IkReal x9381=(gconst1*r01);
IkReal x9382=((1.0)*x9378);
IkReal x9383=(gconst2*x9378);
IkReal x9384=((1.0)*x9377);
evalcond[0]=((((-1.0)*gconst2*r20*x9384))+(((-1.0)*r22*x9382))+((x9377*x9380)));
evalcond[1]=((((-1.0)*r12*x9382))+((x9377*x9379))+(((-1.0)*gconst2*r10*x9384)));
evalcond[2]=((((-1.0)*x9381*x9382))+(((-1.0)*r02*x9384))+((r00*x9383)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9382))+(((-1.0)*gconst2*r00*x9384))+((x9377*x9381)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9380*x9382))+(((-1.0)*r22*x9384))+((r20*x9383)));
evalcond[5]=(((r10*x9383))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9379*x9382))+(((-1.0)*r12*x9384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9385=((1.0)*gconst2);
CheckValue<IkReal> x9386 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9385))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9386.valid){
continue;
}
CheckValue<IkReal> x9387=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9385)))),-1);
if(!x9387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9386.value)+(((1.5707963267949)*(x9387.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9388=IKsin(j4);
IkReal x9389=IKcos(j4);
IkReal x9390=(gconst1*r11);
IkReal x9391=(gconst1*r21);
IkReal x9392=(gconst1*r01);
IkReal x9393=((1.0)*x9389);
IkReal x9394=(gconst2*x9389);
IkReal x9395=((1.0)*x9388);
evalcond[0]=(((x9388*x9391))+(((-1.0)*gconst2*r20*x9395))+(((-1.0)*r22*x9393)));
evalcond[1]=(((x9388*x9390))+(((-1.0)*r12*x9393))+(((-1.0)*gconst2*r10*x9395)));
evalcond[2]=((((-1.0)*x9392*x9393))+(((-1.0)*r02*x9395))+((r00*x9394)));
evalcond[3]=((-1.0)+((x9388*x9392))+(((-1.0)*gconst2*r00*x9395))+(((-1.0)*r02*x9393)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9391*x9393))+((r20*x9394))+((cj1*sj2))+(((-1.0)*r22*x9395)));
evalcond[5]=((((-1.0)*r12*x9395))+((r10*x9394))+(((-1.0)*x9390*x9393))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9396=((-1.0)*r20);
IkReal x9397=x8883;
CheckValue<IkReal> x9399 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9396),IKFAST_ATAN2_MAGTHRESH);
if(!x9399.valid){
continue;
}
IkReal x9398=((-1.0)*(x9399.value));
sj5=gconst1;
cj5=gconst2;
j5=x9398;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9398;
IkReal gconst1=(r21*x9397);
IkReal gconst2=(x9396*x9397);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9400=((-1.0)*r20);
IkReal x9401=x8883;
CheckValue<IkReal> x9403 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9400),IKFAST_ATAN2_MAGTHRESH);
if(!x9403.valid){
continue;
}
IkReal x9402=((-1.0)*(x9403.value));
sj5=gconst1;
cj5=gconst2;
j5=x9402;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9402;
IkReal gconst1=(r21*x9401);
IkReal gconst2=(x9400*x9401);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9404=((-1.0)*r20);
IkReal x9405=x8883;
CheckValue<IkReal> x9407 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9404),IKFAST_ATAN2_MAGTHRESH);
if(!x9407.valid){
continue;
}
IkReal x9406=((-1.0)*(x9407.value));
sj5=gconst1;
cj5=gconst2;
j5=x9406;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9406;
IkReal gconst1=(r21*x9405);
IkReal gconst2=(x9404*x9405);
IkReal x9408=r22*r22;
IkReal x9409=(cj1*r02*sj2);
IkReal x9410=(cj2*r02*sj1);
CheckValue<IkReal> x9414=IKPowWithIntegerCheck(((-1.0)+x9408),-1);
if(!x9414.valid){
continue;
}
IkReal x9411=x9414.value;
if((((1.0)+(((-1.0)*x9408)))) < -0.00001)
continue;
IkReal x9412=IKsqrt(((1.0)+(((-1.0)*x9408))));
IkReal x9413=((1.0)*r22*x9411*x9412);
j4eval[0]=((IKabs(((((-1.0)*x9410*x9413))+(((-1.0)*x9409*x9413)))))+(IKabs((x9409+x9410))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9415=(cj2*sj1);
IkReal x9416=(cj1*sj2);
IkReal x9417=(gconst2*r00);
IkReal x9418=((1.0)*gconst1*r01);
CheckValue<IkReal> x9419=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9419.valid){
continue;
}
CheckValue<IkReal> x9420 = IKatan2WithCheck(IkReal(((((-1.0)*x9415*x9418))+(((-1.0)*x9416*x9418))+((x9415*x9417))+((x9416*x9417)))),IkReal((((r02*x9415))+((r02*x9416)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9419.value)))+(x9420.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9421=IKsin(j4);
IkReal x9422=IKcos(j4);
IkReal x9423=(gconst1*r11);
IkReal x9424=(gconst1*r21);
IkReal x9425=(gconst1*r01);
IkReal x9426=((1.0)*x9422);
IkReal x9427=(gconst2*x9422);
IkReal x9428=((1.0)*x9421);
evalcond[0]=(((x9421*x9424))+(((-1.0)*gconst2*r20*x9428))+(((-1.0)*r22*x9426)));
evalcond[1]=((((-1.0)*gconst2*r10*x9428))+(((-1.0)*r12*x9426))+((x9421*x9423)));
evalcond[2]=(((r00*x9427))+(((-1.0)*x9425*x9426))+(((-1.0)*r02*x9428)));
evalcond[3]=((1.0)+((x9421*x9425))+(((-1.0)*r02*x9426))+(((-1.0)*gconst2*r00*x9428)));
evalcond[4]=((((-1.0)*x9424*x9426))+((cj2*sj1))+((cj1*sj2))+((r20*x9427))+(((-1.0)*r22*x9428)));
evalcond[5]=((((-1.0)*x9423*x9426))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9428))+((cj1*cj2))+((r10*x9427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9429=(gconst1*r01);
IkReal x9430=(gconst2*r00);
CheckValue<IkReal> x9431 = IKatan2WithCheck(IkReal(((((-1.0)*x9429))+x9430)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9431.valid){
continue;
}
CheckValue<IkReal> x9432=IKPowWithIntegerCheck(IKsign(((x9430*x9430)+(x9429*x9429)+(((-2.0)*x9429*x9430))+(r02*r02))),-1);
if(!x9432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9431.value)+(((1.5707963267949)*(x9432.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9433=IKsin(j4);
IkReal x9434=IKcos(j4);
IkReal x9435=(gconst1*r11);
IkReal x9436=(gconst1*r21);
IkReal x9437=(gconst1*r01);
IkReal x9438=((1.0)*x9434);
IkReal x9439=(gconst2*x9434);
IkReal x9440=((1.0)*x9433);
evalcond[0]=((((-1.0)*gconst2*r20*x9440))+((x9433*x9436))+(((-1.0)*r22*x9438)));
evalcond[1]=((((-1.0)*r12*x9438))+((x9433*x9435))+(((-1.0)*gconst2*r10*x9440)));
evalcond[2]=((((-1.0)*x9437*x9438))+(((-1.0)*r02*x9440))+((r00*x9439)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9438))+(((-1.0)*gconst2*r00*x9440))+((x9433*x9437)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9439))+(((-1.0)*x9436*x9438))+(((-1.0)*r22*x9440)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x9435*x9438))+((cj1*cj2))+(((-1.0)*r12*x9440))+((r10*x9439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9441 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9441.valid){
continue;
}
CheckValue<IkReal> x9442=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9441.value)+(((1.5707963267949)*(x9442.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9443=IKsin(j4);
IkReal x9444=IKcos(j4);
IkReal x9445=(gconst1*r11);
IkReal x9446=(gconst1*r21);
IkReal x9447=(gconst1*r01);
IkReal x9448=((1.0)*x9444);
IkReal x9449=(gconst2*x9444);
IkReal x9450=((1.0)*x9443);
evalcond[0]=(((x9443*x9446))+(((-1.0)*gconst2*r20*x9450))+(((-1.0)*r22*x9448)));
evalcond[1]=(((x9443*x9445))+(((-1.0)*gconst2*r10*x9450))+(((-1.0)*r12*x9448)));
evalcond[2]=(((r00*x9449))+(((-1.0)*r02*x9450))+(((-1.0)*x9447*x9448)));
evalcond[3]=((1.0)+((x9443*x9447))+(((-1.0)*gconst2*r00*x9450))+(((-1.0)*r02*x9448)));
evalcond[4]=((((-1.0)*x9446*x9448))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9450))+((r20*x9449)));
evalcond[5]=(((r10*x9449))+(((-1.0)*x9445*x9448))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x9450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9451=((-1.0)*r20);
IkReal x9452=((-1.0)*px);
CheckValue<IkReal> x9454 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9451),IKFAST_ATAN2_MAGTHRESH);
if(!x9454.valid){
continue;
}
IkReal x9453=((-1.0)*(x9454.value));
sj5=gconst1;
cj5=gconst2;
j5=x9453;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9452);
rxp1_1=(px*r21);
rxp1_2=(r11*x9452);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9453;
IkReal gconst1=r21;
IkReal gconst2=x9451;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9455=((-1.0)*r20);
IkReal x9456=((-1.0)*px);
CheckValue<IkReal> x9458 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9455),IKFAST_ATAN2_MAGTHRESH);
if(!x9458.valid){
continue;
}
IkReal x9457=((-1.0)*(x9458.value));
sj5=gconst1;
cj5=gconst2;
j5=x9457;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9456);
rxp1_1=(px*r21);
rxp1_2=(r11*x9456);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9457;
IkReal gconst1=r21;
IkReal gconst2=x9455;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9459=((-1.0)*r20);
IkReal x9460=((-1.0)*px);
CheckValue<IkReal> x9462 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9459),IKFAST_ATAN2_MAGTHRESH);
if(!x9462.valid){
continue;
}
IkReal x9461=((-1.0)*(x9462.value));
sj5=gconst1;
cj5=gconst2;
j5=x9461;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9460);
rxp1_1=(px*r21);
rxp1_2=(r11*x9460);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9461;
IkReal gconst1=r21;
IkReal gconst2=x9459;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9465=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9465.valid){
continue;
}
IkReal x9463=x9465.value;
IkReal x9464=(sj0*x9463);
cj4array[0]=(((cj1*cj2*x9464))+(((-1.0)*sj1*sj2*x9464)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9466=IKsin(j4);
IkReal x9467=IKcos(j4);
IkReal x9468=(gconst1*x9466);
IkReal x9469=((1.0)*x9467);
IkReal x9470=((1.0)*gconst2*x9466);
evalcond[0]=((-1.0)*r02*x9466);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9469)));
evalcond[2]=(((r21*x9468))+(((-1.0)*r20*x9470)));
evalcond[3]=((((-1.0)*r10*x9470))+((r11*x9468)));
evalcond[4]=(((gconst2*r20*x9467))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9473=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9473.valid){
continue;
}
IkReal x9471=x9473.value;
IkReal x9472=((1.0)*x9471);
cj4array[0]=((((-1.0)*cj2*sj1*x9472))+(((-1.0)*cj1*sj2*x9472)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9474=IKsin(j4);
IkReal x9475=IKcos(j4);
IkReal x9476=(gconst2*r10);
IkReal x9477=((1.0)*sj0);
IkReal x9478=(gconst1*r11);
IkReal x9479=((1.0)*x9474);
IkReal x9480=((1.0)*x9475);
evalcond[0]=((-1.0)*r02*x9474);
evalcond[1]=((((-1.0)*x9477))+(((-1.0)*r02*x9480)));
evalcond[2]=(((gconst1*r21*x9474))+(((-1.0)*gconst2*r20*x9479)));
evalcond[3]=(((x9474*x9478))+(((-1.0)*x9476*x9479)));
evalcond[4]=(((x9475*x9476))+(((-1.0)*x9478*x9480))+(((-1.0)*cj1*cj2*x9477))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9481=IKPowWithIntegerCheck(r02,-1);
if(!x9481.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9481.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9482=IKsin(j4);
IkReal x9483=IKcos(j4);
IkReal x9484=(gconst2*r10);
IkReal x9485=(gconst1*r11);
IkReal x9486=(gconst1*r21);
IkReal x9487=(gconst2*r20);
IkReal x9488=((1.0)*x9482);
IkReal x9489=((1.0)*x9483);
evalcond[0]=((-1.0)*r02*x9482);
evalcond[1]=((((-1.0)*x9487*x9488))+((x9482*x9486)));
evalcond[2]=((((-1.0)*x9484*x9488))+((x9482*x9485)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x9483*x9487))+(((-1.0)*x9486*x9489)));
evalcond[4]=((((-1.0)*x9485*x9489))+((x9483*x9484))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9490=(cj2*sj1);
IkReal x9491=(cj1*sj2);
IkReal x9492=(gconst1*r21);
IkReal x9493=((1.0)*gconst2*r20);
CheckValue<IkReal> x9494=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x9492*x9492)+(((gconst2*gconst2)*(r20*r20)))+(((-2.0)*gconst2*r20*x9492)))),-1);
if(!x9494.valid){
continue;
}
CheckValue<IkReal> x9495 = IKatan2WithCheck(IkReal((((r22*x9490))+((r22*x9491)))),IkReal(((((-1.0)*x9491*x9493))+((x9490*x9492))+(((-1.0)*x9490*x9493))+((x9491*x9492)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9494.value)))+(x9495.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9496=IKsin(j4);
IkReal x9497=IKcos(j4);
IkReal x9498=(gconst1*r11);
IkReal x9499=(sj1*sj2);
IkReal x9500=(gconst1*r21);
IkReal x9501=(gconst1*r01);
IkReal x9502=((1.0)*x9497);
IkReal x9503=(gconst2*x9497);
IkReal x9504=((1.0)*cj1*cj2);
IkReal x9505=((1.0)*x9496);
evalcond[0]=(((x9496*x9500))+(((-1.0)*r22*x9502))+(((-1.0)*gconst2*r20*x9505)));
evalcond[1]=(cj0+(((-1.0)*r12*x9502))+((x9496*x9498))+(((-1.0)*gconst2*r10*x9505)));
evalcond[2]=((((-1.0)*sj0))+((x9496*x9501))+(((-1.0)*gconst2*r00*x9505))+(((-1.0)*r02*x9502)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9505))+((r20*x9503))+(((-1.0)*x9500*x9502)));
evalcond[4]=(((cj0*x9499))+(((-1.0)*cj0*x9504))+(((-1.0)*r02*x9505))+(((-1.0)*x9501*x9502))+((r00*x9503)));
evalcond[5]=(((r10*x9503))+(((-1.0)*x9498*x9502))+(((-1.0)*r12*x9505))+(((-1.0)*sj0*x9504))+((sj0*x9499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9506=((1.0)*gconst2);
CheckValue<IkReal> x9507=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9506))+(((-1.0)*gconst1*r10)))),-1);
if(!x9507.valid){
continue;
}
CheckValue<IkReal> x9508 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9506))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9507.value)))+(x9508.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9509=IKsin(j4);
IkReal x9510=IKcos(j4);
IkReal x9511=(gconst1*r11);
IkReal x9512=(sj1*sj2);
IkReal x9513=(gconst1*r21);
IkReal x9514=(gconst1*r01);
IkReal x9515=((1.0)*x9510);
IkReal x9516=(gconst2*x9510);
IkReal x9517=((1.0)*cj1*cj2);
IkReal x9518=((1.0)*x9509);
evalcond[0]=((((-1.0)*gconst2*r20*x9518))+(((-1.0)*r22*x9515))+((x9509*x9513)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x9518))+(((-1.0)*r12*x9515))+((x9509*x9511)));
evalcond[2]=((((-1.0)*r02*x9515))+(((-1.0)*sj0))+(((-1.0)*gconst2*r00*x9518))+((x9509*x9514)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x9513*x9515))+((cj1*sj2))+(((-1.0)*r22*x9518))+((r20*x9516)));
evalcond[4]=((((-1.0)*x9514*x9515))+(((-1.0)*r02*x9518))+((r00*x9516))+((cj0*x9512))+(((-1.0)*cj0*x9517)));
evalcond[5]=((((-1.0)*x9511*x9515))+((sj0*x9512))+(((-1.0)*r12*x9518))+((r10*x9516))+(((-1.0)*sj0*x9517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9519=((1.0)*gconst2);
CheckValue<IkReal> x9520=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9519)))),-1);
if(!x9520.valid){
continue;
}
CheckValue<IkReal> x9521 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9519)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9521.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9520.value)))+(x9521.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9522=IKsin(j4);
IkReal x9523=IKcos(j4);
IkReal x9524=(gconst1*r11);
IkReal x9525=(sj1*sj2);
IkReal x9526=(gconst1*r21);
IkReal x9527=(gconst1*r01);
IkReal x9528=((1.0)*x9523);
IkReal x9529=(gconst2*x9523);
IkReal x9530=((1.0)*cj1*cj2);
IkReal x9531=((1.0)*x9522);
evalcond[0]=((((-1.0)*r22*x9528))+(((-1.0)*gconst2*r20*x9531))+((x9522*x9526)));
evalcond[1]=((((-1.0)*r12*x9528))+cj0+(((-1.0)*gconst2*r10*x9531))+((x9522*x9524)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x9528))+(((-1.0)*gconst2*r00*x9531))+((x9522*x9527)));
evalcond[3]=(((cj2*sj1))+((r20*x9529))+(((-1.0)*r22*x9531))+((cj1*sj2))+(((-1.0)*x9526*x9528)));
evalcond[4]=((((-1.0)*cj0*x9530))+((cj0*x9525))+(((-1.0)*x9527*x9528))+((r00*x9529))+(((-1.0)*r02*x9531)));
evalcond[5]=(((sj0*x9525))+((r10*x9529))+(((-1.0)*x9524*x9528))+(((-1.0)*sj0*x9530))+(((-1.0)*r12*x9531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9532=((-1.0)*r20);
IkReal x9533=x8883;
CheckValue<IkReal> x9535 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9532),IKFAST_ATAN2_MAGTHRESH);
if(!x9535.valid){
continue;
}
IkReal x9534=((-1.0)*(x9535.value));
sj5=gconst1;
cj5=gconst2;
j5=x9534;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9534;
IkReal gconst1=(r21*x9533);
IkReal gconst2=(x9532*x9533);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9536=((-1.0)*r20);
IkReal x9537=x8883;
CheckValue<IkReal> x9539 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9536),IKFAST_ATAN2_MAGTHRESH);
if(!x9539.valid){
continue;
}
IkReal x9538=((-1.0)*(x9539.value));
sj5=gconst1;
cj5=gconst2;
j5=x9538;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9538;
IkReal gconst1=(r21*x9537);
IkReal gconst2=(x9536*x9537);
CheckValue<IkReal> x9547=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9547.valid){
continue;
}
IkReal x9540=x9547.value;
IkReal x9541=(sj3*x9540);
IkReal x9542=(r11*x9541);
IkReal x9543=(r00*x9541);
IkReal x9544=(r01*x9541);
IkReal x9545=(r10*x9541);
IkReal x9546=(r20*r21*x9541);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9542))+((r10*r20*r21*x9544))+((r10*x9543*(r20*r20)))+((r01*x9542*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9548=gconst2*gconst2;
IkReal x9549=gconst1*gconst1;
IkReal x9550=((1.0)*cj3);
IkReal x9551=((1.0)*sj3);
IkReal x9552=(r11*sj3);
IkReal x9553=(r10*sj3);
IkReal x9554=(gconst1*gconst2*r00);
IkReal x9555=(gconst1*gconst2*r01);
IkReal x9556=(r00*x9548);
IkReal x9557=(r01*x9549);
CheckValue<IkReal> x9558=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9550*x9557))+(((-1.0)*r02*r12*x9550))+((cj3*r11*x9554))+(((-1.0)*r10*x9550*x9556))+((cj3*r10*x9555)))),-1);
if(!x9558.valid){
continue;
}
CheckValue<IkReal> x9559 = IKatan2WithCheck(IkReal((((gconst1*r02*x9553))+((gconst2*r02*x9552)))),IkReal(((((-1.0)*r11*x9551*x9556))+((x9553*x9557))+((x9552*x9555))+(((-1.0)*r10*x9551*x9554)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9558.value)))+(x9559.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9560=IKsin(j4);
IkReal x9561=IKcos(j4);
IkReal x9562=(sj1*sj2);
IkReal x9563=(gconst1*sj3);
IkReal x9564=(cj3*gconst1);
IkReal x9565=(cj3*gconst2);
IkReal x9566=((1.0)*cj2);
IkReal x9567=(cj1*sj2);
IkReal x9568=(gconst2*sj3);
IkReal x9569=(cj1*x9566);
IkReal x9570=((1.0)*x9561);
IkReal x9571=((1.0)*x9560);
IkReal x9572=(gconst1*x9560);
IkReal x9573=(cj3*x9560);
IkReal x9574=(x9561*x9568);
evalcond[0]=((((-1.0)*gconst2*r20*x9571))+((r21*x9572))+(((-1.0)*r22*x9570)));
evalcond[1]=((((-1.0)*r02*x9570))+((r01*x9572))+(((-1.0)*gconst2*r00*x9571)));
evalcond[2]=((1.0)+((r11*x9572))+(((-1.0)*r12*x9570))+(((-1.0)*gconst2*r10*x9571)));
evalcond[3]=((((-1.0)*r10*x9565*x9570))+((r11*x9561*x9564))+((r11*x9568))+((r12*x9573))+((r10*x9563)));
evalcond[4]=((((-1.0)*r11*x9563*x9570))+((r11*x9565))+((r10*x9564))+(((-1.0)*r12*sj3*x9571))+((r10*x9574)));
evalcond[5]=(((r21*x9568))+((cj2*sj1))+((r21*x9561*x9564))+(((-1.0)*r20*x9565*x9570))+((r22*x9573))+x9567+((r20*x9563)));
evalcond[6]=(((r01*x9568))+((r00*x9563))+(((-1.0)*x9569))+(((-1.0)*r00*x9565*x9570))+((r01*x9561*x9564))+x9562+((r02*x9573)));
evalcond[7]=(((r21*x9565))+(((-1.0)*x9569))+(((-1.0)*r21*x9563*x9570))+(((-1.0)*r22*sj3*x9571))+x9562+((r20*x9574))+((r20*x9564)));
evalcond[8]=((((-1.0)*r02*sj3*x9571))+(((-1.0)*x9567))+((r01*x9565))+((r00*x9564))+((r00*x9574))+(((-1.0)*r01*x9563*x9570))+(((-1.0)*sj1*x9566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9575=gconst2*gconst2;
IkReal x9576=gconst1*gconst1;
IkReal x9577=(gconst2*r11);
IkReal x9578=(cj3*r02);
IkReal x9579=(gconst1*r01);
IkReal x9580=(cj3*r10);
IkReal x9581=(r10*sj3);
IkReal x9582=((1.0)*gconst1*r00);
IkReal x9583=(r01*x9576);
IkReal x9584=(r00*x9575);
CheckValue<IkReal> x9585=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*sj3*x9577*x9582))+((x9581*x9584))+(((-1.0)*gconst2*x9579*x9581))+((r11*sj3*x9583)))),-1);
if(!x9585.valid){
continue;
}
CheckValue<IkReal> x9586 = IKatan2WithCheck(IkReal((((x9577*x9578))+((gconst1*r10*x9578)))),IkReal((((x9580*x9583))+(((-1.0)*cj3*r11*x9584))+((cj3*x9577*x9579))+(((-1.0)*gconst2*x9580*x9582)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9585.value)))+(x9586.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9587=IKsin(j4);
IkReal x9588=IKcos(j4);
IkReal x9589=(sj1*sj2);
IkReal x9590=(gconst1*sj3);
IkReal x9591=(cj3*gconst1);
IkReal x9592=(cj3*gconst2);
IkReal x9593=((1.0)*cj2);
IkReal x9594=(cj1*sj2);
IkReal x9595=(gconst2*sj3);
IkReal x9596=(cj1*x9593);
IkReal x9597=((1.0)*x9588);
IkReal x9598=((1.0)*x9587);
IkReal x9599=(gconst1*x9587);
IkReal x9600=(cj3*x9587);
IkReal x9601=(x9588*x9595);
evalcond[0]=((((-1.0)*r22*x9597))+((r21*x9599))+(((-1.0)*gconst2*r20*x9598)));
evalcond[1]=(((r01*x9599))+(((-1.0)*gconst2*r00*x9598))+(((-1.0)*r02*x9597)));
evalcond[2]=((1.0)+((r11*x9599))+(((-1.0)*gconst2*r10*x9598))+(((-1.0)*r12*x9597)));
evalcond[3]=(((r11*x9595))+(((-1.0)*r10*x9592*x9597))+((r11*x9588*x9591))+((r12*x9600))+((r10*x9590)));
evalcond[4]=(((r11*x9592))+((r10*x9601))+(((-1.0)*r12*sj3*x9598))+((r10*x9591))+(((-1.0)*r11*x9590*x9597)));
evalcond[5]=(((r20*x9590))+((cj2*sj1))+((r21*x9588*x9591))+x9594+((r21*x9595))+((r22*x9600))+(((-1.0)*r20*x9592*x9597)));
evalcond[6]=(((r01*x9595))+((r00*x9590))+(((-1.0)*r00*x9592*x9597))+(((-1.0)*x9596))+x9589+((r01*x9588*x9591))+((r02*x9600)));
evalcond[7]=(((r20*x9591))+(((-1.0)*r22*sj3*x9598))+((r20*x9601))+(((-1.0)*x9596))+x9589+((r21*x9592))+(((-1.0)*r21*x9590*x9597)));
evalcond[8]=((((-1.0)*sj1*x9593))+((r01*x9592))+((r00*x9601))+((r00*x9591))+(((-1.0)*r02*sj3*x9598))+(((-1.0)*r01*x9590*x9597))+(((-1.0)*x9594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9602=((1.0)*gconst2);
CheckValue<IkReal> x9603 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9602))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9603.valid){
continue;
}
CheckValue<IkReal> x9604=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9602))+(((-1.0)*gconst1*r00)))),-1);
if(!x9604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9603.value)+(((1.5707963267949)*(x9604.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9605=IKsin(j4);
IkReal x9606=IKcos(j4);
IkReal x9607=(sj1*sj2);
IkReal x9608=(gconst1*sj3);
IkReal x9609=(cj3*gconst1);
IkReal x9610=(cj3*gconst2);
IkReal x9611=((1.0)*cj2);
IkReal x9612=(cj1*sj2);
IkReal x9613=(gconst2*sj3);
IkReal x9614=(cj1*x9611);
IkReal x9615=((1.0)*x9606);
IkReal x9616=((1.0)*x9605);
IkReal x9617=(gconst1*x9605);
IkReal x9618=(cj3*x9605);
IkReal x9619=(x9606*x9613);
evalcond[0]=((((-1.0)*r22*x9615))+(((-1.0)*gconst2*r20*x9616))+((r21*x9617)));
evalcond[1]=(((r01*x9617))+(((-1.0)*r02*x9615))+(((-1.0)*gconst2*r00*x9616)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9616))+(((-1.0)*r12*x9615))+((r11*x9617)));
evalcond[3]=(((r10*x9608))+(((-1.0)*r10*x9610*x9615))+((r11*x9613))+((r12*x9618))+((r11*x9606*x9609)));
evalcond[4]=((((-1.0)*r11*x9608*x9615))+((r10*x9619))+((r10*x9609))+(((-1.0)*r12*sj3*x9616))+((r11*x9610)));
evalcond[5]=(((cj2*sj1))+((r22*x9618))+(((-1.0)*r20*x9610*x9615))+((r20*x9608))+((r21*x9613))+x9612+((r21*x9606*x9609)));
evalcond[6]=(((r01*x9613))+((r00*x9608))+((r02*x9618))+(((-1.0)*r00*x9610*x9615))+x9607+(((-1.0)*x9614))+((r01*x9606*x9609)));
evalcond[7]=(((r20*x9619))+((r20*x9609))+((r21*x9610))+(((-1.0)*r22*sj3*x9616))+x9607+(((-1.0)*r21*x9608*x9615))+(((-1.0)*x9614)));
evalcond[8]=((((-1.0)*r01*x9608*x9615))+((r00*x9619))+((r01*x9610))+((r00*x9609))+(((-1.0)*x9612))+(((-1.0)*r02*sj3*x9616))+(((-1.0)*sj1*x9611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9620=((-1.0)*r20);
IkReal x9621=x8883;
CheckValue<IkReal> x9623 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9620),IKFAST_ATAN2_MAGTHRESH);
if(!x9623.valid){
continue;
}
IkReal x9622=((-1.0)*(x9623.value));
sj5=gconst1;
cj5=gconst2;
j5=x9622;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9622;
IkReal gconst1=(r21*x9621);
IkReal gconst2=(x9620*x9621);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9624=((-1.0)*r20);
IkReal x9625=x8883;
CheckValue<IkReal> x9627 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9624),IKFAST_ATAN2_MAGTHRESH);
if(!x9627.valid){
continue;
}
IkReal x9626=((-1.0)*(x9627.value));
sj5=gconst1;
cj5=gconst2;
j5=x9626;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9626;
IkReal gconst1=(r21*x9625);
IkReal gconst2=(x9624*x9625);
CheckValue<IkReal> x9635=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9635.valid){
continue;
}
IkReal x9628=x9635.value;
IkReal x9629=(sj3*x9628);
IkReal x9630=(r11*x9629);
IkReal x9631=(r00*x9629);
IkReal x9632=(r01*x9629);
IkReal x9633=(r10*x9629);
IkReal x9634=(r20*r21*x9629);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9631*(r20*r20)))+((r00*r20*r21*x9630))+((r01*x9630*(r21*r21)))+((r10*r20*r21*x9632))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9636=gconst2*gconst2;
IkReal x9637=gconst1*gconst1;
IkReal x9638=((1.0)*cj3);
IkReal x9639=((1.0)*sj3);
IkReal x9640=(r11*sj3);
IkReal x9641=(r10*sj3);
IkReal x9642=(gconst1*gconst2*r00);
IkReal x9643=(gconst1*gconst2*r01);
IkReal x9644=(r00*x9636);
IkReal x9645=(r01*x9637);
CheckValue<IkReal> x9646=IKPowWithIntegerCheck(IKsign((((cj3*r10*x9643))+(((-1.0)*r10*x9638*x9644))+(((-1.0)*r11*x9638*x9645))+((cj3*r11*x9642))+(((-1.0)*r02*r12*x9638)))),-1);
if(!x9646.valid){
continue;
}
CheckValue<IkReal> x9647 = IKatan2WithCheck(IkReal((((gconst1*r02*x9641))+((gconst2*r02*x9640)))),IkReal((((x9641*x9645))+((x9640*x9643))+(((-1.0)*r11*x9639*x9644))+(((-1.0)*r10*x9639*x9642)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9646.value)))+(x9647.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9648=IKsin(j4);
IkReal x9649=IKcos(j4);
IkReal x9650=(cj2*sj1);
IkReal x9651=(cj1*sj2);
IkReal x9652=(gconst1*sj3);
IkReal x9653=(cj3*gconst1);
IkReal x9654=(sj1*sj2);
IkReal x9655=(cj3*gconst2);
IkReal x9656=(cj1*cj2);
IkReal x9657=(gconst2*sj3);
IkReal x9658=((1.0)*x9649);
IkReal x9659=((1.0)*x9648);
IkReal x9660=(gconst1*x9648);
IkReal x9661=(cj3*x9648);
IkReal x9662=(x9650+x9651);
IkReal x9663=(x9649*x9657);
evalcond[0]=((((-1.0)*gconst2*r20*x9659))+((r21*x9660))+(((-1.0)*r22*x9658)));
evalcond[1]=(((r01*x9660))+(((-1.0)*gconst2*r00*x9659))+(((-1.0)*r02*x9658)));
evalcond[2]=((-1.0)+((r11*x9660))+(((-1.0)*r12*x9658))+(((-1.0)*gconst2*r10*x9659)));
evalcond[3]=(((r11*x9649*x9653))+((r11*x9657))+((r12*x9661))+((r10*x9652))+(((-1.0)*r10*x9655*x9658)));
evalcond[4]=((((-1.0)*r11*x9652*x9658))+((r11*x9655))+((r10*x9663))+((r10*x9653))+(((-1.0)*r12*sj3*x9659)));
evalcond[5]=(((r21*x9657))+(((-1.0)*r20*x9655*x9658))+((r20*x9652))+x9662+((r22*x9661))+((r21*x9649*x9653)));
evalcond[6]=(((r01*x9649*x9653))+((r01*x9657))+((r00*x9652))+x9656+(((-1.0)*r00*x9655*x9658))+(((-1.0)*x9654))+((r02*x9661)));
evalcond[7]=((((-1.0)*r02*sj3*x9659))+(((-1.0)*r01*x9652*x9658))+((r00*x9663))+((r01*x9655))+((r00*x9653))+x9662);
evalcond[8]=((((-1.0)*r21*x9652*x9658))+((r21*x9655))+((r20*x9653))+((r20*x9663))+x9654+(((-1.0)*x9656))+(((-1.0)*r22*sj3*x9659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9664=gconst2*gconst2;
IkReal x9665=gconst1*gconst1;
IkReal x9666=(gconst2*r11);
IkReal x9667=(cj3*r02);
IkReal x9668=(gconst1*r01);
IkReal x9669=(cj3*r10);
IkReal x9670=(r10*sj3);
IkReal x9671=((1.0)*gconst1*r00);
IkReal x9672=(r01*x9665);
IkReal x9673=(r00*x9664);
CheckValue<IkReal> x9674=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*sj3*x9666*x9671))+((r11*sj3*x9672))+((x9670*x9673))+(((-1.0)*gconst2*x9668*x9670)))),-1);
if(!x9674.valid){
continue;
}
CheckValue<IkReal> x9675 = IKatan2WithCheck(IkReal((((x9666*x9667))+((gconst1*r10*x9667)))),IkReal(((((-1.0)*cj3*r11*x9673))+((cj3*x9666*x9668))+(((-1.0)*gconst2*x9669*x9671))+((x9669*x9672)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9674.value)))+(x9675.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9676=IKsin(j4);
IkReal x9677=IKcos(j4);
IkReal x9678=(cj2*sj1);
IkReal x9679=(cj1*sj2);
IkReal x9680=(gconst1*sj3);
IkReal x9681=(cj3*gconst1);
IkReal x9682=(sj1*sj2);
IkReal x9683=(cj3*gconst2);
IkReal x9684=(cj1*cj2);
IkReal x9685=(gconst2*sj3);
IkReal x9686=((1.0)*x9677);
IkReal x9687=((1.0)*x9676);
IkReal x9688=(gconst1*x9676);
IkReal x9689=(cj3*x9676);
IkReal x9690=(x9678+x9679);
IkReal x9691=(x9677*x9685);
evalcond[0]=(((r21*x9688))+(((-1.0)*r22*x9686))+(((-1.0)*gconst2*r20*x9687)));
evalcond[1]=((((-1.0)*r02*x9686))+(((-1.0)*gconst2*r00*x9687))+((r01*x9688)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9687))+(((-1.0)*r12*x9686))+((r11*x9688)));
evalcond[3]=(((r12*x9689))+(((-1.0)*r10*x9683*x9686))+((r11*x9685))+((r10*x9680))+((r11*x9677*x9681)));
evalcond[4]=((((-1.0)*r11*x9680*x9686))+((r10*x9691))+((r11*x9683))+((r10*x9681))+(((-1.0)*r12*sj3*x9687)));
evalcond[5]=((((-1.0)*r20*x9683*x9686))+((r22*x9689))+((r21*x9685))+x9690+((r21*x9677*x9681))+((r20*x9680)));
evalcond[6]=((((-1.0)*x9682))+((r01*x9677*x9681))+(((-1.0)*r00*x9683*x9686))+((r02*x9689))+x9684+((r01*x9685))+((r00*x9680)));
evalcond[7]=((((-1.0)*r02*sj3*x9687))+x9690+((r01*x9683))+((r00*x9691))+((r00*x9681))+(((-1.0)*r01*x9680*x9686)));
evalcond[8]=((((-1.0)*x9684))+(((-1.0)*r22*sj3*x9687))+((r21*x9683))+(((-1.0)*r21*x9680*x9686))+x9682+((r20*x9681))+((r20*x9691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9692 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9692.valid){
continue;
}
CheckValue<IkReal> x9693=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9692.value)+(((1.5707963267949)*(x9693.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9694=IKsin(j4);
IkReal x9695=IKcos(j4);
IkReal x9696=(cj2*sj1);
IkReal x9697=(cj1*sj2);
IkReal x9698=(gconst1*sj3);
IkReal x9699=(cj3*gconst1);
IkReal x9700=(sj1*sj2);
IkReal x9701=(cj3*gconst2);
IkReal x9702=(cj1*cj2);
IkReal x9703=(gconst2*sj3);
IkReal x9704=((1.0)*x9695);
IkReal x9705=((1.0)*x9694);
IkReal x9706=(gconst1*x9694);
IkReal x9707=(cj3*x9694);
IkReal x9708=(x9696+x9697);
IkReal x9709=(x9695*x9703);
evalcond[0]=((((-1.0)*r22*x9704))+((r21*x9706))+(((-1.0)*gconst2*r20*x9705)));
evalcond[1]=((((-1.0)*r02*x9704))+((r01*x9706))+(((-1.0)*gconst2*r00*x9705)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9705))+((r11*x9706))+(((-1.0)*r12*x9704)));
evalcond[3]=(((r12*x9707))+((r11*x9703))+((r11*x9695*x9699))+(((-1.0)*r10*x9701*x9704))+((r10*x9698)));
evalcond[4]=(((r10*x9709))+(((-1.0)*r12*sj3*x9705))+(((-1.0)*r11*x9698*x9704))+((r11*x9701))+((r10*x9699)));
evalcond[5]=(((r21*x9695*x9699))+((r21*x9703))+x9708+(((-1.0)*r20*x9701*x9704))+((r20*x9698))+((r22*x9707)));
evalcond[6]=(((r02*x9707))+(((-1.0)*x9700))+((r01*x9703))+x9702+(((-1.0)*r00*x9701*x9704))+((r01*x9695*x9699))+((r00*x9698)));
evalcond[7]=((((-1.0)*r01*x9698*x9704))+((r01*x9701))+((r00*x9709))+x9708+(((-1.0)*r02*sj3*x9705))+((r00*x9699)));
evalcond[8]=((((-1.0)*x9702))+((r20*x9709))+((r21*x9701))+x9700+(((-1.0)*r22*sj3*x9705))+(((-1.0)*r21*x9698*x9704))+((r20*x9699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9710=((-1.0)*r20);
IkReal x9711=x8883;
CheckValue<IkReal> x9713 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9710),IKFAST_ATAN2_MAGTHRESH);
if(!x9713.valid){
continue;
}
IkReal x9712=((-1.0)*(x9713.value));
sj5=gconst1;
cj5=gconst2;
j5=x9712;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9712;
IkReal gconst1=(r21*x9711);
IkReal gconst2=(x9710*x9711);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9714=((-1.0)*r20);
IkReal x9715=x8883;
CheckValue<IkReal> x9717 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9714),IKFAST_ATAN2_MAGTHRESH);
if(!x9717.valid){
continue;
}
IkReal x9716=((-1.0)*(x9717.value));
sj5=gconst1;
cj5=gconst2;
j5=x9716;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9716;
IkReal gconst1=(r21*x9715);
IkReal gconst2=(x9714*x9715);
CheckValue<IkReal> x9725=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9725.valid){
continue;
}
IkReal x9718=x9725.value;
IkReal x9719=(sj3*x9718);
IkReal x9720=(r11*x9719);
IkReal x9721=(r00*x9719);
IkReal x9722=(r01*x9719);
IkReal x9723=(r10*x9719);
IkReal x9724=(r20*r21*x9719);
j4eval[0]=IKsign((((r01*x9720*(r21*r21)))+((r02*r12*sj3))+((r10*x9721*(r20*r20)))+((r10*r20*r21*x9722))+((r00*r20*r21*x9720))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9726=gconst1*gconst1;
IkReal x9727=gconst2*gconst2;
IkReal x9728=((1.0)*cj3);
IkReal x9729=(gconst2*r10);
IkReal x9730=(r01*sj3);
IkReal x9731=(gconst1*r00*sj3);
IkReal x9732=(gconst1*gconst2*r11);
IkReal x9733=(r10*x9727);
IkReal x9734=(r11*x9726);
CheckValue<IkReal> x9735 = IKatan2WithCheck(IkReal((((gconst2*r12*x9730))+((r12*x9731)))),IkReal((((r00*sj3*x9734))+(((-1.0)*x9729*x9731))+((x9730*x9732))+(((-1.0)*x9730*x9733)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9735.valid){
continue;
}
CheckValue<IkReal> x9736=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9728*x9733))+(((-1.0)*r02*r12*x9728))+((cj3*gconst1*r01*x9729))+(((-1.0)*r01*x9728*x9734))+((cj3*r00*x9732)))),-1);
if(!x9736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9735.value)+(((1.5707963267949)*(x9736.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9737=IKsin(j4);
IkReal x9738=IKcos(j4);
IkReal x9739=(sj1*sj2);
IkReal x9740=(gconst1*sj3);
IkReal x9741=(cj3*gconst1);
IkReal x9742=(cj3*gconst2);
IkReal x9743=((1.0)*cj2);
IkReal x9744=(cj1*sj2);
IkReal x9745=(gconst2*sj3);
IkReal x9746=(cj1*x9743);
IkReal x9747=((1.0)*x9738);
IkReal x9748=((1.0)*x9737);
IkReal x9749=(gconst1*x9737);
IkReal x9750=(cj3*x9737);
IkReal x9751=(x9738*x9745);
evalcond[0]=(((r21*x9749))+(((-1.0)*gconst2*r20*x9748))+(((-1.0)*r22*x9747)));
evalcond[1]=(((r11*x9749))+(((-1.0)*gconst2*r10*x9748))+(((-1.0)*r12*x9747)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9748))+(((-1.0)*r02*x9747))+((r01*x9749)));
evalcond[3]=(((r01*x9738*x9741))+(((-1.0)*r00*x9742*x9747))+((r02*x9750))+((r01*x9745))+((r00*x9740)));
evalcond[4]=((((-1.0)*r01*x9740*x9747))+((r00*x9751))+(((-1.0)*r02*sj3*x9748))+((r01*x9742))+((r00*x9741)));
evalcond[5]=(((cj2*sj1))+((r21*x9745))+((r22*x9750))+(((-1.0)*r20*x9742*x9747))+x9744+((r21*x9738*x9741))+((r20*x9740)));
evalcond[6]=(((r11*x9738*x9741))+((r11*x9745))+((r10*x9740))+x9739+(((-1.0)*r10*x9742*x9747))+(((-1.0)*x9746))+((r12*x9750)));
evalcond[7]=(((r21*x9742))+(((-1.0)*r21*x9740*x9747))+x9739+((r20*x9741))+(((-1.0)*x9746))+(((-1.0)*r22*sj3*x9748))+((r20*x9751)));
evalcond[8]=(((r10*x9751))+((r11*x9742))+((r10*x9741))+(((-1.0)*r12*sj3*x9748))+(((-1.0)*x9744))+(((-1.0)*sj1*x9743))+(((-1.0)*r11*x9740*x9747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9752=gconst2*gconst2;
IkReal x9753=gconst1*gconst1;
IkReal x9754=(gconst1*r00);
IkReal x9755=(r11*sj3);
IkReal x9756=((1.0)*gconst2);
IkReal x9757=(cj3*r12);
IkReal x9758=(cj3*r11);
IkReal x9759=(gconst2*r01);
IkReal x9760=(cj3*r10);
IkReal x9761=(r10*sj3);
CheckValue<IkReal> x9762 = IKatan2WithCheck(IkReal((((x9757*x9759))+((x9754*x9757)))),IkReal((((r00*x9753*x9758))+(((-1.0)*r01*x9752*x9760))+(((-1.0)*x9754*x9756*x9760))+((gconst1*x9758*x9759)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9762.valid){
continue;
}
CheckValue<IkReal> x9763=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r00*x9752*x9761))+((r01*x9753*x9755))+(((-1.0)*gconst1*r01*x9756*x9761))+(((-1.0)*x9754*x9755*x9756)))),-1);
if(!x9763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9762.value)+(((1.5707963267949)*(x9763.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9764=IKsin(j4);
IkReal x9765=IKcos(j4);
IkReal x9766=(sj1*sj2);
IkReal x9767=(gconst1*sj3);
IkReal x9768=(cj3*gconst1);
IkReal x9769=(cj3*gconst2);
IkReal x9770=((1.0)*cj2);
IkReal x9771=(cj1*sj2);
IkReal x9772=(gconst2*sj3);
IkReal x9773=(cj1*x9770);
IkReal x9774=((1.0)*x9765);
IkReal x9775=((1.0)*x9764);
IkReal x9776=(gconst1*x9764);
IkReal x9777=(cj3*x9764);
IkReal x9778=(x9765*x9772);
evalcond[0]=((((-1.0)*r22*x9774))+(((-1.0)*gconst2*r20*x9775))+((r21*x9776)));
evalcond[1]=((((-1.0)*gconst2*r10*x9775))+(((-1.0)*r12*x9774))+((r11*x9776)));
evalcond[2]=((-1.0)+((r01*x9776))+(((-1.0)*gconst2*r00*x9775))+(((-1.0)*r02*x9774)));
evalcond[3]=(((r00*x9767))+((r01*x9772))+((r02*x9777))+(((-1.0)*r00*x9769*x9774))+((r01*x9765*x9768)));
evalcond[4]=(((r00*x9768))+((r00*x9778))+((r01*x9769))+(((-1.0)*r01*x9767*x9774))+(((-1.0)*r02*sj3*x9775)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*r20*x9769*x9774))+((r22*x9777))+x9771+((r21*x9772))+((r21*x9765*x9768))+((r20*x9767)));
evalcond[6]=(((r12*x9777))+((r10*x9767))+x9766+((r11*x9765*x9768))+(((-1.0)*x9773))+((r11*x9772))+(((-1.0)*r10*x9769*x9774)));
evalcond[7]=(x9766+((r21*x9769))+((r20*x9778))+(((-1.0)*r21*x9767*x9774))+((r20*x9768))+(((-1.0)*x9773))+(((-1.0)*r22*sj3*x9775)));
evalcond[8]=((((-1.0)*r11*x9767*x9774))+((r10*x9768))+((r10*x9778))+(((-1.0)*x9771))+(((-1.0)*r12*sj3*x9775))+(((-1.0)*sj1*x9770))+((r11*x9769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9779=((1.0)*gconst2);
CheckValue<IkReal> x9780=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9779)))),-1);
if(!x9780.valid){
continue;
}
CheckValue<IkReal> x9781 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9779)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9780.value)))+(x9781.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9782=IKsin(j4);
IkReal x9783=IKcos(j4);
IkReal x9784=(sj1*sj2);
IkReal x9785=(gconst1*sj3);
IkReal x9786=(cj3*gconst1);
IkReal x9787=(cj3*gconst2);
IkReal x9788=((1.0)*cj2);
IkReal x9789=(cj1*sj2);
IkReal x9790=(gconst2*sj3);
IkReal x9791=(cj1*x9788);
IkReal x9792=((1.0)*x9783);
IkReal x9793=((1.0)*x9782);
IkReal x9794=(gconst1*x9782);
IkReal x9795=(cj3*x9782);
IkReal x9796=(x9783*x9790);
evalcond[0]=(((r21*x9794))+(((-1.0)*gconst2*r20*x9793))+(((-1.0)*r22*x9792)));
evalcond[1]=(((r11*x9794))+(((-1.0)*gconst2*r10*x9793))+(((-1.0)*r12*x9792)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9792))+(((-1.0)*gconst2*r00*x9793))+((r01*x9794)));
evalcond[3]=(((r00*x9785))+((r02*x9795))+(((-1.0)*r00*x9787*x9792))+((r01*x9783*x9786))+((r01*x9790)));
evalcond[4]=(((r00*x9786))+((r01*x9787))+(((-1.0)*r02*sj3*x9793))+((r00*x9796))+(((-1.0)*r01*x9785*x9792)));
evalcond[5]=(((cj2*sj1))+((r21*x9783*x9786))+x9789+(((-1.0)*r20*x9787*x9792))+((r21*x9790))+((r20*x9785))+((r22*x9795)));
evalcond[6]=(((r11*x9790))+((r12*x9795))+(((-1.0)*x9791))+x9784+((r10*x9785))+(((-1.0)*r10*x9787*x9792))+((r11*x9783*x9786)));
evalcond[7]=(((r21*x9787))+(((-1.0)*r21*x9785*x9792))+((r20*x9796))+(((-1.0)*x9791))+x9784+((r20*x9786))+(((-1.0)*r22*sj3*x9793)));
evalcond[8]=(((r10*x9796))+(((-1.0)*r12*sj3*x9793))+(((-1.0)*sj1*x9788))+((r10*x9786))+((r11*x9787))+(((-1.0)*x9789))+(((-1.0)*r11*x9785*x9792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9797=((-1.0)*r20);
IkReal x9798=x8883;
CheckValue<IkReal> x9800 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9797),IKFAST_ATAN2_MAGTHRESH);
if(!x9800.valid){
continue;
}
IkReal x9799=((-1.0)*(x9800.value));
sj5=gconst1;
cj5=gconst2;
j5=x9799;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9799;
IkReal gconst1=(r21*x9798);
IkReal gconst2=(x9797*x9798);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9801=((-1.0)*r20);
IkReal x9802=x8883;
CheckValue<IkReal> x9804 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9801),IKFAST_ATAN2_MAGTHRESH);
if(!x9804.valid){
continue;
}
IkReal x9803=((-1.0)*(x9804.value));
sj5=gconst1;
cj5=gconst2;
j5=x9803;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9803;
IkReal gconst1=(r21*x9802);
IkReal gconst2=(x9801*x9802);
CheckValue<IkReal> x9812=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9812.valid){
continue;
}
IkReal x9805=x9812.value;
IkReal x9806=(sj3*x9805);
IkReal x9807=(r11*x9806);
IkReal x9808=(r00*x9806);
IkReal x9809=(r01*x9806);
IkReal x9810=(r10*x9806);
IkReal x9811=(r20*r21*x9806);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9807))+((r10*r20*r21*x9809))+((r10*x9808*(r20*r20)))+((r01*x9807*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9813=gconst1*gconst1;
IkReal x9814=gconst2*gconst2;
IkReal x9815=((1.0)*cj3);
IkReal x9816=(gconst2*r10);
IkReal x9817=(r01*sj3);
IkReal x9818=(gconst1*r00*sj3);
IkReal x9819=(gconst1*gconst2*r11);
IkReal x9820=(r10*x9814);
IkReal x9821=(r11*x9813);
CheckValue<IkReal> x9822=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x9815))+(((-1.0)*r01*x9815*x9821))+(((-1.0)*r00*x9815*x9820))+((cj3*gconst1*r01*x9816))+((cj3*r00*x9819)))),-1);
if(!x9822.valid){
continue;
}
CheckValue<IkReal> x9823 = IKatan2WithCheck(IkReal((((r12*x9818))+((gconst2*r12*x9817)))),IkReal((((r00*sj3*x9821))+((x9817*x9819))+(((-1.0)*x9817*x9820))+(((-1.0)*x9816*x9818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9822.value)))+(x9823.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9824=IKsin(j4);
IkReal x9825=IKcos(j4);
IkReal x9826=(cj2*sj1);
IkReal x9827=(cj1*sj2);
IkReal x9828=(gconst1*sj3);
IkReal x9829=(cj3*gconst1);
IkReal x9830=(sj1*sj2);
IkReal x9831=(cj3*gconst2);
IkReal x9832=(cj1*cj2);
IkReal x9833=(gconst2*sj3);
IkReal x9834=((1.0)*x9825);
IkReal x9835=((1.0)*x9824);
IkReal x9836=(gconst1*x9824);
IkReal x9837=(cj3*x9824);
IkReal x9838=(x9827+x9826);
IkReal x9839=(x9825*x9833);
evalcond[0]=(((r21*x9836))+(((-1.0)*r22*x9834))+(((-1.0)*gconst2*r20*x9835)));
evalcond[1]=(((r11*x9836))+(((-1.0)*gconst2*r10*x9835))+(((-1.0)*r12*x9834)));
evalcond[2]=((1.0)+((r01*x9836))+(((-1.0)*r02*x9834))+(((-1.0)*gconst2*r00*x9835)));
evalcond[3]=((((-1.0)*r00*x9831*x9834))+((r01*x9833))+((r00*x9828))+((r02*x9837))+((r01*x9825*x9829)));
evalcond[4]=((((-1.0)*r02*sj3*x9835))+(((-1.0)*r01*x9828*x9834))+((r00*x9839))+((r01*x9831))+((r00*x9829)));
evalcond[5]=(((r20*x9828))+((r21*x9833))+((r22*x9837))+((r21*x9825*x9829))+(((-1.0)*r20*x9831*x9834))+x9838);
evalcond[6]=(((r11*x9833))+(((-1.0)*x9830))+((r12*x9837))+(((-1.0)*r10*x9831*x9834))+x9832+((r10*x9828))+((r11*x9825*x9829)));
evalcond[7]=(((r11*x9831))+((r10*x9839))+(((-1.0)*r11*x9828*x9834))+(((-1.0)*r12*sj3*x9835))+x9838+((r10*x9829)));
evalcond[8]=(((r20*x9829))+(((-1.0)*x9832))+((r21*x9831))+(((-1.0)*r21*x9828*x9834))+(((-1.0)*r22*sj3*x9835))+((r20*x9839))+x9830);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9840=gconst2*gconst2;
IkReal x9841=gconst1*gconst1;
IkReal x9842=(gconst1*r00);
IkReal x9843=(r11*sj3);
IkReal x9844=((1.0)*gconst2);
IkReal x9845=(cj3*r12);
IkReal x9846=(cj3*r11);
IkReal x9847=(gconst2*r01);
IkReal x9848=(cj3*r10);
IkReal x9849=(r10*sj3);
CheckValue<IkReal> x9850 = IKatan2WithCheck(IkReal((((x9842*x9845))+((x9845*x9847)))),IkReal((((gconst1*x9846*x9847))+((r00*x9841*x9846))+(((-1.0)*r01*x9840*x9848))+(((-1.0)*x9842*x9844*x9848)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9850.valid){
continue;
}
CheckValue<IkReal> x9851=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r01*x9841*x9843))+((r00*x9840*x9849))+(((-1.0)*gconst1*r01*x9844*x9849))+(((-1.0)*x9842*x9843*x9844)))),-1);
if(!x9851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9850.value)+(((1.5707963267949)*(x9851.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9852=IKsin(j4);
IkReal x9853=IKcos(j4);
IkReal x9854=(cj2*sj1);
IkReal x9855=(cj1*sj2);
IkReal x9856=(gconst1*sj3);
IkReal x9857=(cj3*gconst1);
IkReal x9858=(sj1*sj2);
IkReal x9859=(cj3*gconst2);
IkReal x9860=(cj1*cj2);
IkReal x9861=(gconst2*sj3);
IkReal x9862=((1.0)*x9853);
IkReal x9863=((1.0)*x9852);
IkReal x9864=(gconst1*x9852);
IkReal x9865=(cj3*x9852);
IkReal x9866=(x9854+x9855);
IkReal x9867=(x9853*x9861);
evalcond[0]=((((-1.0)*r22*x9862))+((r21*x9864))+(((-1.0)*gconst2*r20*x9863)));
evalcond[1]=((((-1.0)*r12*x9862))+((r11*x9864))+(((-1.0)*gconst2*r10*x9863)));
evalcond[2]=((1.0)+((r01*x9864))+(((-1.0)*gconst2*r00*x9863))+(((-1.0)*r02*x9862)));
evalcond[3]=(((r01*x9861))+((r01*x9853*x9857))+((r02*x9865))+((r00*x9856))+(((-1.0)*r00*x9859*x9862)));
evalcond[4]=(((r00*x9867))+(((-1.0)*r01*x9856*x9862))+((r00*x9857))+((r01*x9859))+(((-1.0)*r02*sj3*x9863)));
evalcond[5]=(((r22*x9865))+((r21*x9853*x9857))+((r20*x9856))+(((-1.0)*r20*x9859*x9862))+((r21*x9861))+x9866);
evalcond[6]=(((r10*x9856))+(((-1.0)*x9858))+(((-1.0)*r10*x9859*x9862))+((r11*x9853*x9857))+((r11*x9861))+((r12*x9865))+x9860);
evalcond[7]=(((r10*x9857))+((r11*x9859))+(((-1.0)*r11*x9856*x9862))+((r10*x9867))+(((-1.0)*r12*sj3*x9863))+x9866);
evalcond[8]=(((r21*x9859))+((r20*x9857))+(((-1.0)*x9860))+(((-1.0)*r21*x9856*x9862))+((r20*x9867))+x9858+(((-1.0)*r22*sj3*x9863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9868 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9868.valid){
continue;
}
CheckValue<IkReal> x9869=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9868.value)+(((1.5707963267949)*(x9869.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9870=IKsin(j4);
IkReal x9871=IKcos(j4);
IkReal x9872=(cj2*sj1);
IkReal x9873=(cj1*sj2);
IkReal x9874=(gconst1*sj3);
IkReal x9875=(cj3*gconst1);
IkReal x9876=(sj1*sj2);
IkReal x9877=(cj3*gconst2);
IkReal x9878=(cj1*cj2);
IkReal x9879=(gconst2*sj3);
IkReal x9880=((1.0)*x9871);
IkReal x9881=((1.0)*x9870);
IkReal x9882=(gconst1*x9870);
IkReal x9883=(cj3*x9870);
IkReal x9884=(x9872+x9873);
IkReal x9885=(x9871*x9879);
evalcond[0]=((((-1.0)*r22*x9880))+((r21*x9882))+(((-1.0)*gconst2*r20*x9881)));
evalcond[1]=(((r11*x9882))+(((-1.0)*gconst2*r10*x9881))+(((-1.0)*r12*x9880)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9881))+((r01*x9882))+(((-1.0)*r02*x9880)));
evalcond[3]=(((r01*x9871*x9875))+(((-1.0)*r00*x9877*x9880))+((r00*x9874))+((r01*x9879))+((r02*x9883)));
evalcond[4]=(((r00*x9885))+(((-1.0)*r02*sj3*x9881))+(((-1.0)*r01*x9874*x9880))+((r00*x9875))+((r01*x9877)));
evalcond[5]=(((r21*x9879))+((r21*x9871*x9875))+((r20*x9874))+(((-1.0)*r20*x9877*x9880))+((r22*x9883))+x9884);
evalcond[6]=(((r11*x9871*x9875))+((r12*x9883))+(((-1.0)*x9876))+((r10*x9874))+(((-1.0)*r10*x9877*x9880))+((r11*x9879))+x9878);
evalcond[7]=(((r10*x9875))+(((-1.0)*r11*x9874*x9880))+(((-1.0)*r12*sj3*x9881))+((r10*x9885))+((r11*x9877))+x9884);
evalcond[8]=((((-1.0)*r22*sj3*x9881))+((r20*x9885))+(((-1.0)*r21*x9874*x9880))+(((-1.0)*x9878))+((r21*x9877))+((r20*x9875))+x9876);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9886=((-1.0)*r20);
IkReal x9887=((-1.0)*px);
CheckValue<IkReal> x9889 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9886),IKFAST_ATAN2_MAGTHRESH);
if(!x9889.valid){
continue;
}
IkReal x9888=((-1.0)*(x9889.value));
sj5=gconst1;
cj5=gconst2;
j5=x9888;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9887);
rxp1_1=(px*r21);
rxp1_2=(r11*x9887);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9888;
IkReal gconst1=r21;
IkReal gconst2=x9886;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9890=((-1.0)*r20);
IkReal x9891=((-1.0)*px);
CheckValue<IkReal> x9893 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9890),IKFAST_ATAN2_MAGTHRESH);
if(!x9893.valid){
continue;
}
IkReal x9892=((-1.0)*(x9893.value));
sj5=gconst1;
cj5=gconst2;
j5=x9892;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9891);
rxp1_1=(px*r21);
rxp1_2=(r11*x9891);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9892;
IkReal gconst1=r21;
IkReal gconst2=x9890;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9894=((-1.0)*r20);
IkReal x9895=((-1.0)*px);
CheckValue<IkReal> x9897 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9894),IKFAST_ATAN2_MAGTHRESH);
if(!x9897.valid){
continue;
}
IkReal x9896=((-1.0)*(x9897.value));
sj5=gconst1;
cj5=gconst2;
j5=x9896;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9895);
rxp1_1=(px*r21);
rxp1_2=(r11*x9895);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9896;
IkReal gconst1=r21;
IkReal gconst2=x9894;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9898=((-1.0)*r20);
IkReal x9899=((-1.0)*px);
CheckValue<IkReal> x9901 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9898),IKFAST_ATAN2_MAGTHRESH);
if(!x9901.valid){
continue;
}
IkReal x9900=((-1.0)*(x9901.value));
sj5=gconst1;
cj5=gconst2;
j5=x9900;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9899);
rxp1_1=(px*r21);
rxp1_2=(r11*x9899);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9900;
IkReal gconst1=r21;
IkReal gconst2=x9898;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9902=((-1.0)*r20);
IkReal x9903=((-1.0)*px);
CheckValue<IkReal> x9905 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9902),IKFAST_ATAN2_MAGTHRESH);
if(!x9905.valid){
continue;
}
IkReal x9904=((-1.0)*(x9905.value));
sj5=gconst1;
cj5=gconst2;
j5=x9904;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9903);
rxp1_1=(px*r21);
rxp1_2=(r11*x9903);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9904;
IkReal gconst1=r21;
IkReal gconst2=x9902;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9906=((-1.0)*r20);
IkReal x9907=((-1.0)*px);
CheckValue<IkReal> x9909 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9906),IKFAST_ATAN2_MAGTHRESH);
if(!x9909.valid){
continue;
}
IkReal x9908=((-1.0)*(x9909.value));
sj5=gconst1;
cj5=gconst2;
j5=x9908;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9907);
rxp1_1=(px*r21);
rxp1_2=(r11*x9907);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9908;
IkReal gconst1=r21;
IkReal gconst2=x9906;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9912=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9912.valid){
continue;
}
IkReal x9910=x9912.value;
IkReal x9911=(sj0*x9910);
cj4array[0]=(((cj1*sj2*x9911))+((cj2*sj1*x9911)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9913=IKsin(j4);
IkReal x9914=IKcos(j4);
IkReal x9915=(gconst1*x9913);
IkReal x9916=((1.0)*x9914);
IkReal x9917=((1.0)*gconst2*x9913);
evalcond[0]=((-1.0)*r02*x9913);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9916)));
evalcond[2]=(((r21*x9915))+(((-1.0)*r20*x9917)));
evalcond[3]=((((-1.0)*r10*x9917))+((r11*x9915)));
evalcond[4]=((((-1.0)*gconst1*r21*x9916))+((gconst2*r20*x9914))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9919=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9919.valid){
continue;
}
IkReal x9918=x9919.value;
cj4array[0]=(((cj1*cj2*x9918))+(((-1.0)*sj1*sj2*x9918)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9920=IKsin(j4);
IkReal x9921=IKcos(j4);
IkReal x9922=(gconst2*r10);
IkReal x9923=((1.0)*sj0);
IkReal x9924=((1.0)*x9920);
IkReal x9925=(gconst1*x9920);
IkReal x9926=((1.0)*x9921);
evalcond[0]=((-1.0)*r02*x9920);
evalcond[1]=((((-1.0)*r02*x9926))+(((-1.0)*x9923)));
evalcond[2]=((((-1.0)*gconst2*r20*x9924))+((r21*x9925)));
evalcond[3]=(((r11*x9925))+(((-1.0)*x9922*x9924)));
evalcond[4]=(((x9921*x9922))+(((-1.0)*cj2*sj1*x9923))+(((-1.0)*cj1*sj2*x9923))+(((-1.0)*gconst1*r11*x9926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9927=IKPowWithIntegerCheck(r02,-1);
if(!x9927.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9927.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9928=IKsin(j4);
IkReal x9929=IKcos(j4);
IkReal x9930=(gconst2*r10);
IkReal x9931=((1.0)*sj0);
IkReal x9932=(gconst1*r11);
IkReal x9933=(gconst1*r21);
IkReal x9934=(gconst2*r20);
IkReal x9935=((1.0)*x9928);
IkReal x9936=((1.0)*x9929);
evalcond[0]=((-1.0)*r02*x9928);
evalcond[1]=((((-1.0)*x9934*x9935))+((x9928*x9933)));
evalcond[2]=((((-1.0)*x9930*x9935))+((x9928*x9932)));
evalcond[3]=(((x9929*x9934))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x9933*x9936)));
evalcond[4]=((((-1.0)*cj2*sj1*x9931))+(((-1.0)*cj1*sj2*x9931))+((x9929*x9930))+(((-1.0)*x9932*x9936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9937=((-1.0)*r20);
IkReal x9938=((-1.0)*px);
CheckValue<IkReal> x9940 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9937),IKFAST_ATAN2_MAGTHRESH);
if(!x9940.valid){
continue;
}
IkReal x9939=((-1.0)*(x9940.value));
sj5=gconst1;
cj5=gconst2;
j5=x9939;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9938);
rxp1_1=(px*r21);
rxp1_2=(r11*x9938);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9939;
IkReal gconst1=r21;
IkReal gconst2=x9937;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9941=((-1.0)*r20);
IkReal x9942=((-1.0)*px);
CheckValue<IkReal> x9944 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9941),IKFAST_ATAN2_MAGTHRESH);
if(!x9944.valid){
continue;
}
IkReal x9943=((-1.0)*(x9944.value));
sj5=gconst1;
cj5=gconst2;
j5=x9943;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9942);
rxp1_1=(px*r21);
rxp1_2=(r11*x9942);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9943;
IkReal gconst1=r21;
IkReal gconst2=x9941;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9945=((-1.0)*r20);
IkReal x9946=((-1.0)*px);
CheckValue<IkReal> x9948 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9945),IKFAST_ATAN2_MAGTHRESH);
if(!x9948.valid){
continue;
}
IkReal x9947=((-1.0)*(x9948.value));
sj5=gconst1;
cj5=gconst2;
j5=x9947;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9946);
rxp1_1=(px*r21);
rxp1_2=(r11*x9946);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9947;
IkReal gconst1=r21;
IkReal gconst2=x9945;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9951=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9951.valid){
continue;
}
IkReal x9949=x9951.value;
IkReal x9950=(sj0*x9949);
cj4array[0]=(((cj1*sj2*x9950))+((cj2*sj1*x9950)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9952=IKsin(j4);
IkReal x9953=IKcos(j4);
IkReal x9954=((1.0)*gconst2);
IkReal x9955=(gconst1*r21);
evalcond[0]=(r02*x9952);
evalcond[1]=((((-1.0)*r02*x9953))+(((-1.0)*sj0)));
evalcond[2]=(((x9952*x9955))+(((-1.0)*r20*x9952*x9954)));
evalcond[3]=(((gconst1*r11*x9952))+(((-1.0)*r10*x9952*x9954)));
evalcond[4]=(((x9953*x9955))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x9953*x9954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9957=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9957.valid){
continue;
}
IkReal x9956=x9957.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9956))+((cj1*cj2*x9956)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9958=IKsin(j4);
IkReal x9959=IKcos(j4);
IkReal x9960=((1.0)*sj0);
IkReal x9961=(gconst1*x9958);
IkReal x9962=((1.0)*x9959);
IkReal x9963=((1.0)*gconst2*x9958);
evalcond[0]=(r02*x9958);
evalcond[1]=((((-1.0)*x9960))+(((-1.0)*r02*x9962)));
evalcond[2]=(((r21*x9961))+(((-1.0)*r20*x9963)));
evalcond[3]=((((-1.0)*r10*x9963))+((r11*x9961)));
evalcond[4]=((((-1.0)*cj2*sj1*x9960))+(((-1.0)*cj1*sj2*x9960))+((gconst1*r11*x9959))+(((-1.0)*gconst2*r10*x9962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9964=IKPowWithIntegerCheck(r02,-1);
if(!x9964.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9964.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9965=IKsin(j4);
IkReal x9966=IKcos(j4);
IkReal x9967=(gconst1*r21);
IkReal x9968=((1.0)*sj0);
IkReal x9969=(gconst1*r11);
IkReal x9970=((1.0)*gconst2*r10);
IkReal x9971=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9965);
evalcond[1]=(((x9965*x9967))+(((-1.0)*x9965*x9971)));
evalcond[2]=(((x9965*x9969))+(((-1.0)*x9965*x9970)));
evalcond[3]=((((-1.0)*x9966*x9971))+((x9966*x9967))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x9966*x9970))+(((-1.0)*cj2*sj1*x9968))+(((-1.0)*cj1*sj2*x9968))+((x9966*x9969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9973=IKPowWithIntegerCheck(r02,-1);
if(!x9973.valid){
continue;
}
IkReal x9972=x9973.value;
CheckValue<IkReal> x9974=IKPowWithIntegerCheck(cj3,-1);
if(!x9974.valid){
continue;
}
if( IKabs((x9972*(x9974.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x9972)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9972*(x9974.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x9972))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x9972*(x9974.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x9972));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9975=IKsin(j4);
IkReal x9976=IKcos(j4);
IkReal x9977=(gconst2*r10);
IkReal x9978=(gconst1*r11);
IkReal x9979=(sj1*sj2);
IkReal x9980=(gconst2*r20);
IkReal x9981=(cj2*sj1);
IkReal x9982=((1.0)*sj0);
IkReal x9983=(gconst1*r20);
IkReal x9984=(gconst2*r11);
IkReal x9985=(gconst1*r21);
IkReal x9986=((1.0)*cj0);
IkReal x9987=(gconst1*r10);
IkReal x9988=(cj1*sj2);
IkReal x9989=(gconst2*r21);
IkReal x9990=(sj3*x9976);
IkReal x9991=((1.0)*cj1*cj2);
IkReal x9992=(cj3*x9976);
IkReal x9993=(r02*x9975);
IkReal x9994=((1.0)*x9975);
evalcond[0]=((((-1.0)*r02*x9976))+(((-1.0)*x9982)));
evalcond[1]=(((x9975*x9985))+(((-1.0)*x9980*x9994)));
evalcond[2]=(cj0+(((-1.0)*x9977*x9994))+((x9975*x9978)));
evalcond[3]=(((cj3*x9993))+((cj0*x9979))+(((-1.0)*cj1*cj2*x9986)));
evalcond[4]=((((-1.0)*x9981*x9986))+(((-1.0)*sj3*x9993))+(((-1.0)*x9986*x9988)));
evalcond[5]=(((x9985*x9992))+((sj3*x9989))+((sj3*x9983))+x9988+x9981+(((-1.0)*x9980*x9992)));
evalcond[6]=(((cj3*x9989))+((cj3*x9983))+(((-1.0)*x9985*x9990))+x9979+((x9980*x9990))+(((-1.0)*x9991)));
evalcond[7]=(((x9978*x9992))+(((-1.0)*x9977*x9992))+((sj3*x9987))+((sj3*x9984))+((sj0*x9979))+(((-1.0)*cj1*cj2*x9982)));
evalcond[8]=(((cj3*x9987))+((cj3*x9984))+((x9977*x9990))+(((-1.0)*x9981*x9982))+(((-1.0)*x9978*x9990))+(((-1.0)*x9982*x9988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9995=((1.0)*sj3);
IkReal x9996=((1.0)*gconst2);
CheckValue<IkReal> x9997=IKPowWithIntegerCheck(((((-1.0)*r10*x9996))+((gconst1*r11))),-1);
if(!x9997.valid){
continue;
}
CheckValue<IkReal> x9998=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x9996))),-1);
if(!x9998.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x9997.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9998.value)*(((((-1.0)*gconst1*r20*x9995))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r21*x9995)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x9997.value)))+IKsqr(((x9998.value)*(((((-1.0)*gconst1*r20*x9995))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r21*x9995))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x9997.value)), ((x9998.value)*(((((-1.0)*gconst1*r20*x9995))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r21*x9995))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9999=IKsin(j4);
IkReal x10000=IKcos(j4);
IkReal x10001=(gconst2*r10);
IkReal x10002=(gconst1*r11);
IkReal x10003=(sj1*sj2);
IkReal x10004=(gconst2*r20);
IkReal x10005=(cj2*sj1);
IkReal x10006=((1.0)*sj0);
IkReal x10007=(gconst1*r20);
IkReal x10008=(gconst2*r11);
IkReal x10009=(gconst1*r21);
IkReal x10010=((1.0)*cj0);
IkReal x10011=(gconst1*r10);
IkReal x10012=(cj1*sj2);
IkReal x10013=(gconst2*r21);
IkReal x10014=(sj3*x10000);
IkReal x10015=((1.0)*cj1*cj2);
IkReal x10016=(cj3*x10000);
IkReal x10017=(r02*x9999);
IkReal x10018=((1.0)*x9999);
evalcond[0]=((((-1.0)*r02*x10000))+(((-1.0)*x10006)));
evalcond[1]=(((x10009*x9999))+(((-1.0)*x10004*x10018)));
evalcond[2]=(cj0+((x10002*x9999))+(((-1.0)*x10001*x10018)));
evalcond[3]=(((cj0*x10003))+((cj3*x10017))+(((-1.0)*cj1*cj2*x10010)));
evalcond[4]=((((-1.0)*x10005*x10010))+(((-1.0)*x10010*x10012))+(((-1.0)*sj3*x10017)));
evalcond[5]=(((x10009*x10016))+(((-1.0)*x10004*x10016))+x10012+x10005+((sj3*x10013))+((sj3*x10007)));
evalcond[6]=(((x10004*x10014))+((cj3*x10013))+((cj3*x10007))+x10003+(((-1.0)*x10009*x10014))+(((-1.0)*x10015)));
evalcond[7]=((((-1.0)*cj1*cj2*x10006))+((sj3*x10011))+(((-1.0)*x10001*x10016))+((sj3*x10008))+((x10002*x10016))+((sj0*x10003)));
evalcond[8]=((((-1.0)*x10005*x10006))+((cj3*x10011))+(((-1.0)*x10002*x10014))+((cj3*x10008))+((x10001*x10014))+(((-1.0)*x10006*x10012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10019=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10019.valid){
continue;
}
CheckValue<IkReal> x10020=IKPowWithIntegerCheck(r02,-1);
if(!x10020.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10019.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x10020.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10019.value)))+IKsqr(((-1.0)*sj0*(x10020.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10019.value)), ((-1.0)*sj0*(x10020.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10021=IKsin(j4);
IkReal x10022=IKcos(j4);
IkReal x10023=(gconst2*r10);
IkReal x10024=(gconst1*r11);
IkReal x10025=(sj1*sj2);
IkReal x10026=(gconst2*r20);
IkReal x10027=(cj2*sj1);
IkReal x10028=((1.0)*sj0);
IkReal x10029=(gconst1*r20);
IkReal x10030=(gconst2*r11);
IkReal x10031=(gconst1*r21);
IkReal x10032=((1.0)*cj0);
IkReal x10033=(gconst1*r10);
IkReal x10034=(cj1*sj2);
IkReal x10035=(gconst2*r21);
IkReal x10036=(sj3*x10022);
IkReal x10037=((1.0)*cj1*cj2);
IkReal x10038=(cj3*x10022);
IkReal x10039=(r02*x10021);
IkReal x10040=((1.0)*x10021);
evalcond[0]=((((-1.0)*r02*x10022))+(((-1.0)*x10028)));
evalcond[1]=(((x10021*x10031))+(((-1.0)*x10026*x10040)));
evalcond[2]=(cj0+((x10021*x10024))+(((-1.0)*x10023*x10040)));
evalcond[3]=(((cj0*x10025))+((cj3*x10039))+(((-1.0)*cj1*cj2*x10032)));
evalcond[4]=((((-1.0)*sj3*x10039))+(((-1.0)*x10032*x10034))+(((-1.0)*x10027*x10032)));
evalcond[5]=((((-1.0)*x10026*x10038))+((x10031*x10038))+((sj3*x10035))+((sj3*x10029))+x10034+x10027);
evalcond[6]=((((-1.0)*x10031*x10036))+((x10026*x10036))+x10025+((cj3*x10035))+(((-1.0)*x10037))+((cj3*x10029)));
evalcond[7]=(((sj0*x10025))+((x10024*x10038))+((sj3*x10030))+((sj3*x10033))+(((-1.0)*x10023*x10038))+(((-1.0)*cj1*cj2*x10028)));
evalcond[8]=((((-1.0)*x10028*x10034))+((cj3*x10033))+((cj3*x10030))+(((-1.0)*x10024*x10036))+(((-1.0)*x10027*x10028))+((x10023*x10036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10041=gconst1*gconst1;
IkReal x10042=r21*r21;
IkReal x10043=gconst2*gconst2;
IkReal x10044=r20*r20;
IkReal x10045=(gconst2*r20);
IkReal x10046=(cj1*cj2);
IkReal x10047=(sj1*sj2);
IkReal x10048=(gconst1*r21);
IkReal x10049=(cj3*gconst2);
IkReal x10050=(cj3*r20);
CheckValue<IkReal> x10051=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x10041*x10042))+(((-2.0)*sj3*x10045*x10048))+((sj3*x10043*x10044)))),-1);
if(!x10051.valid){
continue;
}
CheckValue<IkReal> x10052 = IKatan2WithCheck(IkReal((((gconst1*r22*x10050))+(((-1.0)*r22*x10046))+((r22*x10047))+((r21*r22*x10049)))),IkReal((((gconst1*x10042*x10049))+(((-1.0)*gconst1*x10044*x10049))+(((-1.0)*x10046*x10048))+((r21*x10041*x10050))+((x10047*x10048))+(((-1.0)*r21*x10043*x10050))+((x10045*x10046))+(((-1.0)*x10045*x10047)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10051.value)))+(x10052.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10053=IKsin(j4);
IkReal x10054=IKcos(j4);
IkReal x10055=(cj3*gconst1);
IkReal x10056=(gconst1*r01);
IkReal x10057=(gconst1*r11);
IkReal x10058=(sj1*sj2);
IkReal x10059=(cj3*gconst2);
IkReal x10060=(gconst1*sj3);
IkReal x10061=(gconst2*sj3);
IkReal x10062=((1.0)*sj0);
IkReal x10063=(cj1*sj2);
IkReal x10064=((1.0)*x10054);
IkReal x10065=((1.0)*x10053);
IkReal x10066=((1.0)*cj1*cj2);
IkReal x10067=(cj3*x10053);
IkReal x10068=((1.0)*cj2*sj1);
IkReal x10069=(x10054*x10061);
evalcond[0]=(((gconst1*r21*x10053))+(((-1.0)*r22*x10064))+(((-1.0)*gconst2*r20*x10065)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x10065))+(((-1.0)*r12*x10064))+((x10053*x10057)));
evalcond[2]=((((-1.0)*x10062))+(((-1.0)*gconst2*r00*x10065))+((x10053*x10056))+(((-1.0)*r02*x10064)));
evalcond[3]=(((cj2*sj1))+((r20*x10060))+((r21*x10054*x10055))+(((-1.0)*r20*x10059*x10064))+((r22*x10067))+x10063+((r21*x10061)));
evalcond[4]=((((-1.0)*r22*sj3*x10065))+((r20*x10055))+((r20*x10069))+(((-1.0)*x10066))+(((-1.0)*r21*x10060*x10064))+x10058+((r21*x10059)));
evalcond[5]=((((-1.0)*cj0*x10066))+((r00*x10060))+((r01*x10061))+(((-1.0)*r00*x10059*x10064))+((r02*x10067))+((r01*x10054*x10055))+((cj0*x10058)));
evalcond[6]=(((r10*x10060))+((r12*x10067))+(((-1.0)*cj1*cj2*x10062))+((sj0*x10058))+((r11*x10054*x10055))+(((-1.0)*r10*x10059*x10064))+((r11*x10061)));
evalcond[7]=((((-1.0)*cj0*x10068))+((r00*x10069))+((r01*x10059))+(((-1.0)*sj3*x10056*x10064))+((r00*x10055))+(((-1.0)*cj0*x10063))+(((-1.0)*r02*sj3*x10065)));
evalcond[8]=(((r10*x10069))+((r10*x10055))+(((-1.0)*r12*sj3*x10065))+(((-1.0)*sj3*x10057*x10064))+(((-1.0)*x10062*x10063))+(((-1.0)*cj2*sj1*x10062))+((r11*x10059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10070=((1.0)*gconst2);
CheckValue<IkReal> x10071 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x10070))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10071.valid){
continue;
}
CheckValue<IkReal> x10072=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x10070)))),-1);
if(!x10072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10071.value)+(((1.5707963267949)*(x10072.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10073=IKsin(j4);
IkReal x10074=IKcos(j4);
IkReal x10075=(cj3*gconst1);
IkReal x10076=(gconst1*r01);
IkReal x10077=(gconst1*r11);
IkReal x10078=(sj1*sj2);
IkReal x10079=(cj3*gconst2);
IkReal x10080=(gconst1*sj3);
IkReal x10081=(gconst2*sj3);
IkReal x10082=((1.0)*sj0);
IkReal x10083=(cj1*sj2);
IkReal x10084=((1.0)*x10074);
IkReal x10085=((1.0)*x10073);
IkReal x10086=((1.0)*cj1*cj2);
IkReal x10087=(cj3*x10073);
IkReal x10088=((1.0)*cj2*sj1);
IkReal x10089=(x10074*x10081);
evalcond[0]=((((-1.0)*gconst2*r20*x10085))+((gconst1*r21*x10073))+(((-1.0)*r22*x10084)));
evalcond[1]=(cj0+((x10073*x10077))+(((-1.0)*gconst2*r10*x10085))+(((-1.0)*r12*x10084)));
evalcond[2]=(((x10073*x10076))+(((-1.0)*x10082))+(((-1.0)*r02*x10084))+(((-1.0)*gconst2*r00*x10085)));
evalcond[3]=(((cj2*sj1))+((r20*x10080))+x10083+((r21*x10081))+((r22*x10087))+((r21*x10074*x10075))+(((-1.0)*r20*x10079*x10084)));
evalcond[4]=(((r20*x10075))+((r20*x10089))+(((-1.0)*r21*x10080*x10084))+(((-1.0)*x10086))+x10078+((r21*x10079))+(((-1.0)*r22*sj3*x10085)));
evalcond[5]=(((r01*x10074*x10075))+((r00*x10080))+((r01*x10081))+(((-1.0)*r00*x10079*x10084))+((r02*x10087))+((cj0*x10078))+(((-1.0)*cj0*x10086)));
evalcond[6]=((((-1.0)*r10*x10079*x10084))+(((-1.0)*cj1*cj2*x10082))+((sj0*x10078))+((r11*x10074*x10075))+((r12*x10087))+((r10*x10080))+((r11*x10081)));
evalcond[7]=(((r00*x10089))+((r00*x10075))+(((-1.0)*cj0*x10083))+((r01*x10079))+(((-1.0)*r02*sj3*x10085))+(((-1.0)*sj3*x10076*x10084))+(((-1.0)*cj0*x10088)));
evalcond[8]=(((r10*x10075))+(((-1.0)*r12*sj3*x10085))+(((-1.0)*sj3*x10077*x10084))+(((-1.0)*cj2*sj1*x10082))+((r11*x10079))+((r10*x10089))+(((-1.0)*x10082*x10083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10090=((1.0)*gconst2);
CheckValue<IkReal> x10091 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x10090)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10091.valid){
continue;
}
CheckValue<IkReal> x10092=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x10090))+(((-1.0)*gconst1*r00)))),-1);
if(!x10092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10091.value)+(((1.5707963267949)*(x10092.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10093=IKsin(j4);
IkReal x10094=IKcos(j4);
IkReal x10095=(cj3*gconst1);
IkReal x10096=(gconst1*r01);
IkReal x10097=(gconst1*r11);
IkReal x10098=(sj1*sj2);
IkReal x10099=(cj3*gconst2);
IkReal x10100=(gconst1*sj3);
IkReal x10101=(gconst2*sj3);
IkReal x10102=((1.0)*sj0);
IkReal x10103=(cj1*sj2);
IkReal x10104=((1.0)*x10094);
IkReal x10105=((1.0)*x10093);
IkReal x10106=((1.0)*cj1*cj2);
IkReal x10107=(cj3*x10093);
IkReal x10108=((1.0)*cj2*sj1);
IkReal x10109=(x10094*x10101);
evalcond[0]=((((-1.0)*gconst2*r20*x10105))+(((-1.0)*r22*x10104))+((gconst1*r21*x10093)));
evalcond[1]=((((-1.0)*r12*x10104))+((x10093*x10097))+cj0+(((-1.0)*gconst2*r10*x10105)));
evalcond[2]=(((x10093*x10096))+(((-1.0)*r02*x10104))+(((-1.0)*gconst2*r00*x10105))+(((-1.0)*x10102)));
evalcond[3]=(((r21*x10101))+((cj2*sj1))+((r20*x10100))+x10103+(((-1.0)*r20*x10099*x10104))+((r22*x10107))+((r21*x10094*x10095)));
evalcond[4]=(((r20*x10109))+(((-1.0)*r21*x10100*x10104))+x10098+((r21*x10099))+(((-1.0)*r22*sj3*x10105))+((r20*x10095))+(((-1.0)*x10106)));
evalcond[5]=(((r01*x10101))+((r00*x10100))+((r01*x10094*x10095))+(((-1.0)*cj0*x10106))+(((-1.0)*r00*x10099*x10104))+((cj0*x10098))+((r02*x10107)));
evalcond[6]=(((r11*x10094*x10095))+(((-1.0)*r10*x10099*x10104))+(((-1.0)*cj1*cj2*x10102))+((sj0*x10098))+((r11*x10101))+((r10*x10100))+((r12*x10107)));
evalcond[7]=(((r00*x10109))+(((-1.0)*sj3*x10096*x10104))+(((-1.0)*cj0*x10108))+(((-1.0)*cj0*x10103))+(((-1.0)*r02*sj3*x10105))+((r01*x10099))+((r00*x10095)));
evalcond[8]=((((-1.0)*sj3*x10097*x10104))+(((-1.0)*r12*sj3*x10105))+((r11*x10099))+(((-1.0)*x10102*x10103))+(((-1.0)*cj2*sj1*x10102))+((r10*x10109))+((r10*x10095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10110=((-1.0)*r21);
IkReal x10112 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10112)==0){
continue;
}
IkReal x10111=pow(x10112,-0.5);
CheckValue<IkReal> x10113 = IKatan2WithCheck(IkReal(x10110),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10113.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10113.value))));
IkReal gconst4=(x10110*x10111);
IkReal gconst5=((1.0)*r20*x10111);
CheckValue<IkReal> x10114 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10114.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10114.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10115=((-1.0)*r21);
CheckValue<IkReal> x10118 = IKatan2WithCheck(IkReal(x10115),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10118.valid){
continue;
}
IkReal x10116=((1.0)*(x10118.value));
IkReal x10117=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10116)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10116)));
IkReal gconst4=(x10115*x10117);
IkReal gconst5=((1.0)*r20*x10117);
IkReal x10119=r22*r22;
IkReal x10120=((1.0)*x10119);
CheckValue<IkReal> x10124=IKPowWithIntegerCheck(((-1.0)+x10119),-1);
if(!x10124.valid){
continue;
}
IkReal x10121=x10124.value;
if((((1.0)+(((-1.0)*x10120)))) < -0.00001)
continue;
IkReal x10122=IKsqrt(((1.0)+(((-1.0)*x10120))));
IkReal x10123=(cj0*x10121*x10122);
j4eval[0]=((IKabs(((((-1.0)*x10120*x10123))+x10123)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10125=((-1.0)*r21);
CheckValue<IkReal> x10128 = IKatan2WithCheck(IkReal(x10125),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10128.valid){
continue;
}
IkReal x10126=((1.0)*(x10128.value));
IkReal x10127=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10126)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10126)));
IkReal gconst4=(x10125*x10127);
IkReal gconst5=((1.0)*r20*x10127);
IkReal x10129=r22*r22;
IkReal x10130=((1.0)*x10129);
CheckValue<IkReal> x10134=IKPowWithIntegerCheck(((-1.0)+x10129),-1);
if(!x10134.valid){
continue;
}
IkReal x10131=x10134.value;
if((((1.0)+(((-1.0)*x10130)))) < -0.00001)
continue;
IkReal x10132=IKsqrt(((1.0)+(((-1.0)*x10130))));
IkReal x10133=(sj0*x10131*x10132);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x10133+(((-1.0)*x10130*x10133))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10135=((-1.0)*r21);
CheckValue<IkReal> x10138 = IKatan2WithCheck(IkReal(x10135),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10138.valid){
continue;
}
IkReal x10136=((1.0)*(x10138.value));
IkReal x10137=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10136)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10136)));
IkReal gconst4=(x10135*x10137);
IkReal gconst5=((1.0)*r20*x10137);
IkReal x10139=r22*r22;
IkReal x10140=(r12*sj0);
IkReal x10141=(cj0*r02);
CheckValue<IkReal> x10145=IKPowWithIntegerCheck(((-1.0)+x10139),-1);
if(!x10145.valid){
continue;
}
IkReal x10142=x10145.value;
if((((1.0)+(((-1.0)*x10139)))) < -0.00001)
continue;
IkReal x10143=IKsqrt(((1.0)+(((-1.0)*x10139))));
IkReal x10144=(r22*x10142*x10143);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x10141))+(((-1.0)*x10140)))))+(IKabs((((x10141*x10144))+((x10140*x10144))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10146=((-1.0)*r21);
CheckValue<IkReal> x10149 = IKatan2WithCheck(IkReal(x10146),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10149.valid){
continue;
}
IkReal x10147=((1.0)*(x10149.value));
IkReal x10148=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10147)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10147)));
IkReal gconst4=(x10146*x10148);
IkReal gconst5=((1.0)*r20*x10148);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10150=((-1.0)*r21);
CheckValue<IkReal> x10153 = IKatan2WithCheck(IkReal(x10150),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10153.valid){
continue;
}
IkReal x10151=((1.0)*(x10153.value));
IkReal x10152=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10151)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10151)));
IkReal gconst4=(x10150*x10152);
IkReal gconst5=((1.0)*r20*x10152);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10154=((-1.0)*r21);
CheckValue<IkReal> x10157 = IKatan2WithCheck(IkReal(x10154),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10157.valid){
continue;
}
IkReal x10155=((1.0)*(x10157.value));
IkReal x10156=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10155)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10155)));
IkReal gconst4=(x10154*x10156);
IkReal gconst5=((1.0)*r20*x10156);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10158=((-1.0)*r21);
CheckValue<IkReal> x10161 = IKatan2WithCheck(IkReal(x10158),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10161.valid){
continue;
}
IkReal x10159=((1.0)*(x10161.value));
IkReal x10160=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10159)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10159)));
IkReal gconst4=(x10158*x10160);
IkReal gconst5=((1.0)*r20*x10160);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10162=((-1.0)*r21);
CheckValue<IkReal> x10165 = IKatan2WithCheck(IkReal(x10162),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10165.valid){
continue;
}
IkReal x10163=((1.0)*(x10165.value));
IkReal x10164=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10163)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10163)));
IkReal gconst4=(x10162*x10164);
IkReal gconst5=((1.0)*r20*x10164);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10166=((-1.0)*r21);
CheckValue<IkReal> x10169 = IKatan2WithCheck(IkReal(x10166),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10169.valid){
continue;
}
IkReal x10167=((1.0)*(x10169.value));
IkReal x10168=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10167)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10167)));
IkReal gconst4=(x10166*x10168);
IkReal gconst5=((1.0)*r20*x10168);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10170=(gconst5*r10);
IkReal x10171=(gconst4*r11);
CheckValue<IkReal> x10172 = IKatan2WithCheck(IkReal(((((-1.0)*x10171))+x10170)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10172.valid){
continue;
}
CheckValue<IkReal> x10173=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10170*x10171))+(x10171*x10171)+(x10170*x10170))),-1);
if(!x10173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10172.value)+(((1.5707963267949)*(x10173.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10174=IKsin(j4);
IkReal x10175=IKcos(j4);
IkReal x10176=(gconst4*r11);
IkReal x10177=((1.0)*cj1);
IkReal x10178=(gconst5*r10);
IkReal x10179=(gconst4*r01);
IkReal x10180=(gconst5*r00);
IkReal x10181=(gconst4*r21);
IkReal x10182=(gconst5*r20);
IkReal x10183=((1.0)*x10175);
IkReal x10184=((1.0)*x10174);
evalcond[0]=((((-1.0)*x10182*x10184))+((x10174*x10181))+(((-1.0)*r22*x10183)));
evalcond[1]=((((-1.0)*r02*x10183))+((x10174*x10179))+(((-1.0)*x10180*x10184)));
evalcond[2]=((((-1.0)*x10176*x10183))+(((-1.0)*r12*x10184))+((x10175*x10178)));
evalcond[3]=((1.0)+(((-1.0)*x10178*x10184))+(((-1.0)*r12*x10183))+((x10174*x10176)));
evalcond[4]=((((-1.0)*cj2*x10177))+((sj1*sj2))+(((-1.0)*x10181*x10183))+((x10175*x10182))+(((-1.0)*r22*x10184)));
evalcond[5]=((((-1.0)*x10179*x10183))+(((-1.0)*r02*x10184))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10177))+((x10175*x10180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10185=((1.0)*gconst5);
CheckValue<IkReal> x10186=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10185)))),-1);
if(!x10186.valid){
continue;
}
CheckValue<IkReal> x10187 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10185))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10186.value)))+(x10187.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10188=IKsin(j4);
IkReal x10189=IKcos(j4);
IkReal x10190=(gconst4*r11);
IkReal x10191=((1.0)*cj1);
IkReal x10192=(gconst5*r10);
IkReal x10193=(gconst4*r01);
IkReal x10194=(gconst5*r00);
IkReal x10195=(gconst4*r21);
IkReal x10196=(gconst5*r20);
IkReal x10197=((1.0)*x10189);
IkReal x10198=((1.0)*x10188);
evalcond[0]=(((x10188*x10195))+(((-1.0)*r22*x10197))+(((-1.0)*x10196*x10198)));
evalcond[1]=((((-1.0)*r02*x10197))+(((-1.0)*x10194*x10198))+((x10188*x10193)));
evalcond[2]=((((-1.0)*r12*x10198))+((x10189*x10192))+(((-1.0)*x10190*x10197)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10197))+((x10188*x10190))+(((-1.0)*x10192*x10198)));
evalcond[4]=((((-1.0)*x10195*x10197))+(((-1.0)*cj2*x10191))+((sj1*sj2))+((x10189*x10196))+(((-1.0)*r22*x10198)));
evalcond[5]=((((-1.0)*r02*x10198))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10191))+((x10189*x10194))+(((-1.0)*x10193*x10197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10199 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10199.valid){
continue;
}
CheckValue<IkReal> x10200=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10199.value)+(((1.5707963267949)*(x10200.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10201=IKsin(j4);
IkReal x10202=IKcos(j4);
IkReal x10203=(gconst4*r11);
IkReal x10204=((1.0)*cj1);
IkReal x10205=(gconst5*r10);
IkReal x10206=(gconst4*r01);
IkReal x10207=(gconst5*r00);
IkReal x10208=(gconst4*r21);
IkReal x10209=(gconst5*r20);
IkReal x10210=((1.0)*x10202);
IkReal x10211=((1.0)*x10201);
evalcond[0]=((((-1.0)*r22*x10210))+((x10201*x10208))+(((-1.0)*x10209*x10211)));
evalcond[1]=(((x10201*x10206))+(((-1.0)*x10207*x10211))+(((-1.0)*r02*x10210)));
evalcond[2]=(((x10202*x10205))+(((-1.0)*x10203*x10210))+(((-1.0)*r12*x10211)));
evalcond[3]=((1.0)+(((-1.0)*x10205*x10211))+((x10201*x10203))+(((-1.0)*r12*x10210)));
evalcond[4]=((((-1.0)*r22*x10211))+((x10202*x10209))+(((-1.0)*cj2*x10204))+((sj1*sj2))+(((-1.0)*x10208*x10210)));
evalcond[5]=(((x10202*x10207))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10204))+(((-1.0)*r02*x10211))+(((-1.0)*x10206*x10210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10212=((-1.0)*r21);
CheckValue<IkReal> x10215 = IKatan2WithCheck(IkReal(x10212),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10215.valid){
continue;
}
IkReal x10213=((1.0)*(x10215.value));
IkReal x10214=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10213)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10213)));
IkReal gconst4=(x10212*x10214);
IkReal gconst5=((1.0)*r20*x10214);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10216=((-1.0)*r21);
CheckValue<IkReal> x10219 = IKatan2WithCheck(IkReal(x10216),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10219.valid){
continue;
}
IkReal x10217=((1.0)*(x10219.value));
IkReal x10218=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10217)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10217)));
IkReal gconst4=(x10216*x10218);
IkReal gconst5=((1.0)*r20*x10218);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10220=((-1.0)*r21);
CheckValue<IkReal> x10223 = IKatan2WithCheck(IkReal(x10220),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10223.valid){
continue;
}
IkReal x10221=((1.0)*(x10223.value));
IkReal x10222=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10221)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10221)));
IkReal gconst4=(x10220*x10222);
IkReal gconst5=((1.0)*r20*x10222);
IkReal x10224=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10228=IKPowWithIntegerCheck(x10224,-1);
if(!x10228.valid){
continue;
}
IkReal x10225=x10228.value;
IkReal x10226=((1.0)*x10225);
IkReal x10227=((((-1.0)*x10226*(r10*r10)*(r20*r20)))+(((-1.0)*x10226*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10225))+(((-1.0)*(r12*r12))));
j4eval[0]=x10227;
j4eval[1]=r12;
j4eval[2]=x10224;
j4eval[3]=IKsign(x10227);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10229=(gconst5*r10);
IkReal x10230=(gconst4*r11);
CheckValue<IkReal> x10231=IKPowWithIntegerCheck(IKsign(((((2.0)*x10229*x10230))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10229*x10229)))+(((-1.0)*(x10230*x10230))))),-1);
if(!x10231.valid){
continue;
}
CheckValue<IkReal> x10232 = IKatan2WithCheck(IkReal((x10230+(((-1.0)*x10229)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10231.value)))+(x10232.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10233=IKcos(j4);
IkReal x10234=IKsin(j4);
IkReal x10235=(gconst4*r11);
IkReal x10236=(gconst5*r10);
IkReal x10237=((1.0)*cj1);
IkReal x10238=(gconst5*r00);
IkReal x10239=(gconst5*r20);
IkReal x10240=((1.0)*x10233);
IkReal x10241=(gconst4*x10233);
IkReal x10242=((1.0)*x10234);
IkReal x10243=(gconst4*x10234);
evalcond[0]=(((r12*x10234))+(((-1.0)*x10236*x10240))+((x10233*x10235)));
evalcond[1]=(((r21*x10243))+(((-1.0)*r22*x10240))+(((-1.0)*x10239*x10242)));
evalcond[2]=((((-1.0)*x10238*x10242))+((r01*x10243))+(((-1.0)*r02*x10240)));
evalcond[3]=((1.0)+((x10234*x10235))+(((-1.0)*r12*x10240))+(((-1.0)*x10236*x10242)));
evalcond[4]=(((r22*x10234))+((sj1*sj2))+(((-1.0)*cj2*x10237))+((r21*x10241))+(((-1.0)*x10239*x10240)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r02*x10234))+(((-1.0)*x10238*x10240))+((r01*x10241))+(((-1.0)*sj2*x10237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10244=((1.0)*gconst5);
CheckValue<IkReal> x10245=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10244)))),-1);
if(!x10245.valid){
continue;
}
CheckValue<IkReal> x10246 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10244))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10245.value)))+(x10246.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10247=IKcos(j4);
IkReal x10248=IKsin(j4);
IkReal x10249=(gconst4*r11);
IkReal x10250=(gconst5*r10);
IkReal x10251=((1.0)*cj1);
IkReal x10252=(gconst5*r00);
IkReal x10253=(gconst5*r20);
IkReal x10254=((1.0)*x10247);
IkReal x10255=(gconst4*x10247);
IkReal x10256=((1.0)*x10248);
IkReal x10257=(gconst4*x10248);
evalcond[0]=((((-1.0)*x10250*x10254))+((r12*x10248))+((x10247*x10249)));
evalcond[1]=((((-1.0)*x10253*x10256))+((r21*x10257))+(((-1.0)*r22*x10254)));
evalcond[2]=((((-1.0)*r02*x10254))+(((-1.0)*x10252*x10256))+((r01*x10257)));
evalcond[3]=((1.0)+((x10248*x10249))+(((-1.0)*r12*x10254))+(((-1.0)*x10250*x10256)));
evalcond[4]=((((-1.0)*x10253*x10254))+((r22*x10248))+(((-1.0)*cj2*x10251))+((sj1*sj2))+((r21*x10255)));
evalcond[5]=((((-1.0)*x10252*x10254))+((r02*x10248))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10251))+((r01*x10255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10258 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10258.valid){
continue;
}
CheckValue<IkReal> x10259=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10259.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10258.value)+(((1.5707963267949)*(x10259.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10260=IKcos(j4);
IkReal x10261=IKsin(j4);
IkReal x10262=(gconst4*r11);
IkReal x10263=(gconst5*r10);
IkReal x10264=((1.0)*cj1);
IkReal x10265=(gconst5*r00);
IkReal x10266=(gconst5*r20);
IkReal x10267=((1.0)*x10260);
IkReal x10268=(gconst4*x10260);
IkReal x10269=((1.0)*x10261);
IkReal x10270=(gconst4*x10261);
evalcond[0]=(((r12*x10261))+(((-1.0)*x10263*x10267))+((x10260*x10262)));
evalcond[1]=((((-1.0)*r22*x10267))+(((-1.0)*x10266*x10269))+((r21*x10270)));
evalcond[2]=(((r01*x10270))+(((-1.0)*r02*x10267))+(((-1.0)*x10265*x10269)));
evalcond[3]=((1.0)+(((-1.0)*x10263*x10269))+(((-1.0)*r12*x10267))+((x10261*x10262)));
evalcond[4]=(((r22*x10261))+(((-1.0)*x10266*x10267))+((sj1*sj2))+((r21*x10268))+(((-1.0)*cj2*x10264)));
evalcond[5]=(((r02*x10261))+(((-1.0)*cj2*sj1))+((r01*x10268))+(((-1.0)*sj2*x10264))+(((-1.0)*x10265*x10267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10271=((-1.0)*r21);
CheckValue<IkReal> x10274 = IKatan2WithCheck(IkReal(x10271),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10274.valid){
continue;
}
IkReal x10272=((1.0)*(x10274.value));
IkReal x10273=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10272)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10272)));
IkReal gconst4=(x10271*x10273);
IkReal gconst5=((1.0)*r20*x10273);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10275=((-1.0)*r21);
CheckValue<IkReal> x10278 = IKatan2WithCheck(IkReal(x10275),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10278.valid){
continue;
}
IkReal x10276=((1.0)*(x10278.value));
IkReal x10277=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10276)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10276)));
IkReal gconst4=(x10275*x10277);
IkReal gconst5=((1.0)*r20*x10277);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10279=((-1.0)*r21);
CheckValue<IkReal> x10282 = IKatan2WithCheck(IkReal(x10279),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10282.valid){
continue;
}
IkReal x10280=((1.0)*(x10282.value));
IkReal x10281=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10280)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10280)));
IkReal gconst4=(x10279*x10281);
IkReal gconst5=((1.0)*r20*x10281);
IkReal x10283=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10287=IKPowWithIntegerCheck(x10283,-1);
if(!x10287.valid){
continue;
}
IkReal x10284=x10287.value;
IkReal x10285=((1.0)*x10284);
IkReal x10286=((((-1.0)*x10285*(r10*r10)*(r20*r20)))+(((-1.0)*x10285*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10284))+(((-1.0)*(r12*r12))));
j4eval[0]=x10286;
j4eval[1]=r12;
j4eval[2]=x10283;
j4eval[3]=IKsign(x10286);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10288=(gconst5*r10);
IkReal x10289=(gconst4*r11);
CheckValue<IkReal> x10290 = IKatan2WithCheck(IkReal((x10289+(((-1.0)*x10288)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10290.valid){
continue;
}
CheckValue<IkReal> x10291=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((2.0)*x10288*x10289))+(((-1.0)*(x10288*x10288)))+(((-1.0)*(x10289*x10289))))),-1);
if(!x10291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10290.value)+(((1.5707963267949)*(x10291.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10292=IKcos(j4);
IkReal x10293=IKsin(j4);
IkReal x10294=(gconst4*r11);
IkReal x10295=(gconst5*r10);
IkReal x10296=(gconst5*r00);
IkReal x10297=(gconst5*r20);
IkReal x10298=((1.0)*x10292);
IkReal x10299=(gconst4*x10292);
IkReal x10300=((1.0)*x10293);
IkReal x10301=(gconst4*x10293);
evalcond[0]=(((r12*x10293))+((x10292*x10294))+(((-1.0)*x10295*x10298)));
evalcond[1]=((((-1.0)*x10297*x10300))+((r21*x10301))+(((-1.0)*r22*x10298)));
evalcond[2]=((((-1.0)*r02*x10298))+((r01*x10301))+(((-1.0)*x10296*x10300)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10298))+((x10293*x10294))+(((-1.0)*x10295*x10300)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x10299))+(((-1.0)*x10297*x10298))+((r22*x10293)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10296*x10298))+((r02*x10293))+((r01*x10299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10302=((1.0)*gconst5);
CheckValue<IkReal> x10303=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10302)))),-1);
if(!x10303.valid){
continue;
}
CheckValue<IkReal> x10304 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10302)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10303.value)))+(x10304.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10305=IKcos(j4);
IkReal x10306=IKsin(j4);
IkReal x10307=(gconst4*r11);
IkReal x10308=(gconst5*r10);
IkReal x10309=(gconst5*r00);
IkReal x10310=(gconst5*r20);
IkReal x10311=((1.0)*x10305);
IkReal x10312=(gconst4*x10305);
IkReal x10313=((1.0)*x10306);
IkReal x10314=(gconst4*x10306);
evalcond[0]=(((x10305*x10307))+(((-1.0)*x10308*x10311))+((r12*x10306)));
evalcond[1]=((((-1.0)*x10310*x10313))+((r21*x10314))+(((-1.0)*r22*x10311)));
evalcond[2]=(((r01*x10314))+(((-1.0)*x10309*x10313))+(((-1.0)*r02*x10311)));
evalcond[3]=((1.0)+((x10306*x10307))+(((-1.0)*r12*x10311))+(((-1.0)*x10308*x10313)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10310*x10311))+((r21*x10312))+((cj1*sj2))+((r22*x10306)));
evalcond[5]=(((r02*x10306))+((r01*x10312))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10309*x10311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10315 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10315.valid){
continue;
}
CheckValue<IkReal> x10316=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10315.value)+(((1.5707963267949)*(x10316.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10317=IKcos(j4);
IkReal x10318=IKsin(j4);
IkReal x10319=(gconst4*r11);
IkReal x10320=(gconst5*r10);
IkReal x10321=(gconst5*r00);
IkReal x10322=(gconst5*r20);
IkReal x10323=((1.0)*x10317);
IkReal x10324=(gconst4*x10317);
IkReal x10325=((1.0)*x10318);
IkReal x10326=(gconst4*x10318);
evalcond[0]=(((r12*x10318))+(((-1.0)*x10320*x10323))+((x10317*x10319)));
evalcond[1]=((((-1.0)*r22*x10323))+((r21*x10326))+(((-1.0)*x10322*x10325)));
evalcond[2]=((((-1.0)*r02*x10323))+(((-1.0)*x10321*x10325))+((r01*x10326)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10323))+((x10318*x10319))+(((-1.0)*x10320*x10325)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10318))+((r21*x10324))+(((-1.0)*x10322*x10323)));
evalcond[5]=((((-1.0)*x10321*x10323))+(((-1.0)*cj1*cj2))+((r01*x10324))+((sj1*sj2))+((r02*x10318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10327=((-1.0)*r21);
CheckValue<IkReal> x10330 = IKatan2WithCheck(IkReal(x10327),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10330.valid){
continue;
}
IkReal x10328=((1.0)*(x10330.value));
IkReal x10329=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10328)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10328)));
IkReal gconst4=(x10327*x10329);
IkReal gconst5=((1.0)*r20*x10329);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10331=((-1.0)*r21);
CheckValue<IkReal> x10334 = IKatan2WithCheck(IkReal(x10331),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10334.valid){
continue;
}
IkReal x10332=((1.0)*(x10334.value));
IkReal x10333=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10332)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10332)));
IkReal gconst4=(x10331*x10333);
IkReal gconst5=((1.0)*r20*x10333);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10335=((-1.0)*r21);
CheckValue<IkReal> x10338 = IKatan2WithCheck(IkReal(x10335),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10338.valid){
continue;
}
IkReal x10336=((1.0)*(x10338.value));
IkReal x10337=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10336)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10336)));
IkReal gconst4=(x10335*x10337);
IkReal gconst5=((1.0)*r20*x10337);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10339=(gconst5*r10);
IkReal x10340=(gconst4*r11);
CheckValue<IkReal> x10341=IKPowWithIntegerCheck(IKsign(((x10339*x10339)+(r12*r12)+(x10340*x10340)+(((-2.0)*x10339*x10340)))),-1);
if(!x10341.valid){
continue;
}
CheckValue<IkReal> x10342 = IKatan2WithCheck(IkReal((x10339+(((-1.0)*x10340)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10341.value)))+(x10342.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10343=IKsin(j4);
IkReal x10344=IKcos(j4);
IkReal x10345=(gconst4*r11);
IkReal x10346=(gconst5*r10);
IkReal x10347=(gconst4*r01);
IkReal x10348=(gconst5*r00);
IkReal x10349=(gconst4*r21);
IkReal x10350=(gconst5*r20);
IkReal x10351=((1.0)*x10344);
IkReal x10352=((1.0)*x10343);
evalcond[0]=(((x10343*x10349))+(((-1.0)*r22*x10351))+(((-1.0)*x10350*x10352)));
evalcond[1]=(((x10343*x10347))+(((-1.0)*x10348*x10352))+(((-1.0)*r02*x10351)));
evalcond[2]=(((x10344*x10346))+(((-1.0)*x10345*x10351))+(((-1.0)*r12*x10352)));
evalcond[3]=((1.0)+((x10343*x10345))+(((-1.0)*x10346*x10352))+(((-1.0)*r12*x10351)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10352))+(((-1.0)*x10349*x10351))+((x10344*x10350)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10344*x10348))+(((-1.0)*r02*x10352))+(((-1.0)*x10347*x10351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10353=((1.0)*gconst5);
CheckValue<IkReal> x10354=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10353)))),-1);
if(!x10354.valid){
continue;
}
CheckValue<IkReal> x10355 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10353)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10354.value)))+(x10355.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10356=IKsin(j4);
IkReal x10357=IKcos(j4);
IkReal x10358=(gconst4*r11);
IkReal x10359=(gconst5*r10);
IkReal x10360=(gconst4*r01);
IkReal x10361=(gconst5*r00);
IkReal x10362=(gconst4*r21);
IkReal x10363=(gconst5*r20);
IkReal x10364=((1.0)*x10357);
IkReal x10365=((1.0)*x10356);
evalcond[0]=(((x10356*x10362))+(((-1.0)*x10363*x10365))+(((-1.0)*r22*x10364)));
evalcond[1]=((((-1.0)*x10361*x10365))+(((-1.0)*r02*x10364))+((x10356*x10360)));
evalcond[2]=((((-1.0)*x10358*x10364))+(((-1.0)*r12*x10365))+((x10357*x10359)));
evalcond[3]=((1.0)+(((-1.0)*x10359*x10365))+(((-1.0)*r12*x10364))+((x10356*x10358)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10357*x10363))+(((-1.0)*x10362*x10364))+(((-1.0)*r22*x10365)));
evalcond[5]=((((-1.0)*x10360*x10364))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10365))+((x10357*x10361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10366 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10366.valid){
continue;
}
CheckValue<IkReal> x10367=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10366.value)+(((1.5707963267949)*(x10367.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10368=IKsin(j4);
IkReal x10369=IKcos(j4);
IkReal x10370=(gconst4*r11);
IkReal x10371=(gconst5*r10);
IkReal x10372=(gconst4*r01);
IkReal x10373=(gconst5*r00);
IkReal x10374=(gconst4*r21);
IkReal x10375=(gconst5*r20);
IkReal x10376=((1.0)*x10369);
IkReal x10377=((1.0)*x10368);
evalcond[0]=((((-1.0)*x10375*x10377))+((x10368*x10374))+(((-1.0)*r22*x10376)));
evalcond[1]=((((-1.0)*r02*x10376))+((x10368*x10372))+(((-1.0)*x10373*x10377)));
evalcond[2]=((((-1.0)*r12*x10377))+((x10369*x10371))+(((-1.0)*x10370*x10376)));
evalcond[3]=((1.0)+((x10368*x10370))+(((-1.0)*x10371*x10377))+(((-1.0)*r12*x10376)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10374*x10376))+((cj1*sj2))+((x10369*x10375))+(((-1.0)*r22*x10377)));
evalcond[5]=((((-1.0)*r02*x10377))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10372*x10376))+((x10369*x10373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10378=gconst4*gconst4;
IkReal x10379=gconst5*gconst5;
IkReal x10380=(r10*r21);
IkReal x10381=((1.0)*cj3);
IkReal x10382=(r11*r21);
IkReal x10383=(r11*r20);
IkReal x10384=(r22*sj3);
IkReal x10385=(gconst4*r10);
IkReal x10386=((1.0)*sj3);
IkReal x10387=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10388 = IKatan2WithCheck(IkReal((((gconst5*r11*x10384))+((x10384*x10385)))),IkReal((((sj3*x10378*x10380))+((gconst4*gconst5*sj3*x10382))+(((-1.0)*gconst5*r20*x10385*x10386))+(((-1.0)*x10379*x10383*x10386)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10388.valid){
continue;
}
CheckValue<IkReal> x10389=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10378*x10381*x10382))+(((-1.0)*r12*r22*x10381))+((x10383*x10387))+((x10380*x10387))+(((-1.0)*r10*r20*x10379*x10381)))),-1);
if(!x10389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10388.value)+(((1.5707963267949)*(x10389.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10390=IKsin(j4);
IkReal x10391=IKcos(j4);
IkReal x10392=(sj1*sj2);
IkReal x10393=(gconst5*sj3);
IkReal x10394=(cj3*gconst5);
IkReal x10395=(gconst4*r11);
IkReal x10396=((1.0)*cj1);
IkReal x10397=(gconst4*r01);
IkReal x10398=(cj2*sj1);
IkReal x10399=(gconst4*r21);
IkReal x10400=(gconst4*sj3);
IkReal x10401=(cj3*gconst4);
IkReal x10402=(cj2*x10396);
IkReal x10403=((1.0)*x10391);
IkReal x10404=((1.0)*x10390);
IkReal x10405=(cj3*x10390);
IkReal x10406=(cj3*x10391);
evalcond[0]=((((-1.0)*gconst5*r20*x10404))+(((-1.0)*r22*x10403))+((x10390*x10399)));
evalcond[1]=(((x10390*x10397))+(((-1.0)*r02*x10403))+(((-1.0)*gconst5*r00*x10404)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10404))+(((-1.0)*r12*x10403))+((x10390*x10395)));
evalcond[3]=(((r11*x10393))+(((-1.0)*r10*x10394*x10403))+((x10395*x10406))+((r12*x10405))+((r10*x10400)));
evalcond[4]=(((r11*x10394))+((r10*x10391*x10393))+(((-1.0)*sj3*x10395*x10403))+(((-1.0)*r12*sj3*x10404))+((r10*x10401)));
evalcond[5]=(((r22*x10405))+((x10399*x10406))+((r21*x10393))+((cj1*sj2))+x10398+((r20*x10400))+(((-1.0)*r20*x10394*x10403)));
evalcond[6]=(((r01*x10393))+(((-1.0)*r00*x10394*x10403))+((r00*x10400))+((r02*x10405))+(((-1.0)*x10402))+x10392+((x10397*x10406)));
evalcond[7]=((((-1.0)*r22*sj3*x10404))+((r21*x10394))+(((-1.0)*x10402))+x10392+((r20*x10401))+((r20*x10391*x10393))+(((-1.0)*sj3*x10399*x10403)));
evalcond[8]=(((r01*x10394))+((r00*x10401))+(((-1.0)*sj3*x10397*x10403))+((r00*x10391*x10393))+(((-1.0)*x10398))+(((-1.0)*sj2*x10396))+(((-1.0)*r02*sj3*x10404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10407=((1.0)*gconst5);
CheckValue<IkReal> x10408 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10407))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10408.valid){
continue;
}
CheckValue<IkReal> x10409=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10407)))),-1);
if(!x10409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10408.value)+(((1.5707963267949)*(x10409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10410=IKsin(j4);
IkReal x10411=IKcos(j4);
IkReal x10412=(sj1*sj2);
IkReal x10413=(gconst5*sj3);
IkReal x10414=(cj3*gconst5);
IkReal x10415=(gconst4*r11);
IkReal x10416=((1.0)*cj1);
IkReal x10417=(gconst4*r01);
IkReal x10418=(cj2*sj1);
IkReal x10419=(gconst4*r21);
IkReal x10420=(gconst4*sj3);
IkReal x10421=(cj3*gconst4);
IkReal x10422=(cj2*x10416);
IkReal x10423=((1.0)*x10411);
IkReal x10424=((1.0)*x10410);
IkReal x10425=(cj3*x10410);
IkReal x10426=(cj3*x10411);
evalcond[0]=(((x10410*x10419))+(((-1.0)*gconst5*r20*x10424))+(((-1.0)*r22*x10423)));
evalcond[1]=((((-1.0)*gconst5*r00*x10424))+((x10410*x10417))+(((-1.0)*r02*x10423)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10424))+((x10410*x10415))+(((-1.0)*r12*x10423)));
evalcond[3]=((((-1.0)*r10*x10414*x10423))+((x10415*x10426))+((r12*x10425))+((r11*x10413))+((r10*x10420)));
evalcond[4]=(((r10*x10411*x10413))+(((-1.0)*r12*sj3*x10424))+(((-1.0)*sj3*x10415*x10423))+((r11*x10414))+((r10*x10421)));
evalcond[5]=(((r21*x10413))+(((-1.0)*r20*x10414*x10423))+((cj1*sj2))+((r22*x10425))+((x10419*x10426))+x10418+((r20*x10420)));
evalcond[6]=(((r00*x10420))+((x10417*x10426))+((r01*x10413))+((r02*x10425))+(((-1.0)*x10422))+x10412+(((-1.0)*r00*x10414*x10423)));
evalcond[7]=(((r21*x10414))+((r20*x10411*x10413))+(((-1.0)*x10422))+(((-1.0)*sj3*x10419*x10423))+x10412+((r20*x10421))+(((-1.0)*r22*sj3*x10424)));
evalcond[8]=(((r00*x10421))+((r00*x10411*x10413))+(((-1.0)*sj3*x10417*x10423))+((r01*x10414))+(((-1.0)*sj2*x10416))+(((-1.0)*x10418))+(((-1.0)*r02*sj3*x10424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10427 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10427.valid){
continue;
}
CheckValue<IkReal> x10428=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10427.value)+(((1.5707963267949)*(x10428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10429=IKsin(j4);
IkReal x10430=IKcos(j4);
IkReal x10431=(sj1*sj2);
IkReal x10432=(gconst5*sj3);
IkReal x10433=(cj3*gconst5);
IkReal x10434=(gconst4*r11);
IkReal x10435=((1.0)*cj1);
IkReal x10436=(gconst4*r01);
IkReal x10437=(cj2*sj1);
IkReal x10438=(gconst4*r21);
IkReal x10439=(gconst4*sj3);
IkReal x10440=(cj3*gconst4);
IkReal x10441=(cj2*x10435);
IkReal x10442=((1.0)*x10430);
IkReal x10443=((1.0)*x10429);
IkReal x10444=(cj3*x10429);
IkReal x10445=(cj3*x10430);
evalcond[0]=((((-1.0)*gconst5*r20*x10443))+(((-1.0)*r22*x10442))+((x10429*x10438)));
evalcond[1]=((((-1.0)*r02*x10442))+(((-1.0)*gconst5*r00*x10443))+((x10429*x10436)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10442))+((x10429*x10434))+(((-1.0)*gconst5*r10*x10443)));
evalcond[3]=(((x10434*x10445))+((r12*x10444))+((r10*x10439))+((r11*x10432))+(((-1.0)*r10*x10433*x10442)));
evalcond[4]=((((-1.0)*sj3*x10434*x10442))+(((-1.0)*r12*sj3*x10443))+((r10*x10430*x10432))+((r11*x10433))+((r10*x10440)));
evalcond[5]=(((r22*x10444))+(((-1.0)*r20*x10433*x10442))+((cj1*sj2))+((x10438*x10445))+x10437+((r20*x10439))+((r21*x10432)));
evalcond[6]=(((r01*x10432))+((x10436*x10445))+(((-1.0)*x10441))+((r02*x10444))+x10431+(((-1.0)*r00*x10433*x10442))+((r00*x10439)));
evalcond[7]=((((-1.0)*r22*sj3*x10443))+(((-1.0)*sj3*x10438*x10442))+((r20*x10430*x10432))+(((-1.0)*x10441))+((r20*x10440))+x10431+((r21*x10433)));
evalcond[8]=((((-1.0)*sj3*x10436*x10442))+((r01*x10433))+(((-1.0)*r02*sj3*x10443))+(((-1.0)*sj2*x10435))+((r00*x10440))+(((-1.0)*x10437))+((r00*x10430*x10432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10446=((-1.0)*r21);
CheckValue<IkReal> x10449 = IKatan2WithCheck(IkReal(x10446),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10449.valid){
continue;
}
IkReal x10447=((1.0)*(x10449.value));
IkReal x10448=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10447)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10447)));
IkReal gconst4=(x10446*x10448);
IkReal gconst5=((1.0)*r20*x10448);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10450=((-1.0)*r21);
CheckValue<IkReal> x10453 = IKatan2WithCheck(IkReal(x10450),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10453.valid){
continue;
}
IkReal x10451=((1.0)*(x10453.value));
IkReal x10452=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10451)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10451)));
IkReal gconst4=(x10450*x10452);
IkReal gconst5=((1.0)*r20*x10452);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10454=((-1.0)*r21);
CheckValue<IkReal> x10457 = IKatan2WithCheck(IkReal(x10454),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10457.valid){
continue;
}
IkReal x10455=((1.0)*(x10457.value));
IkReal x10456=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10455)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10455)));
IkReal gconst4=(x10454*x10456);
IkReal gconst5=((1.0)*r20*x10456);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10458=((-1.0)*r21);
CheckValue<IkReal> x10461 = IKatan2WithCheck(IkReal(x10458),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10461.valid){
continue;
}
IkReal x10459=((1.0)*(x10461.value));
IkReal x10460=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10459)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10459)));
IkReal gconst4=(x10458*x10460);
IkReal gconst5=((1.0)*r20*x10460);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10462=((-1.0)*r21);
CheckValue<IkReal> x10465 = IKatan2WithCheck(IkReal(x10462),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10465.valid){
continue;
}
IkReal x10463=((1.0)*(x10465.value));
IkReal x10464=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10463)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10463)));
IkReal gconst4=(x10462*x10464);
IkReal gconst5=((1.0)*r20*x10464);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10466=((-1.0)*r21);
CheckValue<IkReal> x10469 = IKatan2WithCheck(IkReal(x10466),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10469.valid){
continue;
}
IkReal x10467=((1.0)*(x10469.value));
IkReal x10468=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10467)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10467)));
IkReal gconst4=(x10466*x10468);
IkReal gconst5=((1.0)*r20*x10468);
IkReal x10470=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10474=IKPowWithIntegerCheck(x10470,-1);
if(!x10474.valid){
continue;
}
IkReal x10471=x10474.value;
IkReal x10472=((1.0)*x10471);
IkReal x10473=((((-1.0)*(r12*r12)))+(((-1.0)*x10472*(r11*r11)*(r21*r21)))+(((-1.0)*x10472*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10471)));
j4eval[0]=x10473;
j4eval[1]=r12;
j4eval[2]=x10470;
j4eval[3]=IKsign(x10473);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10475=(gconst5*r10);
IkReal x10476=(gconst4*r11);
CheckValue<IkReal> x10477=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10476*x10476)))+(((2.0)*x10475*x10476))+(((-1.0)*(x10475*x10475)))+(((-1.0)*(r12*r12))))),-1);
if(!x10477.valid){
continue;
}
CheckValue<IkReal> x10478 = IKatan2WithCheck(IkReal(((((-1.0)*x10476))+x10475)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10477.value)))+(x10478.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10479=IKsin(j4);
IkReal x10480=IKcos(j4);
IkReal x10481=(gconst4*r11);
IkReal x10482=(gconst5*r10);
IkReal x10483=(gconst4*r01);
IkReal x10484=(gconst5*r00);
IkReal x10485=(gconst4*r21);
IkReal x10486=(gconst5*r20);
IkReal x10487=((1.0)*x10480);
IkReal x10488=((1.0)*x10479);
evalcond[0]=(((x10479*x10485))+(((-1.0)*r22*x10487))+(((-1.0)*x10486*x10488)));
evalcond[1]=(((x10479*x10483))+(((-1.0)*x10484*x10488))+(((-1.0)*r02*x10487)));
evalcond[2]=((((-1.0)*x10481*x10487))+((x10480*x10482))+(((-1.0)*r12*x10488)));
evalcond[3]=((-1.0)+((x10479*x10481))+(((-1.0)*r12*x10487))+(((-1.0)*x10482*x10488)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10480*x10484))+(((-1.0)*r02*x10488))+(((-1.0)*x10483*x10487)));
evalcond[5]=((((-1.0)*r22*x10488))+(((-1.0)*x10485*x10487))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10480*x10486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10489=((1.0)*gconst5);
CheckValue<IkReal> x10490=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10489))+(((-1.0)*gconst4*r20)))),-1);
if(!x10490.valid){
continue;
}
CheckValue<IkReal> x10491 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10489)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10490.value)))+(x10491.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10492=IKsin(j4);
IkReal x10493=IKcos(j4);
IkReal x10494=(gconst4*r11);
IkReal x10495=(gconst5*r10);
IkReal x10496=(gconst4*r01);
IkReal x10497=(gconst5*r00);
IkReal x10498=(gconst4*r21);
IkReal x10499=(gconst5*r20);
IkReal x10500=((1.0)*x10493);
IkReal x10501=((1.0)*x10492);
evalcond[0]=((((-1.0)*r22*x10500))+((x10492*x10498))+(((-1.0)*x10499*x10501)));
evalcond[1]=((((-1.0)*x10497*x10501))+(((-1.0)*r02*x10500))+((x10492*x10496)));
evalcond[2]=((((-1.0)*r12*x10501))+((x10493*x10495))+(((-1.0)*x10494*x10500)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10500))+(((-1.0)*x10495*x10501))+((x10492*x10494)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10496*x10500))+((cj1*sj2))+((x10493*x10497))+(((-1.0)*r02*x10501)));
evalcond[5]=((((-1.0)*r22*x10501))+(((-1.0)*x10498*x10500))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10493*x10499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10502=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10502.valid){
continue;
}
CheckValue<IkReal> x10503 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10502.value)))+(x10503.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10504=IKsin(j4);
IkReal x10505=IKcos(j4);
IkReal x10506=(gconst4*r11);
IkReal x10507=(gconst5*r10);
IkReal x10508=(gconst4*r01);
IkReal x10509=(gconst5*r00);
IkReal x10510=(gconst4*r21);
IkReal x10511=(gconst5*r20);
IkReal x10512=((1.0)*x10505);
IkReal x10513=((1.0)*x10504);
evalcond[0]=((((-1.0)*x10511*x10513))+(((-1.0)*r22*x10512))+((x10504*x10510)));
evalcond[1]=((((-1.0)*r02*x10512))+((x10504*x10508))+(((-1.0)*x10509*x10513)));
evalcond[2]=(((x10505*x10507))+(((-1.0)*r12*x10513))+(((-1.0)*x10506*x10512)));
evalcond[3]=((-1.0)+((x10504*x10506))+(((-1.0)*r12*x10512))+(((-1.0)*x10507*x10513)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x10513))+((cj1*sj2))+(((-1.0)*x10508*x10512))+((x10505*x10509)));
evalcond[5]=((((-1.0)*x10510*x10512))+(((-1.0)*r22*x10513))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10505*x10511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10514=((-1.0)*r21);
CheckValue<IkReal> x10517 = IKatan2WithCheck(IkReal(x10514),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10517.valid){
continue;
}
IkReal x10515=((1.0)*(x10517.value));
IkReal x10516=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10515)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10515)));
IkReal gconst4=(x10514*x10516);
IkReal gconst5=((1.0)*r20*x10516);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10518=((-1.0)*r21);
CheckValue<IkReal> x10521 = IKatan2WithCheck(IkReal(x10518),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10521.valid){
continue;
}
IkReal x10519=((1.0)*(x10521.value));
IkReal x10520=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10519)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10519)));
IkReal gconst4=(x10518*x10520);
IkReal gconst5=((1.0)*r20*x10520);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10522=((-1.0)*r21);
CheckValue<IkReal> x10525 = IKatan2WithCheck(IkReal(x10522),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10525.valid){
continue;
}
IkReal x10523=((1.0)*(x10525.value));
IkReal x10524=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10523)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10523)));
IkReal gconst4=(x10522*x10524);
IkReal gconst5=((1.0)*r20*x10524);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10526=(gconst5*r10);
IkReal x10527=(gconst4*r11);
CheckValue<IkReal> x10528 = IKatan2WithCheck(IkReal(((((-1.0)*x10526))+x10527)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10528.valid){
continue;
}
CheckValue<IkReal> x10529=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10526*x10527))+(x10527*x10527)+(x10526*x10526))),-1);
if(!x10529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10528.value)+(((1.5707963267949)*(x10529.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10530=IKcos(j4);
IkReal x10531=IKsin(j4);
IkReal x10532=(gconst4*r11);
IkReal x10533=(gconst5*r10);
IkReal x10534=(gconst5*r00);
IkReal x10535=(gconst5*r20);
IkReal x10536=((1.0)*x10530);
IkReal x10537=(gconst4*x10530);
IkReal x10538=((1.0)*x10531);
IkReal x10539=(gconst4*x10531);
evalcond[0]=(((x10530*x10532))+((r12*x10531))+(((-1.0)*x10533*x10536)));
evalcond[1]=((((-1.0)*r22*x10536))+((r21*x10539))+(((-1.0)*x10535*x10538)));
evalcond[2]=((((-1.0)*r02*x10536))+((r01*x10539))+(((-1.0)*x10534*x10538)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10536))+((x10531*x10532))+(((-1.0)*x10533*x10538)));
evalcond[4]=(((cj2*sj1))+((r02*x10531))+((cj1*sj2))+((r01*x10537))+(((-1.0)*x10534*x10536)));
evalcond[5]=(((r22*x10531))+((r21*x10537))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10535*x10536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10540=((1.0)*gconst5);
CheckValue<IkReal> x10541 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10540))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10541.valid){
continue;
}
CheckValue<IkReal> x10542=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r20))+(((-1.0)*r21*x10540)))),-1);
if(!x10542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10541.value)+(((1.5707963267949)*(x10542.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10543=IKcos(j4);
IkReal x10544=IKsin(j4);
IkReal x10545=(gconst4*r11);
IkReal x10546=(gconst5*r10);
IkReal x10547=(gconst5*r00);
IkReal x10548=(gconst5*r20);
IkReal x10549=((1.0)*x10543);
IkReal x10550=(gconst4*x10543);
IkReal x10551=((1.0)*x10544);
IkReal x10552=(gconst4*x10544);
evalcond[0]=(((r12*x10544))+(((-1.0)*x10546*x10549))+((x10543*x10545)));
evalcond[1]=((((-1.0)*r22*x10549))+((r21*x10552))+(((-1.0)*x10548*x10551)));
evalcond[2]=((((-1.0)*x10547*x10551))+(((-1.0)*r02*x10549))+((r01*x10552)));
evalcond[3]=((-1.0)+(((-1.0)*x10546*x10551))+(((-1.0)*r12*x10549))+((x10544*x10545)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10547*x10549))+((r02*x10544))+((r01*x10550)));
evalcond[5]=(((r22*x10544))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10550))+(((-1.0)*x10548*x10549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10553=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10553.valid){
continue;
}
CheckValue<IkReal> x10554 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10553.value)))+(x10554.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10555=IKcos(j4);
IkReal x10556=IKsin(j4);
IkReal x10557=(gconst4*r11);
IkReal x10558=(gconst5*r10);
IkReal x10559=(gconst5*r00);
IkReal x10560=(gconst5*r20);
IkReal x10561=((1.0)*x10555);
IkReal x10562=(gconst4*x10555);
IkReal x10563=((1.0)*x10556);
IkReal x10564=(gconst4*x10556);
evalcond[0]=((((-1.0)*x10558*x10561))+((r12*x10556))+((x10555*x10557)));
evalcond[1]=((((-1.0)*r22*x10561))+(((-1.0)*x10560*x10563))+((r21*x10564)));
evalcond[2]=(((r01*x10564))+(((-1.0)*x10559*x10563))+(((-1.0)*r02*x10561)));
evalcond[3]=((-1.0)+(((-1.0)*x10558*x10563))+(((-1.0)*r12*x10561))+((x10556*x10557)));
evalcond[4]=(((r01*x10562))+((cj2*sj1))+((r02*x10556))+((cj1*sj2))+(((-1.0)*x10559*x10561)));
evalcond[5]=(((r22*x10556))+(((-1.0)*x10560*x10561))+((r21*x10562))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10565=((-1.0)*r21);
CheckValue<IkReal> x10568 = IKatan2WithCheck(IkReal(x10565),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10568.valid){
continue;
}
IkReal x10566=((1.0)*(x10568.value));
IkReal x10567=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10566)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10566)));
IkReal gconst4=(x10565*x10567);
IkReal gconst5=((1.0)*r20*x10567);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10569=((-1.0)*r21);
CheckValue<IkReal> x10572 = IKatan2WithCheck(IkReal(x10569),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10572.valid){
continue;
}
IkReal x10570=((1.0)*(x10572.value));
IkReal x10571=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10570)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10570)));
IkReal gconst4=(x10569*x10571);
IkReal gconst5=((1.0)*r20*x10571);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10573=((-1.0)*r21);
CheckValue<IkReal> x10576 = IKatan2WithCheck(IkReal(x10573),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10576.valid){
continue;
}
IkReal x10574=((1.0)*(x10576.value));
IkReal x10575=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10574)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10574)));
IkReal gconst4=(x10573*x10575);
IkReal gconst5=((1.0)*r20*x10575);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10577=(gconst5*r10);
IkReal x10578=(gconst4*r11);
CheckValue<IkReal> x10579=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10577*x10578))+(r12*r12)+(x10577*x10577)+(x10578*x10578))),-1);
if(!x10579.valid){
continue;
}
CheckValue<IkReal> x10580 = IKatan2WithCheck(IkReal(((((-1.0)*x10577))+x10578)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10579.value)))+(x10580.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10581=IKcos(j4);
IkReal x10582=IKsin(j4);
IkReal x10583=(gconst5*r10);
IkReal x10584=(gconst5*r00);
IkReal x10585=(gconst5*r20);
IkReal x10586=((1.0)*x10581);
IkReal x10587=(gconst4*x10582);
IkReal x10588=(gconst4*x10581);
IkReal x10589=((1.0)*x10582);
evalcond[0]=(((r12*x10582))+((r11*x10588))+(((-1.0)*x10583*x10586)));
evalcond[1]=((((-1.0)*r22*x10586))+((r21*x10587))+(((-1.0)*x10585*x10589)));
evalcond[2]=((((-1.0)*r02*x10586))+(((-1.0)*x10584*x10589))+((r01*x10587)));
evalcond[3]=((-1.0)+((r11*x10587))+(((-1.0)*r12*x10586))+(((-1.0)*x10583*x10589)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x10588))+((r22*x10582))+(((-1.0)*x10585*x10586)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x10582))+((cj1*cj2))+(((-1.0)*x10584*x10586))+((r01*x10588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10590=((1.0)*gconst5);
CheckValue<IkReal> x10591 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10590)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10591.valid){
continue;
}
CheckValue<IkReal> x10592=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10590))+(((-1.0)*gconst4*r20)))),-1);
if(!x10592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10591.value)+(((1.5707963267949)*(x10592.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10593=IKcos(j4);
IkReal x10594=IKsin(j4);
IkReal x10595=(gconst5*r10);
IkReal x10596=(gconst5*r00);
IkReal x10597=(gconst5*r20);
IkReal x10598=((1.0)*x10593);
IkReal x10599=(gconst4*x10594);
IkReal x10600=(gconst4*x10593);
IkReal x10601=((1.0)*x10594);
evalcond[0]=(((r11*x10600))+((r12*x10594))+(((-1.0)*x10595*x10598)));
evalcond[1]=(((r21*x10599))+(((-1.0)*r22*x10598))+(((-1.0)*x10597*x10601)));
evalcond[2]=((((-1.0)*r02*x10598))+((r01*x10599))+(((-1.0)*x10596*x10601)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10598))+((r11*x10599))+(((-1.0)*x10595*x10601)));
evalcond[4]=(((cj2*sj1))+((r21*x10600))+(((-1.0)*x10597*x10598))+((cj1*sj2))+((r22*x10594)));
evalcond[5]=(((r01*x10600))+(((-1.0)*x10596*x10598))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r02*x10594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10602=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10602.valid){
continue;
}
CheckValue<IkReal> x10603 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10602.value)))+(x10603.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10604=IKcos(j4);
IkReal x10605=IKsin(j4);
IkReal x10606=(gconst5*r10);
IkReal x10607=(gconst5*r00);
IkReal x10608=(gconst5*r20);
IkReal x10609=((1.0)*x10604);
IkReal x10610=(gconst4*x10605);
IkReal x10611=(gconst4*x10604);
IkReal x10612=((1.0)*x10605);
evalcond[0]=(((r12*x10605))+(((-1.0)*x10606*x10609))+((r11*x10611)));
evalcond[1]=((((-1.0)*x10608*x10612))+(((-1.0)*r22*x10609))+((r21*x10610)));
evalcond[2]=(((r01*x10610))+(((-1.0)*x10607*x10612))+(((-1.0)*r02*x10609)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10609))+(((-1.0)*x10606*x10612))+((r11*x10610)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10608*x10609))+((r22*x10605))+((r21*x10611)));
evalcond[5]=(((r02*x10605))+(((-1.0)*x10607*x10609))+(((-1.0)*sj1*sj2))+((r01*x10611))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10613=((-1.0)*r21);
CheckValue<IkReal> x10616 = IKatan2WithCheck(IkReal(x10613),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10616.valid){
continue;
}
IkReal x10614=((1.0)*(x10616.value));
IkReal x10615=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10614)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10614)));
IkReal gconst4=(x10613*x10615);
IkReal gconst5=((1.0)*r20*x10615);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10617=((-1.0)*r21);
CheckValue<IkReal> x10620 = IKatan2WithCheck(IkReal(x10617),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10620.valid){
continue;
}
IkReal x10618=((1.0)*(x10620.value));
IkReal x10619=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10618)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10618)));
IkReal gconst4=(x10617*x10619);
IkReal gconst5=((1.0)*r20*x10619);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10621=((-1.0)*r21);
CheckValue<IkReal> x10624 = IKatan2WithCheck(IkReal(x10621),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10624.valid){
continue;
}
IkReal x10622=((1.0)*(x10624.value));
IkReal x10623=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10622)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10622)));
IkReal gconst4=(x10621*x10623);
IkReal gconst5=((1.0)*r20*x10623);
IkReal x10625=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10629=IKPowWithIntegerCheck(x10625,-1);
if(!x10629.valid){
continue;
}
IkReal x10626=x10629.value;
IkReal x10627=((1.0)*x10626);
IkReal x10628=((((-1.0)*x10627*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10626))+(((-1.0)*(r12*r12)))+(((-1.0)*x10627*(r11*r11)*(r21*r21))));
j4eval[0]=x10628;
j4eval[1]=r12;
j4eval[2]=x10625;
j4eval[3]=IKsign(x10628);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10630=(gconst5*r10);
IkReal x10631=(gconst4*r11);
CheckValue<IkReal> x10632=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10631*x10631)))+(((2.0)*x10630*x10631))+(((-1.0)*(x10630*x10630)))+(((-1.0)*(r12*r12))))),-1);
if(!x10632.valid){
continue;
}
CheckValue<IkReal> x10633 = IKatan2WithCheck(IkReal(((((-1.0)*x10631))+x10630)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10632.value)))+(x10633.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10634=IKsin(j4);
IkReal x10635=IKcos(j4);
IkReal x10636=(gconst4*r11);
IkReal x10637=(gconst5*r10);
IkReal x10638=(gconst5*r00);
IkReal x10639=(gconst5*r20);
IkReal x10640=((1.0)*x10635);
IkReal x10641=(gconst4*x10634);
IkReal x10642=((1.0)*x10634);
evalcond[0]=(((r21*x10641))+(((-1.0)*x10639*x10642))+(((-1.0)*r22*x10640)));
evalcond[1]=((((-1.0)*x10638*x10642))+(((-1.0)*r02*x10640))+((r01*x10641)));
evalcond[2]=((((-1.0)*x10636*x10640))+((x10635*x10637))+(((-1.0)*r12*x10642)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10640))+((x10634*x10636))+(((-1.0)*x10637*x10642)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10642))+((x10635*x10639))+(((-1.0)*gconst4*r21*x10640)));
evalcond[5]=((((-1.0)*r02*x10642))+(((-1.0)*sj1*sj2))+((x10635*x10638))+(((-1.0)*gconst4*r01*x10640))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10643=((1.0)*gconst5);
CheckValue<IkReal> x10644=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10643))+(((-1.0)*gconst4*r20)))),-1);
if(!x10644.valid){
continue;
}
CheckValue<IkReal> x10645 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10643))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10644.value)))+(x10645.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10646=IKsin(j4);
IkReal x10647=IKcos(j4);
IkReal x10648=(gconst4*r11);
IkReal x10649=(gconst5*r10);
IkReal x10650=(gconst5*r00);
IkReal x10651=(gconst5*r20);
IkReal x10652=((1.0)*x10647);
IkReal x10653=(gconst4*x10646);
IkReal x10654=((1.0)*x10646);
evalcond[0]=((((-1.0)*r22*x10652))+((r21*x10653))+(((-1.0)*x10651*x10654)));
evalcond[1]=((((-1.0)*r02*x10652))+(((-1.0)*x10650*x10654))+((r01*x10653)));
evalcond[2]=((((-1.0)*r12*x10654))+((x10647*x10649))+(((-1.0)*x10648*x10652)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10652))+((x10646*x10648))+(((-1.0)*x10649*x10654)));
evalcond[4]=((((-1.0)*gconst4*r21*x10652))+((cj2*sj1))+(((-1.0)*r22*x10654))+((cj1*sj2))+((x10647*x10651)));
evalcond[5]=(((x10647*x10650))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x10654))+(((-1.0)*gconst4*r01*x10652))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10655=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10655.valid){
continue;
}
CheckValue<IkReal> x10656 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10655.value)))+(x10656.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10657=IKsin(j4);
IkReal x10658=IKcos(j4);
IkReal x10659=(gconst4*r11);
IkReal x10660=(gconst5*r10);
IkReal x10661=(gconst5*r00);
IkReal x10662=(gconst5*r20);
IkReal x10663=((1.0)*x10658);
IkReal x10664=(gconst4*x10657);
IkReal x10665=((1.0)*x10657);
evalcond[0]=((((-1.0)*r22*x10663))+(((-1.0)*x10662*x10665))+((r21*x10664)));
evalcond[1]=((((-1.0)*x10661*x10665))+(((-1.0)*r02*x10663))+((r01*x10664)));
evalcond[2]=(((x10658*x10660))+(((-1.0)*x10659*x10663))+(((-1.0)*r12*x10665)));
evalcond[3]=((-1.0)+((x10657*x10659))+(((-1.0)*x10660*x10665))+(((-1.0)*r12*x10663)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10658*x10662))+(((-1.0)*gconst4*r21*x10663))+(((-1.0)*r22*x10665)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x10658*x10661))+(((-1.0)*r02*x10665))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10666=((-1.0)*r21);
IkReal x10667=((-1.0)*px);
CheckValue<IkReal> x10669 = IKatan2WithCheck(IkReal(x10666),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10669.valid){
continue;
}
IkReal x10668=((1.0)*(x10669.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10668)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10667);
rxp1_1=(px*r21);
rxp1_2=(r11*x10667);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10668)));
IkReal gconst4=x10666;
IkReal gconst5=((1.0)*r20);
IkReal x10670=((1.0)*cj3);
IkReal x10671=(r10*r20);
IkReal x10672=(r11*r21);
j4eval[0]=((((-1.0)*x10672))+(((-1.0)*x10671)));
j4eval[1]=((((-1.0)*x10670*x10672))+(((-1.0)*x10670*x10671)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10673=((-1.0)*r21);
IkReal x10674=((-1.0)*px);
CheckValue<IkReal> x10676 = IKatan2WithCheck(IkReal(x10673),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10676.valid){
continue;
}
IkReal x10675=((1.0)*(x10676.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10675)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10674);
rxp1_1=(px*r21);
rxp1_2=(r11*x10674);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10675)));
IkReal gconst4=x10673;
IkReal gconst5=((1.0)*r20);
IkReal x10677=((1.0)*r11*r21);
IkReal x10678=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10678))+(((-1.0)*x10677)));
j4eval[1]=(((sj3*x10678))+((sj3*x10677)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10679=((-1.0)*r21);
IkReal x10680=((-1.0)*px);
CheckValue<IkReal> x10682 = IKatan2WithCheck(IkReal(x10679),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10682.valid){
continue;
}
IkReal x10681=((1.0)*(x10682.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10681)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10680);
rxp1_1=(px*r21);
rxp1_2=(r11*x10680);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10681)));
IkReal gconst4=x10679;
IkReal gconst5=((1.0)*r20);
IkReal x10683=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r20*x10683))+(((-1.0)*r11*r21*x10683)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10684=((1.0)*r10);
CheckValue<IkReal> x10685=IKPowWithIntegerCheck(cj3,-1);
if(!x10685.valid){
continue;
}
CheckValue<IkReal> x10686=IKPowWithIntegerCheck(r02,-1);
if(!x10686.valid){
continue;
}
CheckValue<IkReal> x10687=IKPowWithIntegerCheck((((cj3*gconst4*r11))+(((-1.0)*cj3*gconst5*x10684))),-1);
if(!x10687.valid){
continue;
}
if( IKabs(((x10685.value)*(x10686.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10687.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10684)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10685.value)*(x10686.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10687.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10684))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10685.value)*(x10686.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10687.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10684))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10688=IKsin(j4);
IkReal x10689=IKcos(j4);
IkReal x10690=(cj2*sj1);
IkReal x10691=(cj1*sj2);
IkReal x10692=(gconst5*sj3);
IkReal x10693=(gconst4*r11);
IkReal x10694=(sj1*sj2);
IkReal x10695=((1.0)*gconst5);
IkReal x10696=(cj1*cj2);
IkReal x10697=(gconst4*r21);
IkReal x10698=(cj3*gconst4);
IkReal x10699=(gconst4*sj3);
IkReal x10700=(cj3*gconst5);
IkReal x10701=(r20*x10689);
IkReal x10702=(r10*x10689);
IkReal x10703=(cj3*x10689);
IkReal x10704=(r02*x10688);
IkReal x10705=(x10691+x10690);
IkReal x10706=((1.0)*sj3*x10689);
evalcond[0]=((-1.0)*r02*x10689);
evalcond[1]=((((-1.0)*r20*x10688*x10695))+((x10688*x10697)));
evalcond[2]=(((cj3*x10704))+(((-1.0)*x10694))+x10696);
evalcond[3]=(x10705+(((-1.0)*sj3*x10704)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x10688*x10695))+((x10688*x10693)));
evalcond[5]=(((r10*x10699))+(((-1.0)*cj3*x10695*x10702))+((r11*x10692))+((x10693*x10703)));
evalcond[6]=(((r10*x10698))+((x10692*x10702))+((r11*x10700))+(((-1.0)*x10693*x10706)));
evalcond[7]=(((r21*x10692))+(((-1.0)*cj3*x10695*x10701))+((x10697*x10703))+x10705+((r20*x10699)));
evalcond[8]=(((x10692*x10701))+(((-1.0)*x10696))+(((-1.0)*x10697*x10706))+((r21*x10700))+x10694+((r20*x10698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10707=((1.0)*gconst5);
IkReal x10708=(gconst4*r11);
CheckValue<IkReal> x10709=IKPowWithIntegerCheck(((((-1.0)*r10*x10707))+x10708),-1);
if(!x10709.valid){
continue;
}
CheckValue<IkReal> x10710=IKPowWithIntegerCheck(((((-1.0)*sj3*x10708))+((gconst5*r10*sj3))),-1);
if(!x10710.valid){
continue;
}
if( IKabs(x10709.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10710.value)*(((((-1.0)*cj3*r11*x10707))+(((-1.0)*cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10709.value)+IKsqr(((x10710.value)*(((((-1.0)*cj3*r11*x10707))+(((-1.0)*cj3*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10709.value, ((x10710.value)*(((((-1.0)*cj3*r11*x10707))+(((-1.0)*cj3*gconst4*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10711=IKsin(j4);
IkReal x10712=IKcos(j4);
IkReal x10713=(cj2*sj1);
IkReal x10714=(cj1*sj2);
IkReal x10715=(gconst5*sj3);
IkReal x10716=(gconst4*r11);
IkReal x10717=(sj1*sj2);
IkReal x10718=((1.0)*gconst5);
IkReal x10719=(cj1*cj2);
IkReal x10720=(gconst4*r21);
IkReal x10721=(cj3*gconst4);
IkReal x10722=(gconst4*sj3);
IkReal x10723=(cj3*gconst5);
IkReal x10724=(r20*x10712);
IkReal x10725=(r10*x10712);
IkReal x10726=(cj3*x10712);
IkReal x10727=(r02*x10711);
IkReal x10728=(x10714+x10713);
IkReal x10729=((1.0)*sj3*x10712);
evalcond[0]=((-1.0)*r02*x10712);
evalcond[1]=((((-1.0)*r20*x10711*x10718))+((x10711*x10720)));
evalcond[2]=((((-1.0)*x10717))+x10719+((cj3*x10727)));
evalcond[3]=(x10728+(((-1.0)*sj3*x10727)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x10711*x10718))+((x10711*x10716)));
evalcond[5]=(((r10*x10722))+((x10716*x10726))+((r11*x10715))+(((-1.0)*cj3*x10718*x10725)));
evalcond[6]=((((-1.0)*x10716*x10729))+((r10*x10721))+((x10715*x10725))+((r11*x10723)));
evalcond[7]=(((x10720*x10726))+((r21*x10715))+((r20*x10722))+(((-1.0)*cj3*x10718*x10724))+x10728);
evalcond[8]=((((-1.0)*x10719))+((x10715*x10724))+((r21*x10723))+(((-1.0)*x10720*x10729))+((r20*x10721))+x10717);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10730=((1.0)*sj3);
IkReal x10731=(gconst4*r11);
IkReal x10732=((1.0)*gconst5*r10);
CheckValue<IkReal> x10733=IKPowWithIntegerCheck(((((-1.0)*x10732))+x10731),-1);
if(!x10733.valid){
continue;
}
CheckValue<IkReal> x10734=IKPowWithIntegerCheck(((((-1.0)*cj3*x10732))+((cj3*x10731))),-1);
if(!x10734.valid){
continue;
}
if( IKabs(x10733.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10734.value)*(((((-1.0)*gconst4*r10*x10730))+(((-1.0)*gconst5*r11*x10730)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10733.value)+IKsqr(((x10734.value)*(((((-1.0)*gconst4*r10*x10730))+(((-1.0)*gconst5*r11*x10730))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10733.value, ((x10734.value)*(((((-1.0)*gconst4*r10*x10730))+(((-1.0)*gconst5*r11*x10730))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10735=IKsin(j4);
IkReal x10736=IKcos(j4);
IkReal x10737=(cj2*sj1);
IkReal x10738=(cj1*sj2);
IkReal x10739=(gconst5*sj3);
IkReal x10740=(gconst4*r11);
IkReal x10741=(sj1*sj2);
IkReal x10742=((1.0)*gconst5);
IkReal x10743=(cj1*cj2);
IkReal x10744=(gconst4*r21);
IkReal x10745=(cj3*gconst4);
IkReal x10746=(gconst4*sj3);
IkReal x10747=(cj3*gconst5);
IkReal x10748=(r20*x10736);
IkReal x10749=(r10*x10736);
IkReal x10750=(cj3*x10736);
IkReal x10751=(r02*x10735);
IkReal x10752=(x10738+x10737);
IkReal x10753=((1.0)*sj3*x10736);
evalcond[0]=((-1.0)*r02*x10736);
evalcond[1]=(((x10735*x10744))+(((-1.0)*r20*x10735*x10742)));
evalcond[2]=((((-1.0)*x10741))+((cj3*x10751))+x10743);
evalcond[3]=((((-1.0)*sj3*x10751))+x10752);
evalcond[4]=((-1.0)+((x10735*x10740))+(((-1.0)*r10*x10735*x10742)));
evalcond[5]=(((r10*x10746))+(((-1.0)*cj3*x10742*x10749))+((r11*x10739))+((x10740*x10750)));
evalcond[6]=(((r10*x10745))+((x10739*x10749))+((r11*x10747))+(((-1.0)*x10740*x10753)));
evalcond[7]=(((r21*x10739))+(((-1.0)*cj3*x10742*x10748))+((r20*x10746))+x10752+((x10744*x10750)));
evalcond[8]=((((-1.0)*x10743))+(((-1.0)*x10744*x10753))+((r20*x10745))+((x10739*x10748))+x10741+((r21*x10747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10754=gconst4*gconst4;
IkReal x10755=gconst5*gconst5;
IkReal x10756=(r10*r21);
IkReal x10757=((1.0)*cj3);
IkReal x10758=(r11*r21);
IkReal x10759=(r11*r20);
IkReal x10760=(r22*sj3);
IkReal x10761=(gconst4*r10);
IkReal x10762=((1.0)*sj3);
IkReal x10763=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10764=IKPowWithIntegerCheck(IKsign((((x10759*x10763))+(((-1.0)*x10754*x10757*x10758))+((x10756*x10763))+(((-1.0)*r12*r22*x10757))+(((-1.0)*r10*r20*x10755*x10757)))),-1);
if(!x10764.valid){
continue;
}
CheckValue<IkReal> x10765 = IKatan2WithCheck(IkReal((((x10760*x10761))+((gconst5*r11*x10760)))),IkReal(((((-1.0)*gconst5*r20*x10761*x10762))+((sj3*x10754*x10756))+(((-1.0)*x10755*x10759*x10762))+((gconst4*gconst5*sj3*x10758)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10764.value)))+(x10765.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10766=IKsin(j4);
IkReal x10767=IKcos(j4);
IkReal x10768=(cj2*sj1);
IkReal x10769=(cj1*sj2);
IkReal x10770=(gconst5*sj3);
IkReal x10771=(gconst4*r11);
IkReal x10772=(sj1*sj2);
IkReal x10773=(gconst5*r10);
IkReal x10774=(cj1*cj2);
IkReal x10775=(gconst4*r01);
IkReal x10776=(gconst4*r21);
IkReal x10777=(gconst5*r00);
IkReal x10778=(gconst4*sj3);
IkReal x10779=(cj3*gconst5);
IkReal x10780=(cj3*gconst4);
IkReal x10781=((1.0)*x10767);
IkReal x10782=((1.0)*x10766);
IkReal x10783=(cj3*x10766);
IkReal x10784=(cj3*x10767);
IkReal x10785=(x10769+x10768);
evalcond[0]=(((x10766*x10776))+(((-1.0)*gconst5*r20*x10782))+(((-1.0)*r22*x10781)));
evalcond[1]=(((x10766*x10775))+(((-1.0)*x10777*x10782))+(((-1.0)*r02*x10781)));
evalcond[2]=((-1.0)+((x10766*x10771))+(((-1.0)*r12*x10781))+(((-1.0)*x10773*x10782)));
evalcond[3]=(((r11*x10770))+(((-1.0)*cj3*x10773*x10781))+((x10771*x10784))+((r10*x10778))+((r12*x10783)));
evalcond[4]=(((r11*x10779))+((r10*x10767*x10770))+(((-1.0)*sj3*x10771*x10781))+(((-1.0)*r12*sj3*x10782))+((r10*x10780)));
evalcond[5]=((((-1.0)*r20*x10779*x10781))+((r22*x10783))+((r20*x10778))+((r21*x10770))+((x10776*x10784))+x10785);
evalcond[6]=((((-1.0)*cj3*x10777*x10781))+(((-1.0)*x10772))+((r02*x10783))+((x10775*x10784))+((r00*x10778))+((r01*x10770))+x10774);
evalcond[7]=((((-1.0)*sj3*x10775*x10781))+(((-1.0)*r02*sj3*x10782))+((r00*x10767*x10770))+((r01*x10779))+((r00*x10780))+x10785);
evalcond[8]=((((-1.0)*x10774))+(((-1.0)*r22*sj3*x10782))+(((-1.0)*sj3*x10776*x10781))+((r20*x10767*x10770))+((r20*x10780))+((r21*x10779))+x10772);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10786=((1.0)*gconst5);
CheckValue<IkReal> x10787=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10786))+(((-1.0)*gconst4*r20)))),-1);
if(!x10787.valid){
continue;
}
CheckValue<IkReal> x10788 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10786))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10787.value)))+(x10788.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10789=IKsin(j4);
IkReal x10790=IKcos(j4);
IkReal x10791=(cj2*sj1);
IkReal x10792=(cj1*sj2);
IkReal x10793=(gconst5*sj3);
IkReal x10794=(gconst4*r11);
IkReal x10795=(sj1*sj2);
IkReal x10796=(gconst5*r10);
IkReal x10797=(cj1*cj2);
IkReal x10798=(gconst4*r01);
IkReal x10799=(gconst4*r21);
IkReal x10800=(gconst5*r00);
IkReal x10801=(gconst4*sj3);
IkReal x10802=(cj3*gconst5);
IkReal x10803=(cj3*gconst4);
IkReal x10804=((1.0)*x10790);
IkReal x10805=((1.0)*x10789);
IkReal x10806=(cj3*x10789);
IkReal x10807=(cj3*x10790);
IkReal x10808=(x10792+x10791);
evalcond[0]=((((-1.0)*r22*x10804))+(((-1.0)*gconst5*r20*x10805))+((x10789*x10799)));
evalcond[1]=((((-1.0)*x10800*x10805))+(((-1.0)*r02*x10804))+((x10789*x10798)));
evalcond[2]=((-1.0)+(((-1.0)*x10796*x10805))+((x10789*x10794))+(((-1.0)*r12*x10804)));
evalcond[3]=((((-1.0)*cj3*x10796*x10804))+((r10*x10801))+((r12*x10806))+((x10794*x10807))+((r11*x10793)));
evalcond[4]=(((r10*x10803))+((r10*x10790*x10793))+(((-1.0)*sj3*x10794*x10804))+(((-1.0)*r12*sj3*x10805))+((r11*x10802)));
evalcond[5]=(((r20*x10801))+(((-1.0)*r20*x10802*x10804))+((r21*x10793))+((r22*x10806))+((x10799*x10807))+x10808);
evalcond[6]=(((r00*x10801))+((r02*x10806))+((x10798*x10807))+(((-1.0)*x10795))+x10797+((r01*x10793))+(((-1.0)*cj3*x10800*x10804)));
evalcond[7]=((((-1.0)*r02*sj3*x10805))+((r01*x10802))+((r00*x10803))+(((-1.0)*sj3*x10798*x10804))+((r00*x10790*x10793))+x10808);
evalcond[8]=(((r20*x10803))+((r20*x10790*x10793))+((r21*x10802))+(((-1.0)*x10797))+x10795+(((-1.0)*r22*sj3*x10805))+(((-1.0)*sj3*x10799*x10804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10809=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10809.valid){
continue;
}
CheckValue<IkReal> x10810 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10809.value)))+(x10810.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10811=IKsin(j4);
IkReal x10812=IKcos(j4);
IkReal x10813=(cj2*sj1);
IkReal x10814=(cj1*sj2);
IkReal x10815=(gconst5*sj3);
IkReal x10816=(gconst4*r11);
IkReal x10817=(sj1*sj2);
IkReal x10818=(gconst5*r10);
IkReal x10819=(cj1*cj2);
IkReal x10820=(gconst4*r01);
IkReal x10821=(gconst4*r21);
IkReal x10822=(gconst5*r00);
IkReal x10823=(gconst4*sj3);
IkReal x10824=(cj3*gconst5);
IkReal x10825=(cj3*gconst4);
IkReal x10826=((1.0)*x10812);
IkReal x10827=((1.0)*x10811);
IkReal x10828=(cj3*x10811);
IkReal x10829=(cj3*x10812);
IkReal x10830=(x10813+x10814);
evalcond[0]=((((-1.0)*gconst5*r20*x10827))+((x10811*x10821))+(((-1.0)*r22*x10826)));
evalcond[1]=((((-1.0)*r02*x10826))+(((-1.0)*x10822*x10827))+((x10811*x10820)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10826))+((x10811*x10816))+(((-1.0)*x10818*x10827)));
evalcond[3]=(((r12*x10828))+((x10816*x10829))+((r10*x10823))+((r11*x10815))+(((-1.0)*cj3*x10818*x10826)));
evalcond[4]=((((-1.0)*sj3*x10816*x10826))+((r10*x10812*x10815))+((r10*x10825))+(((-1.0)*r12*sj3*x10827))+((r11*x10824)));
evalcond[5]=(((r20*x10823))+(((-1.0)*r20*x10824*x10826))+((x10821*x10829))+((r22*x10828))+((r21*x10815))+x10830);
evalcond[6]=((((-1.0)*x10817))+((r02*x10828))+((x10820*x10829))+(((-1.0)*cj3*x10822*x10826))+((r01*x10815))+((r00*x10823))+x10819);
evalcond[7]=(((r00*x10812*x10815))+(((-1.0)*r02*sj3*x10827))+(((-1.0)*sj3*x10820*x10826))+((r00*x10825))+((r01*x10824))+x10830);
evalcond[8]=(((r21*x10824))+(((-1.0)*sj3*x10821*x10826))+(((-1.0)*x10819))+(((-1.0)*r22*sj3*x10827))+((r20*x10825))+((r20*x10812*x10815))+x10817);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10831=((-1.0)*r21);
CheckValue<IkReal> x10834 = IKatan2WithCheck(IkReal(x10831),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10834.valid){
continue;
}
IkReal x10832=((1.0)*(x10834.value));
IkReal x10833=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10832)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10832)));
IkReal gconst4=(x10831*x10833);
IkReal gconst5=((1.0)*r20*x10833);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10835=((-1.0)*r21);
CheckValue<IkReal> x10838 = IKatan2WithCheck(IkReal(x10835),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10838.valid){
continue;
}
IkReal x10836=((1.0)*(x10838.value));
IkReal x10837=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10836)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10836)));
IkReal gconst4=(x10835*x10837);
IkReal gconst5=((1.0)*r20*x10837);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10839=((-1.0)*r21);
CheckValue<IkReal> x10842 = IKatan2WithCheck(IkReal(x10839),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10842.valid){
continue;
}
IkReal x10840=((1.0)*(x10842.value));
IkReal x10841=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10840)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10840)));
IkReal gconst4=(x10839*x10841);
IkReal gconst5=((1.0)*r20*x10841);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10843=((-1.0)*r21);
CheckValue<IkReal> x10846 = IKatan2WithCheck(IkReal(x10843),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10846.valid){
continue;
}
IkReal x10844=((1.0)*(x10846.value));
IkReal x10845=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10844)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10844)));
IkReal gconst4=(x10843*x10845);
IkReal gconst5=((1.0)*r20*x10845);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10847=((-1.0)*r21);
CheckValue<IkReal> x10850 = IKatan2WithCheck(IkReal(x10847),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10850.valid){
continue;
}
IkReal x10848=((1.0)*(x10850.value));
IkReal x10849=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10848)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10848)));
IkReal gconst4=(x10847*x10849);
IkReal gconst5=((1.0)*r20*x10849);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10851=((-1.0)*r21);
CheckValue<IkReal> x10854 = IKatan2WithCheck(IkReal(x10851),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10854.valid){
continue;
}
IkReal x10852=((1.0)*(x10854.value));
IkReal x10853=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10852)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10852)));
IkReal gconst4=(x10851*x10853);
IkReal gconst5=((1.0)*r20*x10853);
IkReal x10855=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10859=IKPowWithIntegerCheck(x10855,-1);
if(!x10859.valid){
continue;
}
IkReal x10856=x10859.value;
IkReal x10857=((1.0)*x10856);
IkReal x10858=((((-1.0)*(r02*r02)))+(((-1.0)*x10857*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x10856))+(((-1.0)*x10857*(r00*r00)*(r20*r20))));
j4eval[0]=x10858;
j4eval[1]=r02;
j4eval[2]=x10855;
j4eval[3]=IKsign(x10858);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10860=(gconst5*r00);
IkReal x10861=(gconst4*r01);
CheckValue<IkReal> x10862 = IKatan2WithCheck(IkReal(((((-1.0)*x10861))+x10860)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10862.valid){
continue;
}
CheckValue<IkReal> x10863=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10860*x10860)))+(((-1.0)*(r02*r02)))+(((2.0)*x10860*x10861))+(((-1.0)*(x10861*x10861))))),-1);
if(!x10863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10862.value)+(((1.5707963267949)*(x10863.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10864=IKsin(j4);
IkReal x10865=IKcos(j4);
IkReal x10866=(gconst4*r11);
IkReal x10867=((1.0)*cj1);
IkReal x10868=(gconst5*r10);
IkReal x10869=(gconst4*r01);
IkReal x10870=(gconst5*r00);
IkReal x10871=(gconst4*r21);
IkReal x10872=(gconst5*r20);
IkReal x10873=((1.0)*x10865);
IkReal x10874=((1.0)*x10864);
evalcond[0]=((((-1.0)*r22*x10873))+((x10864*x10871))+(((-1.0)*x10872*x10874)));
evalcond[1]=((((-1.0)*r12*x10873))+((x10864*x10866))+(((-1.0)*x10868*x10874)));
evalcond[2]=((((-1.0)*r02*x10874))+(((-1.0)*x10869*x10873))+((x10865*x10870)));
evalcond[3]=((-1.0)+(((-1.0)*x10870*x10874))+((x10864*x10869))+(((-1.0)*r02*x10873)));
evalcond[4]=((((-1.0)*r22*x10874))+((sj1*sj2))+(((-1.0)*cj2*x10867))+(((-1.0)*x10871*x10873))+((x10865*x10872)));
evalcond[5]=(((x10865*x10868))+(((-1.0)*r12*x10874))+(((-1.0)*x10866*x10873))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10875=((1.0)*gconst5);
CheckValue<IkReal> x10876 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10875))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10876.valid){
continue;
}
CheckValue<IkReal> x10877=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10875))+(((-1.0)*gconst4*r10)))),-1);
if(!x10877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10876.value)+(((1.5707963267949)*(x10877.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10878=IKsin(j4);
IkReal x10879=IKcos(j4);
IkReal x10880=(gconst4*r11);
IkReal x10881=((1.0)*cj1);
IkReal x10882=(gconst5*r10);
IkReal x10883=(gconst4*r01);
IkReal x10884=(gconst5*r00);
IkReal x10885=(gconst4*r21);
IkReal x10886=(gconst5*r20);
IkReal x10887=((1.0)*x10879);
IkReal x10888=((1.0)*x10878);
evalcond[0]=((((-1.0)*x10886*x10888))+(((-1.0)*r22*x10887))+((x10878*x10885)));
evalcond[1]=((((-1.0)*x10882*x10888))+(((-1.0)*r12*x10887))+((x10878*x10880)));
evalcond[2]=((((-1.0)*r02*x10888))+((x10879*x10884))+(((-1.0)*x10883*x10887)));
evalcond[3]=((-1.0)+(((-1.0)*x10884*x10888))+(((-1.0)*r02*x10887))+((x10878*x10883)));
evalcond[4]=(((sj1*sj2))+((x10879*x10886))+(((-1.0)*cj2*x10881))+(((-1.0)*r22*x10888))+(((-1.0)*x10885*x10887)));
evalcond[5]=((((-1.0)*sj2*x10881))+(((-1.0)*x10880*x10887))+(((-1.0)*cj2*sj1))+((x10879*x10882))+(((-1.0)*r12*x10888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10889 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10889.valid){
continue;
}
CheckValue<IkReal> x10890=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10889.value)+(((1.5707963267949)*(x10890.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10891=IKsin(j4);
IkReal x10892=IKcos(j4);
IkReal x10893=(gconst4*r11);
IkReal x10894=((1.0)*cj1);
IkReal x10895=(gconst5*r10);
IkReal x10896=(gconst4*r01);
IkReal x10897=(gconst5*r00);
IkReal x10898=(gconst4*r21);
IkReal x10899=(gconst5*r20);
IkReal x10900=((1.0)*x10892);
IkReal x10901=((1.0)*x10891);
evalcond[0]=((((-1.0)*r22*x10900))+((x10891*x10898))+(((-1.0)*x10899*x10901)));
evalcond[1]=((((-1.0)*x10895*x10901))+((x10891*x10893))+(((-1.0)*r12*x10900)));
evalcond[2]=(((x10892*x10897))+(((-1.0)*x10896*x10900))+(((-1.0)*r02*x10901)));
evalcond[3]=((-1.0)+((x10891*x10896))+(((-1.0)*x10897*x10901))+(((-1.0)*r02*x10900)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x10901))+((x10892*x10899))+(((-1.0)*cj2*x10894))+(((-1.0)*x10898*x10900)));
evalcond[5]=((((-1.0)*sj2*x10894))+(((-1.0)*x10893*x10900))+(((-1.0)*cj2*sj1))+((x10892*x10895))+(((-1.0)*r12*x10901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10902=((-1.0)*r21);
CheckValue<IkReal> x10905 = IKatan2WithCheck(IkReal(x10902),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10905.valid){
continue;
}
IkReal x10903=((1.0)*(x10905.value));
IkReal x10904=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10903)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10903)));
IkReal gconst4=(x10902*x10904);
IkReal gconst5=((1.0)*r20*x10904);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10906=((-1.0)*r21);
CheckValue<IkReal> x10909 = IKatan2WithCheck(IkReal(x10906),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10909.valid){
continue;
}
IkReal x10907=((1.0)*(x10909.value));
IkReal x10908=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10907)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10907)));
IkReal gconst4=(x10906*x10908);
IkReal gconst5=((1.0)*r20*x10908);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10910=((-1.0)*r21);
CheckValue<IkReal> x10913 = IKatan2WithCheck(IkReal(x10910),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10913.valid){
continue;
}
IkReal x10911=((1.0)*(x10913.value));
IkReal x10912=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10911)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10911)));
IkReal gconst4=(x10910*x10912);
IkReal gconst5=((1.0)*r20*x10912);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10914=(gconst4*r01);
IkReal x10915=(gconst5*r00);
CheckValue<IkReal> x10916 = IKatan2WithCheck(IkReal((x10914+(((-1.0)*x10915)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10916.valid){
continue;
}
CheckValue<IkReal> x10917=IKPowWithIntegerCheck(IKsign(((x10914*x10914)+(x10915*x10915)+(r02*r02)+(((-2.0)*x10914*x10915)))),-1);
if(!x10917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10916.value)+(((1.5707963267949)*(x10917.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10918=IKcos(j4);
IkReal x10919=IKsin(j4);
IkReal x10920=(gconst4*r11);
IkReal x10921=(gconst5*r10);
IkReal x10922=((1.0)*cj1);
IkReal x10923=(gconst5*r00);
IkReal x10924=(gconst5*r20);
IkReal x10925=((1.0)*x10918);
IkReal x10926=(gconst4*x10918);
IkReal x10927=((1.0)*x10919);
IkReal x10928=(gconst4*x10919);
evalcond[0]=(((r02*x10919))+((r01*x10926))+(((-1.0)*x10923*x10925)));
evalcond[1]=((((-1.0)*r22*x10925))+((r21*x10928))+(((-1.0)*x10924*x10927)));
evalcond[2]=((((-1.0)*r12*x10925))+(((-1.0)*x10921*x10927))+((x10919*x10920)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10925))+((r01*x10928))+(((-1.0)*x10923*x10927)));
evalcond[4]=(((sj1*sj2))+((r21*x10926))+(((-1.0)*x10924*x10925))+((r22*x10919))+(((-1.0)*cj2*x10922)));
evalcond[5]=((((-1.0)*sj2*x10922))+(((-1.0)*cj2*sj1))+(((-1.0)*x10921*x10925))+((r12*x10919))+((x10918*x10920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10929=((1.0)*gconst5);
CheckValue<IkReal> x10930 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10929))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10930.valid){
continue;
}
CheckValue<IkReal> x10931=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10929))+(((-1.0)*gconst4*r10)))),-1);
if(!x10931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10930.value)+(((1.5707963267949)*(x10931.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10932=IKcos(j4);
IkReal x10933=IKsin(j4);
IkReal x10934=(gconst4*r11);
IkReal x10935=(gconst5*r10);
IkReal x10936=((1.0)*cj1);
IkReal x10937=(gconst5*r00);
IkReal x10938=(gconst5*r20);
IkReal x10939=((1.0)*x10932);
IkReal x10940=(gconst4*x10932);
IkReal x10941=((1.0)*x10933);
IkReal x10942=(gconst4*x10933);
evalcond[0]=(((r02*x10933))+((r01*x10940))+(((-1.0)*x10937*x10939)));
evalcond[1]=((((-1.0)*r22*x10939))+((r21*x10942))+(((-1.0)*x10938*x10941)));
evalcond[2]=((((-1.0)*r12*x10939))+((x10933*x10934))+(((-1.0)*x10935*x10941)));
evalcond[3]=((-1.0)+((r01*x10942))+(((-1.0)*r02*x10939))+(((-1.0)*x10937*x10941)));
evalcond[4]=(((r21*x10940))+(((-1.0)*x10938*x10939))+((sj1*sj2))+((r22*x10933))+(((-1.0)*cj2*x10936)));
evalcond[5]=(((x10932*x10934))+(((-1.0)*cj2*sj1))+((r12*x10933))+(((-1.0)*x10935*x10939))+(((-1.0)*sj2*x10936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10943 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10943.valid){
continue;
}
CheckValue<IkReal> x10944=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10944.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10943.value)+(((1.5707963267949)*(x10944.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10945=IKcos(j4);
IkReal x10946=IKsin(j4);
IkReal x10947=(gconst4*r11);
IkReal x10948=(gconst5*r10);
IkReal x10949=((1.0)*cj1);
IkReal x10950=(gconst5*r00);
IkReal x10951=(gconst5*r20);
IkReal x10952=((1.0)*x10945);
IkReal x10953=(gconst4*x10945);
IkReal x10954=((1.0)*x10946);
IkReal x10955=(gconst4*x10946);
evalcond[0]=(((r01*x10953))+(((-1.0)*x10950*x10952))+((r02*x10946)));
evalcond[1]=((((-1.0)*r22*x10952))+(((-1.0)*x10951*x10954))+((r21*x10955)));
evalcond[2]=((((-1.0)*x10948*x10954))+((x10946*x10947))+(((-1.0)*r12*x10952)));
evalcond[3]=((-1.0)+((r01*x10955))+(((-1.0)*x10950*x10954))+(((-1.0)*r02*x10952)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x10951*x10952))+((r21*x10953))+((r22*x10946))+(((-1.0)*cj2*x10949)));
evalcond[5]=((((-1.0)*x10948*x10952))+((r12*x10946))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10949))+((x10945*x10947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10956=((-1.0)*r21);
CheckValue<IkReal> x10959 = IKatan2WithCheck(IkReal(x10956),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10959.valid){
continue;
}
IkReal x10957=((1.0)*(x10959.value));
IkReal x10958=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10957)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10957)));
IkReal gconst4=(x10956*x10958);
IkReal gconst5=((1.0)*r20*x10958);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10960=((-1.0)*r21);
CheckValue<IkReal> x10963 = IKatan2WithCheck(IkReal(x10960),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10963.valid){
continue;
}
IkReal x10961=((1.0)*(x10963.value));
IkReal x10962=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10961)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10961)));
IkReal gconst4=(x10960*x10962);
IkReal gconst5=((1.0)*r20*x10962);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10964=((-1.0)*r21);
CheckValue<IkReal> x10967 = IKatan2WithCheck(IkReal(x10964),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10967.valid){
continue;
}
IkReal x10965=((1.0)*(x10967.value));
IkReal x10966=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10965)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10965)));
IkReal gconst4=(x10964*x10966);
IkReal gconst5=((1.0)*r20*x10966);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10968=(gconst4*r01);
IkReal x10969=(gconst5*r00);
CheckValue<IkReal> x10970 = IKatan2WithCheck(IkReal(((((-1.0)*x10969))+x10968)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10970.valid){
continue;
}
CheckValue<IkReal> x10971=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10968*x10969))+(x10969*x10969)+(r02*r02)+(x10968*x10968))),-1);
if(!x10971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10970.value)+(((1.5707963267949)*(x10971.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10972=IKcos(j4);
IkReal x10973=IKsin(j4);
IkReal x10974=(gconst4*r11);
IkReal x10975=(gconst5*r10);
IkReal x10976=(gconst5*r00);
IkReal x10977=(gconst5*r20);
IkReal x10978=((1.0)*x10972);
IkReal x10979=(gconst4*x10972);
IkReal x10980=((1.0)*x10973);
IkReal x10981=(gconst4*x10973);
evalcond[0]=(((r02*x10973))+(((-1.0)*x10976*x10978))+((r01*x10979)));
evalcond[1]=(((r21*x10981))+(((-1.0)*r22*x10978))+(((-1.0)*x10977*x10980)));
evalcond[2]=((((-1.0)*x10975*x10980))+((x10973*x10974))+(((-1.0)*r12*x10978)));
evalcond[3]=((-1.0)+((r01*x10981))+(((-1.0)*r02*x10978))+(((-1.0)*x10976*x10980)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10973))+((r21*x10979))+(((-1.0)*x10977*x10978)));
evalcond[5]=(((x10972*x10974))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x10973))+(((-1.0)*x10975*x10978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10982=((1.0)*gconst5);
CheckValue<IkReal> x10983=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10982))+(((-1.0)*gconst4*r10)))),-1);
if(!x10983.valid){
continue;
}
CheckValue<IkReal> x10984 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10982))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10983.value)))+(x10984.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10985=IKcos(j4);
IkReal x10986=IKsin(j4);
IkReal x10987=(gconst4*r11);
IkReal x10988=(gconst5*r10);
IkReal x10989=(gconst5*r00);
IkReal x10990=(gconst5*r20);
IkReal x10991=((1.0)*x10985);
IkReal x10992=(gconst4*x10985);
IkReal x10993=((1.0)*x10986);
IkReal x10994=(gconst4*x10986);
evalcond[0]=(((r01*x10992))+(((-1.0)*x10989*x10991))+((r02*x10986)));
evalcond[1]=(((r21*x10994))+(((-1.0)*r22*x10991))+(((-1.0)*x10990*x10993)));
evalcond[2]=(((x10986*x10987))+(((-1.0)*x10988*x10993))+(((-1.0)*r12*x10991)));
evalcond[3]=((-1.0)+((r01*x10994))+(((-1.0)*x10989*x10993))+(((-1.0)*r02*x10991)));
evalcond[4]=(((r22*x10986))+((cj2*sj1))+((r21*x10992))+((cj1*sj2))+(((-1.0)*x10990*x10991)));
evalcond[5]=(((r12*x10986))+((x10985*x10987))+(((-1.0)*x10988*x10991))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10995 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10995.valid){
continue;
}
CheckValue<IkReal> x10996=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10995.value)+(((1.5707963267949)*(x10996.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10997=IKcos(j4);
IkReal x10998=IKsin(j4);
IkReal x10999=(gconst4*r11);
IkReal x11000=(gconst5*r10);
IkReal x11001=(gconst5*r00);
IkReal x11002=(gconst5*r20);
IkReal x11003=((1.0)*x10997);
IkReal x11004=(gconst4*x10997);
IkReal x11005=((1.0)*x10998);
IkReal x11006=(gconst4*x10998);
evalcond[0]=(((r01*x11004))+(((-1.0)*x11001*x11003))+((r02*x10998)));
evalcond[1]=((((-1.0)*r22*x11003))+((r21*x11006))+(((-1.0)*x11002*x11005)));
evalcond[2]=((((-1.0)*x11000*x11005))+(((-1.0)*r12*x11003))+((x10998*x10999)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11003))+((r01*x11006))+(((-1.0)*x11001*x11005)));
evalcond[4]=(((cj2*sj1))+((r22*x10998))+((cj1*sj2))+((r21*x11004))+(((-1.0)*x11002*x11003)));
evalcond[5]=(((r12*x10998))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11000*x11003))+((x10997*x10999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11007=((-1.0)*r21);
CheckValue<IkReal> x11010 = IKatan2WithCheck(IkReal(x11007),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11010.valid){
continue;
}
IkReal x11008=((1.0)*(x11010.value));
IkReal x11009=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11008)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11008)));
IkReal gconst4=(x11007*x11009);
IkReal gconst5=((1.0)*r20*x11009);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11011=((-1.0)*r21);
CheckValue<IkReal> x11014 = IKatan2WithCheck(IkReal(x11011),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11014.valid){
continue;
}
IkReal x11012=((1.0)*(x11014.value));
IkReal x11013=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11012)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11012)));
IkReal gconst4=(x11011*x11013);
IkReal gconst5=((1.0)*r20*x11013);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11015=((-1.0)*r21);
CheckValue<IkReal> x11018 = IKatan2WithCheck(IkReal(x11015),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11018.valid){
continue;
}
IkReal x11016=((1.0)*(x11018.value));
IkReal x11017=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11016)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11016)));
IkReal gconst4=(x11015*x11017);
IkReal gconst5=((1.0)*r20*x11017);
IkReal x11019=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11023=IKPowWithIntegerCheck(x11019,-1);
if(!x11023.valid){
continue;
}
IkReal x11020=x11023.value;
IkReal x11021=((1.0)*x11020);
IkReal x11022=((((-1.0)*(r02*r02)))+(((-1.0)*x11021*(r01*r01)*(r21*r21)))+(((-1.0)*x11021*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x11020)));
j4eval[0]=x11022;
j4eval[1]=r02;
j4eval[2]=x11019;
j4eval[3]=IKsign(x11022);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11024=(gconst5*r00);
IkReal x11025=(gconst4*r01);
CheckValue<IkReal> x11026 = IKatan2WithCheck(IkReal(((((-1.0)*x11025))+x11024)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11026.valid){
continue;
}
CheckValue<IkReal> x11027=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11024*x11024)))+(((-1.0)*(r02*r02)))+(((2.0)*x11024*x11025))+(((-1.0)*(x11025*x11025))))),-1);
if(!x11027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11026.value)+(((1.5707963267949)*(x11027.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11028=IKsin(j4);
IkReal x11029=IKcos(j4);
IkReal x11030=(gconst4*r11);
IkReal x11031=(gconst5*r10);
IkReal x11032=(gconst4*r01);
IkReal x11033=(gconst5*r00);
IkReal x11034=(gconst4*r21);
IkReal x11035=(gconst5*r20);
IkReal x11036=((1.0)*x11029);
IkReal x11037=((1.0)*x11028);
evalcond[0]=((((-1.0)*r22*x11036))+(((-1.0)*x11035*x11037))+((x11028*x11034)));
evalcond[1]=((((-1.0)*x11031*x11037))+(((-1.0)*r12*x11036))+((x11028*x11030)));
evalcond[2]=((((-1.0)*r02*x11037))+((x11029*x11033))+(((-1.0)*x11032*x11036)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11036))+(((-1.0)*x11033*x11037))+((x11028*x11032)));
evalcond[4]=((((-1.0)*x11034*x11036))+((cj2*sj1))+((cj1*sj2))+((x11029*x11035))+(((-1.0)*r22*x11037)));
evalcond[5]=(((x11029*x11031))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11030*x11036))+(((-1.0)*r12*x11037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11038=((1.0)*gconst5);
CheckValue<IkReal> x11039=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11038))+(((-1.0)*gconst4*r10)))),-1);
if(!x11039.valid){
continue;
}
CheckValue<IkReal> x11040 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11038))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11039.value)))+(x11040.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11041=IKsin(j4);
IkReal x11042=IKcos(j4);
IkReal x11043=(gconst4*r11);
IkReal x11044=(gconst5*r10);
IkReal x11045=(gconst4*r01);
IkReal x11046=(gconst5*r00);
IkReal x11047=(gconst4*r21);
IkReal x11048=(gconst5*r20);
IkReal x11049=((1.0)*x11042);
IkReal x11050=((1.0)*x11041);
evalcond[0]=((((-1.0)*r22*x11049))+((x11041*x11047))+(((-1.0)*x11048*x11050)));
evalcond[1]=(((x11041*x11043))+(((-1.0)*r12*x11049))+(((-1.0)*x11044*x11050)));
evalcond[2]=((((-1.0)*x11045*x11049))+((x11042*x11046))+(((-1.0)*r02*x11050)));
evalcond[3]=((-1.0)+((x11041*x11045))+(((-1.0)*x11046*x11050))+(((-1.0)*r02*x11049)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11050))+((cj1*sj2))+((x11042*x11048))+(((-1.0)*x11047*x11049)));
evalcond[5]=((((-1.0)*r12*x11050))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11042*x11044))+(((-1.0)*x11043*x11049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11051 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11051.valid){
continue;
}
CheckValue<IkReal> x11052=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11051.value)+(((1.5707963267949)*(x11052.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11053=IKsin(j4);
IkReal x11054=IKcos(j4);
IkReal x11055=(gconst4*r11);
IkReal x11056=(gconst5*r10);
IkReal x11057=(gconst4*r01);
IkReal x11058=(gconst5*r00);
IkReal x11059=(gconst4*r21);
IkReal x11060=(gconst5*r20);
IkReal x11061=((1.0)*x11054);
IkReal x11062=((1.0)*x11053);
evalcond[0]=((((-1.0)*r22*x11061))+(((-1.0)*x11060*x11062))+((x11053*x11059)));
evalcond[1]=((((-1.0)*r12*x11061))+((x11053*x11055))+(((-1.0)*x11056*x11062)));
evalcond[2]=((((-1.0)*r02*x11062))+((x11054*x11058))+(((-1.0)*x11057*x11061)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11061))+(((-1.0)*x11058*x11062))+((x11053*x11057)));
evalcond[4]=((((-1.0)*r22*x11062))+((cj2*sj1))+((cj1*sj2))+((x11054*x11060))+(((-1.0)*x11059*x11061)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11054*x11056))+(((-1.0)*x11055*x11061))+(((-1.0)*r12*x11062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11063=gconst4*gconst4;
IkReal x11064=gconst5*gconst5;
IkReal x11065=(r01*r20);
IkReal x11066=(gconst4*sj3);
IkReal x11067=(r01*r21);
IkReal x11068=((1.0)*cj3);
IkReal x11069=(r00*r21);
IkReal x11070=(r00*r20);
IkReal x11071=(cj3*gconst4*gconst5);
IkReal x11072=((1.0)*x11064);
CheckValue<IkReal> x11073=IKPowWithIntegerCheck(IKsign((((x11069*x11071))+(((-1.0)*x11064*x11068*x11070))+(((-1.0)*r02*r22*x11068))+((x11065*x11071))+(((-1.0)*x11063*x11067*x11068)))),-1);
if(!x11073.valid){
continue;
}
CheckValue<IkReal> x11074 = IKatan2WithCheck(IkReal((((r00*r22*x11066))+((gconst5*r01*r22*sj3)))),IkReal((((gconst5*x11066*x11067))+(((-1.0)*sj3*x11065*x11072))+((sj3*x11063*x11069))+(((-1.0)*gconst5*x11066*x11070)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11073.value)))+(x11074.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11075=IKsin(j4);
IkReal x11076=IKcos(j4);
IkReal x11077=(sj1*sj2);
IkReal x11078=(gconst5*sj3);
IkReal x11079=(gconst4*r11);
IkReal x11080=(gconst5*r10);
IkReal x11081=((1.0)*cj1);
IkReal x11082=(gconst4*r01);
IkReal x11083=(cj2*sj1);
IkReal x11084=(gconst5*r00);
IkReal x11085=(gconst4*sj3);
IkReal x11086=(cj3*gconst5);
IkReal x11087=(cj3*gconst4);
IkReal x11088=(gconst4*r21);
IkReal x11089=(cj2*x11081);
IkReal x11090=((1.0)*x11076);
IkReal x11091=((1.0)*x11075);
IkReal x11092=(cj3*x11075);
IkReal x11093=(cj3*x11076);
evalcond[0]=((((-1.0)*r22*x11090))+(((-1.0)*gconst5*r20*x11091))+((x11075*x11088)));
evalcond[1]=((((-1.0)*r12*x11090))+(((-1.0)*x11080*x11091))+((x11075*x11079)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x11090))+(((-1.0)*x11084*x11091))+((x11075*x11082)));
evalcond[3]=(((r02*x11092))+((r00*x11085))+((x11082*x11093))+(((-1.0)*cj3*x11084*x11090))+((r01*x11078)));
evalcond[4]=((((-1.0)*r02*sj3*x11091))+((r01*x11086))+((r00*x11087))+((r00*x11076*x11078))+(((-1.0)*sj3*x11082*x11090)));
evalcond[5]=(((r21*x11078))+((r21*x11076*x11087))+((cj1*sj2))+(((-1.0)*r20*x11086*x11090))+x11083+((r22*x11092))+((r20*x11085)));
evalcond[6]=(((r12*x11092))+((r11*x11078))+x11077+((x11079*x11093))+((r10*x11085))+(((-1.0)*x11089))+(((-1.0)*cj3*x11080*x11090)));
evalcond[7]=(((r21*x11086))+x11077+(((-1.0)*r22*sj3*x11091))+(((-1.0)*x11089))+(((-1.0)*r21*x11085*x11090))+((r20*x11087))+((r20*x11076*x11078)));
evalcond[8]=((((-1.0)*sj3*x11079*x11090))+(((-1.0)*sj2*x11081))+(((-1.0)*x11083))+(((-1.0)*r12*sj3*x11091))+((r10*x11076*x11078))+((r10*x11087))+((r11*x11086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11094=((1.0)*gconst5);
CheckValue<IkReal> x11095=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11094))+(((-1.0)*gconst4*r10)))),-1);
if(!x11095.valid){
continue;
}
CheckValue<IkReal> x11096 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11094))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11095.value)))+(x11096.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11097=IKsin(j4);
IkReal x11098=IKcos(j4);
IkReal x11099=(sj1*sj2);
IkReal x11100=(gconst5*sj3);
IkReal x11101=(gconst4*r11);
IkReal x11102=(gconst5*r10);
IkReal x11103=((1.0)*cj1);
IkReal x11104=(gconst4*r01);
IkReal x11105=(cj2*sj1);
IkReal x11106=(gconst5*r00);
IkReal x11107=(gconst4*sj3);
IkReal x11108=(cj3*gconst5);
IkReal x11109=(cj3*gconst4);
IkReal x11110=(gconst4*r21);
IkReal x11111=(cj2*x11103);
IkReal x11112=((1.0)*x11098);
IkReal x11113=((1.0)*x11097);
IkReal x11114=(cj3*x11097);
IkReal x11115=(cj3*x11098);
evalcond[0]=((((-1.0)*gconst5*r20*x11113))+(((-1.0)*r22*x11112))+((x11097*x11110)));
evalcond[1]=((((-1.0)*x11102*x11113))+(((-1.0)*r12*x11112))+((x11097*x11101)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x11112))+((x11097*x11104))+(((-1.0)*x11106*x11113)));
evalcond[3]=(((r02*x11114))+((x11104*x11115))+((r00*x11107))+((r01*x11100))+(((-1.0)*cj3*x11106*x11112)));
evalcond[4]=((((-1.0)*r02*sj3*x11113))+((r00*x11098*x11100))+(((-1.0)*sj3*x11104*x11112))+((r00*x11109))+((r01*x11108)));
evalcond[5]=(((r21*x11098*x11109))+((cj1*sj2))+(((-1.0)*r20*x11108*x11112))+x11105+((r21*x11100))+((r20*x11107))+((r22*x11114)));
evalcond[6]=(((x11101*x11115))+((r10*x11107))+x11099+(((-1.0)*cj3*x11102*x11112))+((r11*x11100))+(((-1.0)*x11111))+((r12*x11114)));
evalcond[7]=(x11099+((r21*x11108))+(((-1.0)*r22*sj3*x11113))+(((-1.0)*r21*x11107*x11112))+((r20*x11109))+(((-1.0)*x11111))+((r20*x11098*x11100)));
evalcond[8]=((((-1.0)*sj3*x11101*x11112))+(((-1.0)*x11105))+(((-1.0)*r12*sj3*x11113))+((r10*x11109))+((r10*x11098*x11100))+(((-1.0)*sj2*x11103))+((r11*x11108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11116 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11116.valid){
continue;
}
CheckValue<IkReal> x11117=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11116.value)+(((1.5707963267949)*(x11117.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11118=IKsin(j4);
IkReal x11119=IKcos(j4);
IkReal x11120=(sj1*sj2);
IkReal x11121=(gconst5*sj3);
IkReal x11122=(gconst4*r11);
IkReal x11123=(gconst5*r10);
IkReal x11124=((1.0)*cj1);
IkReal x11125=(gconst4*r01);
IkReal x11126=(cj2*sj1);
IkReal x11127=(gconst5*r00);
IkReal x11128=(gconst4*sj3);
IkReal x11129=(cj3*gconst5);
IkReal x11130=(cj3*gconst4);
IkReal x11131=(gconst4*r21);
IkReal x11132=(cj2*x11124);
IkReal x11133=((1.0)*x11119);
IkReal x11134=((1.0)*x11118);
IkReal x11135=(cj3*x11118);
IkReal x11136=(cj3*x11119);
evalcond[0]=((((-1.0)*r22*x11133))+((x11118*x11131))+(((-1.0)*gconst5*r20*x11134)));
evalcond[1]=(((x11118*x11122))+(((-1.0)*r12*x11133))+(((-1.0)*x11123*x11134)));
evalcond[2]=((-1.0)+(((-1.0)*x11127*x11134))+(((-1.0)*r02*x11133))+((x11118*x11125)));
evalcond[3]=(((r02*x11135))+((x11125*x11136))+(((-1.0)*cj3*x11127*x11133))+((r00*x11128))+((r01*x11121)));
evalcond[4]=((((-1.0)*r02*sj3*x11134))+((r00*x11119*x11121))+(((-1.0)*sj3*x11125*x11133))+((r01*x11129))+((r00*x11130)));
evalcond[5]=(((r22*x11135))+((r21*x11119*x11130))+((r21*x11121))+(((-1.0)*r20*x11129*x11133))+((cj1*sj2))+x11126+((r20*x11128)));
evalcond[6]=(((x11122*x11136))+((r10*x11128))+x11120+((r11*x11121))+(((-1.0)*x11132))+((r12*x11135))+(((-1.0)*cj3*x11123*x11133)));
evalcond[7]=(((r21*x11129))+((r20*x11119*x11121))+x11120+(((-1.0)*r22*sj3*x11134))+((r20*x11130))+(((-1.0)*r21*x11128*x11133))+(((-1.0)*x11132)));
evalcond[8]=((((-1.0)*x11126))+(((-1.0)*r12*sj3*x11134))+((r10*x11130))+((r11*x11129))+(((-1.0)*sj3*x11122*x11133))+((r10*x11119*x11121))+(((-1.0)*sj2*x11124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11137=((-1.0)*r21);
CheckValue<IkReal> x11140 = IKatan2WithCheck(IkReal(x11137),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11140.valid){
continue;
}
IkReal x11138=((1.0)*(x11140.value));
IkReal x11139=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11138)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11138)));
IkReal gconst4=(x11137*x11139);
IkReal gconst5=((1.0)*r20*x11139);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11141=((-1.0)*r21);
CheckValue<IkReal> x11144 = IKatan2WithCheck(IkReal(x11141),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11144.valid){
continue;
}
IkReal x11142=((1.0)*(x11144.value));
IkReal x11143=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11142)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11142)));
IkReal gconst4=(x11141*x11143);
IkReal gconst5=((1.0)*r20*x11143);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11145=((-1.0)*r21);
CheckValue<IkReal> x11148 = IKatan2WithCheck(IkReal(x11145),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11148.valid){
continue;
}
IkReal x11146=((1.0)*(x11148.value));
IkReal x11147=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11146)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11146)));
IkReal gconst4=(x11145*x11147);
IkReal gconst5=((1.0)*r20*x11147);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11149=((-1.0)*r21);
CheckValue<IkReal> x11152 = IKatan2WithCheck(IkReal(x11149),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11152.valid){
continue;
}
IkReal x11150=((1.0)*(x11152.value));
IkReal x11151=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11150)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11150)));
IkReal gconst4=(x11149*x11151);
IkReal gconst5=((1.0)*r20*x11151);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11153=((-1.0)*r21);
CheckValue<IkReal> x11156 = IKatan2WithCheck(IkReal(x11153),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11156.valid){
continue;
}
IkReal x11154=((1.0)*(x11156.value));
IkReal x11155=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11154)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11154)));
IkReal gconst4=(x11153*x11155);
IkReal gconst5=((1.0)*r20*x11155);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11157=((-1.0)*r21);
CheckValue<IkReal> x11160 = IKatan2WithCheck(IkReal(x11157),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11160.valid){
continue;
}
IkReal x11158=((1.0)*(x11160.value));
IkReal x11159=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11158)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11158)));
IkReal gconst4=(x11157*x11159);
IkReal gconst5=((1.0)*r20*x11159);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11161=(gconst5*r00);
IkReal x11162=(gconst4*r01);
CheckValue<IkReal> x11163=IKPowWithIntegerCheck(IKsign(((x11161*x11161)+(x11162*x11162)+(((-2.0)*x11161*x11162))+(r02*r02))),-1);
if(!x11163.valid){
continue;
}
CheckValue<IkReal> x11164 = IKatan2WithCheck(IkReal((x11161+(((-1.0)*x11162)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11163.value)))+(x11164.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11165=IKsin(j4);
IkReal x11166=IKcos(j4);
IkReal x11167=(gconst4*r11);
IkReal x11168=(gconst5*r10);
IkReal x11169=(gconst4*r01);
IkReal x11170=(gconst5*r00);
IkReal x11171=(gconst4*r21);
IkReal x11172=(gconst5*r20);
IkReal x11173=((1.0)*x11166);
IkReal x11174=((1.0)*x11165);
evalcond[0]=((((-1.0)*x11172*x11174))+(((-1.0)*r22*x11173))+((x11165*x11171)));
evalcond[1]=((((-1.0)*r12*x11173))+((x11165*x11167))+(((-1.0)*x11168*x11174)));
evalcond[2]=(((x11166*x11170))+(((-1.0)*x11169*x11173))+(((-1.0)*r02*x11174)));
evalcond[3]=((1.0)+((x11165*x11169))+(((-1.0)*x11170*x11174))+(((-1.0)*r02*x11173)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11167*x11173))+((cj1*sj2))+((x11166*x11168))+(((-1.0)*r12*x11174)));
evalcond[5]=(((x11166*x11172))+(((-1.0)*r22*x11174))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11171*x11173)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11175=((1.0)*gconst5);
CheckValue<IkReal> x11176=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11175))+(((-1.0)*gconst4*r20)))),-1);
if(!x11176.valid){
continue;
}
CheckValue<IkReal> x11177 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11175))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11176.value)))+(x11177.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11178=IKsin(j4);
IkReal x11179=IKcos(j4);
IkReal x11180=(gconst4*r11);
IkReal x11181=(gconst5*r10);
IkReal x11182=(gconst4*r01);
IkReal x11183=(gconst5*r00);
IkReal x11184=(gconst4*r21);
IkReal x11185=(gconst5*r20);
IkReal x11186=((1.0)*x11179);
IkReal x11187=((1.0)*x11178);
evalcond[0]=((((-1.0)*r22*x11186))+(((-1.0)*x11185*x11187))+((x11178*x11184)));
evalcond[1]=((((-1.0)*r12*x11186))+(((-1.0)*x11181*x11187))+((x11178*x11180)));
evalcond[2]=((((-1.0)*r02*x11187))+(((-1.0)*x11182*x11186))+((x11179*x11183)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11186))+(((-1.0)*x11183*x11187))+((x11178*x11182)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11187))+((cj1*sj2))+(((-1.0)*x11180*x11186))+((x11179*x11181)));
evalcond[5]=((((-1.0)*r22*x11187))+(((-1.0)*x11184*x11186))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11179*x11185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11188=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11188.valid){
continue;
}
CheckValue<IkReal> x11189 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11188.value)))+(x11189.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11190=IKsin(j4);
IkReal x11191=IKcos(j4);
IkReal x11192=(gconst4*r11);
IkReal x11193=(gconst5*r10);
IkReal x11194=(gconst4*r01);
IkReal x11195=(gconst5*r00);
IkReal x11196=(gconst4*r21);
IkReal x11197=(gconst5*r20);
IkReal x11198=((1.0)*x11191);
IkReal x11199=((1.0)*x11190);
evalcond[0]=(((x11190*x11196))+(((-1.0)*r22*x11198))+(((-1.0)*x11197*x11199)));
evalcond[1]=(((x11190*x11192))+(((-1.0)*r12*x11198))+(((-1.0)*x11193*x11199)));
evalcond[2]=((((-1.0)*r02*x11199))+((x11191*x11195))+(((-1.0)*x11194*x11198)));
evalcond[3]=((1.0)+(((-1.0)*x11195*x11199))+((x11190*x11194))+(((-1.0)*r02*x11198)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11199))+((cj1*sj2))+((x11191*x11193))+(((-1.0)*x11192*x11198)));
evalcond[5]=((((-1.0)*r22*x11199))+(((-1.0)*x11196*x11198))+((x11191*x11197))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11200=((-1.0)*r21);
CheckValue<IkReal> x11203 = IKatan2WithCheck(IkReal(x11200),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11203.valid){
continue;
}
IkReal x11201=((1.0)*(x11203.value));
IkReal x11202=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11201)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11201)));
IkReal gconst4=(x11200*x11202);
IkReal gconst5=((1.0)*r20*x11202);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11204=((-1.0)*r21);
CheckValue<IkReal> x11207 = IKatan2WithCheck(IkReal(x11204),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11207.valid){
continue;
}
IkReal x11205=((1.0)*(x11207.value));
IkReal x11206=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11205)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11205)));
IkReal gconst4=(x11204*x11206);
IkReal gconst5=((1.0)*r20*x11206);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11208=((-1.0)*r21);
CheckValue<IkReal> x11211 = IKatan2WithCheck(IkReal(x11208),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11211.valid){
continue;
}
IkReal x11209=((1.0)*(x11211.value));
IkReal x11210=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11209)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11209)));
IkReal gconst4=(x11208*x11210);
IkReal gconst5=((1.0)*r20*x11210);
IkReal x11212=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11216=IKPowWithIntegerCheck(x11212,-1);
if(!x11216.valid){
continue;
}
IkReal x11213=x11216.value;
IkReal x11214=((1.0)*x11213);
IkReal x11215=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x11213))+(((-1.0)*x11214*(r01*r01)*(r21*r21)))+(((-1.0)*x11214*(r00*r00)*(r20*r20))));
j4eval[0]=x11215;
j4eval[1]=IKsign(x11215);
j4eval[2]=r02;
j4eval[3]=x11212;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11217=(gconst4*r01);
IkReal x11218=(gconst5*r00);
CheckValue<IkReal> x11219 = IKatan2WithCheck(IkReal((x11217+(((-1.0)*x11218)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11219.valid){
continue;
}
CheckValue<IkReal> x11220=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11218*x11218)))+(((2.0)*x11217*x11218))+(((-1.0)*(x11217*x11217))))),-1);
if(!x11220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11219.value)+(((1.5707963267949)*(x11220.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11221=IKcos(j4);
IkReal x11222=IKsin(j4);
IkReal x11223=(gconst4*r11);
IkReal x11224=(gconst5*r10);
IkReal x11225=(gconst5*r00);
IkReal x11226=(gconst5*r20);
IkReal x11227=((1.0)*x11221);
IkReal x11228=(gconst4*x11221);
IkReal x11229=((1.0)*x11222);
IkReal x11230=(gconst4*x11222);
evalcond[0]=((((-1.0)*x11225*x11227))+((r02*x11222))+((r01*x11228)));
evalcond[1]=(((r21*x11230))+(((-1.0)*x11226*x11229))+(((-1.0)*r22*x11227)));
evalcond[2]=(((x11222*x11223))+(((-1.0)*x11224*x11229))+(((-1.0)*r12*x11227)));
evalcond[3]=((1.0)+(((-1.0)*x11225*x11229))+((r01*x11230))+(((-1.0)*r02*x11227)));
evalcond[4]=(((cj2*sj1))+((r12*x11222))+((cj1*sj2))+((x11221*x11223))+(((-1.0)*x11224*x11227)));
evalcond[5]=(((r22*x11222))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11228))+(((-1.0)*x11226*x11227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11231=((1.0)*gconst5);
CheckValue<IkReal> x11232 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11231)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11232.valid){
continue;
}
CheckValue<IkReal> x11233=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11231))+(((-1.0)*gconst4*r20)))),-1);
if(!x11233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11232.value)+(((1.5707963267949)*(x11233.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11234=IKcos(j4);
IkReal x11235=IKsin(j4);
IkReal x11236=(gconst4*r11);
IkReal x11237=(gconst5*r10);
IkReal x11238=(gconst5*r00);
IkReal x11239=(gconst5*r20);
IkReal x11240=((1.0)*x11234);
IkReal x11241=(gconst4*x11234);
IkReal x11242=((1.0)*x11235);
IkReal x11243=(gconst4*x11235);
evalcond[0]=(((r02*x11235))+((r01*x11241))+(((-1.0)*x11238*x11240)));
evalcond[1]=((((-1.0)*x11239*x11242))+((r21*x11243))+(((-1.0)*r22*x11240)));
evalcond[2]=(((x11235*x11236))+(((-1.0)*r12*x11240))+(((-1.0)*x11237*x11242)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11240))+((r01*x11243))+(((-1.0)*x11238*x11242)));
evalcond[4]=(((cj2*sj1))+((x11234*x11236))+((cj1*sj2))+((r12*x11235))+(((-1.0)*x11237*x11240)));
evalcond[5]=(((r22*x11235))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11239*x11240))+((r21*x11241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11244=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11244.valid){
continue;
}
CheckValue<IkReal> x11245 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11244.value)))+(x11245.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11246=IKcos(j4);
IkReal x11247=IKsin(j4);
IkReal x11248=(gconst4*r11);
IkReal x11249=(gconst5*r10);
IkReal x11250=(gconst5*r00);
IkReal x11251=(gconst5*r20);
IkReal x11252=((1.0)*x11246);
IkReal x11253=(gconst4*x11246);
IkReal x11254=((1.0)*x11247);
IkReal x11255=(gconst4*x11247);
evalcond[0]=(((r02*x11247))+(((-1.0)*x11250*x11252))+((r01*x11253)));
evalcond[1]=((((-1.0)*x11251*x11254))+((r21*x11255))+(((-1.0)*r22*x11252)));
evalcond[2]=(((x11247*x11248))+(((-1.0)*x11249*x11254))+(((-1.0)*r12*x11252)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11252))+(((-1.0)*x11250*x11254))+((r01*x11255)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x11247))+(((-1.0)*x11249*x11252))+((x11246*x11248)));
evalcond[5]=(((r22*x11247))+(((-1.0)*x11251*x11252))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11256=((-1.0)*r21);
CheckValue<IkReal> x11259 = IKatan2WithCheck(IkReal(x11256),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11259.valid){
continue;
}
IkReal x11257=((1.0)*(x11259.value));
IkReal x11258=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11257)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11257)));
IkReal gconst4=(x11256*x11258);
IkReal gconst5=((1.0)*r20*x11258);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11260=((-1.0)*r21);
CheckValue<IkReal> x11263 = IKatan2WithCheck(IkReal(x11260),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11263.valid){
continue;
}
IkReal x11261=((1.0)*(x11263.value));
IkReal x11262=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11261)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11261)));
IkReal gconst4=(x11260*x11262);
IkReal gconst5=((1.0)*r20*x11262);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11264=((-1.0)*r21);
CheckValue<IkReal> x11267 = IKatan2WithCheck(IkReal(x11264),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11267.valid){
continue;
}
IkReal x11265=((1.0)*(x11267.value));
IkReal x11266=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11265)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11265)));
IkReal gconst4=(x11264*x11266);
IkReal gconst5=((1.0)*r20*x11266);
IkReal x11268=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11272=IKPowWithIntegerCheck(x11268,-1);
if(!x11272.valid){
continue;
}
IkReal x11269=x11272.value;
IkReal x11270=((1.0)*x11269);
IkReal x11271=((((-1.0)*(r02*r02)))+(((-1.0)*x11270*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x11269))+(((-1.0)*x11270*(r01*r01)*(r21*r21))));
j4eval[0]=x11271;
j4eval[1]=IKsign(x11271);
j4eval[2]=r02;
j4eval[3]=x11268;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11273=(gconst4*r01);
IkReal x11274=(gconst5*r00);
CheckValue<IkReal> x11275=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11273*x11273)))+(((-1.0)*(x11274*x11274)))+(((-1.0)*(r02*r02)))+(((2.0)*x11273*x11274)))),-1);
if(!x11275.valid){
continue;
}
CheckValue<IkReal> x11276 = IKatan2WithCheck(IkReal((x11273+(((-1.0)*x11274)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11275.value)))+(x11276.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11277=IKcos(j4);
IkReal x11278=IKsin(j4);
IkReal x11279=(gconst5*r10);
IkReal x11280=(gconst5*r00);
IkReal x11281=(gconst5*r20);
IkReal x11282=((1.0)*x11277);
IkReal x11283=(gconst4*x11278);
IkReal x11284=(gconst4*x11277);
IkReal x11285=((1.0)*x11278);
evalcond[0]=(((r02*x11278))+((r01*x11284))+(((-1.0)*x11280*x11282)));
evalcond[1]=((((-1.0)*r22*x11282))+((r21*x11283))+(((-1.0)*x11281*x11285)));
evalcond[2]=((((-1.0)*r12*x11282))+(((-1.0)*x11279*x11285))+((r11*x11283)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11282))+((r01*x11283))+(((-1.0)*x11280*x11285)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x11278))+((r21*x11284))+(((-1.0)*x11281*x11282)));
evalcond[5]=(((r12*x11278))+(((-1.0)*sj1*sj2))+(((-1.0)*x11279*x11282))+((cj1*cj2))+((r11*x11284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11286=((1.0)*gconst5);
CheckValue<IkReal> x11287 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11286))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11287.valid){
continue;
}
CheckValue<IkReal> x11288=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11286))+(((-1.0)*gconst4*r20)))),-1);
if(!x11288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11287.value)+(((1.5707963267949)*(x11288.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11289=IKcos(j4);
IkReal x11290=IKsin(j4);
IkReal x11291=(gconst5*r10);
IkReal x11292=(gconst5*r00);
IkReal x11293=(gconst5*r20);
IkReal x11294=((1.0)*x11289);
IkReal x11295=(gconst4*x11290);
IkReal x11296=(gconst4*x11289);
IkReal x11297=((1.0)*x11290);
evalcond[0]=(((r01*x11296))+((r02*x11290))+(((-1.0)*x11292*x11294)));
evalcond[1]=((((-1.0)*r22*x11294))+((r21*x11295))+(((-1.0)*x11293*x11297)));
evalcond[2]=((((-1.0)*x11291*x11297))+((r11*x11295))+(((-1.0)*r12*x11294)));
evalcond[3]=((1.0)+((r01*x11295))+(((-1.0)*r02*x11294))+(((-1.0)*x11292*x11297)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x11296))+(((-1.0)*x11293*x11294))+((r22*x11290)));
evalcond[5]=((((-1.0)*x11291*x11294))+(((-1.0)*sj1*sj2))+((r11*x11296))+((cj1*cj2))+((r12*x11290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11298=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11298.valid){
continue;
}
CheckValue<IkReal> x11299 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11298.value)))+(x11299.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11300=IKcos(j4);
IkReal x11301=IKsin(j4);
IkReal x11302=(gconst5*r10);
IkReal x11303=(gconst5*r00);
IkReal x11304=(gconst5*r20);
IkReal x11305=((1.0)*x11300);
IkReal x11306=(gconst4*x11301);
IkReal x11307=(gconst4*x11300);
IkReal x11308=((1.0)*x11301);
evalcond[0]=(((r02*x11301))+((r01*x11307))+(((-1.0)*x11303*x11305)));
evalcond[1]=((((-1.0)*x11304*x11308))+(((-1.0)*r22*x11305))+((r21*x11306)));
evalcond[2]=((((-1.0)*x11302*x11308))+((r11*x11306))+(((-1.0)*r12*x11305)));
evalcond[3]=((1.0)+((r01*x11306))+(((-1.0)*x11303*x11308))+(((-1.0)*r02*x11305)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11304*x11305))+((cj1*sj2))+((r21*x11307))+((r22*x11301)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x11301))+(((-1.0)*x11302*x11305))+((r11*x11307))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11309=((-1.0)*r21);
CheckValue<IkReal> x11312 = IKatan2WithCheck(IkReal(x11309),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11312.valid){
continue;
}
IkReal x11310=((1.0)*(x11312.value));
IkReal x11311=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11310)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11310)));
IkReal gconst4=(x11309*x11311);
IkReal gconst5=((1.0)*r20*x11311);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11313=((-1.0)*r21);
CheckValue<IkReal> x11316 = IKatan2WithCheck(IkReal(x11313),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11316.valid){
continue;
}
IkReal x11314=((1.0)*(x11316.value));
IkReal x11315=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11314)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11314)));
IkReal gconst4=(x11313*x11315);
IkReal gconst5=((1.0)*r20*x11315);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11317=((-1.0)*r21);
CheckValue<IkReal> x11320 = IKatan2WithCheck(IkReal(x11317),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11320.valid){
continue;
}
IkReal x11318=((1.0)*(x11320.value));
IkReal x11319=x10111;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11318)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11318)));
IkReal gconst4=(x11317*x11319);
IkReal gconst5=((1.0)*r20*x11319);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11321=(gconst5*r00);
IkReal x11322=(gconst4*r01);
CheckValue<IkReal> x11323 = IKatan2WithCheck(IkReal((x11321+(((-1.0)*x11322)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11323.valid){
continue;
}
CheckValue<IkReal> x11324=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11321*x11322))+(x11322*x11322)+(r02*r02)+(x11321*x11321))),-1);
if(!x11324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11323.value)+(((1.5707963267949)*(x11324.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11325=IKsin(j4);
IkReal x11326=IKcos(j4);
IkReal x11327=(gconst4*r11);
IkReal x11328=(gconst5*r10);
IkReal x11329=(gconst5*r00);
IkReal x11330=(gconst5*r20);
IkReal x11331=((1.0)*x11326);
IkReal x11332=(gconst4*x11325);
IkReal x11333=((1.0)*x11325);
evalcond[0]=((((-1.0)*r22*x11331))+(((-1.0)*x11330*x11333))+((r21*x11332)));
evalcond[1]=((((-1.0)*r12*x11331))+((x11325*x11327))+(((-1.0)*x11328*x11333)));
evalcond[2]=(((x11326*x11329))+(((-1.0)*gconst4*r01*x11331))+(((-1.0)*r02*x11333)));
evalcond[3]=((1.0)+((r01*x11332))+(((-1.0)*r02*x11331))+(((-1.0)*x11329*x11333)));
evalcond[4]=(((cj2*sj1))+((x11326*x11330))+((cj1*sj2))+(((-1.0)*r22*x11333))+(((-1.0)*gconst4*r21*x11331)));
evalcond[5]=((((-1.0)*r12*x11333))+(((-1.0)*sj1*sj2))+((x11326*x11328))+((cj1*cj2))+(((-1.0)*x11327*x11331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11334=((1.0)*gconst5);
CheckValue<IkReal> x11335 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11334)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11335.valid){
continue;
}
CheckValue<IkReal> x11336=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11334))+(((-1.0)*gconst4*r20)))),-1);
if(!x11336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11335.value)+(((1.5707963267949)*(x11336.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11337=IKsin(j4);
IkReal x11338=IKcos(j4);
IkReal x11339=(gconst4*r11);
IkReal x11340=(gconst5*r10);
IkReal x11341=(gconst5*r00);
IkReal x11342=(gconst5*r20);
IkReal x11343=((1.0)*x11338);
IkReal x11344=(gconst4*x11337);
IkReal x11345=((1.0)*x11337);
evalcond[0]=((((-1.0)*x11342*x11345))+(((-1.0)*r22*x11343))+((r21*x11344)));
evalcond[1]=((((-1.0)*x11340*x11345))+((x11337*x11339))+(((-1.0)*r12*x11343)));
evalcond[2]=(((x11338*x11341))+(((-1.0)*gconst4*r01*x11343))+(((-1.0)*r02*x11345)));
evalcond[3]=((1.0)+((r01*x11344))+(((-1.0)*x11341*x11345))+(((-1.0)*r02*x11343)));
evalcond[4]=(((cj2*sj1))+((x11338*x11342))+((cj1*sj2))+(((-1.0)*r22*x11345))+(((-1.0)*gconst4*r21*x11343)));
evalcond[5]=(((x11338*x11340))+(((-1.0)*sj1*sj2))+(((-1.0)*x11339*x11343))+((cj1*cj2))+(((-1.0)*r12*x11345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11346=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11346.valid){
continue;
}
CheckValue<IkReal> x11347 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11346.value)))+(x11347.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11348=IKsin(j4);
IkReal x11349=IKcos(j4);
IkReal x11350=(gconst4*r11);
IkReal x11351=(gconst5*r10);
IkReal x11352=(gconst5*r00);
IkReal x11353=(gconst5*r20);
IkReal x11354=((1.0)*x11349);
IkReal x11355=(gconst4*x11348);
IkReal x11356=((1.0)*x11348);
evalcond[0]=((((-1.0)*x11353*x11356))+(((-1.0)*r22*x11354))+((r21*x11355)));
evalcond[1]=((((-1.0)*r12*x11354))+(((-1.0)*x11351*x11356))+((x11348*x11350)));
evalcond[2]=(((x11349*x11352))+(((-1.0)*gconst4*r01*x11354))+(((-1.0)*r02*x11356)));
evalcond[3]=((1.0)+((r01*x11355))+(((-1.0)*r02*x11354))+(((-1.0)*x11352*x11356)));
evalcond[4]=(((cj2*sj1))+((x11349*x11353))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11354))+(((-1.0)*r22*x11356)));
evalcond[5]=((((-1.0)*r12*x11356))+((x11349*x11351))+(((-1.0)*x11350*x11354))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11357=((-1.0)*r21);
IkReal x11358=((-1.0)*r20);
CheckValue<IkReal> x11360 = IKatan2WithCheck(IkReal(x11357),IkReal(x11358),IKFAST_ATAN2_MAGTHRESH);
if(!x11360.valid){
continue;
}
IkReal x11359=((1.0)*(x11360.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11359)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11358);
rxp0_2=(py*r00);
rxp1_0=(py*x11357);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11359)));
IkReal gconst4=x11357;
IkReal gconst5=((1.0)*r20);
IkReal x11361=((1.0)*r01*r21);
IkReal x11362=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11362))+(((-1.0)*x11361)));
j4eval[1]=((((-1.0)*cj3*x11361))+(((-1.0)*cj3*x11362)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11363=((-1.0)*r21);
IkReal x11364=((-1.0)*r20);
CheckValue<IkReal> x11366 = IKatan2WithCheck(IkReal(x11363),IkReal(x11364),IKFAST_ATAN2_MAGTHRESH);
if(!x11366.valid){
continue;
}
IkReal x11365=((1.0)*(x11366.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11365)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11364);
rxp0_2=(py*r00);
rxp1_0=(py*x11363);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11365)));
IkReal gconst4=x11363;
IkReal gconst5=((1.0)*r20);
IkReal x11367=((1.0)*r01*r21);
IkReal x11368=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11368))+(((-1.0)*x11367)));
j4eval[1]=(((sj3*x11368))+((sj3*x11367)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11369=((-1.0)*r21);
IkReal x11370=((-1.0)*r20);
CheckValue<IkReal> x11372 = IKatan2WithCheck(IkReal(x11369),IkReal(x11370),IKFAST_ATAN2_MAGTHRESH);
if(!x11372.valid){
continue;
}
IkReal x11371=((1.0)*(x11372.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11371)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11370);
rxp0_2=(py*r00);
rxp1_0=(py*x11369);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11371)));
IkReal gconst4=x11369;
IkReal gconst5=((1.0)*r20);
IkReal x11373=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r00*r20*x11373))+(((-1.0)*r01*r21*x11373)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11374=((1.0)*gconst5);
CheckValue<IkReal> x11375=IKPowWithIntegerCheck(cj3,-1);
if(!x11375.valid){
continue;
}
CheckValue<IkReal> x11376=IKPowWithIntegerCheck(r12,-1);
if(!x11376.valid){
continue;
}
CheckValue<IkReal> x11377=IKPowWithIntegerCheck((((cj3*gconst4*r01))+(((-1.0)*cj3*r00*x11374))),-1);
if(!x11377.valid){
continue;
}
if( IKabs(((x11375.value)*(x11376.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11377.value)*(((((-1.0)*r01*sj3*x11374))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11375.value)*(x11376.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11377.value)*(((((-1.0)*r01*sj3*x11374))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11375.value)*(x11376.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11377.value)*(((((-1.0)*r01*sj3*x11374))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11378=IKsin(j4);
IkReal x11379=IKcos(j4);
IkReal x11380=(cj2*sj1);
IkReal x11381=(cj1*sj2);
IkReal x11382=(sj1*sj2);
IkReal x11383=(gconst5*sj3);
IkReal x11384=(gconst5*r00);
IkReal x11385=(cj3*gconst5);
IkReal x11386=(gconst4*sj3);
IkReal x11387=(cj3*gconst4);
IkReal x11388=(cj1*cj2);
IkReal x11389=((1.0)*x11378);
IkReal x11390=(gconst4*x11378);
IkReal x11391=((1.0)*x11379);
IkReal x11392=(x11380+x11381);
IkReal x11393=(x11379*x11383);
IkReal x11394=(x11379*x11387);
evalcond[0]=((-1.0)*r12*x11379);
evalcond[1]=((((-1.0)*gconst5*r20*x11389))+((r21*x11390)));
evalcond[2]=(x11388+((cj3*r12*x11378))+(((-1.0)*x11382)));
evalcond[3]=((((-1.0)*r12*sj3*x11389))+x11392);
evalcond[4]=((1.0)+((r01*x11390))+(((-1.0)*x11384*x11389)));
evalcond[5]=(((r01*x11394))+((r01*x11383))+((r00*x11386))+(((-1.0)*cj3*x11384*x11391)));
evalcond[6]=(((r00*x11393))+((r01*x11385))+((r00*x11387))+(((-1.0)*r01*x11386*x11391)));
evalcond[7]=(((r20*x11386))+x11392+((r21*x11383))+((r21*x11394))+(((-1.0)*r20*x11385*x11391)));
evalcond[8]=(((r20*x11393))+((r20*x11387))+x11382+((r21*x11385))+(((-1.0)*r21*x11386*x11391))+(((-1.0)*x11388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11395=((1.0)*gconst4);
IkReal x11396=(gconst5*r00);
CheckValue<IkReal> x11397=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*x11396))),-1);
if(!x11397.valid){
continue;
}
CheckValue<IkReal> x11398=IKPowWithIntegerCheck((((sj3*x11396))+(((-1.0)*r01*sj3*x11395))),-1);
if(!x11398.valid){
continue;
}
if( IKabs(((-1.0)*(x11397.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11398.value)*(((((-1.0)*cj3*r00*x11395))+(((-1.0)*cj3*gconst5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11397.value)))+IKsqr(((x11398.value)*(((((-1.0)*cj3*r00*x11395))+(((-1.0)*cj3*gconst5*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11397.value)), ((x11398.value)*(((((-1.0)*cj3*r00*x11395))+(((-1.0)*cj3*gconst5*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11399=IKsin(j4);
IkReal x11400=IKcos(j4);
IkReal x11401=(cj2*sj1);
IkReal x11402=(cj1*sj2);
IkReal x11403=(sj1*sj2);
IkReal x11404=(gconst5*sj3);
IkReal x11405=(gconst5*r00);
IkReal x11406=(cj3*gconst5);
IkReal x11407=(gconst4*sj3);
IkReal x11408=(cj3*gconst4);
IkReal x11409=(cj1*cj2);
IkReal x11410=((1.0)*x11399);
IkReal x11411=(gconst4*x11399);
IkReal x11412=((1.0)*x11400);
IkReal x11413=(x11401+x11402);
IkReal x11414=(x11400*x11404);
IkReal x11415=(x11400*x11408);
evalcond[0]=((-1.0)*r12*x11400);
evalcond[1]=((((-1.0)*gconst5*r20*x11410))+((r21*x11411)));
evalcond[2]=(x11409+((cj3*r12*x11399))+(((-1.0)*x11403)));
evalcond[3]=(x11413+(((-1.0)*r12*sj3*x11410)));
evalcond[4]=((1.0)+((r01*x11411))+(((-1.0)*x11405*x11410)));
evalcond[5]=((((-1.0)*cj3*x11405*x11412))+((r01*x11415))+((r01*x11404))+((r00*x11407)));
evalcond[6]=(((r00*x11414))+(((-1.0)*r01*x11407*x11412))+((r01*x11406))+((r00*x11408)));
evalcond[7]=(((r21*x11404))+x11413+(((-1.0)*r20*x11406*x11412))+((r21*x11415))+((r20*x11407)));
evalcond[8]=(((r21*x11406))+x11403+((r20*x11408))+(((-1.0)*r21*x11407*x11412))+(((-1.0)*x11409))+((r20*x11414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11416=((1.0)*gconst5);
IkReal x11417=(gconst4*r01);
CheckValue<IkReal> x11418=IKPowWithIntegerCheck((x11417+(((-1.0)*r00*x11416))),-1);
if(!x11418.valid){
continue;
}
CheckValue<IkReal> x11419=IKPowWithIntegerCheck((((cj3*x11417))+(((-1.0)*cj3*r00*x11416))),-1);
if(!x11419.valid){
continue;
}
if( IKabs(((-1.0)*(x11418.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11419.value)*(((((-1.0)*r01*sj3*x11416))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11418.value)))+IKsqr(((x11419.value)*(((((-1.0)*r01*sj3*x11416))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11418.value)), ((x11419.value)*(((((-1.0)*r01*sj3*x11416))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11420=IKsin(j4);
IkReal x11421=IKcos(j4);
IkReal x11422=(cj2*sj1);
IkReal x11423=(cj1*sj2);
IkReal x11424=(sj1*sj2);
IkReal x11425=(gconst5*sj3);
IkReal x11426=(gconst5*r00);
IkReal x11427=(cj3*gconst5);
IkReal x11428=(gconst4*sj3);
IkReal x11429=(cj3*gconst4);
IkReal x11430=(cj1*cj2);
IkReal x11431=((1.0)*x11420);
IkReal x11432=(gconst4*x11420);
IkReal x11433=((1.0)*x11421);
IkReal x11434=(x11423+x11422);
IkReal x11435=(x11421*x11425);
IkReal x11436=(x11421*x11429);
evalcond[0]=((-1.0)*r12*x11421);
evalcond[1]=(((r21*x11432))+(((-1.0)*gconst5*r20*x11431)));
evalcond[2]=(x11430+((cj3*r12*x11420))+(((-1.0)*x11424)));
evalcond[3]=(x11434+(((-1.0)*r12*sj3*x11431)));
evalcond[4]=((1.0)+(((-1.0)*x11426*x11431))+((r01*x11432)));
evalcond[5]=((((-1.0)*cj3*x11426*x11433))+((r01*x11436))+((r01*x11425))+((r00*x11428)));
evalcond[6]=((((-1.0)*r01*x11428*x11433))+((r01*x11427))+((r00*x11429))+((r00*x11435)));
evalcond[7]=(((r20*x11428))+x11434+((r21*x11425))+((r21*x11436))+(((-1.0)*r20*x11427*x11433)));
evalcond[8]=((((-1.0)*r21*x11428*x11433))+((r20*x11435))+((r20*x11429))+x11424+((r21*x11427))+(((-1.0)*x11430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11437=gconst4*gconst4;
IkReal x11438=gconst5*gconst5;
IkReal x11439=(r01*r20);
IkReal x11440=(gconst4*sj3);
IkReal x11441=(r01*r21);
IkReal x11442=((1.0)*cj3);
IkReal x11443=(r00*r21);
IkReal x11444=(r00*r20);
IkReal x11445=(cj3*gconst4*gconst5);
IkReal x11446=((1.0)*x11438);
CheckValue<IkReal> x11447 = IKatan2WithCheck(IkReal((((r00*r22*x11440))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*gconst5*x11440*x11444))+(((-1.0)*sj3*x11439*x11446))+((sj3*x11437*x11443))+((gconst5*x11440*x11441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11447.valid){
continue;
}
CheckValue<IkReal> x11448=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11438*x11442*x11444))+((x11439*x11445))+(((-1.0)*r02*r22*x11442))+((x11443*x11445))+(((-1.0)*x11437*x11441*x11442)))),-1);
if(!x11448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11447.value)+(((1.5707963267949)*(x11448.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11449=IKsin(j4);
IkReal x11450=IKcos(j4);
IkReal x11451=(cj2*sj1);
IkReal x11452=(cj1*sj2);
IkReal x11453=(gconst5*sj3);
IkReal x11454=(gconst4*r11);
IkReal x11455=(sj1*sj2);
IkReal x11456=(gconst5*r10);
IkReal x11457=(cj1*cj2);
IkReal x11458=(gconst4*r01);
IkReal x11459=(gconst5*r00);
IkReal x11460=(gconst4*sj3);
IkReal x11461=(cj3*gconst5);
IkReal x11462=(cj3*gconst4);
IkReal x11463=(gconst4*r21);
IkReal x11464=((1.0)*x11450);
IkReal x11465=((1.0)*x11449);
IkReal x11466=(cj3*x11449);
IkReal x11467=(cj3*x11450);
IkReal x11468=(x11452+x11451);
evalcond[0]=(((x11449*x11463))+(((-1.0)*gconst5*r20*x11465))+(((-1.0)*r22*x11464)));
evalcond[1]=((((-1.0)*r12*x11464))+((x11449*x11454))+(((-1.0)*x11456*x11465)));
evalcond[2]=((1.0)+((x11449*x11458))+(((-1.0)*r02*x11464))+(((-1.0)*x11459*x11465)));
evalcond[3]=(((x11458*x11467))+((r01*x11453))+(((-1.0)*cj3*x11459*x11464))+((r02*x11466))+((r00*x11460)));
evalcond[4]=(((r01*x11461))+(((-1.0)*r02*sj3*x11465))+((r00*x11450*x11453))+(((-1.0)*sj3*x11458*x11464))+((r00*x11462)));
evalcond[5]=(((r21*x11450*x11462))+x11468+(((-1.0)*r20*x11461*x11464))+((r22*x11466))+((r21*x11453))+((r20*x11460)));
evalcond[6]=(((r12*x11466))+x11457+((x11454*x11467))+((r10*x11460))+(((-1.0)*cj3*x11456*x11464))+(((-1.0)*x11455))+((r11*x11453)));
evalcond[7]=(x11468+((r11*x11461))+((r10*x11462))+(((-1.0)*r12*sj3*x11465))+(((-1.0)*sj3*x11454*x11464))+((r10*x11450*x11453)));
evalcond[8]=((((-1.0)*r21*x11460*x11464))+x11455+(((-1.0)*r22*sj3*x11465))+(((-1.0)*x11457))+((r20*x11450*x11453))+((r20*x11462))+((r21*x11461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11469=((1.0)*gconst5);
CheckValue<IkReal> x11470=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11469))+(((-1.0)*gconst4*r20)))),-1);
if(!x11470.valid){
continue;
}
CheckValue<IkReal> x11471 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11469)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11471.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11470.value)))+(x11471.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11472=IKsin(j4);
IkReal x11473=IKcos(j4);
IkReal x11474=(cj2*sj1);
IkReal x11475=(cj1*sj2);
IkReal x11476=(gconst5*sj3);
IkReal x11477=(gconst4*r11);
IkReal x11478=(sj1*sj2);
IkReal x11479=(gconst5*r10);
IkReal x11480=(cj1*cj2);
IkReal x11481=(gconst4*r01);
IkReal x11482=(gconst5*r00);
IkReal x11483=(gconst4*sj3);
IkReal x11484=(cj3*gconst5);
IkReal x11485=(cj3*gconst4);
IkReal x11486=(gconst4*r21);
IkReal x11487=((1.0)*x11473);
IkReal x11488=((1.0)*x11472);
IkReal x11489=(cj3*x11472);
IkReal x11490=(cj3*x11473);
IkReal x11491=(x11474+x11475);
evalcond[0]=((((-1.0)*r22*x11487))+(((-1.0)*gconst5*r20*x11488))+((x11472*x11486)));
evalcond[1]=((((-1.0)*r12*x11487))+((x11472*x11477))+(((-1.0)*x11479*x11488)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11487))+(((-1.0)*x11482*x11488))+((x11472*x11481)));
evalcond[3]=((((-1.0)*cj3*x11482*x11487))+((r00*x11483))+((r02*x11489))+((x11481*x11490))+((r01*x11476)));
evalcond[4]=((((-1.0)*r02*sj3*x11488))+(((-1.0)*sj3*x11481*x11487))+((r00*x11485))+((r01*x11484))+((r00*x11473*x11476)));
evalcond[5]=(((r20*x11483))+x11491+((r22*x11489))+((r21*x11473*x11485))+(((-1.0)*r20*x11484*x11487))+((r21*x11476)));
evalcond[6]=((((-1.0)*x11478))+x11480+((r11*x11476))+((x11477*x11490))+(((-1.0)*cj3*x11479*x11487))+((r12*x11489))+((r10*x11483)));
evalcond[7]=(x11491+((r10*x11473*x11476))+((r11*x11484))+(((-1.0)*sj3*x11477*x11487))+((r10*x11485))+(((-1.0)*r12*sj3*x11488)));
evalcond[8]=(((r20*x11485))+x11478+(((-1.0)*r22*sj3*x11488))+(((-1.0)*x11480))+(((-1.0)*r21*x11483*x11487))+((r20*x11473*x11476))+((r21*x11484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11492=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11492.valid){
continue;
}
CheckValue<IkReal> x11493 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11492.value)))+(x11493.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11494=IKsin(j4);
IkReal x11495=IKcos(j4);
IkReal x11496=(cj2*sj1);
IkReal x11497=(cj1*sj2);
IkReal x11498=(gconst5*sj3);
IkReal x11499=(gconst4*r11);
IkReal x11500=(sj1*sj2);
IkReal x11501=(gconst5*r10);
IkReal x11502=(cj1*cj2);
IkReal x11503=(gconst4*r01);
IkReal x11504=(gconst5*r00);
IkReal x11505=(gconst4*sj3);
IkReal x11506=(cj3*gconst5);
IkReal x11507=(cj3*gconst4);
IkReal x11508=(gconst4*r21);
IkReal x11509=((1.0)*x11495);
IkReal x11510=((1.0)*x11494);
IkReal x11511=(cj3*x11494);
IkReal x11512=(cj3*x11495);
IkReal x11513=(x11496+x11497);
evalcond[0]=(((x11494*x11508))+(((-1.0)*r22*x11509))+(((-1.0)*gconst5*r20*x11510)));
evalcond[1]=((((-1.0)*r12*x11509))+((x11494*x11499))+(((-1.0)*x11501*x11510)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11509))+((x11494*x11503))+(((-1.0)*x11504*x11510)));
evalcond[3]=(((r00*x11505))+((r02*x11511))+(((-1.0)*cj3*x11504*x11509))+((r01*x11498))+((x11503*x11512)));
evalcond[4]=(((r00*x11495*x11498))+((r00*x11507))+((r01*x11506))+(((-1.0)*r02*sj3*x11510))+(((-1.0)*sj3*x11503*x11509)));
evalcond[5]=(((r21*x11495*x11507))+x11513+((r21*x11498))+((r22*x11511))+((r20*x11505))+(((-1.0)*r20*x11506*x11509)));
evalcond[6]=(x11502+(((-1.0)*cj3*x11501*x11509))+((x11499*x11512))+((r11*x11498))+((r10*x11505))+(((-1.0)*x11500))+((r12*x11511)));
evalcond[7]=((((-1.0)*sj3*x11499*x11509))+((r10*x11495*x11498))+x11513+((r11*x11506))+(((-1.0)*r12*sj3*x11510))+((r10*x11507)));
evalcond[8]=((((-1.0)*r21*x11505*x11509))+x11500+((r21*x11506))+(((-1.0)*r22*sj3*x11510))+((r20*x11495*x11498))+(((-1.0)*x11502))+((r20*x11507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11514=((-1.0)*r21);
IkReal x11515=((-1.0)*px);
CheckValue<IkReal> x11517 = IKatan2WithCheck(IkReal(x11514),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11517.valid){
continue;
}
IkReal x11516=((1.0)*(x11517.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11516)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11515);
rxp1_1=(px*r21);
rxp1_2=(r11*x11515);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11516)));
IkReal gconst4=x11514;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11518=((-1.0)*r21);
IkReal x11519=((-1.0)*px);
CheckValue<IkReal> x11521 = IKatan2WithCheck(IkReal(x11518),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11521.valid){
continue;
}
IkReal x11520=((1.0)*(x11521.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11520)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11519);
rxp1_1=(px*r21);
rxp1_2=(r11*x11519);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11520)));
IkReal gconst4=x11518;
IkReal gconst5=((1.0)*r20);
IkReal x11522=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=((((-1.0)*x11522))+(((-1.0)*x11522*(r21*r21)))+((x11522*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11523=((-1.0)*r21);
IkReal x11524=((-1.0)*px);
CheckValue<IkReal> x11526 = IKatan2WithCheck(IkReal(x11523),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11526.valid){
continue;
}
IkReal x11525=((1.0)*(x11526.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11525)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11524);
rxp1_1=(px*r21);
rxp1_2=(r11*x11524);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11525)));
IkReal gconst4=x11523;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11527=((-1.0)*r21);
IkReal x11528=((-1.0)*px);
CheckValue<IkReal> x11530 = IKatan2WithCheck(IkReal(x11527),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11530.valid){
continue;
}
IkReal x11529=((1.0)*(x11530.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11529)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11528);
rxp1_1=(px*r21);
rxp1_2=(r11*x11528);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11529)));
IkReal gconst4=x11527;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11531=((-1.0)*r21);
IkReal x11532=((-1.0)*px);
CheckValue<IkReal> x11534 = IKatan2WithCheck(IkReal(x11531),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11534.valid){
continue;
}
IkReal x11533=((1.0)*(x11534.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11533)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11532);
rxp1_1=(px*r21);
rxp1_2=(r11*x11532);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11533)));
IkReal gconst4=x11531;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11535=((-1.0)*r21);
IkReal x11536=((-1.0)*px);
CheckValue<IkReal> x11538 = IKatan2WithCheck(IkReal(x11535),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11538.valid){
continue;
}
IkReal x11537=((1.0)*(x11538.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11537)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11536);
rxp1_1=(px*r21);
rxp1_2=(r11*x11536);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11537)));
IkReal gconst4=x11535;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11541=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11541.valid){
continue;
}
IkReal x11539=x11541.value;
IkReal x11540=(sj0*x11539);
cj4array[0]=(((cj1*sj2*x11540))+((cj2*sj1*x11540)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11542=IKsin(j4);
IkReal x11543=IKcos(j4);
IkReal x11544=(gconst5*r20);
IkReal x11545=(gconst4*x11542);
IkReal x11546=((1.0)*x11543);
IkReal x11547=((1.0)*x11542);
evalcond[0]=((-1.0)*r02*x11542);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11546)));
evalcond[2]=(((r21*x11545))+(((-1.0)*x11544*x11547)));
evalcond[3]=((((-1.0)*gconst5*r10*x11547))+((r11*x11545)));
evalcond[4]=((((-1.0)*gconst4*r21*x11546))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11543*x11544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11549=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11549.valid){
continue;
}
IkReal x11548=x11549.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11548))+((cj1*cj2*x11548)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11550=IKsin(j4);
IkReal x11551=IKcos(j4);
IkReal x11552=(gconst5*r10);
IkReal x11553=((1.0)*sj0);
IkReal x11554=(gconst4*x11550);
IkReal x11555=((1.0)*x11551);
IkReal x11556=((1.0)*x11550);
evalcond[0]=((-1.0)*r02*x11550);
evalcond[1]=((((-1.0)*x11553))+(((-1.0)*r02*x11555)));
evalcond[2]=(((r21*x11554))+(((-1.0)*gconst5*r20*x11556)));
evalcond[3]=(((r11*x11554))+(((-1.0)*x11552*x11556)));
evalcond[4]=((((-1.0)*cj1*sj2*x11553))+(((-1.0)*gconst4*r11*x11555))+((x11551*x11552))+(((-1.0)*cj2*sj1*x11553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11557=IKPowWithIntegerCheck(r02,-1);
if(!x11557.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11557.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11558=IKsin(j4);
IkReal x11559=IKcos(j4);
IkReal x11560=((1.0)*sj0);
IkReal x11561=(gconst5*x11559);
IkReal x11562=(gconst4*x11558);
IkReal x11563=((1.0)*gconst4*x11559);
IkReal x11564=((1.0)*gconst5*x11558);
evalcond[0]=((-1.0)*r02*x11558);
evalcond[1]=((((-1.0)*r20*x11564))+((r21*x11562)));
evalcond[2]=(((r11*x11562))+(((-1.0)*r10*x11564)));
evalcond[3]=(((r20*x11561))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x11563)));
evalcond[4]=(((r10*x11561))+(((-1.0)*cj2*sj1*x11560))+(((-1.0)*cj1*sj2*x11560))+(((-1.0)*r11*x11563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11565=((-1.0)*r21);
IkReal x11566=((-1.0)*px);
CheckValue<IkReal> x11568 = IKatan2WithCheck(IkReal(x11565),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11568.valid){
continue;
}
IkReal x11567=((1.0)*(x11568.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11567)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11566);
rxp1_1=(px*r21);
rxp1_2=(r11*x11566);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11567)));
IkReal gconst4=x11565;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11569=((-1.0)*r21);
IkReal x11570=((-1.0)*px);
CheckValue<IkReal> x11572 = IKatan2WithCheck(IkReal(x11569),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11572.valid){
continue;
}
IkReal x11571=((1.0)*(x11572.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11571)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11570);
rxp1_1=(px*r21);
rxp1_2=(r11*x11570);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11571)));
IkReal gconst4=x11569;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11573=((-1.0)*r21);
IkReal x11574=((-1.0)*px);
CheckValue<IkReal> x11576 = IKatan2WithCheck(IkReal(x11573),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11576.valid){
continue;
}
IkReal x11575=((1.0)*(x11576.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11575)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11574);
rxp1_1=(px*r21);
rxp1_2=(r11*x11574);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11575)));
IkReal gconst4=x11573;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11579=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11579.valid){
continue;
}
IkReal x11577=x11579.value;
IkReal x11578=(sj0*x11577);
cj4array[0]=(((cj1*sj2*x11578))+((cj2*sj1*x11578)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11580=IKsin(j4);
IkReal x11581=IKcos(j4);
IkReal x11582=(gconst5*r20);
IkReal x11583=(gconst4*x11580);
IkReal x11584=((1.0)*x11581);
IkReal x11585=((1.0)*x11580);
evalcond[0]=(r02*x11580);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11584)));
evalcond[2]=(((r21*x11583))+(((-1.0)*x11582*x11585)));
evalcond[3]=((((-1.0)*gconst5*r10*x11585))+((r11*x11583)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11582*x11584))+((gconst4*r21*x11581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11587=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11587.valid){
continue;
}
IkReal x11586=x11587.value;
cj4array[0]=(((cj1*cj2*x11586))+(((-1.0)*sj1*sj2*x11586)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11588=IKsin(j4);
IkReal x11589=IKcos(j4);
IkReal x11590=(gconst4*r11);
IkReal x11591=((1.0)*sj0);
IkReal x11592=(gconst5*r10);
IkReal x11593=((1.0)*x11589);
IkReal x11594=((1.0)*x11588);
evalcond[0]=(r02*x11588);
evalcond[1]=((((-1.0)*x11591))+(((-1.0)*r02*x11593)));
evalcond[2]=((((-1.0)*gconst5*r20*x11594))+((gconst4*r21*x11588)));
evalcond[3]=(((x11588*x11590))+(((-1.0)*x11592*x11594)));
evalcond[4]=(((x11589*x11590))+(((-1.0)*cj2*sj1*x11591))+(((-1.0)*cj1*sj2*x11591))+(((-1.0)*x11592*x11593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11595=IKPowWithIntegerCheck(r02,-1);
if(!x11595.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11595.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11596=IKsin(j4);
IkReal x11597=IKcos(j4);
IkReal x11598=(gconst4*r11);
IkReal x11599=((1.0)*cj1);
IkReal x11600=(gconst4*r21);
IkReal x11601=((1.0)*gconst5*x11597);
IkReal x11602=((1.0)*gconst5*x11596);
evalcond[0]=(r02*x11596);
evalcond[1]=((((-1.0)*r20*x11602))+((x11596*x11600)));
evalcond[2]=((((-1.0)*r10*x11602))+((x11596*x11598)));
evalcond[3]=((((-1.0)*r20*x11601))+(((-1.0)*cj2*x11599))+((sj1*sj2))+((x11597*x11600)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x11601))+(((-1.0)*sj0*sj2*x11599))+((x11597*x11598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11604=IKPowWithIntegerCheck(r02,-1);
if(!x11604.valid){
continue;
}
IkReal x11603=x11604.value;
CheckValue<IkReal> x11605=IKPowWithIntegerCheck(cj3,-1);
if(!x11605.valid){
continue;
}
if( IKabs((x11603*(x11605.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11603)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11603*(x11605.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11603))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11603*(x11605.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11603));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11606=IKsin(j4);
IkReal x11607=IKcos(j4);
IkReal x11608=(gconst5*sj3);
IkReal x11609=(gconst4*r11);
IkReal x11610=(sj1*sj2);
IkReal x11611=((1.0)*gconst5);
IkReal x11612=(cj2*sj1);
IkReal x11613=((1.0)*sj0);
IkReal x11614=((1.0)*cj0);
IkReal x11615=(gconst4*r21);
IkReal x11616=(cj1*sj2);
IkReal x11617=(cj3*gconst4);
IkReal x11618=(gconst4*sj3);
IkReal x11619=(cj3*gconst5);
IkReal x11620=(r20*x11607);
IkReal x11621=((1.0)*cj1*cj2);
IkReal x11622=(r10*x11607);
IkReal x11623=(cj3*x11607);
IkReal x11624=(r02*x11606);
IkReal x11625=((1.0)*sj3*x11607);
evalcond[0]=((((-1.0)*x11613))+(((-1.0)*r02*x11607)));
evalcond[1]=((((-1.0)*r20*x11606*x11611))+((x11606*x11615)));
evalcond[2]=(cj0+(((-1.0)*r10*x11606*x11611))+((x11606*x11609)));
evalcond[3]=((((-1.0)*cj1*cj2*x11614))+((cj3*x11624))+((cj0*x11610)));
evalcond[4]=((((-1.0)*sj3*x11624))+(((-1.0)*x11614*x11616))+(((-1.0)*x11612*x11614)));
evalcond[5]=(((x11615*x11623))+x11616+x11612+(((-1.0)*cj3*x11611*x11620))+((r21*x11608))+((r20*x11618)));
evalcond[6]=(x11610+(((-1.0)*x11621))+((r21*x11619))+((r20*x11617))+((x11608*x11620))+(((-1.0)*x11615*x11625)));
evalcond[7]=((((-1.0)*cj1*cj2*x11613))+((x11609*x11623))+(((-1.0)*cj3*x11611*x11622))+((sj0*x11610))+((r11*x11608))+((r10*x11618)));
evalcond[8]=(((r11*x11619))+(((-1.0)*x11609*x11625))+(((-1.0)*x11613*x11616))+(((-1.0)*x11612*x11613))+((x11608*x11622))+((r10*x11617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11626=((1.0)*gconst5);
CheckValue<IkReal> x11627=IKPowWithIntegerCheck(((((-1.0)*r10*x11626))+((gconst4*r11))),-1);
if(!x11627.valid){
continue;
}
CheckValue<IkReal> x11628=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x11626))+((cj3*gconst4*r21))),-1);
if(!x11628.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11627.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11628.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11626)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11627.value)))+IKsqr(((x11628.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11626))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11627.value)), ((x11628.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11626))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11629=IKsin(j4);
IkReal x11630=IKcos(j4);
IkReal x11631=(gconst5*sj3);
IkReal x11632=(gconst4*r11);
IkReal x11633=(sj1*sj2);
IkReal x11634=((1.0)*gconst5);
IkReal x11635=(cj2*sj1);
IkReal x11636=((1.0)*sj0);
IkReal x11637=((1.0)*cj0);
IkReal x11638=(gconst4*r21);
IkReal x11639=(cj1*sj2);
IkReal x11640=(cj3*gconst4);
IkReal x11641=(gconst4*sj3);
IkReal x11642=(cj3*gconst5);
IkReal x11643=(r20*x11630);
IkReal x11644=((1.0)*cj1*cj2);
IkReal x11645=(r10*x11630);
IkReal x11646=(cj3*x11630);
IkReal x11647=(r02*x11629);
IkReal x11648=((1.0)*sj3*x11630);
evalcond[0]=((((-1.0)*x11636))+(((-1.0)*r02*x11630)));
evalcond[1]=((((-1.0)*r20*x11629*x11634))+((x11629*x11638)));
evalcond[2]=((((-1.0)*r10*x11629*x11634))+cj0+((x11629*x11632)));
evalcond[3]=(((cj3*x11647))+(((-1.0)*cj1*cj2*x11637))+((cj0*x11633)));
evalcond[4]=((((-1.0)*sj3*x11647))+(((-1.0)*x11637*x11639))+(((-1.0)*x11635*x11637)));
evalcond[5]=(x11639+x11635+((r21*x11631))+((r20*x11641))+((x11638*x11646))+(((-1.0)*cj3*x11634*x11643)));
evalcond[6]=(x11633+(((-1.0)*x11638*x11648))+((r21*x11642))+((x11631*x11643))+((r20*x11640))+(((-1.0)*x11644)));
evalcond[7]=(((r11*x11631))+((r10*x11641))+(((-1.0)*cj1*cj2*x11636))+((sj0*x11633))+((x11632*x11646))+(((-1.0)*cj3*x11634*x11645)));
evalcond[8]=(((r11*x11642))+((r10*x11640))+(((-1.0)*x11636*x11639))+((x11631*x11645))+(((-1.0)*x11632*x11648))+(((-1.0)*x11635*x11636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11649=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11649.valid){
continue;
}
CheckValue<IkReal> x11650=IKPowWithIntegerCheck(r02,-1);
if(!x11650.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11649.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11650.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11649.value)))+IKsqr(((-1.0)*sj0*(x11650.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11649.value)), ((-1.0)*sj0*(x11650.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11651=IKsin(j4);
IkReal x11652=IKcos(j4);
IkReal x11653=(gconst5*sj3);
IkReal x11654=(gconst4*r11);
IkReal x11655=(sj1*sj2);
IkReal x11656=((1.0)*gconst5);
IkReal x11657=(cj2*sj1);
IkReal x11658=((1.0)*sj0);
IkReal x11659=((1.0)*cj0);
IkReal x11660=(gconst4*r21);
IkReal x11661=(cj1*sj2);
IkReal x11662=(cj3*gconst4);
IkReal x11663=(gconst4*sj3);
IkReal x11664=(cj3*gconst5);
IkReal x11665=(r20*x11652);
IkReal x11666=((1.0)*cj1*cj2);
IkReal x11667=(r10*x11652);
IkReal x11668=(cj3*x11652);
IkReal x11669=(r02*x11651);
IkReal x11670=((1.0)*sj3*x11652);
evalcond[0]=((((-1.0)*x11658))+(((-1.0)*r02*x11652)));
evalcond[1]=((((-1.0)*r20*x11651*x11656))+((x11651*x11660)));
evalcond[2]=(cj0+(((-1.0)*r10*x11651*x11656))+((x11651*x11654)));
evalcond[3]=((((-1.0)*cj1*cj2*x11659))+((cj0*x11655))+((cj3*x11669)));
evalcond[4]=((((-1.0)*x11659*x11661))+(((-1.0)*x11657*x11659))+(((-1.0)*sj3*x11669)));
evalcond[5]=(x11661+x11657+((r20*x11663))+(((-1.0)*cj3*x11656*x11665))+((r21*x11653))+((x11660*x11668)));
evalcond[6]=(((r21*x11664))+x11655+((r20*x11662))+(((-1.0)*x11660*x11670))+(((-1.0)*x11666))+((x11653*x11665)));
evalcond[7]=((((-1.0)*cj1*cj2*x11658))+((r11*x11653))+(((-1.0)*cj3*x11656*x11667))+((sj0*x11655))+((r10*x11663))+((x11654*x11668)));
evalcond[8]=((((-1.0)*x11657*x11658))+((r11*x11664))+((r10*x11662))+(((-1.0)*x11658*x11661))+((x11653*x11667))+(((-1.0)*x11654*x11670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11671=((1.0)*sj0);
IkReal x11672=((1.0)*gconst4);
CheckValue<IkReal> x11673 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11671)))),IkReal(((((-1.0)*cj0*r01*x11672))+((cj0*gconst5*r00))+(((-1.0)*gconst4*r11*x11671))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11673.valid){
continue;
}
CheckValue<IkReal> x11674=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11672))+(((-1.0)*gconst5*r21)))),-1);
if(!x11674.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11673.value)+(((1.5707963267949)*(x11674.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11675=IKsin(j4);
IkReal x11676=IKcos(j4);
IkReal x11677=(gconst5*sj3);
IkReal x11678=(cj3*gconst5);
IkReal x11679=(gconst4*r11);
IkReal x11680=(sj1*sj2);
IkReal x11681=(cj2*sj1);
IkReal x11682=((1.0)*sj0);
IkReal x11683=(gconst4*r01);
IkReal x11684=(gconst4*r21);
IkReal x11685=((1.0)*cj0);
IkReal x11686=(cj1*sj2);
IkReal x11687=(gconst4*sj3);
IkReal x11688=(cj3*gconst4);
IkReal x11689=((1.0)*x11676);
IkReal x11690=((1.0)*cj1*cj2);
IkReal x11691=(cj3*x11675);
IkReal x11692=(cj3*x11676);
IkReal x11693=((1.0)*gconst5*x11675);
IkReal x11694=((1.0)*sj3*x11675);
evalcond[0]=(((x11675*x11684))+(((-1.0)*r20*x11693))+(((-1.0)*r22*x11689)));
evalcond[1]=(cj0+(((-1.0)*r12*x11689))+((x11675*x11679))+(((-1.0)*r10*x11693)));
evalcond[2]=(((x11675*x11683))+(((-1.0)*r02*x11689))+(((-1.0)*x11682))+(((-1.0)*r00*x11693)));
evalcond[3]=(((x11684*x11692))+x11686+x11681+(((-1.0)*r20*x11678*x11689))+((r21*x11677))+((r22*x11691))+((r20*x11687)));
evalcond[4]=((((-1.0)*r22*x11694))+x11680+(((-1.0)*sj3*x11684*x11689))+((r20*x11676*x11677))+((r21*x11678))+(((-1.0)*x11690))+((r20*x11688)));
evalcond[5]=(((r00*x11687))+(((-1.0)*r00*x11678*x11689))+((x11683*x11692))+((r01*x11677))+((cj0*x11680))+(((-1.0)*cj1*cj2*x11685))+((r02*x11691)));
evalcond[6]=((((-1.0)*r10*x11678*x11689))+((x11679*x11692))+((sj0*x11680))+((r10*x11687))+((r11*x11677))+((r12*x11691))+(((-1.0)*cj1*cj2*x11682)));
evalcond[7]=(((r00*x11688))+((r00*x11676*x11677))+(((-1.0)*x11681*x11685))+(((-1.0)*r02*x11694))+(((-1.0)*x11685*x11686))+((r01*x11678))+(((-1.0)*sj3*x11683*x11689)));
evalcond[8]=(((r10*x11676*x11677))+(((-1.0)*x11681*x11682))+((r10*x11688))+((r11*x11678))+(((-1.0)*sj3*x11679*x11689))+(((-1.0)*x11682*x11686))+(((-1.0)*r12*x11694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11695=((1.0)*gconst5);
CheckValue<IkReal> x11696 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11695))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11696.valid){
continue;
}
CheckValue<IkReal> x11697=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11695))+(((-1.0)*gconst4*r10)))),-1);
if(!x11697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11696.value)+(((1.5707963267949)*(x11697.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11698=IKsin(j4);
IkReal x11699=IKcos(j4);
IkReal x11700=(gconst5*sj3);
IkReal x11701=(cj3*gconst5);
IkReal x11702=(gconst4*r11);
IkReal x11703=(sj1*sj2);
IkReal x11704=(cj2*sj1);
IkReal x11705=((1.0)*sj0);
IkReal x11706=(gconst4*r01);
IkReal x11707=(gconst4*r21);
IkReal x11708=((1.0)*cj0);
IkReal x11709=(cj1*sj2);
IkReal x11710=(gconst4*sj3);
IkReal x11711=(cj3*gconst4);
IkReal x11712=((1.0)*x11699);
IkReal x11713=((1.0)*cj1*cj2);
IkReal x11714=(cj3*x11698);
IkReal x11715=(cj3*x11699);
IkReal x11716=((1.0)*gconst5*x11698);
IkReal x11717=((1.0)*sj3*x11698);
evalcond[0]=((((-1.0)*r20*x11716))+(((-1.0)*r22*x11712))+((x11698*x11707)));
evalcond[1]=(cj0+(((-1.0)*r10*x11716))+(((-1.0)*r12*x11712))+((x11698*x11702)));
evalcond[2]=((((-1.0)*r00*x11716))+(((-1.0)*x11705))+((x11698*x11706))+(((-1.0)*r02*x11712)));
evalcond[3]=(x11709+x11704+((r21*x11700))+((r20*x11710))+((x11707*x11715))+(((-1.0)*r20*x11701*x11712))+((r22*x11714)));
evalcond[4]=(x11703+(((-1.0)*x11713))+(((-1.0)*sj3*x11707*x11712))+(((-1.0)*r22*x11717))+((r21*x11701))+((r20*x11711))+((r20*x11699*x11700)));
evalcond[5]=((((-1.0)*r00*x11701*x11712))+((r00*x11710))+((r01*x11700))+((r02*x11714))+((x11706*x11715))+((cj0*x11703))+(((-1.0)*cj1*cj2*x11708)));
evalcond[6]=(((x11702*x11715))+(((-1.0)*r10*x11701*x11712))+((r10*x11710))+((sj0*x11703))+(((-1.0)*cj1*cj2*x11705))+((r11*x11700))+((r12*x11714)));
evalcond[7]=((((-1.0)*sj3*x11706*x11712))+(((-1.0)*x11704*x11708))+((r00*x11711))+((r01*x11701))+((r00*x11699*x11700))+(((-1.0)*x11708*x11709))+(((-1.0)*r02*x11717)));
evalcond[8]=(((r10*x11699*x11700))+(((-1.0)*x11704*x11705))+(((-1.0)*r12*x11717))+(((-1.0)*x11705*x11709))+((r10*x11711))+(((-1.0)*sj3*x11702*x11712))+((r11*x11701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11718=((1.0)*gconst5);
CheckValue<IkReal> x11719=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11718)))),-1);
if(!x11719.valid){
continue;
}
CheckValue<IkReal> x11720 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11718))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11719.value)))+(x11720.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11721=IKsin(j4);
IkReal x11722=IKcos(j4);
IkReal x11723=(gconst5*sj3);
IkReal x11724=(cj3*gconst5);
IkReal x11725=(gconst4*r11);
IkReal x11726=(sj1*sj2);
IkReal x11727=(cj2*sj1);
IkReal x11728=((1.0)*sj0);
IkReal x11729=(gconst4*r01);
IkReal x11730=(gconst4*r21);
IkReal x11731=((1.0)*cj0);
IkReal x11732=(cj1*sj2);
IkReal x11733=(gconst4*sj3);
IkReal x11734=(cj3*gconst4);
IkReal x11735=((1.0)*x11722);
IkReal x11736=((1.0)*cj1*cj2);
IkReal x11737=(cj3*x11721);
IkReal x11738=(cj3*x11722);
IkReal x11739=((1.0)*gconst5*x11721);
IkReal x11740=((1.0)*sj3*x11721);
evalcond[0]=((((-1.0)*r20*x11739))+(((-1.0)*r22*x11735))+((x11721*x11730)));
evalcond[1]=(cj0+(((-1.0)*r10*x11739))+(((-1.0)*r12*x11735))+((x11721*x11725)));
evalcond[2]=((((-1.0)*x11728))+(((-1.0)*r00*x11739))+((x11721*x11729))+(((-1.0)*r02*x11735)));
evalcond[3]=(x11732+x11727+(((-1.0)*r20*x11724*x11735))+((r20*x11733))+((x11730*x11738))+((r21*x11723))+((r22*x11737)));
evalcond[4]=(x11726+(((-1.0)*x11736))+((r20*x11734))+(((-1.0)*r22*x11740))+(((-1.0)*sj3*x11730*x11735))+((r21*x11724))+((r20*x11722*x11723)));
evalcond[5]=(((r00*x11733))+((r01*x11723))+((x11729*x11738))+(((-1.0)*cj1*cj2*x11731))+((cj0*x11726))+((r02*x11737))+(((-1.0)*r00*x11724*x11735)));
evalcond[6]=(((sj0*x11726))+((r10*x11733))+(((-1.0)*cj1*cj2*x11728))+((x11725*x11738))+((r12*x11737))+((r11*x11723))+(((-1.0)*r10*x11724*x11735)));
evalcond[7]=(((r00*x11734))+((r01*x11724))+(((-1.0)*sj3*x11729*x11735))+(((-1.0)*x11731*x11732))+(((-1.0)*r02*x11740))+(((-1.0)*x11727*x11731))+((r00*x11722*x11723)));
evalcond[8]=((((-1.0)*x11728*x11732))+(((-1.0)*sj3*x11725*x11735))+((r10*x11722*x11723))+(((-1.0)*r12*x11740))+((r10*x11734))+(((-1.0)*x11727*x11728))+((r11*x11724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11741=((-1.0)*r10);
IkReal x11743 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11743)==0){
continue;
}
IkReal x11742=pow(x11743,-0.5);
CheckValue<IkReal> x11744 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11741),IKFAST_ATAN2_MAGTHRESH);
if(!x11744.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11744.value));
IkReal gconst7=(r11*x11742);
IkReal gconst8=(x11741*x11742);
CheckValue<IkReal> x11745 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11745.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11745.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11746=((-1.0)*r10);
IkReal x11747=x11742;
CheckValue<IkReal> x11749 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11746),IKFAST_ATAN2_MAGTHRESH);
if(!x11749.valid){
continue;
}
IkReal x11748=((-1.0)*(x11749.value));
sj5=gconst7;
cj5=gconst8;
j5=x11748;
IkReal gconst6=x11748;
IkReal gconst7=(r11*x11747);
IkReal gconst8=(x11746*x11747);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11750=((1.0)*sj0);
IkReal x11751=((1.0)*gconst7);
CheckValue<IkReal> x11752 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11750))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst7*r11*x11750))+((gconst8*r10*sj0))+(((-1.0)*cj0*r01*x11751))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11752.valid){
continue;
}
CheckValue<IkReal> x11753=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst8*r21))+(((-1.0)*r20*x11751)))),-1);
if(!x11753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11752.value)+(((1.5707963267949)*(x11753.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11754=IKsin(j4);
IkReal x11755=IKcos(j4);
IkReal x11756=(gconst7*sj3);
IkReal x11757=(cj3*gconst8);
IkReal x11758=(cj3*gconst7);
IkReal x11759=(sj1*sj2);
IkReal x11760=(cj2*sj1);
IkReal x11761=((1.0)*sj0);
IkReal x11762=((1.0)*cj0);
IkReal x11763=(gconst8*sj3);
IkReal x11764=(cj1*sj2);
IkReal x11765=((1.0)*x11755);
IkReal x11766=((1.0)*x11754);
IkReal x11767=((1.0)*cj1*cj2);
IkReal x11768=(cj3*x11754);
IkReal x11769=(gconst7*x11754);
IkReal x11770=(x11755*x11763);
evalcond[0]=((((-1.0)*r22*x11765))+(((-1.0)*gconst8*r20*x11766))+((r21*x11769)));
evalcond[1]=((((-1.0)*r12*x11765))+(((-1.0)*gconst8*r10*x11766))+((r11*x11769))+cj0);
evalcond[2]=((((-1.0)*gconst8*r00*x11766))+(((-1.0)*r02*x11765))+(((-1.0)*x11761))+((r01*x11769)));
evalcond[3]=((((-1.0)*r20*x11757*x11765))+x11760+x11764+((r22*x11768))+((r21*x11755*x11758))+((r21*x11763))+((r20*x11756)));
evalcond[4]=((((-1.0)*r22*sj3*x11766))+x11759+((r20*x11770))+(((-1.0)*x11767))+((r21*x11757))+(((-1.0)*r21*x11756*x11765))+((r20*x11758)));
evalcond[5]=(((cj0*x11759))+(((-1.0)*cj1*cj2*x11762))+((r02*x11768))+(((-1.0)*r00*x11757*x11765))+((r01*x11763))+((r00*x11756))+((r01*x11755*x11758)));
evalcond[6]=((((-1.0)*cj1*cj2*x11761))+(((-1.0)*r10*x11757*x11765))+((r11*x11763))+((r10*x11756))+((r12*x11768))+((sj0*x11759))+((r11*x11755*x11758)));
evalcond[7]=((((-1.0)*r01*x11756*x11765))+(((-1.0)*x11760*x11762))+(((-1.0)*r02*sj3*x11766))+((r00*x11770))+(((-1.0)*x11762*x11764))+((r01*x11757))+((r00*x11758)));
evalcond[8]=((((-1.0)*r11*x11756*x11765))+((r10*x11770))+((r11*x11757))+((r10*x11758))+(((-1.0)*x11760*x11761))+(((-1.0)*r12*sj3*x11766))+(((-1.0)*x11761*x11764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11771=((1.0)*gconst8);
CheckValue<IkReal> x11772=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r00))+(((-1.0)*r01*x11771)))),-1);
if(!x11772.valid){
continue;
}
CheckValue<IkReal> x11773 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x11771)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11772.value)))+(x11773.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11774=IKsin(j4);
IkReal x11775=IKcos(j4);
IkReal x11776=(gconst7*sj3);
IkReal x11777=(cj3*gconst8);
IkReal x11778=(cj3*gconst7);
IkReal x11779=(sj1*sj2);
IkReal x11780=(cj2*sj1);
IkReal x11781=((1.0)*sj0);
IkReal x11782=((1.0)*cj0);
IkReal x11783=(gconst8*sj3);
IkReal x11784=(cj1*sj2);
IkReal x11785=((1.0)*x11775);
IkReal x11786=((1.0)*x11774);
IkReal x11787=((1.0)*cj1*cj2);
IkReal x11788=(cj3*x11774);
IkReal x11789=(gconst7*x11774);
IkReal x11790=(x11775*x11783);
evalcond[0]=(((r21*x11789))+(((-1.0)*gconst8*r20*x11786))+(((-1.0)*r22*x11785)));
evalcond[1]=(((r11*x11789))+cj0+(((-1.0)*r12*x11785))+(((-1.0)*gconst8*r10*x11786)));
evalcond[2]=((((-1.0)*gconst8*r00*x11786))+(((-1.0)*r02*x11785))+(((-1.0)*x11781))+((r01*x11789)));
evalcond[3]=(((r21*x11783))+x11784+x11780+((r20*x11776))+((r21*x11775*x11778))+((r22*x11788))+(((-1.0)*r20*x11777*x11785)));
evalcond[4]=(x11779+((r20*x11778))+((r20*x11790))+(((-1.0)*r21*x11776*x11785))+((r21*x11777))+(((-1.0)*r22*sj3*x11786))+(((-1.0)*x11787)));
evalcond[5]=(((r01*x11775*x11778))+(((-1.0)*r00*x11777*x11785))+((r02*x11788))+(((-1.0)*cj1*cj2*x11782))+((r00*x11776))+((cj0*x11779))+((r01*x11783)));
evalcond[6]=(((r11*x11783))+((r10*x11776))+((sj0*x11779))+((r12*x11788))+(((-1.0)*cj1*cj2*x11781))+((r11*x11775*x11778))+(((-1.0)*r10*x11777*x11785)));
evalcond[7]=((((-1.0)*r01*x11776*x11785))+(((-1.0)*x11782*x11784))+(((-1.0)*r02*sj3*x11786))+(((-1.0)*x11780*x11782))+((r01*x11777))+((r00*x11778))+((r00*x11790)));
evalcond[8]=(((r10*x11778))+((r10*x11790))+((r11*x11777))+(((-1.0)*x11780*x11781))+(((-1.0)*x11781*x11784))+(((-1.0)*r11*x11776*x11785))+(((-1.0)*r12*sj3*x11786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11791=((-1.0)*r11);
IkReal x11793 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11793)==0){
continue;
}
IkReal x11792=pow(x11793,-0.5);
CheckValue<IkReal> x11794 = IKatan2WithCheck(IkReal(x11791),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11794.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11794.value))));
IkReal gconst10=(x11791*x11792);
IkReal gconst11=((1.0)*r10*x11792);
CheckValue<IkReal> x11795 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11795.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11795.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11796=((-1.0)*r11);
CheckValue<IkReal> x11799 = IKatan2WithCheck(IkReal(x11796),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11799.valid){
continue;
}
IkReal x11797=((1.0)*(x11799.value));
IkReal x11798=x11792;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11797)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11797)));
IkReal gconst10=(x11796*x11798);
IkReal gconst11=((1.0)*r10*x11798);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11800=((-1.0)*r11);
CheckValue<IkReal> x11803 = IKatan2WithCheck(IkReal(x11800),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11803.valid){
continue;
}
IkReal x11801=((1.0)*(x11803.value));
IkReal x11802=x11792;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11801)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11801)));
IkReal gconst10=(x11800*x11802);
IkReal gconst11=((1.0)*r10*x11802);
IkReal x11804=r12*r12;
IkReal x11805=((1.0)*sj0);
IkReal x11806=(cj0*r02);
IkReal x11807=x11792;
j4eval[0]=((IKabs(((((-1.0)*r12*x11805))+(((-1.0)*x11806)))))+(IKabs((((r12*x11806*x11807))+(((-1.0)*x11805*x11807))+((sj0*x11804*x11807))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11808=((-1.0)*r11);
CheckValue<IkReal> x11811 = IKatan2WithCheck(IkReal(x11808),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11811.valid){
continue;
}
IkReal x11809=((1.0)*(x11811.value));
IkReal x11810=x11792;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11809)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11809)));
IkReal gconst10=(x11808*x11810);
IkReal gconst11=((1.0)*r10*x11810);
IkReal x11812=((1.0)*cj3);
CheckValue<IkReal> x11817=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11817.valid){
continue;
}
IkReal x11813=x11817.value;
IkReal x11814=(cj3*x11813);
IkReal x11815=(x11812*x11813);
IkReal x11816=((((-1.0)*x11815*(r10*r10)*(r20*r20)))+(((-1.0)*x11815*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x11814))+(((-1.0)*x11812*(r22*r22))));
j4eval[0]=x11816;
j4eval[1]=IKsign(x11816);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11818=((-1.0)*r11);
CheckValue<IkReal> x11821 = IKatan2WithCheck(IkReal(x11818),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11821.valid){
continue;
}
IkReal x11819=((1.0)*(x11821.value));
IkReal x11820=x11792;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11819)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11819)));
IkReal gconst10=(x11818*x11820);
IkReal gconst11=((1.0)*r10*x11820);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11822=((-1.0)*r11);
CheckValue<IkReal> x11825 = IKatan2WithCheck(IkReal(x11822),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11825.valid){
continue;
}
IkReal x11823=((1.0)*(x11825.value));
IkReal x11824=x11792;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11823)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11823)));
IkReal gconst10=(x11822*x11824);
IkReal gconst11=((1.0)*r10*x11824);
IkReal x11826=r12*r12;
IkReal x11827=((1.0)*sj0);
IkReal x11828=(cj0*r02);
IkReal x11829=x11792;
j4eval[0]=((IKabs(((((-1.0)*x11828))+(((-1.0)*r12*x11827)))))+(IKabs((((sj0*x11826*x11829))+(((-1.0)*x11827*x11829))+((r12*x11828*x11829))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11830=((-1.0)*r11);
CheckValue<IkReal> x11833 = IKatan2WithCheck(IkReal(x11830),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11833.valid){
continue;
}
IkReal x11831=((1.0)*(x11833.value));
IkReal x11832=x11792;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11831)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11831)));
IkReal gconst10=(x11830*x11832);
IkReal gconst11=((1.0)*r10*x11832);
IkReal x11834=r12*r12;
IkReal x11835=(cj1*cj2*r22);
IkReal x11836=(r22*sj1*sj2);
CheckValue<IkReal> x11840=IKPowWithIntegerCheck(((-1.0)+x11834),-1);
if(!x11840.valid){
continue;
}
IkReal x11837=x11840.value;
if((((1.0)+(((-1.0)*x11834)))) < -0.00001)
continue;
IkReal x11838=IKsqrt(((1.0)+(((-1.0)*x11834))));
IkReal x11839=(r12*x11837*x11838);
j4eval[0]=((IKabs(((((-1.0)*x11835))+x11836)))+(IKabs(((((-1.0)*x11836*x11839))+((x11835*x11839))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11841=((-1.0)*r11);
CheckValue<IkReal> x11844 = IKatan2WithCheck(IkReal(x11841),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11844.valid){
continue;
}
IkReal x11842=((1.0)*(x11844.value));
IkReal x11843=x11792;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11842)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11842)));
IkReal gconst10=(x11841*x11843);
IkReal gconst11=((1.0)*r10*x11843);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11845=((-1.0)*r11);
CheckValue<IkReal> x11848 = IKatan2WithCheck(IkReal(x11845),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11848.valid){
continue;
}
IkReal x11846=((1.0)*(x11848.value));
IkReal x11847=x11792;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11846)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11846)));
IkReal gconst10=(x11845*x11847);
IkReal gconst11=((1.0)*r10*x11847);
IkReal x11849=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11853=IKPowWithIntegerCheck(x11849,-1);
if(!x11853.valid){
continue;
}
IkReal x11850=x11853.value;
IkReal x11851=((1.0)*x11850);
IkReal x11852=((((-1.0)*x11851*(r01*r01)*(r11*r11)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11851*(r00*r00)*(r10*r10)))+(((-2.0)*r00*r01*r10*r11*x11850)));
j4eval[0]=x11852;
j4eval[1]=IKsign(x11852);
j4eval[2]=r02;
j4eval[3]=x11849;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11854=((-1.0)*r11);
CheckValue<IkReal> x11857 = IKatan2WithCheck(IkReal(x11854),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11857.valid){
continue;
}
IkReal x11855=((1.0)*(x11857.value));
IkReal x11856=x11792;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11855)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11855)));
IkReal gconst10=(x11854*x11856);
IkReal gconst11=((1.0)*r10*x11856);
IkReal x11858=r12*r12;
IkReal x11859=(cj1*cj2*r22);
IkReal x11860=(r22*sj1*sj2);
CheckValue<IkReal> x11864=IKPowWithIntegerCheck(((-1.0)+x11858),-1);
if(!x11864.valid){
continue;
}
IkReal x11861=x11864.value;
if((((1.0)+(((-1.0)*x11858)))) < -0.00001)
continue;
IkReal x11862=IKsqrt(((1.0)+(((-1.0)*x11858))));
IkReal x11863=(r12*x11861*x11862);
j4eval[0]=((IKabs(((((-1.0)*x11860*x11863))+((x11859*x11863)))))+(IKabs(((((-1.0)*x11859))+x11860))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11865=(gconst10*r21);
IkReal x11866=(gconst11*r20);
IkReal x11867=(sj1*sj2);
IkReal x11868=(cj1*cj2);
CheckValue<IkReal> x11869 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11868))+((r22*x11867)))),IkReal((((x11866*x11868))+(((-1.0)*x11866*x11867))+(((-1.0)*x11865*x11868))+((x11865*x11867)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11869.valid){
continue;
}
CheckValue<IkReal> x11870=IKPowWithIntegerCheck(IKsign(((x11866*x11866)+(r22*r22)+(x11865*x11865)+(((-2.0)*x11865*x11866)))),-1);
if(!x11870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11869.value)+(((1.5707963267949)*(x11870.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11871=IKsin(j4);
IkReal x11872=IKcos(j4);
IkReal x11873=((1.0)*cj2);
IkReal x11874=((1.0)*x11872);
IkReal x11875=(gconst10*x11871);
IkReal x11876=((1.0)*x11871);
IkReal x11877=(gconst11*x11872);
IkReal x11878=(gconst11*x11876);
evalcond[0]=((((-1.0)*r22*x11874))+(((-1.0)*r20*x11878))+((r21*x11875)));
evalcond[1]=((((-1.0)*r10*x11878))+((r11*x11875))+(((-1.0)*r12*x11874)));
evalcond[2]=(((r00*x11877))+(((-1.0)*gconst10*r01*x11874))+(((-1.0)*r02*x11876)));
evalcond[3]=((-1.0)+((r01*x11875))+(((-1.0)*r02*x11874))+(((-1.0)*r00*x11878)));
evalcond[4]=((((-1.0)*r22*x11876))+(((-1.0)*gconst10*r21*x11874))+(((-1.0)*cj1*x11873))+((r20*x11877))+((sj1*sj2)));
evalcond[5]=((((-1.0)*sj1*x11873))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*r11*x11874))+((r10*x11877))+(((-1.0)*r12*x11876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11879=(gconst11*r00);
IkReal x11880=(gconst10*r01);
CheckValue<IkReal> x11881=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11879*x11879)))+(((2.0)*x11879*x11880))+(((-1.0)*(x11880*x11880))))),-1);
if(!x11881.valid){
continue;
}
CheckValue<IkReal> x11882 = IKatan2WithCheck(IkReal(((((-1.0)*x11880))+x11879)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11881.value)))+(x11882.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11883=IKsin(j4);
IkReal x11884=IKcos(j4);
IkReal x11885=((1.0)*cj2);
IkReal x11886=((1.0)*x11884);
IkReal x11887=(gconst10*x11883);
IkReal x11888=((1.0)*x11883);
IkReal x11889=(gconst11*x11884);
IkReal x11890=(gconst11*x11888);
evalcond[0]=((((-1.0)*r20*x11890))+((r21*x11887))+(((-1.0)*r22*x11886)));
evalcond[1]=((((-1.0)*r10*x11890))+(((-1.0)*r12*x11886))+((r11*x11887)));
evalcond[2]=((((-1.0)*gconst10*r01*x11886))+((r00*x11889))+(((-1.0)*r02*x11888)));
evalcond[3]=((-1.0)+((r01*x11887))+(((-1.0)*r00*x11890))+(((-1.0)*r02*x11886)));
evalcond[4]=((((-1.0)*r22*x11888))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11886))+(((-1.0)*cj1*x11885))+((r20*x11889)));
evalcond[5]=((((-1.0)*gconst10*r11*x11886))+(((-1.0)*cj1*sj2))+((r10*x11889))+(((-1.0)*r12*x11888))+(((-1.0)*sj1*x11885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11891 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11891.valid){
continue;
}
CheckValue<IkReal> x11892=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11891.value)+(((1.5707963267949)*(x11892.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11893=IKsin(j4);
IkReal x11894=IKcos(j4);
IkReal x11895=((1.0)*cj2);
IkReal x11896=((1.0)*x11894);
IkReal x11897=(gconst10*x11893);
IkReal x11898=((1.0)*x11893);
IkReal x11899=(gconst11*x11894);
IkReal x11900=(gconst11*x11898);
evalcond[0]=((((-1.0)*r22*x11896))+((r21*x11897))+(((-1.0)*r20*x11900)));
evalcond[1]=((((-1.0)*r12*x11896))+(((-1.0)*r10*x11900))+((r11*x11897)));
evalcond[2]=((((-1.0)*gconst10*r01*x11896))+((r00*x11899))+(((-1.0)*r02*x11898)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x11900))+((r01*x11897))+(((-1.0)*r02*x11896)));
evalcond[4]=((((-1.0)*cj1*x11895))+(((-1.0)*r22*x11898))+((sj1*sj2))+((r20*x11899))+(((-1.0)*gconst10*r21*x11896)));
evalcond[5]=((((-1.0)*gconst10*r11*x11896))+(((-1.0)*r12*x11898))+(((-1.0)*cj1*sj2))+((r10*x11899))+(((-1.0)*sj1*x11895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11901=((-1.0)*r11);
CheckValue<IkReal> x11904 = IKatan2WithCheck(IkReal(x11901),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11904.valid){
continue;
}
IkReal x11902=((1.0)*(x11904.value));
IkReal x11903=x11792;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11902)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11902)));
IkReal gconst10=(x11901*x11903);
IkReal gconst11=((1.0)*r10*x11903);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11905=((-1.0)*r11);
CheckValue<IkReal> x11908 = IKatan2WithCheck(IkReal(x11905),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11908.valid){
continue;
}
IkReal x11906=((1.0)*(x11908.value));
IkReal x11907=x11792;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11906)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11906)));
IkReal gconst10=(x11905*x11907);
IkReal gconst11=((1.0)*r10*x11907);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11909=((-1.0)*r11);
CheckValue<IkReal> x11912 = IKatan2WithCheck(IkReal(x11909),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11912.valid){
continue;
}
IkReal x11910=((1.0)*(x11912.value));
IkReal x11911=x11792;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11910)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11910)));
IkReal gconst10=(x11909*x11911);
IkReal gconst11=((1.0)*r10*x11911);
IkReal x11913=r12*r12;
CheckValue<IkReal> x11916=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11913))),-1);
if(!x11916.valid){
continue;
}
IkReal x11914=x11916.value;
IkReal x11915=((1.0)*x11914);
j4eval[0]=IKsign((x11913+(((2.0)*x11914*(r10*r10)*(r11*r11)))+((x11915*(r11*r11*r11*r11)))+((x11915*(r10*r10*r10*r10)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11917=(cj2*sj1);
IkReal x11918=(gconst10*r11);
IkReal x11919=(gconst11*r10);
IkReal x11920=(cj1*sj2);
CheckValue<IkReal> x11921 = IKatan2WithCheck(IkReal((((r12*x11920))+((r12*x11917)))),IkReal((((x11918*x11920))+((x11917*x11918))+(((-1.0)*x11919*x11920))+(((-1.0)*x11917*x11919)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11921.valid){
continue;
}
CheckValue<IkReal> x11922=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11918*x11918)+(x11919*x11919)+(((-2.0)*x11918*x11919)))),-1);
if(!x11922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11921.value)+(((1.5707963267949)*(x11922.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11923=IKsin(j4);
IkReal x11924=IKcos(j4);
IkReal x11925=((1.0)*x11924);
IkReal x11926=(gconst10*x11923);
IkReal x11927=((1.0)*x11923);
IkReal x11928=(gconst11*x11924);
IkReal x11929=(gconst11*x11927);
evalcond[0]=((((-1.0)*r20*x11929))+((r21*x11926))+(((-1.0)*r22*x11925)));
evalcond[1]=((((-1.0)*r10*x11929))+((r11*x11926))+(((-1.0)*r12*x11925)));
evalcond[2]=((((-1.0)*r02*x11927))+((r00*x11928))+(((-1.0)*gconst10*r01*x11925)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11925))+(((-1.0)*r00*x11929))+((r01*x11926)));
evalcond[4]=(((cj2*sj1))+((r10*x11928))+((cj1*sj2))+(((-1.0)*gconst10*r11*x11925))+(((-1.0)*r12*x11927)));
evalcond[5]=(((r20*x11928))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x11927))+(((-1.0)*gconst10*r21*x11925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11930=(gconst11*r00);
IkReal x11931=(gconst10*r01);
CheckValue<IkReal> x11932 = IKatan2WithCheck(IkReal((x11930+(((-1.0)*x11931)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11932.valid){
continue;
}
CheckValue<IkReal> x11933=IKPowWithIntegerCheck(IKsign(((x11930*x11930)+(x11931*x11931)+(((-2.0)*x11930*x11931))+(r02*r02))),-1);
if(!x11933.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11932.value)+(((1.5707963267949)*(x11933.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11934=IKsin(j4);
IkReal x11935=IKcos(j4);
IkReal x11936=((1.0)*x11935);
IkReal x11937=(gconst10*x11934);
IkReal x11938=((1.0)*x11934);
IkReal x11939=(gconst11*x11935);
IkReal x11940=(gconst11*x11938);
evalcond[0]=((((-1.0)*r20*x11940))+((r21*x11937))+(((-1.0)*r22*x11936)));
evalcond[1]=(((r11*x11937))+(((-1.0)*r12*x11936))+(((-1.0)*r10*x11940)));
evalcond[2]=((((-1.0)*gconst10*r01*x11936))+(((-1.0)*r02*x11938))+((r00*x11939)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11936))+(((-1.0)*r00*x11940))+((r01*x11937)));
evalcond[4]=(((cj2*sj1))+((r10*x11939))+(((-1.0)*gconst10*r11*x11936))+((cj1*sj2))+(((-1.0)*r12*x11938)));
evalcond[5]=(((r20*x11939))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11936))+(((-1.0)*r22*x11938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11941=((1.0)*gconst11);
CheckValue<IkReal> x11942=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11941))+(((-1.0)*gconst10*r20)))),-1);
if(!x11942.valid){
continue;
}
CheckValue<IkReal> x11943 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11941)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11943.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11942.value)))+(x11943.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11944=IKsin(j4);
IkReal x11945=IKcos(j4);
IkReal x11946=((1.0)*x11945);
IkReal x11947=(gconst10*x11944);
IkReal x11948=((1.0)*x11944);
IkReal x11949=(gconst11*x11945);
IkReal x11950=(gconst11*x11948);
evalcond[0]=((((-1.0)*r20*x11950))+(((-1.0)*r22*x11946))+((r21*x11947)));
evalcond[1]=(((r11*x11947))+(((-1.0)*r10*x11950))+(((-1.0)*r12*x11946)));
evalcond[2]=((((-1.0)*r02*x11948))+((r00*x11949))+(((-1.0)*gconst10*r01*x11946)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11946))+(((-1.0)*r00*x11950))+((r01*x11947)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst10*r11*x11946))+((cj1*sj2))+((r10*x11949))+(((-1.0)*r12*x11948)));
evalcond[5]=((((-1.0)*gconst10*r21*x11946))+((r20*x11949))+(((-1.0)*r22*x11948))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11951=((-1.0)*r11);
IkReal x11952=((-1.0)*r10);
CheckValue<IkReal> x11954 = IKatan2WithCheck(IkReal(x11951),IkReal(x11952),IKFAST_ATAN2_MAGTHRESH);
if(!x11954.valid){
continue;
}
IkReal x11953=((1.0)*(x11954.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11953)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11952);
rxp1_1=(px*r21);
rxp1_2=(px*x11951);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11953)));
IkReal gconst10=x11951;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11955=((-1.0)*r11);
IkReal x11956=((-1.0)*r10);
CheckValue<IkReal> x11958 = IKatan2WithCheck(IkReal(x11955),IkReal(x11956),IKFAST_ATAN2_MAGTHRESH);
if(!x11958.valid){
continue;
}
IkReal x11957=((1.0)*(x11958.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11957)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11956);
rxp1_1=(px*r21);
rxp1_2=(px*x11955);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11957)));
IkReal gconst10=x11955;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11959=((-1.0)*r11);
IkReal x11960=((-1.0)*r10);
CheckValue<IkReal> x11962 = IKatan2WithCheck(IkReal(x11959),IkReal(x11960),IKFAST_ATAN2_MAGTHRESH);
if(!x11962.valid){
continue;
}
IkReal x11961=((1.0)*(x11962.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11961)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11960);
rxp1_1=(px*r21);
rxp1_2=(px*x11959);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11961)));
IkReal gconst10=x11959;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11965=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x11965.valid){
continue;
}
IkReal x11963=x11965.value;
IkReal x11964=(sj0*x11963);
cj4array[0]=(((cj1*sj2*x11964))+((cj2*sj1*x11964)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11966=IKsin(j4);
IkReal x11967=IKcos(j4);
IkReal x11968=(gconst10*r21);
IkReal x11969=(gconst11*r20);
IkReal x11970=((1.0)*x11966);
IkReal x11971=((1.0)*x11967);
evalcond[0]=((-1.0)*r02*x11966);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11971)));
evalcond[2]=((((-1.0)*x11969*x11970))+((x11966*x11968)));
evalcond[3]=(((gconst10*r11*x11966))+(((-1.0)*gconst11*r10*x11970)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11967*x11969))+(((-1.0)*x11968*x11971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11973=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x11973.valid){
continue;
}
IkReal x11972=x11973.value;
cj4array[0]=(((cj1*cj2*x11972))+(((-1.0)*sj1*sj2*x11972)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11974=IKsin(j4);
IkReal x11975=IKcos(j4);
IkReal x11976=((1.0)*sj0);
IkReal x11977=(gconst10*x11974);
IkReal x11978=((1.0)*x11975);
IkReal x11979=((1.0)*gconst11*x11974);
evalcond[0]=((-1.0)*r02*x11974);
evalcond[1]=((((-1.0)*x11976))+(((-1.0)*r02*x11978)));
evalcond[2]=((((-1.0)*r20*x11979))+((r21*x11977)));
evalcond[3]=((((-1.0)*r10*x11979))+((r11*x11977)));
evalcond[4]=((((-1.0)*gconst10*r11*x11978))+(((-1.0)*cj2*sj1*x11976))+(((-1.0)*cj1*sj2*x11976))+((gconst11*r10*x11975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11980=IKPowWithIntegerCheck(r02,-1);
if(!x11980.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11980.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11981=IKsin(j4);
IkReal x11982=IKcos(j4);
IkReal x11983=(gconst10*r21);
IkReal x11984=((1.0)*sj0);
IkReal x11985=(gconst10*r11);
IkReal x11986=(gconst11*x11982);
IkReal x11987=((1.0)*x11982);
IkReal x11988=((1.0)*gconst11*x11981);
evalcond[0]=((-1.0)*r02*x11981);
evalcond[1]=(((x11981*x11983))+(((-1.0)*r20*x11988)));
evalcond[2]=((((-1.0)*r10*x11988))+((x11981*x11985)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11986))+(((-1.0)*x11983*x11987)));
evalcond[4]=(((r10*x11986))+(((-1.0)*cj2*sj1*x11984))+(((-1.0)*cj1*sj2*x11984))+(((-1.0)*x11985*x11987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11989=((1.0)*gconst11);
CheckValue<IkReal> x11990 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x11989))+(((-1.0)*cj0*r00*x11989))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11990.valid){
continue;
}
CheckValue<IkReal> x11991=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11990.value)+(((1.5707963267949)*(x11991.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11992=IKsin(j4);
IkReal x11993=IKcos(j4);
IkReal x11994=((1.0)*cj2);
IkReal x11995=((1.0)*sj0);
IkReal x11996=(cj1*sj2);
IkReal x11997=(gconst10*x11992);
IkReal x11998=((1.0)*x11993);
IkReal x11999=(gconst11*x11993);
IkReal x12000=((1.0)*x11992);
IkReal x12001=(gconst11*x12000);
evalcond[0]=(((r21*x11997))+(((-1.0)*r20*x12001)));
evalcond[1]=((((-1.0)*r10*x12001))+cj0+(((-1.0)*r12*x11998))+((r11*x11997)));
evalcond[2]=(((r20*x11999))+(((-1.0)*gconst10*r21*x11998))+((sj1*sj2))+(((-1.0)*cj1*x11994)));
evalcond[3]=((((-1.0)*r02*x11998))+(((-1.0)*r00*x12001))+((r01*x11997))+(((-1.0)*x11995)));
evalcond[4]=((((-1.0)*cj0*x11996))+(((-1.0)*r02*x12000))+((r00*x11999))+(((-1.0)*gconst10*r01*x11998))+(((-1.0)*cj0*sj1*x11994)));
evalcond[5]=((((-1.0)*x11995*x11996))+(((-1.0)*r12*x12000))+(((-1.0)*gconst10*r11*x11998))+((r10*x11999))+(((-1.0)*sj0*sj1*x11994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12002=(gconst10*r21);
IkReal x12003=(gconst11*r20);
IkReal x12004=(sj1*sj2);
IkReal x12005=(cj1*cj2);
CheckValue<IkReal> x12006=IKPowWithIntegerCheck(IKsign(((((-2.0)*x12002*x12003))+(r22*r22)+(x12002*x12002)+(x12003*x12003))),-1);
if(!x12006.valid){
continue;
}
CheckValue<IkReal> x12007 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12005))+((r22*x12004)))),IkReal((((x12002*x12004))+((x12003*x12005))+(((-1.0)*x12003*x12004))+(((-1.0)*x12002*x12005)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12006.value)))+(x12007.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12008=IKsin(j4);
IkReal x12009=IKcos(j4);
IkReal x12010=((1.0)*cj2);
IkReal x12011=((1.0)*sj0);
IkReal x12012=(cj1*sj2);
IkReal x12013=((1.0)*x12009);
IkReal x12014=(gconst10*x12008);
IkReal x12015=((1.0)*x12008);
IkReal x12016=(gconst11*x12009);
IkReal x12017=(gconst11*x12015);
evalcond[0]=(((r21*x12014))+(((-1.0)*r22*x12013))+(((-1.0)*r20*x12017)));
evalcond[1]=(cj0+((r11*x12014))+(((-1.0)*r12*x12013))+(((-1.0)*r10*x12017)));
evalcond[2]=((((-1.0)*r02*x12013))+(((-1.0)*x12011))+((r01*x12014))+(((-1.0)*r00*x12017)));
evalcond[3]=((((-1.0)*gconst10*r21*x12013))+(((-1.0)*cj1*x12010))+((sj1*sj2))+(((-1.0)*r22*x12015))+((r20*x12016)));
evalcond[4]=((((-1.0)*r02*x12015))+(((-1.0)*cj0*sj1*x12010))+(((-1.0)*cj0*x12012))+((r00*x12016))+(((-1.0)*gconst10*r01*x12013)));
evalcond[5]=((((-1.0)*x12011*x12012))+((r10*x12016))+(((-1.0)*r12*x12015))+(((-1.0)*sj0*sj1*x12010))+(((-1.0)*gconst10*r11*x12013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12018=((1.0)*sj0);
IkReal x12019=((1.0)*gconst10);
CheckValue<IkReal> x12020=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12019))+(((-1.0)*gconst11*r21)))),-1);
if(!x12020.valid){
continue;
}
CheckValue<IkReal> x12021 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12018))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12019))+((cj0*gconst11*r00))+(((-1.0)*gconst10*r11*x12018))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12020.value)))+(x12021.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12022=IKsin(j4);
IkReal x12023=IKcos(j4);
IkReal x12024=((1.0)*cj2);
IkReal x12025=((1.0)*sj0);
IkReal x12026=(cj1*sj2);
IkReal x12027=((1.0)*x12023);
IkReal x12028=(gconst10*x12022);
IkReal x12029=((1.0)*x12022);
IkReal x12030=(gconst11*x12023);
IkReal x12031=(gconst11*x12029);
evalcond[0]=((((-1.0)*r20*x12031))+((r21*x12028))+(((-1.0)*r22*x12027)));
evalcond[1]=(cj0+((r11*x12028))+(((-1.0)*r12*x12027))+(((-1.0)*r10*x12031)));
evalcond[2]=(((r01*x12028))+(((-1.0)*x12025))+(((-1.0)*r00*x12031))+(((-1.0)*r02*x12027)));
evalcond[3]=((((-1.0)*cj1*x12024))+((r20*x12030))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12027))+(((-1.0)*r22*x12029)));
evalcond[4]=(((r00*x12030))+(((-1.0)*r02*x12029))+(((-1.0)*cj0*sj1*x12024))+(((-1.0)*cj0*x12026))+(((-1.0)*gconst10*r01*x12027)));
evalcond[5]=((((-1.0)*x12025*x12026))+(((-1.0)*gconst10*r11*x12027))+(((-1.0)*r12*x12029))+((r10*x12030))+(((-1.0)*sj0*sj1*x12024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12032=((1.0)*gconst11);
CheckValue<IkReal> x12033=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12032)))),-1);
if(!x12033.valid){
continue;
}
CheckValue<IkReal> x12034 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12032)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12033.value)))+(x12034.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12035=IKsin(j4);
IkReal x12036=IKcos(j4);
IkReal x12037=((1.0)*cj2);
IkReal x12038=((1.0)*sj0);
IkReal x12039=(cj1*sj2);
IkReal x12040=((1.0)*x12036);
IkReal x12041=(gconst10*x12035);
IkReal x12042=((1.0)*x12035);
IkReal x12043=(gconst11*x12036);
IkReal x12044=(gconst11*x12042);
evalcond[0]=((((-1.0)*r20*x12044))+((r21*x12041))+(((-1.0)*r22*x12040)));
evalcond[1]=((((-1.0)*r12*x12040))+cj0+((r11*x12041))+(((-1.0)*r10*x12044)));
evalcond[2]=((((-1.0)*r00*x12044))+(((-1.0)*x12038))+((r01*x12041))+(((-1.0)*r02*x12040)));
evalcond[3]=((((-1.0)*cj1*x12037))+((sj1*sj2))+((r20*x12043))+(((-1.0)*gconst10*r21*x12040))+(((-1.0)*r22*x12042)));
evalcond[4]=((((-1.0)*gconst10*r01*x12040))+((r00*x12043))+(((-1.0)*cj0*sj1*x12037))+(((-1.0)*r02*x12042))+(((-1.0)*cj0*x12039)));
evalcond[5]=(((r10*x12043))+(((-1.0)*r12*x12042))+(((-1.0)*gconst10*r11*x12040))+(((-1.0)*x12038*x12039))+(((-1.0)*sj0*sj1*x12037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12045=((-1.0)*r11);
CheckValue<IkReal> x12048 = IKatan2WithCheck(IkReal(x12045),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12048.valid){
continue;
}
IkReal x12046=((1.0)*(x12048.value));
IkReal x12047=x11792;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12046)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12046)));
IkReal gconst10=(x12045*x12047);
IkReal gconst11=((1.0)*r10*x12047);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12049=((-1.0)*r11);
CheckValue<IkReal> x12052 = IKatan2WithCheck(IkReal(x12049),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12052.valid){
continue;
}
IkReal x12050=((1.0)*(x12052.value));
IkReal x12051=x11792;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12050)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12050)));
IkReal gconst10=(x12049*x12051);
IkReal gconst11=((1.0)*r10*x12051);
IkReal x12053=r12*r12;
IkReal x12054=((1.0)*sj0);
IkReal x12055=(cj0*r02);
IkReal x12056=x11792;
j4eval[0]=((IKabs(((((-1.0)*x12055))+(((-1.0)*r12*x12054)))))+(IKabs((((sj0*x12053*x12056))+(((-1.0)*x12054*x12056))+((r12*x12055*x12056))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12057=((-1.0)*r11);
CheckValue<IkReal> x12060 = IKatan2WithCheck(IkReal(x12057),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12060.valid){
continue;
}
IkReal x12058=((1.0)*(x12060.value));
IkReal x12059=x11792;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12058)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12058)));
IkReal gconst10=(x12057*x12059);
IkReal gconst11=((1.0)*r10*x12059);
IkReal x12061=r12*r12;
IkReal x12062=((1.0)+(((-1.0)*x12061)));
IkReal x12063=(r22*sj1*sj2);
IkReal x12064=(cj1*cj2*r22);
CheckValue<IkReal> x12071=IKPowWithIntegerCheck(x12062,-1);
if(!x12071.valid){
continue;
}
IkReal x12065=x12071.value;
CheckValue<IkReal> x12072=IKPowWithIntegerCheck(((-1.0)+x12061),-1);
if(!x12072.valid){
continue;
}
IkReal x12066=x12072.value;
IkReal x12067=((1.0)*x12065);
if((x12062) < -0.00001)
continue;
IkReal x12068=IKsqrt(x12062);
IkReal x12069=(r12*x12066*x12068);
IkReal x12070=((((-1.0)*x12067*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x12065))+(((-1.0)*x12067*(r10*r10)*(r20*r20))));
j4eval[0]=x12070;
j4eval[1]=((IKabs((((x12064*x12069))+(((-1.0)*x12063*x12069)))))+(IKabs(((((-1.0)*x12064))+x12063))));
j4eval[2]=IKsign(x12070);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12073=((-1.0)*r11);
CheckValue<IkReal> x12076 = IKatan2WithCheck(IkReal(x12073),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12076.valid){
continue;
}
IkReal x12074=((1.0)*(x12076.value));
IkReal x12075=x11792;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12074)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12074)));
IkReal gconst10=(x12073*x12075);
IkReal gconst11=((1.0)*r10*x12075);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12077=((-1.0)*r11);
CheckValue<IkReal> x12080 = IKatan2WithCheck(IkReal(x12077),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12080.valid){
continue;
}
IkReal x12078=((1.0)*(x12080.value));
IkReal x12079=x11792;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12078)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12078)));
IkReal gconst10=(x12077*x12079);
IkReal gconst11=((1.0)*r10*x12079);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12081=((-1.0)*r11);
CheckValue<IkReal> x12084 = IKatan2WithCheck(IkReal(x12081),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12084.valid){
continue;
}
IkReal x12082=((1.0)*(x12084.value));
IkReal x12083=x11792;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12082)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12082)));
IkReal gconst10=(x12081*x12083);
IkReal gconst11=((1.0)*r10*x12083);
IkReal x12085=(cj1*r02*sj2);
IkReal x12086=(cj2*r02*sj1);
IkReal x12087=x11792;
IkReal x12088=(r12*x12087);
j4eval[0]=((IKabs((x12085+x12086)))+(IKabs((((x12085*x12088))+((x12086*x12088))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12089=(cj1*sj2);
IkReal x12090=(cj2*sj1);
IkReal x12091=(gconst11*r00);
IkReal x12092=((1.0)*gconst10*r01);
CheckValue<IkReal> x12093=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12093.valid){
continue;
}
CheckValue<IkReal> x12094 = IKatan2WithCheck(IkReal((((x12089*x12091))+(((-1.0)*x12089*x12092))+(((-1.0)*x12090*x12092))+((x12090*x12091)))),IkReal((((r02*x12089))+((r02*x12090)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12094.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12093.value)))+(x12094.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12095=IKcos(j4);
IkReal x12096=IKsin(j4);
IkReal x12097=((1.0)*cj2);
IkReal x12098=((1.0)*x12095);
IkReal x12099=(gconst10*x12095);
IkReal x12100=(gconst10*x12096);
IkReal x12101=((1.0)*gconst11*x12096);
evalcond[0]=(((r01*x12099))+(((-1.0)*gconst11*r00*x12098))+((r02*x12096)));
evalcond[1]=((((-1.0)*r20*x12101))+(((-1.0)*r22*x12098))+((r21*x12100)));
evalcond[2]=((((-1.0)*r10*x12101))+(((-1.0)*r12*x12098))+((r11*x12100)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12101))+((r01*x12100))+(((-1.0)*r02*x12098)));
evalcond[4]=(((r22*x12096))+((sj1*sj2))+(((-1.0)*cj1*x12097))+(((-1.0)*gconst11*r20*x12098))+((r21*x12099)));
evalcond[5]=(((r11*x12099))+((r12*x12096))+(((-1.0)*sj1*x12097))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x12098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12102=(gconst10*r01);
IkReal x12103=(gconst11*r00);
CheckValue<IkReal> x12104 = IKatan2WithCheck(IkReal((x12102+(((-1.0)*x12103)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12104.valid){
continue;
}
CheckValue<IkReal> x12105=IKPowWithIntegerCheck(IKsign(((((-2.0)*x12102*x12103))+(x12102*x12102)+(r02*r02)+(x12103*x12103))),-1);
if(!x12105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12104.value)+(((1.5707963267949)*(x12105.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12106=IKcos(j4);
IkReal x12107=IKsin(j4);
IkReal x12108=((1.0)*cj2);
IkReal x12109=((1.0)*x12106);
IkReal x12110=(gconst10*x12106);
IkReal x12111=(gconst10*x12107);
IkReal x12112=((1.0)*gconst11*x12107);
evalcond[0]=(((r02*x12107))+((r01*x12110))+(((-1.0)*gconst11*r00*x12109)));
evalcond[1]=((((-1.0)*r22*x12109))+(((-1.0)*r20*x12112))+((r21*x12111)));
evalcond[2]=((((-1.0)*r12*x12109))+(((-1.0)*r10*x12112))+((r11*x12111)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12112))+((r01*x12111))+(((-1.0)*r02*x12109)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x12108))+(((-1.0)*gconst11*r20*x12109))+((r21*x12110))+((r22*x12107)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12108))+((r12*x12107))+((r11*x12110))+(((-1.0)*gconst11*r10*x12109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12113 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12113.valid){
continue;
}
CheckValue<IkReal> x12114=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12113.value)+(((1.5707963267949)*(x12114.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12115=IKcos(j4);
IkReal x12116=IKsin(j4);
IkReal x12117=((1.0)*cj2);
IkReal x12118=((1.0)*x12115);
IkReal x12119=(gconst10*x12115);
IkReal x12120=(gconst10*x12116);
IkReal x12121=((1.0)*gconst11*x12116);
evalcond[0]=(((r02*x12116))+((r01*x12119))+(((-1.0)*gconst11*r00*x12118)));
evalcond[1]=((((-1.0)*r20*x12121))+(((-1.0)*r22*x12118))+((r21*x12120)));
evalcond[2]=((((-1.0)*r12*x12118))+(((-1.0)*r10*x12121))+((r11*x12120)));
evalcond[3]=((-1.0)+((r01*x12120))+(((-1.0)*r02*x12118))+(((-1.0)*r00*x12121)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*gconst11*r20*x12118))+(((-1.0)*cj1*x12117))+((r21*x12119))+((r22*x12116)));
evalcond[5]=((((-1.0)*gconst11*r10*x12118))+(((-1.0)*sj1*x12117))+(((-1.0)*cj1*sj2))+((r12*x12116))+((r11*x12119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12122=((-1.0)*r11);
CheckValue<IkReal> x12125 = IKatan2WithCheck(IkReal(x12122),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12125.valid){
continue;
}
IkReal x12123=((1.0)*(x12125.value));
IkReal x12124=x11792;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12123)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12123)));
IkReal gconst10=(x12122*x12124);
IkReal gconst11=((1.0)*r10*x12124);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12126=((-1.0)*r11);
CheckValue<IkReal> x12129 = IKatan2WithCheck(IkReal(x12126),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12129.valid){
continue;
}
IkReal x12127=((1.0)*(x12129.value));
IkReal x12128=x11792;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12127)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12127)));
IkReal gconst10=(x12126*x12128);
IkReal gconst11=((1.0)*r10*x12128);
IkReal x12130=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12134=IKPowWithIntegerCheck(x12130,-1);
if(!x12134.valid){
continue;
}
IkReal x12131=x12134.value;
IkReal x12132=((1.0)*x12131);
IkReal x12133=((((-1.0)*x12132*(r01*r01)*(r11*r11)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r10*r11*x12131))+(((-1.0)*x12132*(r00*r00)*(r10*r10))));
j4eval[0]=x12133;
j4eval[1]=r02;
j4eval[2]=x12130;
j4eval[3]=IKsign(x12133);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12135=((-1.0)*r11);
CheckValue<IkReal> x12138 = IKatan2WithCheck(IkReal(x12135),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12138.valid){
continue;
}
IkReal x12136=((1.0)*(x12138.value));
IkReal x12137=x11792;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12136)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12136)));
IkReal gconst10=(x12135*x12137);
IkReal gconst11=((1.0)*r10*x12137);
IkReal x12139=r12*r12;
IkReal x12140=((1.0)*r02);
IkReal x12141=(cj1*sj2);
IkReal x12142=(cj2*sj1);
CheckValue<IkReal> x12146=IKPowWithIntegerCheck(((-1.0)+x12139),-1);
if(!x12146.valid){
continue;
}
IkReal x12143=x12146.value;
if((((1.0)+(((-1.0)*x12139)))) < -0.00001)
continue;
IkReal x12144=IKsqrt(((1.0)+(((-1.0)*x12139))));
IkReal x12145=(r12*x12143*x12144);
j4eval[0]=((IKabs(((((-1.0)*x12140*x12142))+(((-1.0)*x12140*x12141)))))+(IKabs(((((-1.0)*x12140*x12141*x12145))+(((-1.0)*x12140*x12142*x12145))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12147=(cj1*sj2);
IkReal x12148=(gconst10*r01);
IkReal x12149=(cj2*sj1);
IkReal x12150=((1.0)*r02);
IkReal x12151=((1.0)*gconst11*r00);
CheckValue<IkReal> x12152=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12152.valid){
continue;
}
CheckValue<IkReal> x12153 = IKatan2WithCheck(IkReal((((x12147*x12148))+((x12148*x12149))+(((-1.0)*x12147*x12151))+(((-1.0)*x12149*x12151)))),IkReal(((((-1.0)*x12147*x12150))+(((-1.0)*x12149*x12150)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12152.value)))+(x12153.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12154=IKcos(j4);
IkReal x12155=IKsin(j4);
IkReal x12156=((1.0)*x12154);
IkReal x12157=(gconst10*x12154);
IkReal x12158=(gconst10*x12155);
IkReal x12159=((1.0)*gconst11*x12155);
evalcond[0]=(((r02*x12155))+((r01*x12157))+(((-1.0)*gconst11*r00*x12156)));
evalcond[1]=((((-1.0)*r22*x12156))+((r21*x12158))+(((-1.0)*r20*x12159)));
evalcond[2]=((((-1.0)*r12*x12156))+((r11*x12158))+(((-1.0)*r10*x12159)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12156))+(((-1.0)*r00*x12159))+((r01*x12158)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12156))+((cj1*sj2))+((r12*x12155))+((r11*x12157)));
evalcond[5]=((((-1.0)*gconst11*r20*x12156))+((r22*x12155))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12160=(gconst10*r01);
IkReal x12161=(gconst11*r00);
CheckValue<IkReal> x12162 = IKatan2WithCheck(IkReal(((((-1.0)*x12161))+x12160)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12162.valid){
continue;
}
CheckValue<IkReal> x12163=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x12160*x12160)))+(((2.0)*x12160*x12161))+(((-1.0)*(x12161*x12161))))),-1);
if(!x12163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12162.value)+(((1.5707963267949)*(x12163.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12164=IKcos(j4);
IkReal x12165=IKsin(j4);
IkReal x12166=((1.0)*x12164);
IkReal x12167=(gconst10*x12164);
IkReal x12168=(gconst10*x12165);
IkReal x12169=((1.0)*gconst11*x12165);
evalcond[0]=((((-1.0)*gconst11*r00*x12166))+((r02*x12165))+((r01*x12167)));
evalcond[1]=(((r21*x12168))+(((-1.0)*r22*x12166))+(((-1.0)*r20*x12169)));
evalcond[2]=((((-1.0)*r10*x12169))+((r11*x12168))+(((-1.0)*r12*x12166)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12169))+((r01*x12168))+(((-1.0)*r02*x12166)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12166))+((cj1*sj2))+((r11*x12167))+((r12*x12165)));
evalcond[5]=(((r21*x12167))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12166))+((r22*x12165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12170=((1.0)*gconst11);
CheckValue<IkReal> x12171 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12170)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12171.valid){
continue;
}
CheckValue<IkReal> x12172=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12170)))),-1);
if(!x12172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12171.value)+(((1.5707963267949)*(x12172.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12173=IKcos(j4);
IkReal x12174=IKsin(j4);
IkReal x12175=((1.0)*x12173);
IkReal x12176=(gconst10*x12173);
IkReal x12177=(gconst10*x12174);
IkReal x12178=((1.0)*gconst11*x12174);
evalcond[0]=((((-1.0)*gconst11*r00*x12175))+((r01*x12176))+((r02*x12174)));
evalcond[1]=(((r21*x12177))+(((-1.0)*r22*x12175))+(((-1.0)*r20*x12178)));
evalcond[2]=((((-1.0)*r10*x12178))+((r11*x12177))+(((-1.0)*r12*x12175)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12178))+((r01*x12177))+(((-1.0)*r02*x12175)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12175))+((cj1*sj2))+((r11*x12176))+((r12*x12174)));
evalcond[5]=(((r21*x12176))+(((-1.0)*gconst11*r20*x12175))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12179=((-1.0)*r11);
IkReal x12180=((-1.0)*r10);
CheckValue<IkReal> x12182 = IKatan2WithCheck(IkReal(x12179),IkReal(x12180),IKFAST_ATAN2_MAGTHRESH);
if(!x12182.valid){
continue;
}
IkReal x12181=((1.0)*(x12182.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12181)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12180);
rxp1_1=(px*r21);
rxp1_2=(px*x12179);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12181)));
IkReal gconst10=x12179;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12183=((-1.0)*r11);
IkReal x12184=((-1.0)*r10);
CheckValue<IkReal> x12186 = IKatan2WithCheck(IkReal(x12183),IkReal(x12184),IKFAST_ATAN2_MAGTHRESH);
if(!x12186.valid){
continue;
}
IkReal x12185=((1.0)*(x12186.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12185)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12184);
rxp1_1=(px*r21);
rxp1_2=(px*x12183);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12185)));
IkReal gconst10=x12183;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12187=((-1.0)*r11);
IkReal x12188=((-1.0)*r10);
CheckValue<IkReal> x12190 = IKatan2WithCheck(IkReal(x12187),IkReal(x12188),IKFAST_ATAN2_MAGTHRESH);
if(!x12190.valid){
continue;
}
IkReal x12189=((1.0)*(x12190.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12189)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12188);
rxp1_1=(px*r21);
rxp1_2=(px*x12187);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12189)));
IkReal gconst10=x12187;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12193=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12193.valid){
continue;
}
IkReal x12191=x12193.value;
IkReal x12192=(sj0*x12191);
cj4array[0]=(((cj2*sj1*x12192))+((cj1*sj2*x12192)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12194=IKsin(j4);
IkReal x12195=IKcos(j4);
IkReal x12196=(gconst10*r21);
IkReal x12197=((1.0)*x12195);
IkReal x12198=((1.0)*gconst11*x12194);
evalcond[0]=(r02*x12194);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12197)));
evalcond[2]=((((-1.0)*r20*x12198))+((x12194*x12196)));
evalcond[3]=(((gconst10*r11*x12194))+(((-1.0)*r10*x12198)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x12195*x12196))+(((-1.0)*gconst11*r20*x12197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12200=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12200.valid){
continue;
}
IkReal x12199=x12200.value;
cj4array[0]=(((cj1*cj2*x12199))+(((-1.0)*sj1*sj2*x12199)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12201=IKsin(j4);
IkReal x12202=IKcos(j4);
IkReal x12203=((1.0)*sj0);
IkReal x12204=(gconst10*x12201);
IkReal x12205=((1.0)*x12202);
IkReal x12206=((1.0)*gconst11*x12201);
evalcond[0]=(r02*x12201);
evalcond[1]=((((-1.0)*r02*x12205))+(((-1.0)*x12203)));
evalcond[2]=(((r21*x12204))+(((-1.0)*r20*x12206)));
evalcond[3]=((((-1.0)*r10*x12206))+((r11*x12204)));
evalcond[4]=((((-1.0)*gconst11*r10*x12205))+(((-1.0)*cj2*sj1*x12203))+(((-1.0)*cj1*sj2*x12203))+((gconst10*r11*x12202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12207=IKPowWithIntegerCheck(r02,-1);
if(!x12207.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12207.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12208=IKsin(j4);
IkReal x12209=IKcos(j4);
IkReal x12210=(gconst10*r21);
IkReal x12211=((1.0)*cj1);
IkReal x12212=(gconst10*r11);
IkReal x12213=((1.0)*gconst11*x12208);
IkReal x12214=((1.0)*gconst11*x12209);
evalcond[0]=(r02*x12208);
evalcond[1]=(((x12208*x12210))+(((-1.0)*r20*x12213)));
evalcond[2]=(((x12208*x12212))+(((-1.0)*r10*x12213)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj2*x12211))+((x12209*x12210))+(((-1.0)*r20*x12214)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x12211))+((x12209*x12212))+(((-1.0)*r10*x12214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12215=((1.0)*gconst11);
CheckValue<IkReal> x12216 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x12215))+(((-1.0)*r10*sj0*x12215))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12216.valid){
continue;
}
CheckValue<IkReal> x12217=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12216.value)+(((1.5707963267949)*(x12217.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12218=IKsin(j4);
IkReal x12219=IKcos(j4);
IkReal x12220=((1.0)*gconst11);
IkReal x12221=((1.0)*cj2);
IkReal x12222=((1.0)*sj0);
IkReal x12223=(cj1*sj2);
IkReal x12224=(gconst10*x12219);
IkReal x12225=(gconst10*x12218);
IkReal x12226=((1.0)*x12219);
evalcond[0]=((((-1.0)*r20*x12218*x12220))+((r21*x12225)));
evalcond[1]=((((-1.0)*r10*x12218*x12220))+((r11*x12225))+cj0+(((-1.0)*r12*x12226)));
evalcond[2]=((((-1.0)*cj1*x12221))+((sj1*sj2))+((r21*x12224))+(((-1.0)*r20*x12219*x12220)));
evalcond[3]=((((-1.0)*x12222))+((r01*x12225))+(((-1.0)*r00*x12218*x12220))+(((-1.0)*r02*x12226)));
evalcond[4]=(((r02*x12218))+(((-1.0)*r00*x12219*x12220))+((r01*x12224))+(((-1.0)*cj0*sj1*x12221))+(((-1.0)*cj0*x12223)));
evalcond[5]=((((-1.0)*r10*x12219*x12220))+((r11*x12224))+((r12*x12218))+(((-1.0)*sj0*sj1*x12221))+(((-1.0)*x12222*x12223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12227=(gconst10*r21);
IkReal x12228=(gconst11*r20);
IkReal x12229=(sj1*sj2);
IkReal x12230=(cj1*cj2);
CheckValue<IkReal> x12231 = IKatan2WithCheck(IkReal((((r22*x12229))+(((-1.0)*r22*x12230)))),IkReal((((x12227*x12229))+(((-1.0)*x12228*x12229))+(((-1.0)*x12227*x12230))+((x12228*x12230)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12231.valid){
continue;
}
CheckValue<IkReal> x12232=IKPowWithIntegerCheck(IKsign(((((2.0)*x12227*x12228))+(((-1.0)*(r22*r22)))+(((-1.0)*(x12227*x12227)))+(((-1.0)*(x12228*x12228))))),-1);
if(!x12232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12231.value)+(((1.5707963267949)*(x12232.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12233=IKsin(j4);
IkReal x12234=IKcos(j4);
IkReal x12235=((1.0)*cj2);
IkReal x12236=((1.0)*sj0);
IkReal x12237=(cj1*sj2);
IkReal x12238=((1.0)*x12234);
IkReal x12239=(gconst10*x12234);
IkReal x12240=(gconst10*x12233);
IkReal x12241=((1.0)*gconst11*x12233);
evalcond[0]=((((-1.0)*r22*x12238))+(((-1.0)*r20*x12241))+((r21*x12240)));
evalcond[1]=((((-1.0)*r10*x12241))+(((-1.0)*r12*x12238))+cj0+((r11*x12240)));
evalcond[2]=((((-1.0)*r02*x12238))+(((-1.0)*x12236))+((r01*x12240))+(((-1.0)*r00*x12241)));
evalcond[3]=((((-1.0)*gconst11*r20*x12238))+((sj1*sj2))+(((-1.0)*cj1*x12235))+((r22*x12233))+((r21*x12239)));
evalcond[4]=(((r01*x12239))+(((-1.0)*cj0*sj1*x12235))+(((-1.0)*cj0*x12237))+(((-1.0)*gconst11*r00*x12238))+((r02*x12233)));
evalcond[5]=(((r12*x12233))+(((-1.0)*gconst11*r10*x12238))+((r11*x12239))+(((-1.0)*sj0*sj1*x12235))+(((-1.0)*x12236*x12237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12242=((1.0)*sj0);
IkReal x12243=((1.0)*gconst10);
CheckValue<IkReal> x12244 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12242))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst10*r11*x12242))+((cj0*gconst11*r00))+(((-1.0)*cj0*r01*x12243))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12244.valid){
continue;
}
CheckValue<IkReal> x12245=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12243))+(((-1.0)*gconst11*r21)))),-1);
if(!x12245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12244.value)+(((1.5707963267949)*(x12245.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12246=IKsin(j4);
IkReal x12247=IKcos(j4);
IkReal x12248=((1.0)*cj2);
IkReal x12249=((1.0)*sj0);
IkReal x12250=(cj1*sj2);
IkReal x12251=((1.0)*x12247);
IkReal x12252=(gconst10*x12247);
IkReal x12253=(gconst10*x12246);
IkReal x12254=((1.0)*gconst11*x12246);
evalcond[0]=((((-1.0)*r20*x12254))+((r21*x12253))+(((-1.0)*r22*x12251)));
evalcond[1]=(cj0+(((-1.0)*r12*x12251))+((r11*x12253))+(((-1.0)*r10*x12254)));
evalcond[2]=(((r01*x12253))+(((-1.0)*r02*x12251))+(((-1.0)*x12249))+(((-1.0)*r00*x12254)));
evalcond[3]=((((-1.0)*gconst11*r20*x12251))+(((-1.0)*cj1*x12248))+((sj1*sj2))+((r21*x12252))+((r22*x12246)));
evalcond[4]=((((-1.0)*cj0*sj1*x12248))+(((-1.0)*gconst11*r00*x12251))+((r01*x12252))+(((-1.0)*cj0*x12250))+((r02*x12246)));
evalcond[5]=((((-1.0)*x12249*x12250))+((r11*x12252))+((r12*x12246))+(((-1.0)*gconst11*r10*x12251))+(((-1.0)*sj0*sj1*x12248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12255=((1.0)*gconst11);
CheckValue<IkReal> x12256=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12255)))),-1);
if(!x12256.valid){
continue;
}
CheckValue<IkReal> x12257 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12255))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12256.value)))+(x12257.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12258=IKsin(j4);
IkReal x12259=IKcos(j4);
IkReal x12260=((1.0)*cj2);
IkReal x12261=((1.0)*sj0);
IkReal x12262=(cj1*sj2);
IkReal x12263=((1.0)*x12259);
IkReal x12264=(gconst10*x12259);
IkReal x12265=(gconst10*x12258);
IkReal x12266=((1.0)*gconst11*x12258);
evalcond[0]=((((-1.0)*r20*x12266))+((r21*x12265))+(((-1.0)*r22*x12263)));
evalcond[1]=((((-1.0)*r12*x12263))+cj0+((r11*x12265))+(((-1.0)*r10*x12266)));
evalcond[2]=(((r01*x12265))+(((-1.0)*r02*x12263))+(((-1.0)*r00*x12266))+(((-1.0)*x12261)));
evalcond[3]=(((r22*x12258))+(((-1.0)*gconst11*r20*x12263))+((sj1*sj2))+((r21*x12264))+(((-1.0)*cj1*x12260)));
evalcond[4]=((((-1.0)*gconst11*r00*x12263))+(((-1.0)*cj0*sj1*x12260))+((r01*x12264))+(((-1.0)*cj0*x12262))+((r02*x12258)));
evalcond[5]=(((r12*x12258))+((r11*x12264))+(((-1.0)*gconst11*r10*x12263))+(((-1.0)*x12261*x12262))+(((-1.0)*sj0*sj1*x12260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12267=((-1.0)*r11);
CheckValue<IkReal> x12270 = IKatan2WithCheck(IkReal(x12267),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12270.valid){
continue;
}
IkReal x12268=((1.0)*(x12270.value));
IkReal x12269=x11792;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12268)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12268)));
IkReal gconst10=(x12267*x12269);
IkReal gconst11=((1.0)*r10*x12269);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12271=gconst10*gconst10;
IkReal x12272=gconst11*gconst11;
IkReal x12273=(gconst10*r21);
IkReal x12274=(cj3*r00);
IkReal x12275=(r00*sj3);
IkReal x12276=((1.0)*gconst11);
IkReal x12277=(gconst10*r20);
IkReal x12278=(r01*sj3);
IkReal x12279=(cj3*gconst11*r01);
IkReal x12280=(r21*x12271);
IkReal x12281=(r20*x12272);
CheckValue<IkReal> x12282=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12276*x12277*x12278))+((x12275*x12281))+(((-1.0)*x12273*x12275*x12276))+((x12278*x12280))+((r02*r22*sj3)))),-1);
if(!x12282.valid){
continue;
}
CheckValue<IkReal> x12283 = IKatan2WithCheck(IkReal((((gconst10*r22*x12274))+((r22*x12279)))),IkReal(((((-1.0)*x12274*x12276*x12277))+((x12274*x12280))+((x12273*x12279))+(((-1.0)*cj3*r01*x12281)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12282.value)))+(x12283.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12284=IKsin(j4);
IkReal x12285=IKcos(j4);
IkReal x12286=(sj1*sj2);
IkReal x12287=(gconst10*sj3);
IkReal x12288=(cj3*gconst10);
IkReal x12289=(gconst11*r20);
IkReal x12290=(gconst11*r21);
IkReal x12291=(gconst11*r00);
IkReal x12292=(cj3*gconst11);
IkReal x12293=(gconst11*r10);
IkReal x12294=((1.0)*cj1);
IkReal x12295=(cj2*sj1);
IkReal x12296=(gconst11*sj3);
IkReal x12297=(cj2*x12294);
IkReal x12298=((1.0)*x12285);
IkReal x12299=((1.0)*x12284);
IkReal x12300=(gconst10*x12284);
IkReal x12301=(cj3*x12284);
IkReal x12302=(sj3*x12285);
evalcond[0]=(((r21*x12300))+(((-1.0)*x12289*x12299))+(((-1.0)*r22*x12298)));
evalcond[1]=(((r11*x12300))+(((-1.0)*x12293*x12299))+(((-1.0)*r12*x12298)));
evalcond[2]=((-1.0)+(((-1.0)*x12291*x12299))+(((-1.0)*r02*x12298))+((r01*x12300)));
evalcond[3]=((((-1.0)*cj3*x12291*x12298))+((r01*x12296))+((r00*x12287))+((r01*x12285*x12288))+((r02*x12301)));
evalcond[4]=(((x12291*x12302))+(((-1.0)*r02*sj3*x12299))+((r01*x12292))+((r00*x12288))+(((-1.0)*r01*x12287*x12298)));
evalcond[5]=(((cj1*sj2))+((r21*x12285*x12288))+x12295+(((-1.0)*cj3*x12289*x12298))+((sj3*x12290))+((r22*x12301))+((r20*x12287)));
evalcond[6]=((((-1.0)*x12297))+x12286+((r11*x12296))+((r11*x12285*x12288))+((r12*x12301))+((r10*x12287))+(((-1.0)*r10*x12292*x12298)));
evalcond[7]=((((-1.0)*r22*sj3*x12299))+((cj3*x12290))+(((-1.0)*x12297))+x12286+(((-1.0)*r21*x12287*x12298))+((x12289*x12302))+((r20*x12288)));
evalcond[8]=(((x12293*x12302))+((r11*x12292))+(((-1.0)*sj2*x12294))+(((-1.0)*x12295))+(((-1.0)*r11*x12287*x12298))+(((-1.0)*r12*sj3*x12299))+((r10*x12288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12303 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12303.valid){
continue;
}
CheckValue<IkReal> x12304=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12303.value)+(((1.5707963267949)*(x12304.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12305=IKsin(j4);
IkReal x12306=IKcos(j4);
IkReal x12307=(sj1*sj2);
IkReal x12308=(gconst10*sj3);
IkReal x12309=(cj3*gconst10);
IkReal x12310=(gconst11*r20);
IkReal x12311=(gconst11*r21);
IkReal x12312=(gconst11*r00);
IkReal x12313=(cj3*gconst11);
IkReal x12314=(gconst11*r10);
IkReal x12315=((1.0)*cj1);
IkReal x12316=(cj2*sj1);
IkReal x12317=(gconst11*sj3);
IkReal x12318=(cj2*x12315);
IkReal x12319=((1.0)*x12306);
IkReal x12320=((1.0)*x12305);
IkReal x12321=(gconst10*x12305);
IkReal x12322=(cj3*x12305);
IkReal x12323=(sj3*x12306);
evalcond[0]=(((r21*x12321))+(((-1.0)*r22*x12319))+(((-1.0)*x12310*x12320)));
evalcond[1]=((((-1.0)*r12*x12319))+(((-1.0)*x12314*x12320))+((r11*x12321)));
evalcond[2]=((-1.0)+(((-1.0)*x12312*x12320))+((r01*x12321))+(((-1.0)*r02*x12319)));
evalcond[3]=((((-1.0)*cj3*x12312*x12319))+((r00*x12308))+((r01*x12317))+((r01*x12306*x12309))+((r02*x12322)));
evalcond[4]=(((x12312*x12323))+(((-1.0)*r01*x12308*x12319))+((r00*x12309))+((r01*x12313))+(((-1.0)*r02*sj3*x12320)));
evalcond[5]=(((sj3*x12311))+((cj1*sj2))+x12316+((r20*x12308))+((r21*x12306*x12309))+((r22*x12322))+(((-1.0)*cj3*x12310*x12319)));
evalcond[6]=(((r10*x12308))+((r11*x12317))+x12307+(((-1.0)*r10*x12313*x12319))+((r12*x12322))+((r11*x12306*x12309))+(((-1.0)*x12318)));
evalcond[7]=((((-1.0)*r21*x12308*x12319))+x12307+((r20*x12309))+((x12310*x12323))+(((-1.0)*r22*sj3*x12320))+(((-1.0)*x12318))+((cj3*x12311)));
evalcond[8]=(((x12314*x12323))+(((-1.0)*sj2*x12315))+((r10*x12309))+((r11*x12313))+(((-1.0)*x12316))+(((-1.0)*r11*x12308*x12319))+(((-1.0)*r12*sj3*x12320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12324=((-1.0)*r11);
CheckValue<IkReal> x12327 = IKatan2WithCheck(IkReal(x12324),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12327.valid){
continue;
}
IkReal x12325=((1.0)*(x12327.value));
IkReal x12326=x11792;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12325)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12325)));
IkReal gconst10=(x12324*x12326);
IkReal gconst11=((1.0)*r10*x12326);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12328=gconst10*gconst10;
IkReal x12329=gconst11*gconst11;
IkReal x12330=(gconst10*r21);
IkReal x12331=(cj3*r00);
IkReal x12332=(r00*sj3);
IkReal x12333=((1.0)*gconst11);
IkReal x12334=(gconst10*r20);
IkReal x12335=(r01*sj3);
IkReal x12336=(cj3*gconst11*r01);
IkReal x12337=(r21*x12328);
IkReal x12338=(r20*x12329);
CheckValue<IkReal> x12339 = IKatan2WithCheck(IkReal((((r22*x12336))+((gconst10*r22*x12331)))),IkReal((((x12330*x12336))+(((-1.0)*cj3*r01*x12338))+(((-1.0)*x12331*x12333*x12334))+((x12331*x12337)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12339.valid){
continue;
}
CheckValue<IkReal> x12340=IKPowWithIntegerCheck(IKsign((((x12335*x12337))+((x12332*x12338))+(((-1.0)*x12333*x12334*x12335))+(((-1.0)*x12330*x12332*x12333))+((r02*r22*sj3)))),-1);
if(!x12340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12339.value)+(((1.5707963267949)*(x12340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12341=IKsin(j4);
IkReal x12342=IKcos(j4);
IkReal x12343=(cj2*sj1);
IkReal x12344=(cj1*sj2);
IkReal x12345=(gconst10*sj3);
IkReal x12346=(cj3*gconst10);
IkReal x12347=(gconst11*r20);
IkReal x12348=(gconst11*r21);
IkReal x12349=(gconst11*r00);
IkReal x12350=(sj1*sj2);
IkReal x12351=(cj3*gconst11);
IkReal x12352=(gconst11*r10);
IkReal x12353=(cj1*cj2);
IkReal x12354=(gconst11*sj3);
IkReal x12355=((1.0)*x12342);
IkReal x12356=((1.0)*x12341);
IkReal x12357=(gconst10*x12341);
IkReal x12358=(cj3*x12341);
IkReal x12359=(sj3*x12342);
IkReal x12360=(x12343+x12344);
evalcond[0]=((((-1.0)*x12347*x12356))+((r21*x12357))+(((-1.0)*r22*x12355)));
evalcond[1]=((((-1.0)*x12352*x12356))+((r11*x12357))+(((-1.0)*r12*x12355)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12355))+(((-1.0)*x12349*x12356))+((r01*x12357)));
evalcond[3]=((((-1.0)*cj3*x12349*x12355))+((r00*x12345))+((r01*x12354))+((r01*x12342*x12346))+((r02*x12358)));
evalcond[4]=(((r00*x12346))+((r01*x12351))+((x12349*x12359))+(((-1.0)*r01*x12345*x12355))+(((-1.0)*r02*sj3*x12356)));
evalcond[5]=(((r20*x12345))+x12360+((sj3*x12348))+((r22*x12358))+(((-1.0)*cj3*x12347*x12355))+((r21*x12342*x12346)));
evalcond[6]=((((-1.0)*x12350))+x12353+(((-1.0)*r10*x12351*x12355))+((r11*x12342*x12346))+((r11*x12354))+((r12*x12358))+((r10*x12345)));
evalcond[7]=(((x12352*x12359))+x12360+((r11*x12351))+((r10*x12346))+(((-1.0)*r11*x12345*x12355))+(((-1.0)*r12*sj3*x12356)));
evalcond[8]=((((-1.0)*x12353))+((r20*x12346))+x12350+((cj3*x12348))+((x12347*x12359))+(((-1.0)*r21*x12345*x12355))+(((-1.0)*r22*sj3*x12356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12361=((1.0)*gconst11);
CheckValue<IkReal> x12362=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12361))+(((-1.0)*gconst10*r20)))),-1);
if(!x12362.valid){
continue;
}
CheckValue<IkReal> x12363 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12361)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12362.value)))+(x12363.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12364=IKsin(j4);
IkReal x12365=IKcos(j4);
IkReal x12366=(cj2*sj1);
IkReal x12367=(cj1*sj2);
IkReal x12368=(gconst10*sj3);
IkReal x12369=(cj3*gconst10);
IkReal x12370=(gconst11*r20);
IkReal x12371=(gconst11*r21);
IkReal x12372=(gconst11*r00);
IkReal x12373=(sj1*sj2);
IkReal x12374=(cj3*gconst11);
IkReal x12375=(gconst11*r10);
IkReal x12376=(cj1*cj2);
IkReal x12377=(gconst11*sj3);
IkReal x12378=((1.0)*x12365);
IkReal x12379=((1.0)*x12364);
IkReal x12380=(gconst10*x12364);
IkReal x12381=(cj3*x12364);
IkReal x12382=(sj3*x12365);
IkReal x12383=(x12367+x12366);
evalcond[0]=((((-1.0)*r22*x12378))+((r21*x12380))+(((-1.0)*x12370*x12379)));
evalcond[1]=(((r11*x12380))+(((-1.0)*x12375*x12379))+(((-1.0)*r12*x12378)));
evalcond[2]=((1.0)+((r01*x12380))+(((-1.0)*r02*x12378))+(((-1.0)*x12372*x12379)));
evalcond[3]=(((r02*x12381))+(((-1.0)*cj3*x12372*x12378))+((r00*x12368))+((r01*x12377))+((r01*x12365*x12369)));
evalcond[4]=((((-1.0)*r02*sj3*x12379))+((x12372*x12382))+((r00*x12369))+((r01*x12374))+(((-1.0)*r01*x12368*x12378)));
evalcond[5]=((((-1.0)*cj3*x12370*x12378))+((r21*x12365*x12369))+x12383+((sj3*x12371))+((r22*x12381))+((r20*x12368)));
evalcond[6]=(((r12*x12381))+((r11*x12377))+((r11*x12365*x12369))+((r10*x12368))+x12376+(((-1.0)*x12373))+(((-1.0)*r10*x12374*x12378)));
evalcond[7]=((((-1.0)*r12*sj3*x12379))+((r11*x12374))+(((-1.0)*r11*x12368*x12378))+((r10*x12369))+x12383+((x12375*x12382)));
evalcond[8]=(((x12370*x12382))+x12373+((cj3*x12371))+(((-1.0)*r22*sj3*x12379))+(((-1.0)*x12376))+(((-1.0)*r21*x12368*x12378))+((r20*x12369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12384=((-1.0)*r11);
IkReal x12385=((-1.0)*r10);
CheckValue<IkReal> x12387 = IKatan2WithCheck(IkReal(x12384),IkReal(x12385),IKFAST_ATAN2_MAGTHRESH);
if(!x12387.valid){
continue;
}
IkReal x12386=((1.0)*(x12387.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12386)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12385);
rxp1_1=(px*r21);
rxp1_2=(px*x12384);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12386)));
IkReal gconst10=x12384;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12388=((-1.0)*r11);
IkReal x12389=((-1.0)*r10);
CheckValue<IkReal> x12391 = IKatan2WithCheck(IkReal(x12388),IkReal(x12389),IKFAST_ATAN2_MAGTHRESH);
if(!x12391.valid){
continue;
}
IkReal x12390=((1.0)*(x12391.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12390)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12389);
rxp1_1=(px*r21);
rxp1_2=(px*x12388);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12390)));
IkReal gconst10=x12388;
IkReal gconst11=((1.0)*r10);
IkReal x12392=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r10*r20*x12392))+(((-1.0)*r11*r21*x12392)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12393=((-1.0)*r11);
IkReal x12394=((-1.0)*r10);
CheckValue<IkReal> x12396 = IKatan2WithCheck(IkReal(x12393),IkReal(x12394),IKFAST_ATAN2_MAGTHRESH);
if(!x12396.valid){
continue;
}
IkReal x12395=((1.0)*(x12396.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12395)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12394);
rxp1_1=(px*r21);
rxp1_2=(px*x12393);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12395)));
IkReal gconst10=x12393;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12398=IKPowWithIntegerCheck(r02,-1);
if(!x12398.valid){
continue;
}
IkReal x12397=x12398.value;
CheckValue<IkReal> x12399=IKPowWithIntegerCheck(cj3,-1);
if(!x12399.valid){
continue;
}
if( IKabs((x12397*(x12399.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12397)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12397*(x12399.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12397))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12397*(x12399.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12397));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12400=IKsin(j4);
IkReal x12401=IKcos(j4);
IkReal x12402=(cj3*r10);
IkReal x12403=((1.0)*gconst11);
IkReal x12404=(sj1*sj2);
IkReal x12405=(gconst11*sj3);
IkReal x12406=(cj3*r11);
IkReal x12407=(cj2*sj1);
IkReal x12408=(gconst10*r20);
IkReal x12409=(gconst10*sj3);
IkReal x12410=((1.0)*cj0);
IkReal x12411=((1.0)*sj0);
IkReal x12412=(cj1*sj2);
IkReal x12413=(cj3*r21);
IkReal x12414=((1.0)*cj1*cj2);
IkReal x12415=(r20*x12401);
IkReal x12416=(gconst10*x12400);
IkReal x12417=(gconst10*x12401);
IkReal x12418=(r02*x12400);
IkReal x12419=((1.0)*x12401);
evalcond[0]=((((-1.0)*r02*x12419))+(((-1.0)*x12411)));
evalcond[1]=(((r21*x12416))+(((-1.0)*r20*x12400*x12403)));
evalcond[2]=(cj0+((r11*x12416))+(((-1.0)*r10*x12400*x12403)));
evalcond[3]=(((cj3*x12418))+(((-1.0)*cj1*cj2*x12410))+((cj0*x12404)));
evalcond[4]=((((-1.0)*x12410*x12412))+(((-1.0)*sj3*x12418))+(((-1.0)*x12407*x12410)));
evalcond[5]=((((-1.0)*cj3*x12403*x12415))+((sj3*x12408))+((r21*x12405))+((x12413*x12417))+x12407+x12412);
evalcond[6]=((((-1.0)*r21*x12409*x12419))+((gconst11*x12413))+((x12405*x12415))+(((-1.0)*x12414))+((cj3*x12408))+x12404);
evalcond[7]=((((-1.0)*cj1*cj2*x12411))+((x12406*x12417))+((sj0*x12404))+((r10*x12409))+(((-1.0)*x12401*x12402*x12403))+((r11*x12405)));
evalcond[8]=(((r10*x12401*x12405))+(((-1.0)*x12411*x12412))+((gconst10*x12402))+((gconst11*x12406))+(((-1.0)*r11*x12409*x12419))+(((-1.0)*x12407*x12411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12420=((1.0)*r20);
IkReal x12421=((1.0)*gconst11);
CheckValue<IkReal> x12422=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12421))),-1);
if(!x12422.valid){
continue;
}
CheckValue<IkReal> x12423=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12420))+((cj3*gconst10*r21))),-1);
if(!x12423.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12422.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12423.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12421))+(((-1.0)*gconst10*sj3*x12420)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12422.value)))+IKsqr(((x12423.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12421))+(((-1.0)*gconst10*sj3*x12420))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12422.value)), ((x12423.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*sj3*x12421))+(((-1.0)*gconst10*sj3*x12420))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12424=IKsin(j4);
IkReal x12425=IKcos(j4);
IkReal x12426=(cj3*r10);
IkReal x12427=((1.0)*gconst11);
IkReal x12428=(sj1*sj2);
IkReal x12429=(gconst11*sj3);
IkReal x12430=(cj3*r11);
IkReal x12431=(cj2*sj1);
IkReal x12432=(gconst10*r20);
IkReal x12433=(gconst10*sj3);
IkReal x12434=((1.0)*cj0);
IkReal x12435=((1.0)*sj0);
IkReal x12436=(cj1*sj2);
IkReal x12437=(cj3*r21);
IkReal x12438=((1.0)*cj1*cj2);
IkReal x12439=(r20*x12425);
IkReal x12440=(gconst10*x12424);
IkReal x12441=(gconst10*x12425);
IkReal x12442=(r02*x12424);
IkReal x12443=((1.0)*x12425);
evalcond[0]=((((-1.0)*r02*x12443))+(((-1.0)*x12435)));
evalcond[1]=(((r21*x12440))+(((-1.0)*r20*x12424*x12427)));
evalcond[2]=(cj0+(((-1.0)*r10*x12424*x12427))+((r11*x12440)));
evalcond[3]=(((cj3*x12442))+(((-1.0)*cj1*cj2*x12434))+((cj0*x12428)));
evalcond[4]=((((-1.0)*x12431*x12434))+(((-1.0)*x12434*x12436))+(((-1.0)*sj3*x12442)));
evalcond[5]=(((r21*x12429))+(((-1.0)*cj3*x12427*x12439))+x12436+x12431+((sj3*x12432))+((x12437*x12441)));
evalcond[6]=(((x12429*x12439))+((cj3*x12432))+(((-1.0)*x12438))+(((-1.0)*r21*x12433*x12443))+((gconst11*x12437))+x12428);
evalcond[7]=(((sj0*x12428))+(((-1.0)*x12425*x12426*x12427))+((r10*x12433))+((x12430*x12441))+(((-1.0)*cj1*cj2*x12435))+((r11*x12429)));
evalcond[8]=((((-1.0)*x12431*x12435))+((gconst10*x12426))+(((-1.0)*r11*x12433*x12443))+(((-1.0)*x12435*x12436))+((gconst11*x12430))+((r10*x12425*x12429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12444=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12444.valid){
continue;
}
CheckValue<IkReal> x12445=IKPowWithIntegerCheck(r02,-1);
if(!x12445.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12444.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12445.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12444.value)))+IKsqr(((-1.0)*sj0*(x12445.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12444.value)), ((-1.0)*sj0*(x12445.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12446=IKsin(j4);
IkReal x12447=IKcos(j4);
IkReal x12448=(cj3*r10);
IkReal x12449=((1.0)*gconst11);
IkReal x12450=(sj1*sj2);
IkReal x12451=(gconst11*sj3);
IkReal x12452=(cj3*r11);
IkReal x12453=(cj2*sj1);
IkReal x12454=(gconst10*r20);
IkReal x12455=(gconst10*sj3);
IkReal x12456=((1.0)*cj0);
IkReal x12457=((1.0)*sj0);
IkReal x12458=(cj1*sj2);
IkReal x12459=(cj3*r21);
IkReal x12460=((1.0)*cj1*cj2);
IkReal x12461=(r20*x12447);
IkReal x12462=(gconst10*x12446);
IkReal x12463=(gconst10*x12447);
IkReal x12464=(r02*x12446);
IkReal x12465=((1.0)*x12447);
evalcond[0]=((((-1.0)*r02*x12465))+(((-1.0)*x12457)));
evalcond[1]=((((-1.0)*r20*x12446*x12449))+((r21*x12462)));
evalcond[2]=(cj0+((r11*x12462))+(((-1.0)*r10*x12446*x12449)));
evalcond[3]=(((cj3*x12464))+((cj0*x12450))+(((-1.0)*cj1*cj2*x12456)));
evalcond[4]=((((-1.0)*sj3*x12464))+(((-1.0)*x12453*x12456))+(((-1.0)*x12456*x12458)));
evalcond[5]=(((sj3*x12454))+((x12459*x12463))+x12453+x12458+(((-1.0)*cj3*x12449*x12461))+((r21*x12451)));
evalcond[6]=(((x12451*x12461))+((cj3*x12454))+(((-1.0)*x12460))+(((-1.0)*r21*x12455*x12465))+x12450+((gconst11*x12459)));
evalcond[7]=(((r11*x12451))+(((-1.0)*x12447*x12448*x12449))+(((-1.0)*cj1*cj2*x12457))+((sj0*x12450))+((x12452*x12463))+((r10*x12455)));
evalcond[8]=((((-1.0)*x12457*x12458))+((gconst10*x12448))+((r10*x12447*x12451))+(((-1.0)*r11*x12455*x12465))+(((-1.0)*x12453*x12457))+((gconst11*x12452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12466=((-1.0)*r11);
CheckValue<IkReal> x12469 = IKatan2WithCheck(IkReal(x12466),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12469.valid){
continue;
}
IkReal x12467=((1.0)*(x12469.value));
IkReal x12468=x11792;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12467)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12467)));
IkReal gconst10=(x12466*x12468);
IkReal gconst11=((1.0)*r10*x12468);
IkReal x12470=r12*r12;
IkReal x12471=((1.0)*sj0);
IkReal x12472=(cj0*r02);
IkReal x12473=x11792;
j4eval[0]=((IKabs((((sj0*x12470*x12473))+((r12*x12472*x12473))+(((-1.0)*x12471*x12473)))))+(IKabs(((((-1.0)*x12472))+(((-1.0)*r12*x12471))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12474=((1.0)*r12);
IkReal x12475=(sj1*sj2);
IkReal x12476=((1.0)*r21);
IkReal x12477=(cj3*gconst11);
IkReal x12478=(r11*sj3);
IkReal x12479=(gconst11*r20);
IkReal x12480=((1.0)*sj3);
IkReal x12481=(cj1*cj2);
IkReal x12482=(gconst10*r21*sj3);
IkReal x12483=(cj3*gconst10*r20);
CheckValue<IkReal> x12484=IKPowWithIntegerCheck(((((-1.0)*gconst11*r10*x12479*x12480))+(((-1.0)*x12476*x12478*(gconst10*gconst10)))+((gconst11*r10*x12482))+((gconst10*x12478*x12479))),-1);
if(!x12484.valid){
continue;
}
CheckValue<IkReal> x12485=IKPowWithIntegerCheck((((sj3*x12479))+(((-1.0)*gconst10*sj3*x12476))),-1);
if(!x12485.valid){
continue;
}
if( IKabs(((x12484.value)*(((((-1.0)*x12474*x12483))+((cj0*x12482))+(((-1.0)*cj0*x12479*x12480))+((r12*x12481))+(((-1.0)*r21*x12474*x12477))+(((-1.0)*x12474*x12475)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12485.value)*(((((-1.0)*x12476*x12477))+(((-1.0)*x12475))+(((-1.0)*x12483))+x12481)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12484.value)*(((((-1.0)*x12474*x12483))+((cj0*x12482))+(((-1.0)*cj0*x12479*x12480))+((r12*x12481))+(((-1.0)*r21*x12474*x12477))+(((-1.0)*x12474*x12475))))))+IKsqr(((x12485.value)*(((((-1.0)*x12476*x12477))+(((-1.0)*x12475))+(((-1.0)*x12483))+x12481))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12484.value)*(((((-1.0)*x12474*x12483))+((cj0*x12482))+(((-1.0)*cj0*x12479*x12480))+((r12*x12481))+(((-1.0)*r21*x12474*x12477))+(((-1.0)*x12474*x12475))))), ((x12485.value)*(((((-1.0)*x12476*x12477))+(((-1.0)*x12475))+(((-1.0)*x12483))+x12481))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12486=IKsin(j4);
IkReal x12487=IKcos(j4);
IkReal x12488=(cj3*r10);
IkReal x12489=(gconst11*r20);
IkReal x12490=(gconst11*sj3);
IkReal x12491=(sj1*sj2);
IkReal x12492=(cj3*r11);
IkReal x12493=(r10*sj3);
IkReal x12494=(gconst10*r01);
IkReal x12495=(gconst10*sj3);
IkReal x12496=(cj2*sj1);
IkReal x12497=((1.0)*sj0);
IkReal x12498=(cj1*sj2);
IkReal x12499=(gconst10*r21);
IkReal x12500=(cj3*gconst10);
IkReal x12501=(cj3*gconst11);
IkReal x12502=((1.0)*cj0);
IkReal x12503=((1.0)*x12486);
IkReal x12504=((1.0)*cj1*cj2);
IkReal x12505=(gconst11*x12487);
IkReal x12506=(sj3*x12487);
IkReal x12507=(gconst10*x12486);
IkReal x12508=((1.0)*x12487);
IkReal x12509=(cj3*x12487);
IkReal x12510=(cj3*x12486);
evalcond[0]=(((x12486*x12499))+(((-1.0)*x12489*x12503)));
evalcond[1]=(((r11*x12507))+cj0+(((-1.0)*r12*x12508))+(((-1.0)*gconst11*r10*x12503)));
evalcond[2]=((((-1.0)*gconst11*r00*x12503))+(((-1.0)*r02*x12508))+((x12486*x12494))+(((-1.0)*x12497)));
evalcond[3]=(((r20*x12495))+((r21*x12490))+((x12499*x12509))+x12496+x12498+(((-1.0)*cj3*x12489*x12508)));
evalcond[4]=((((-1.0)*x12504))+(((-1.0)*r21*x12495*x12508))+((r20*x12500))+((r21*x12501))+x12491+((x12489*x12506)));
evalcond[5]=(((r00*x12495))+((r01*x12490))+(((-1.0)*cj1*cj2*x12502))+(((-1.0)*r00*x12501*x12508))+((cj0*x12491))+((x12494*x12509))+((r02*x12510)));
evalcond[6]=(((gconst10*x12487*x12492))+((r12*x12510))+((sj0*x12491))+(((-1.0)*x12488*x12505))+((gconst10*x12493))+(((-1.0)*cj1*cj2*x12497))+((r11*x12490)));
evalcond[7]=((((-1.0)*x12498*x12502))+(((-1.0)*x12496*x12502))+(((-1.0)*r02*sj3*x12503))+((r01*x12501))+(((-1.0)*x12494*x12506))+((r00*x12500))+((r00*x12487*x12490)));
evalcond[8]=((((-1.0)*r11*x12495*x12508))+((gconst10*x12488))+((gconst11*x12492))+(((-1.0)*r12*sj3*x12503))+((r10*x12487*x12490))+(((-1.0)*x12497*x12498))+(((-1.0)*x12496*x12497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12511=((1.0)*sj0);
IkReal x12512=((1.0)*gconst10);
CheckValue<IkReal> x12513=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12512)))),-1);
if(!x12513.valid){
continue;
}
CheckValue<IkReal> x12514 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12511))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12512))+(((-1.0)*gconst10*r11*x12511))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12513.value)))+(x12514.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12515=IKsin(j4);
IkReal x12516=IKcos(j4);
IkReal x12517=(cj3*r10);
IkReal x12518=(gconst11*r20);
IkReal x12519=(gconst11*sj3);
IkReal x12520=(sj1*sj2);
IkReal x12521=(cj3*r11);
IkReal x12522=(r10*sj3);
IkReal x12523=(gconst10*r01);
IkReal x12524=(gconst10*sj3);
IkReal x12525=(cj2*sj1);
IkReal x12526=((1.0)*sj0);
IkReal x12527=(cj1*sj2);
IkReal x12528=(gconst10*r21);
IkReal x12529=(cj3*gconst10);
IkReal x12530=(cj3*gconst11);
IkReal x12531=((1.0)*cj0);
IkReal x12532=((1.0)*x12515);
IkReal x12533=((1.0)*cj1*cj2);
IkReal x12534=(gconst11*x12516);
IkReal x12535=(sj3*x12516);
IkReal x12536=(gconst10*x12515);
IkReal x12537=((1.0)*x12516);
IkReal x12538=(cj3*x12516);
IkReal x12539=(cj3*x12515);
evalcond[0]=(((x12515*x12528))+(((-1.0)*x12518*x12532)));
evalcond[1]=(((r11*x12536))+cj0+(((-1.0)*gconst11*r10*x12532))+(((-1.0)*r12*x12537)));
evalcond[2]=((((-1.0)*x12526))+(((-1.0)*r02*x12537))+((x12515*x12523))+(((-1.0)*gconst11*r00*x12532)));
evalcond[3]=((((-1.0)*cj3*x12518*x12537))+((x12528*x12538))+((r20*x12524))+((r21*x12519))+x12527+x12525);
evalcond[4]=((((-1.0)*r21*x12524*x12537))+((r21*x12530))+((r20*x12529))+x12520+(((-1.0)*x12533))+((x12518*x12535)));
evalcond[5]=(((cj0*x12520))+(((-1.0)*cj1*cj2*x12531))+((r01*x12519))+((x12523*x12538))+((r02*x12539))+((r00*x12524))+(((-1.0)*r00*x12530*x12537)));
evalcond[6]=(((sj0*x12520))+((gconst10*x12522))+(((-1.0)*x12517*x12534))+((gconst10*x12516*x12521))+((r12*x12539))+((r11*x12519))+(((-1.0)*cj1*cj2*x12526)));
evalcond[7]=((((-1.0)*x12527*x12531))+(((-1.0)*x12525*x12531))+(((-1.0)*x12523*x12535))+((r00*x12516*x12519))+(((-1.0)*r02*sj3*x12532))+((r00*x12529))+((r01*x12530)));
evalcond[8]=(((gconst11*x12521))+(((-1.0)*r12*sj3*x12532))+((r10*x12516*x12519))+(((-1.0)*x12525*x12526))+(((-1.0)*x12526*x12527))+((gconst10*x12517))+(((-1.0)*r11*x12524*x12537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12540=gconst10*gconst10;
IkReal x12541=r21*r21;
IkReal x12542=gconst11*gconst11;
IkReal x12543=r20*r20;
IkReal x12544=((1.0)*cj3);
IkReal x12545=(r20*sj3);
IkReal x12546=(gconst10*gconst11);
IkReal x12547=(cj2*sj1);
IkReal x12548=(gconst10*r21);
IkReal x12549=(cj1*sj2);
IkReal x12550=((1.0)*gconst11*r20);
CheckValue<IkReal> x12551=IKPowWithIntegerCheck(IKsign(((((2.0)*cj3*r20*r21*x12546))+(((-1.0)*x12544*(r22*r22)))+(((-1.0)*x12542*x12543*x12544))+(((-1.0)*x12540*x12541*x12544)))),-1);
if(!x12551.valid){
continue;
}
CheckValue<IkReal> x12552 = IKatan2WithCheck(IkReal((((gconst11*r21*r22*sj3))+((gconst10*r22*x12545))+((r22*x12549))+((r22*x12547)))),IkReal(((((-1.0)*x12547*x12550))+((sj3*x12541*x12546))+((x12547*x12548))+((r21*x12540*x12545))+(((-1.0)*sj3*x12543*x12546))+(((-1.0)*r21*x12542*x12545))+(((-1.0)*x12549*x12550))+((x12548*x12549)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12551.value)))+(x12552.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12553=IKsin(j4);
IkReal x12554=IKcos(j4);
IkReal x12555=(cj3*r10);
IkReal x12556=(gconst11*r20);
IkReal x12557=(gconst11*sj3);
IkReal x12558=(sj1*sj2);
IkReal x12559=(gconst11*r00);
IkReal x12560=(cj3*r11);
IkReal x12561=(gconst10*sj3);
IkReal x12562=(cj2*sj1);
IkReal x12563=(cj3*r01);
IkReal x12564=((1.0)*sj0);
IkReal x12565=(cj1*sj2);
IkReal x12566=(cj3*r21);
IkReal x12567=(cj3*gconst10);
IkReal x12568=((1.0)*cj0);
IkReal x12569=((1.0)*x12554);
IkReal x12570=((1.0)*x12553);
IkReal x12571=((1.0)*cj1*cj2);
IkReal x12572=(cj3*x12553);
IkReal x12573=(gconst10*x12553);
IkReal x12574=(gconst10*x12554);
evalcond[0]=((((-1.0)*r22*x12569))+((r21*x12573))+(((-1.0)*x12556*x12570)));
evalcond[1]=((((-1.0)*gconst11*r10*x12570))+cj0+(((-1.0)*r12*x12569))+((r11*x12573)));
evalcond[2]=((((-1.0)*r02*x12569))+((r01*x12573))+(((-1.0)*x12559*x12570))+(((-1.0)*x12564)));
evalcond[3]=(((r22*x12572))+((x12566*x12574))+((r20*x12561))+((r21*x12557))+x12562+x12565+(((-1.0)*cj3*x12556*x12569)));
evalcond[4]=(((gconst11*x12566))+((sj3*x12554*x12556))+((r20*x12567))+(((-1.0)*x12571))+(((-1.0)*r22*sj3*x12570))+(((-1.0)*r21*x12561*x12569))+x12558);
evalcond[5]=((((-1.0)*cj3*x12559*x12569))+((r01*x12557))+((x12563*x12574))+((r02*x12572))+((r00*x12561))+((cj0*x12558))+(((-1.0)*cj1*cj2*x12568)));
evalcond[6]=((((-1.0)*gconst11*x12555*x12569))+((sj0*x12558))+((r11*x12557))+((r12*x12572))+((r10*x12561))+(((-1.0)*cj1*cj2*x12564))+((x12560*x12574)));
evalcond[7]=((((-1.0)*x12565*x12568))+((gconst11*x12563))+((r00*x12554*x12557))+(((-1.0)*x12562*x12568))+((r00*x12567))+(((-1.0)*r01*x12561*x12569))+(((-1.0)*r02*sj3*x12570)));
evalcond[8]=((((-1.0)*r11*x12561*x12569))+(((-1.0)*x12564*x12565))+((gconst11*x12560))+((gconst10*x12555))+(((-1.0)*x12562*x12564))+((r10*x12554*x12557))+(((-1.0)*r12*sj3*x12570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12575=((1.0)*sj0);
IkReal x12576=((1.0)*gconst10);
CheckValue<IkReal> x12577=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12576))+(((-1.0)*gconst11*r21)))),-1);
if(!x12577.valid){
continue;
}
CheckValue<IkReal> x12578 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12575)))),IkReal(((((-1.0)*cj0*r01*x12576))+(((-1.0)*gconst10*r11*x12575))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12577.value)))+(x12578.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12579=IKsin(j4);
IkReal x12580=IKcos(j4);
IkReal x12581=(cj3*r10);
IkReal x12582=(gconst11*r20);
IkReal x12583=(gconst11*sj3);
IkReal x12584=(sj1*sj2);
IkReal x12585=(gconst11*r00);
IkReal x12586=(cj3*r11);
IkReal x12587=(gconst10*sj3);
IkReal x12588=(cj2*sj1);
IkReal x12589=(cj3*r01);
IkReal x12590=((1.0)*sj0);
IkReal x12591=(cj1*sj2);
IkReal x12592=(cj3*r21);
IkReal x12593=(cj3*gconst10);
IkReal x12594=((1.0)*cj0);
IkReal x12595=((1.0)*x12580);
IkReal x12596=((1.0)*x12579);
IkReal x12597=((1.0)*cj1*cj2);
IkReal x12598=(cj3*x12579);
IkReal x12599=(gconst10*x12579);
IkReal x12600=(gconst10*x12580);
evalcond[0]=((((-1.0)*r22*x12595))+((r21*x12599))+(((-1.0)*x12582*x12596)));
evalcond[1]=(cj0+(((-1.0)*r12*x12595))+(((-1.0)*gconst11*r10*x12596))+((r11*x12599)));
evalcond[2]=(((r01*x12599))+(((-1.0)*x12585*x12596))+(((-1.0)*r02*x12595))+(((-1.0)*x12590)));
evalcond[3]=(((r20*x12587))+((x12592*x12600))+((r21*x12583))+((r22*x12598))+x12588+x12591+(((-1.0)*cj3*x12582*x12595)));
evalcond[4]=(((sj3*x12580*x12582))+(((-1.0)*r21*x12587*x12595))+((gconst11*x12592))+(((-1.0)*r22*sj3*x12596))+(((-1.0)*x12597))+x12584+((r20*x12593)));
evalcond[5]=(((r00*x12587))+((r01*x12583))+((cj0*x12584))+((r02*x12598))+(((-1.0)*cj1*cj2*x12594))+((x12589*x12600))+(((-1.0)*cj3*x12585*x12595)));
evalcond[6]=(((r12*x12598))+((sj0*x12584))+(((-1.0)*gconst11*x12581*x12595))+((x12586*x12600))+(((-1.0)*cj1*cj2*x12590))+((r11*x12583))+((r10*x12587)));
evalcond[7]=((((-1.0)*x12591*x12594))+((gconst11*x12589))+(((-1.0)*x12588*x12594))+((r00*x12593))+((r00*x12580*x12583))+(((-1.0)*r02*sj3*x12596))+(((-1.0)*r01*x12587*x12595)));
evalcond[8]=((((-1.0)*r11*x12587*x12595))+((gconst11*x12586))+(((-1.0)*x12588*x12590))+(((-1.0)*x12590*x12591))+((gconst10*x12581))+(((-1.0)*r12*sj3*x12596))+((r10*x12580*x12583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12601=((1.0)*gconst11);
CheckValue<IkReal> x12602=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12601)))),-1);
if(!x12602.valid){
continue;
}
CheckValue<IkReal> x12603 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12601)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12602.value)))+(x12603.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12604=IKsin(j4);
IkReal x12605=IKcos(j4);
IkReal x12606=(cj3*r10);
IkReal x12607=(gconst11*r20);
IkReal x12608=(gconst11*sj3);
IkReal x12609=(sj1*sj2);
IkReal x12610=(gconst11*r00);
IkReal x12611=(cj3*r11);
IkReal x12612=(gconst10*sj3);
IkReal x12613=(cj2*sj1);
IkReal x12614=(cj3*r01);
IkReal x12615=((1.0)*sj0);
IkReal x12616=(cj1*sj2);
IkReal x12617=(cj3*r21);
IkReal x12618=(cj3*gconst10);
IkReal x12619=((1.0)*cj0);
IkReal x12620=((1.0)*x12605);
IkReal x12621=((1.0)*x12604);
IkReal x12622=((1.0)*cj1*cj2);
IkReal x12623=(cj3*x12604);
IkReal x12624=(gconst10*x12604);
IkReal x12625=(gconst10*x12605);
evalcond[0]=((((-1.0)*r22*x12620))+((r21*x12624))+(((-1.0)*x12607*x12621)));
evalcond[1]=(cj0+(((-1.0)*r12*x12620))+(((-1.0)*gconst11*r10*x12621))+((r11*x12624)));
evalcond[2]=((((-1.0)*r02*x12620))+((r01*x12624))+(((-1.0)*x12610*x12621))+(((-1.0)*x12615)));
evalcond[3]=(((r22*x12623))+((x12617*x12625))+((r20*x12612))+x12616+x12613+(((-1.0)*cj3*x12607*x12620))+((r21*x12608)));
evalcond[4]=((((-1.0)*x12622))+((sj3*x12605*x12607))+((gconst11*x12617))+(((-1.0)*r21*x12612*x12620))+((r20*x12618))+x12609+(((-1.0)*r22*sj3*x12621)));
evalcond[5]=(((r02*x12623))+((r01*x12608))+((cj0*x12609))+(((-1.0)*cj3*x12610*x12620))+((x12614*x12625))+((r00*x12612))+(((-1.0)*cj1*cj2*x12619)));
evalcond[6]=(((r11*x12608))+((x12611*x12625))+((r12*x12623))+((sj0*x12609))+(((-1.0)*cj1*cj2*x12615))+(((-1.0)*gconst11*x12606*x12620))+((r10*x12612)));
evalcond[7]=((((-1.0)*r01*x12612*x12620))+((gconst11*x12614))+(((-1.0)*x12616*x12619))+(((-1.0)*x12613*x12619))+(((-1.0)*r02*sj3*x12621))+((r00*x12605*x12608))+((r00*x12618)));
evalcond[8]=(((gconst10*x12606))+((gconst11*x12611))+((r10*x12605*x12608))+(((-1.0)*x12615*x12616))+(((-1.0)*x12613*x12615))+(((-1.0)*r11*x12612*x12620))+(((-1.0)*r12*sj3*x12621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12626=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12626;
j4eval[1]=IKsign(x12626);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12627=((1.0)*cj5);
IkReal x12628=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12627)));
j4eval[0]=x12628;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12627)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12628);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12629=cj5*cj5;
IkReal x12630=(cj3*r21);
IkReal x12631=(cj5*sj5);
IkReal x12632=((1.0)*cj3);
IkReal x12633=((((-1.0)*r12*r22*x12632))+(((-1.0)*r11*x12630))+((cj3*r11*r20*x12631))+(((-1.0)*r10*r20*x12629*x12632))+((r10*x12630*x12631))+((r11*x12629*x12630)));
j4eval[0]=x12633;
j4eval[1]=IKsign(x12633);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12634=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12634;
j4eval[1]=IKsign(x12634);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12635=((1.0)*cj5);
IkReal x12636=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12635)));
j4eval[0]=x12636;
j4eval[1]=((IKabs(((((-1.0)*r20*x12635))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12636);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12637=cj5*cj5;
IkReal x12638=r11*r11;
IkReal x12639=(r11*sj5);
IkReal x12640=(cj5*r10);
IkReal x12641=((r12*r12)+(((-2.0)*x12639*x12640))+(((-1.0)*x12637*x12638))+x12638+((x12637*(r10*r10))));
j4eval[0]=x12641;
j4eval[1]=IKsign(x12641);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12639))+x12640))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12642=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12642);
rxp1_1=(px*r21);
rxp1_2=(r11*x12642);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12643=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12643);
rxp1_1=(px*r21);
rxp1_2=(r11*x12643);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12644=((1.0)*sj1);
CheckValue<IkReal> x12645=IKPowWithIntegerCheck(r02,-1);
if(!x12645.valid){
continue;
}
CheckValue<IkReal> x12646=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12646.valid){
continue;
}
if( IKabs(((x12645.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12644)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12646.value)*(((((-1.0)*sj2*x12644))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12645.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12644))))))+IKsqr(((x12646.value)*(((((-1.0)*sj2*x12644))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12645.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12644))))), ((x12646.value)*(((((-1.0)*sj2*x12644))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12647=IKsin(j4);
IkReal x12648=IKcos(j4);
IkReal x12649=(cj5*r20);
IkReal x12650=((1.0)*cj2);
IkReal x12651=(cj5*r10);
IkReal x12652=((1.0)*x12647);
IkReal x12653=(sj5*x12647);
IkReal x12654=((1.0)*sj5*x12648);
evalcond[0]=((-1.0)*r02*x12648);
evalcond[1]=(((r21*x12653))+(((-1.0)*x12649*x12652)));
evalcond[2]=((((-1.0)*r11*x12654))+((x12648*x12651)));
evalcond[3]=((1.0)+((r11*x12653))+(((-1.0)*x12651*x12652)));
evalcond[4]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x12652))+(((-1.0)*sj1*x12650)));
evalcond[5]=((((-1.0)*cj1*x12650))+((sj1*sj2))+(((-1.0)*r21*x12654))+((x12648*x12649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12655=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12655.valid){
continue;
}
CheckValue<IkReal> x12656=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12656.valid){
continue;
}
if( IKabs(((-1.0)*(x12655.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12656.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12655.value)))+IKsqr(((x12656.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12655.value)), ((x12656.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12657=IKsin(j4);
IkReal x12658=IKcos(j4);
IkReal x12659=(cj5*r20);
IkReal x12660=((1.0)*cj2);
IkReal x12661=(cj5*r10);
IkReal x12662=((1.0)*x12657);
IkReal x12663=(sj5*x12657);
IkReal x12664=((1.0)*sj5*x12658);
evalcond[0]=((-1.0)*r02*x12658);
evalcond[1]=(((r21*x12663))+(((-1.0)*x12659*x12662)));
evalcond[2]=(((x12658*x12661))+(((-1.0)*r11*x12664)));
evalcond[3]=((1.0)+(((-1.0)*x12661*x12662))+((r11*x12663)));
evalcond[4]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x12662))+(((-1.0)*sj1*x12660)));
evalcond[5]=((((-1.0)*cj1*x12660))+((sj1*sj2))+((x12658*x12659))+(((-1.0)*r21*x12664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12665=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12665);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12665);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12666=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12666);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12666);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12667=IKPowWithIntegerCheck(r22,-1);
if(!x12667.valid){
continue;
}
CheckValue<IkReal> x12668=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12668.valid){
continue;
}
if( IKabs(((x12667.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12668.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12667.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12668.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12667.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12668.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12669=IKsin(j4);
IkReal x12670=IKcos(j4);
IkReal x12671=((1.0)*cj2);
IkReal x12672=(cj5*x12670);
IkReal x12673=(sj5*x12669);
IkReal x12674=((1.0)*sj5*x12670);
IkReal x12675=((1.0)*cj5*x12669);
evalcond[0]=((-1.0)*r22*x12670);
evalcond[1]=((((-1.0)*r00*x12675))+((r01*x12673)));
evalcond[2]=((((-1.0)*cj1*x12671))+(((-1.0)*r22*x12669))+((sj1*sj2)));
evalcond[3]=(((r10*x12672))+(((-1.0)*r11*x12674)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12675))+((r11*x12673)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r01*x12674))+((r00*x12672))+(((-1.0)*sj1*x12671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12676=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12676.valid){
continue;
}
CheckValue<IkReal> x12677=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12677.valid){
continue;
}
if( IKabs(((-1.0)*(x12676.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12677.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12676.value)))+IKsqr(((x12677.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12676.value)), ((x12677.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12678=IKsin(j4);
IkReal x12679=IKcos(j4);
IkReal x12680=((1.0)*cj2);
IkReal x12681=(cj5*x12679);
IkReal x12682=(sj5*x12678);
IkReal x12683=((1.0)*sj5*x12679);
IkReal x12684=((1.0)*cj5*x12678);
evalcond[0]=((-1.0)*r22*x12679);
evalcond[1]=(((r01*x12682))+(((-1.0)*r00*x12684)));
evalcond[2]=((((-1.0)*cj1*x12680))+(((-1.0)*r22*x12678))+((sj1*sj2)));
evalcond[3]=(((r10*x12681))+(((-1.0)*r11*x12683)));
evalcond[4]=((1.0)+((r11*x12682))+(((-1.0)*r10*x12684)));
evalcond[5]=((((-1.0)*sj1*x12680))+((r00*x12681))+(((-1.0)*r01*x12683))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12685=cj5*cj5;
IkReal x12686=r11*r11;
IkReal x12687=(cj5*r10);
IkReal x12688=(r11*sj5);
CheckValue<IkReal> x12689=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x12685*x12686))+(((-2.0)*x12687*x12688))+x12686+((x12685*(r10*r10))))),-1);
if(!x12689.valid){
continue;
}
CheckValue<IkReal> x12690 = IKatan2WithCheck(IkReal((x12687+(((-1.0)*x12688)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12689.value)))+(x12690.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12691=IKsin(j4);
IkReal x12692=IKcos(j4);
IkReal x12693=(cj5*r10);
IkReal x12694=(r01*sj5);
IkReal x12695=((1.0)*cj2);
IkReal x12696=(cj5*r00);
IkReal x12697=(cj5*r20);
IkReal x12698=((1.0)*x12692);
IkReal x12699=((1.0)*x12691);
IkReal x12700=(sj5*x12691);
evalcond[0]=((((-1.0)*r22*x12698))+((r21*x12700))+(((-1.0)*x12697*x12699)));
evalcond[1]=((((-1.0)*r02*x12698))+(((-1.0)*x12696*x12699))+((x12691*x12694)));
evalcond[2]=((((-1.0)*r12*x12699))+(((-1.0)*r11*sj5*x12698))+((x12692*x12693)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12698))+((r11*x12700))+(((-1.0)*x12693*x12699)));
evalcond[4]=((((-1.0)*cj1*x12695))+(((-1.0)*r22*x12699))+((sj1*sj2))+(((-1.0)*r21*sj5*x12698))+((x12692*x12697)));
evalcond[5]=((((-1.0)*r02*x12699))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12695))+((x12692*x12696))+(((-1.0)*x12694*x12698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12701=((1.0)*cj5);
CheckValue<IkReal> x12702=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12701))+(((-1.0)*r00*sj5)))),-1);
if(!x12702.valid){
continue;
}
CheckValue<IkReal> x12703 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12702.value)))+(x12703.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12704=IKsin(j4);
IkReal x12705=IKcos(j4);
IkReal x12706=(cj5*r10);
IkReal x12707=(r01*sj5);
IkReal x12708=((1.0)*cj2);
IkReal x12709=(cj5*r00);
IkReal x12710=(cj5*r20);
IkReal x12711=((1.0)*x12705);
IkReal x12712=((1.0)*x12704);
IkReal x12713=(sj5*x12704);
evalcond[0]=(((r21*x12713))+(((-1.0)*x12710*x12712))+(((-1.0)*r22*x12711)));
evalcond[1]=((((-1.0)*x12709*x12712))+(((-1.0)*r02*x12711))+((x12704*x12707)));
evalcond[2]=((((-1.0)*r12*x12712))+((x12705*x12706))+(((-1.0)*r11*sj5*x12711)));
evalcond[3]=((1.0)+(((-1.0)*x12706*x12712))+(((-1.0)*r12*x12711))+((r11*x12713)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x12712))+((x12705*x12710))+(((-1.0)*cj1*x12708))+(((-1.0)*r21*sj5*x12711)));
evalcond[5]=((((-1.0)*x12707*x12711))+(((-1.0)*sj1*x12708))+(((-1.0)*cj1*sj2))+((x12705*x12709))+(((-1.0)*r02*x12712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12714=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12714.valid){
continue;
}
CheckValue<IkReal> x12715 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12714.value)))+(x12715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12716=IKsin(j4);
IkReal x12717=IKcos(j4);
IkReal x12718=(cj5*r10);
IkReal x12719=(r01*sj5);
IkReal x12720=((1.0)*cj2);
IkReal x12721=(cj5*r00);
IkReal x12722=(cj5*r20);
IkReal x12723=((1.0)*x12717);
IkReal x12724=((1.0)*x12716);
IkReal x12725=(sj5*x12716);
evalcond[0]=(((r21*x12725))+(((-1.0)*r22*x12723))+(((-1.0)*x12722*x12724)));
evalcond[1]=((((-1.0)*r02*x12723))+(((-1.0)*x12721*x12724))+((x12716*x12719)));
evalcond[2]=((((-1.0)*r11*sj5*x12723))+((x12717*x12718))+(((-1.0)*r12*x12724)));
evalcond[3]=((1.0)+((r11*x12725))+(((-1.0)*x12718*x12724))+(((-1.0)*r12*x12723)));
evalcond[4]=((((-1.0)*r22*x12724))+((sj1*sj2))+((x12717*x12722))+(((-1.0)*r21*sj5*x12723))+(((-1.0)*cj1*x12720)));
evalcond[5]=((((-1.0)*r02*x12724))+(((-1.0)*sj1*x12720))+(((-1.0)*cj1*sj2))+((x12717*x12721))+(((-1.0)*x12719*x12723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12726=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12726;
j4eval[1]=IKsign(x12726);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12727=((1.0)*cj5);
IkReal x12728=((((-1.0)*r01*x12727))+(((-1.0)*r00*sj5)));
j4eval[0]=x12728;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12727))))));
j4eval[2]=IKsign(x12728);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12729=(sj1*sj2);
IkReal x12730=(cj5*r10);
IkReal x12731=(r11*sj5);
IkReal x12732=(cj1*cj2);
IkReal x12733=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12733;
j4eval[1]=((IKabs((((x12730*x12732))+((x12729*x12731))+(((-1.0)*x12729*x12730))+(((-1.0)*x12731*x12732)))))+(IKabs((((r12*x12732))+(((-1.0)*r12*x12729))))));
j4eval[2]=IKsign(x12733);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12734=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12734);
rxp1_1=(px*r21);
rxp1_2=(r11*x12734);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12735=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12735);
rxp1_1=(px*r21);
rxp1_2=(r11*x12735);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12736=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x12736))+((r11*sj5)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12736)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12737=((1.0)*cj5);
CheckValue<IkReal> x12738=IKPowWithIntegerCheck(((((-1.0)*r10*x12737))+((r11*sj5))),-1);
if(!x12738.valid){
continue;
}
CheckValue<IkReal> x12739=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12737))),-1);
if(!x12739.valid){
continue;
}
if( IKabs(((-1.0)*(x12738.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12739.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12738.value)))+IKsqr(((x12739.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12738.value)), ((x12739.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12740=IKsin(j4);
IkReal x12741=IKcos(j4);
IkReal x12742=((1.0)*cj2);
IkReal x12743=(r21*sj5);
IkReal x12744=(r11*sj5);
IkReal x12745=((1.0)*cj5*x12740);
IkReal x12746=((1.0)*cj5*x12741);
evalcond[0]=((-1.0)*r02*x12741);
evalcond[1]=((((-1.0)*r20*x12745))+((x12740*x12743)));
evalcond[2]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12742))+((r02*x12740)));
evalcond[3]=(((x12741*x12744))+(((-1.0)*r10*x12746)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12745))+((x12740*x12744)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*r20*x12746))+((x12741*x12743))+(((-1.0)*cj1*x12742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12747=IKPowWithIntegerCheck(r02,-1);
if(!x12747.valid){
continue;
}
CheckValue<IkReal> x12748=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12748.valid){
continue;
}
if( IKabs(((x12747.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12748.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12747.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12748.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12747.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12748.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12749=IKsin(j4);
IkReal x12750=IKcos(j4);
IkReal x12751=((1.0)*cj2);
IkReal x12752=(r21*sj5);
IkReal x12753=(r11*sj5);
IkReal x12754=((1.0)*cj5*x12749);
IkReal x12755=((1.0)*cj5*x12750);
evalcond[0]=((-1.0)*r02*x12750);
evalcond[1]=(((x12749*x12752))+(((-1.0)*r20*x12754)));
evalcond[2]=((((-1.0)*sj1*x12751))+(((-1.0)*cj1*sj2))+((r02*x12749)));
evalcond[3]=((((-1.0)*r10*x12755))+((x12750*x12753)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12754))+((x12749*x12753)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*r20*x12755))+(((-1.0)*cj1*x12751))+((x12750*x12752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12756=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12756;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12756);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12757=((1.0)*cj5);
IkReal x12758=((((-1.0)*r21*x12757))+(((-1.0)*r20*sj5)));
j4eval[0]=x12758;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12757))))));
j4eval[2]=IKsign(x12758);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12759=cj5*cj5;
IkReal x12760=(r11*r21);
IkReal x12761=((1.0)*r20);
IkReal x12762=(cj5*sj5);
IkReal x12763=((((-1.0)*r12*r22))+(((-1.0)*x12760))+((x12759*x12760))+((r10*r21*x12762))+((r11*r20*x12762))+(((-1.0)*r10*x12759*x12761)));
j4eval[0]=x12763;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x12761))+((r21*sj5))))));
j4eval[2]=IKsign(x12763);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12764=cj5*cj5;
IkReal x12765=(r21*sj5);
IkReal x12766=(r11*r21);
IkReal x12767=((1.0)*r20);
CheckValue<IkReal> x12768=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x12764*x12766))+((cj5*r10*x12765))+(((-1.0)*x12766))+(((-1.0)*r10*x12764*x12767))+((cj5*r11*r20*sj5)))),-1);
if(!x12768.valid){
continue;
}
CheckValue<IkReal> x12769 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x12767))+x12765)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12769.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12768.value)))+(x12769.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12770=IKcos(j4);
IkReal x12771=IKsin(j4);
IkReal x12772=(cj5*r00);
IkReal x12773=(cj5*r20);
IkReal x12774=(cj5*r10);
IkReal x12775=((1.0)*x12770);
IkReal x12776=((1.0)*x12771);
IkReal x12777=(sj5*x12770);
IkReal x12778=(sj5*x12771);
evalcond[0]=((((-1.0)*x12773*x12775))+((r21*x12777))+((r22*x12771)));
evalcond[1]=((((-1.0)*x12774*x12775))+((r12*x12771))+((r11*x12777)));
evalcond[2]=((((-1.0)*r22*x12775))+(((-1.0)*x12773*x12776))+((r21*x12778)));
evalcond[3]=(((r01*x12778))+(((-1.0)*x12772*x12776))+(((-1.0)*r02*x12775)));
evalcond[4]=((-1.0)+((r01*x12777))+(((-1.0)*x12772*x12775))+((r02*x12771)));
evalcond[5]=((1.0)+(((-1.0)*x12774*x12776))+(((-1.0)*r12*x12775))+((r11*x12778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12779=((1.0)*cj5);
CheckValue<IkReal> x12780 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12779)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12780.valid){
continue;
}
CheckValue<IkReal> x12781=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12779))+(((-1.0)*r20*sj5)))),-1);
if(!x12781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12780.value)+(((1.5707963267949)*(x12781.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12782=IKcos(j4);
IkReal x12783=IKsin(j4);
IkReal x12784=(cj5*r00);
IkReal x12785=(cj5*r20);
IkReal x12786=(cj5*r10);
IkReal x12787=((1.0)*x12782);
IkReal x12788=((1.0)*x12783);
IkReal x12789=(sj5*x12782);
IkReal x12790=(sj5*x12783);
evalcond[0]=(((r21*x12789))+(((-1.0)*x12785*x12787))+((r22*x12783)));
evalcond[1]=((((-1.0)*x12786*x12787))+((r11*x12789))+((r12*x12783)));
evalcond[2]=((((-1.0)*r22*x12787))+(((-1.0)*x12785*x12788))+((r21*x12790)));
evalcond[3]=((((-1.0)*x12784*x12788))+((r01*x12790))+(((-1.0)*r02*x12787)));
evalcond[4]=((-1.0)+((r01*x12789))+(((-1.0)*x12784*x12787))+((r02*x12783)));
evalcond[5]=((1.0)+(((-1.0)*x12786*x12788))+((r11*x12790))+(((-1.0)*r12*x12787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12791 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12791.valid){
continue;
}
CheckValue<IkReal> x12792=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12791.value)+(((1.5707963267949)*(x12792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12793=IKcos(j4);
IkReal x12794=IKsin(j4);
IkReal x12795=(cj5*r00);
IkReal x12796=(cj5*r20);
IkReal x12797=(cj5*r10);
IkReal x12798=((1.0)*x12793);
IkReal x12799=((1.0)*x12794);
IkReal x12800=(sj5*x12793);
IkReal x12801=(sj5*x12794);
evalcond[0]=(((r21*x12800))+((r22*x12794))+(((-1.0)*x12796*x12798)));
evalcond[1]=(((r11*x12800))+((r12*x12794))+(((-1.0)*x12797*x12798)));
evalcond[2]=((((-1.0)*r22*x12798))+((r21*x12801))+(((-1.0)*x12796*x12799)));
evalcond[3]=(((r01*x12801))+(((-1.0)*r02*x12798))+(((-1.0)*x12795*x12799)));
evalcond[4]=((-1.0)+((r02*x12794))+((r01*x12800))+(((-1.0)*x12795*x12798)));
evalcond[5]=((1.0)+((r11*x12801))+(((-1.0)*r12*x12798))+(((-1.0)*x12797*x12799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12802=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12802;
j4eval[1]=IKsign(x12802);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12803=((1.0)*cj5);
IkReal x12804=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12803)));
j4eval[0]=x12804;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12803)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12804);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12805=cj5*cj5;
IkReal x12806=(r11*r21);
IkReal x12807=((1.0)*r20);
IkReal x12808=(cj5*sj5);
IkReal x12809=(((r11*r20*x12808))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12805*x12807))+(((-1.0)*x12806))+((r10*r21*x12808))+((x12805*x12806)));
j4eval[0]=x12809;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12807)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12809);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12810=cj5*cj5;
IkReal x12811=(r21*sj5);
IkReal x12812=(r11*r21);
IkReal x12813=((1.0)*r20);
CheckValue<IkReal> x12814 = IKatan2WithCheck(IkReal((x12811+(((-1.0)*cj5*x12813)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12814.valid){
continue;
}
CheckValue<IkReal> x12815=IKPowWithIntegerCheck(IKsign((((x12810*x12812))+(((-1.0)*r12*r22))+(((-1.0)*x12812))+((cj5*r10*x12811))+((cj5*r11*r20*sj5))+(((-1.0)*r10*x12810*x12813)))),-1);
if(!x12815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12814.value)+(((1.5707963267949)*(x12815.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12816=IKcos(j4);
IkReal x12817=IKsin(j4);
IkReal x12818=(cj5*r00);
IkReal x12819=(cj5*r20);
IkReal x12820=(cj5*r10);
IkReal x12821=((1.0)*x12816);
IkReal x12822=((1.0)*x12817);
IkReal x12823=(sj5*x12816);
IkReal x12824=(sj5*x12817);
evalcond[0]=(((r21*x12823))+(((-1.0)*x12819*x12821))+((r22*x12817)));
evalcond[1]=(((r12*x12817))+((r11*x12823))+(((-1.0)*x12820*x12821)));
evalcond[2]=((((-1.0)*r22*x12821))+((r21*x12824))+(((-1.0)*x12819*x12822)));
evalcond[3]=((((-1.0)*r02*x12821))+((r01*x12824))+(((-1.0)*x12818*x12822)));
evalcond[4]=((1.0)+((r01*x12823))+((r02*x12817))+(((-1.0)*x12818*x12821)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12821))+((r11*x12824))+(((-1.0)*x12820*x12822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12825=((1.0)*cj5);
CheckValue<IkReal> x12826 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12825)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12826.valid){
continue;
}
CheckValue<IkReal> x12827=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12825)))),-1);
if(!x12827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12826.value)+(((1.5707963267949)*(x12827.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12828=IKcos(j4);
IkReal x12829=IKsin(j4);
IkReal x12830=(cj5*r00);
IkReal x12831=(cj5*r20);
IkReal x12832=(cj5*r10);
IkReal x12833=((1.0)*x12828);
IkReal x12834=((1.0)*x12829);
IkReal x12835=(sj5*x12828);
IkReal x12836=(sj5*x12829);
evalcond[0]=(((r21*x12835))+((r22*x12829))+(((-1.0)*x12831*x12833)));
evalcond[1]=((((-1.0)*x12832*x12833))+((r11*x12835))+((r12*x12829)));
evalcond[2]=(((r21*x12836))+(((-1.0)*r22*x12833))+(((-1.0)*x12831*x12834)));
evalcond[3]=((((-1.0)*r02*x12833))+((r01*x12836))+(((-1.0)*x12830*x12834)));
evalcond[4]=((1.0)+((r02*x12829))+((r01*x12835))+(((-1.0)*x12830*x12833)));
evalcond[5]=((1.0)+(((-1.0)*x12832*x12834))+((r11*x12836))+(((-1.0)*r12*x12833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12837=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12837.valid){
continue;
}
CheckValue<IkReal> x12838 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12837.value)))+(x12838.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12839=IKcos(j4);
IkReal x12840=IKsin(j4);
IkReal x12841=(cj5*r00);
IkReal x12842=(cj5*r20);
IkReal x12843=(cj5*r10);
IkReal x12844=((1.0)*x12839);
IkReal x12845=((1.0)*x12840);
IkReal x12846=(sj5*x12839);
IkReal x12847=(sj5*x12840);
evalcond[0]=(((r22*x12840))+((r21*x12846))+(((-1.0)*x12842*x12844)));
evalcond[1]=((((-1.0)*x12843*x12844))+((r11*x12846))+((r12*x12840)));
evalcond[2]=((((-1.0)*r22*x12844))+((r21*x12847))+(((-1.0)*x12842*x12845)));
evalcond[3]=((((-1.0)*r02*x12844))+((r01*x12847))+(((-1.0)*x12841*x12845)));
evalcond[4]=((1.0)+((r01*x12846))+(((-1.0)*x12841*x12844))+((r02*x12840)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12844))+(((-1.0)*x12843*x12845))+((r11*x12847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12848=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12848;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12848);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12849=((1.0)*cj5);
IkReal x12850=((((-1.0)*r21*x12849))+(((-1.0)*r20*sj5)));
j4eval[0]=x12850;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x12849))))));
j4eval[2]=IKsign(x12850);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12851=cj5*cj5;
IkReal x12852=(r11*r21);
IkReal x12853=((1.0)*r20);
IkReal x12854=(cj5*sj5);
IkReal x12855=((((-1.0)*r10*x12851*x12853))+((r11*r20*x12854))+(((-1.0)*r12*r22))+(((-1.0)*x12852))+((r10*r21*x12854))+((x12851*x12852)));
j4eval[0]=x12855;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12853))))));
j4eval[2]=IKsign(x12855);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12856=cj5*cj5;
IkReal x12857=(r21*sj5);
IkReal x12858=(r11*r21);
IkReal x12859=((1.0)*r20);
CheckValue<IkReal> x12860=IKPowWithIntegerCheck(IKsign((((x12856*x12858))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12856*x12859))+(((-1.0)*x12858))+((cj5*r10*x12857))+((cj5*r11*r20*sj5)))),-1);
if(!x12860.valid){
continue;
}
CheckValue<IkReal> x12861 = IKatan2WithCheck(IkReal((x12857+(((-1.0)*cj5*x12859)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12860.value)))+(x12861.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12862=IKcos(j4);
IkReal x12863=IKsin(j4);
IkReal x12864=(cj5*r00);
IkReal x12865=(cj5*r20);
IkReal x12866=(cj5*r10);
IkReal x12867=((1.0)*x12862);
IkReal x12868=((1.0)*x12863);
IkReal x12869=(sj5*x12862);
IkReal x12870=(sj5*x12863);
evalcond[0]=(((r21*x12869))+(((-1.0)*x12865*x12867))+((r22*x12863)));
evalcond[1]=(((r11*x12869))+((r12*x12863))+(((-1.0)*x12866*x12867)));
evalcond[2]=((((-1.0)*x12865*x12868))+(((-1.0)*r22*x12867))+((r21*x12870)));
evalcond[3]=(((r01*x12870))+(((-1.0)*x12864*x12868))+(((-1.0)*r02*x12867)));
evalcond[4]=((-1.0)+(((-1.0)*x12864*x12867))+((r01*x12869))+((r02*x12863)));
evalcond[5]=((1.0)+((r11*x12870))+(((-1.0)*x12866*x12868))+(((-1.0)*r12*x12867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12871=((1.0)*cj5);
CheckValue<IkReal> x12872=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12871))+(((-1.0)*r20*sj5)))),-1);
if(!x12872.valid){
continue;
}
CheckValue<IkReal> x12873 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12871)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12872.value)))+(x12873.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12874=IKcos(j4);
IkReal x12875=IKsin(j4);
IkReal x12876=(cj5*r00);
IkReal x12877=(cj5*r20);
IkReal x12878=(cj5*r10);
IkReal x12879=((1.0)*x12874);
IkReal x12880=((1.0)*x12875);
IkReal x12881=(sj5*x12874);
IkReal x12882=(sj5*x12875);
evalcond[0]=(((r22*x12875))+(((-1.0)*x12877*x12879))+((r21*x12881)));
evalcond[1]=((((-1.0)*x12878*x12879))+((r12*x12875))+((r11*x12881)));
evalcond[2]=((((-1.0)*r22*x12879))+(((-1.0)*x12877*x12880))+((r21*x12882)));
evalcond[3]=((((-1.0)*r02*x12879))+((r01*x12882))+(((-1.0)*x12876*x12880)));
evalcond[4]=((-1.0)+((r01*x12881))+((r02*x12875))+(((-1.0)*x12876*x12879)));
evalcond[5]=((1.0)+(((-1.0)*x12878*x12880))+(((-1.0)*r12*x12879))+((r11*x12882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12883 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12883.valid){
continue;
}
CheckValue<IkReal> x12884=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12883.value)+(((1.5707963267949)*(x12884.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12885=IKcos(j4);
IkReal x12886=IKsin(j4);
IkReal x12887=(cj5*r00);
IkReal x12888=(cj5*r20);
IkReal x12889=(cj5*r10);
IkReal x12890=((1.0)*x12885);
IkReal x12891=((1.0)*x12886);
IkReal x12892=(sj5*x12885);
IkReal x12893=(sj5*x12886);
evalcond[0]=(((r21*x12892))+(((-1.0)*x12888*x12890))+((r22*x12886)));
evalcond[1]=((((-1.0)*x12889*x12890))+((r12*x12886))+((r11*x12892)));
evalcond[2]=((((-1.0)*r22*x12890))+((r21*x12893))+(((-1.0)*x12888*x12891)));
evalcond[3]=(((r01*x12893))+(((-1.0)*x12887*x12891))+(((-1.0)*r02*x12890)));
evalcond[4]=((-1.0)+((r01*x12892))+(((-1.0)*x12887*x12890))+((r02*x12886)));
evalcond[5]=((1.0)+(((-1.0)*x12889*x12891))+((r11*x12893))+(((-1.0)*r12*x12890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12894=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12894;
j4eval[1]=IKsign(x12894);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12895=((1.0)*cj5);
IkReal x12896=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12895)));
j4eval[0]=x12896;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12895))+((r21*sj5))))));
j4eval[2]=IKsign(x12896);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12897=cj5*cj5;
IkReal x12898=(r11*r21);
IkReal x12899=((1.0)*r20);
IkReal x12900=(cj5*sj5);
IkReal x12901=((((-1.0)*x12898))+(((-1.0)*r12*r22))+((r11*r20*x12900))+(((-1.0)*r10*x12897*x12899))+((x12897*x12898))+((r10*r21*x12900)));
j4eval[0]=x12901;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12899)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12901);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12902=cj5*cj5;
IkReal x12903=(r21*sj5);
IkReal x12904=(r11*r21);
IkReal x12905=((1.0)*r20);
CheckValue<IkReal> x12906 = IKatan2WithCheck(IkReal((x12903+(((-1.0)*cj5*x12905)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12906.valid){
continue;
}
CheckValue<IkReal> x12907=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*x12904))+(((-1.0)*r10*x12902*x12905))+((x12902*x12904))+((cj5*r10*x12903))+((cj5*r11*r20*sj5)))),-1);
if(!x12907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12906.value)+(((1.5707963267949)*(x12907.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12908=IKcos(j4);
IkReal x12909=IKsin(j4);
IkReal x12910=(cj5*r00);
IkReal x12911=(cj5*r20);
IkReal x12912=(cj5*r10);
IkReal x12913=((1.0)*x12908);
IkReal x12914=((1.0)*x12909);
IkReal x12915=(sj5*x12908);
IkReal x12916=(sj5*x12909);
evalcond[0]=((((-1.0)*x12911*x12913))+((r21*x12915))+((r22*x12909)));
evalcond[1]=((((-1.0)*x12912*x12913))+((r12*x12909))+((r11*x12915)));
evalcond[2]=((((-1.0)*x12911*x12914))+((r21*x12916))+(((-1.0)*r22*x12913)));
evalcond[3]=((((-1.0)*x12910*x12914))+(((-1.0)*r02*x12913))+((r01*x12916)));
evalcond[4]=((1.0)+(((-1.0)*x12910*x12913))+((r02*x12909))+((r01*x12915)));
evalcond[5]=((1.0)+(((-1.0)*x12912*x12914))+(((-1.0)*r12*x12913))+((r11*x12916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12917=((1.0)*cj5);
CheckValue<IkReal> x12918=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12917)))),-1);
if(!x12918.valid){
continue;
}
CheckValue<IkReal> x12919 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12917)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12918.value)))+(x12919.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12920=IKcos(j4);
IkReal x12921=IKsin(j4);
IkReal x12922=(cj5*r00);
IkReal x12923=(cj5*r20);
IkReal x12924=(cj5*r10);
IkReal x12925=((1.0)*x12920);
IkReal x12926=((1.0)*x12921);
IkReal x12927=(sj5*x12920);
IkReal x12928=(sj5*x12921);
evalcond[0]=(((r21*x12927))+(((-1.0)*x12923*x12925))+((r22*x12921)));
evalcond[1]=(((r11*x12927))+(((-1.0)*x12924*x12925))+((r12*x12921)));
evalcond[2]=(((r21*x12928))+(((-1.0)*x12923*x12926))+(((-1.0)*r22*x12925)));
evalcond[3]=((((-1.0)*r02*x12925))+((r01*x12928))+(((-1.0)*x12922*x12926)));
evalcond[4]=((1.0)+((r02*x12921))+((r01*x12927))+(((-1.0)*x12922*x12925)));
evalcond[5]=((1.0)+((r11*x12928))+(((-1.0)*r12*x12925))+(((-1.0)*x12924*x12926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12929=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12929.valid){
continue;
}
CheckValue<IkReal> x12930 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12929.value)))+(x12930.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12931=IKcos(j4);
IkReal x12932=IKsin(j4);
IkReal x12933=(cj5*r00);
IkReal x12934=(cj5*r20);
IkReal x12935=(cj5*r10);
IkReal x12936=((1.0)*x12931);
IkReal x12937=((1.0)*x12932);
IkReal x12938=(sj5*x12931);
IkReal x12939=(sj5*x12932);
evalcond[0]=(((r22*x12932))+((r21*x12938))+(((-1.0)*x12934*x12936)));
evalcond[1]=(((r11*x12938))+((r12*x12932))+(((-1.0)*x12935*x12936)));
evalcond[2]=((((-1.0)*r22*x12936))+((r21*x12939))+(((-1.0)*x12934*x12937)));
evalcond[3]=((((-1.0)*r02*x12936))+(((-1.0)*x12933*x12937))+((r01*x12939)));
evalcond[4]=((1.0)+((r02*x12932))+(((-1.0)*x12933*x12936))+((r01*x12938)));
evalcond[5]=((1.0)+((r11*x12939))+(((-1.0)*r12*x12936))+(((-1.0)*x12935*x12937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12940=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12940;
j4eval[1]=IKsign(x12940);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12941=((1.0)*cj5);
IkReal x12942=((((-1.0)*r11*x12941))+(((-1.0)*r10*sj5)));
j4eval[0]=x12942;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12941)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12942);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12943=cj5*cj5;
IkReal x12944=(r11*r21);
IkReal x12945=((1.0)*r20);
IkReal x12946=(cj5*sj5);
IkReal x12947=(((x12943*x12944))+(((-1.0)*r12*r22))+((r10*r21*x12946))+(((-1.0)*x12944))+(((-1.0)*r10*x12943*x12945))+((r11*r20*x12946)));
j4eval[0]=x12947;
j4eval[1]=((IKabs(((((-1.0)*cj5*x12945))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12947);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12948=cj5*cj5;
IkReal x12949=(r21*sj5);
IkReal x12950=(r11*r21);
IkReal x12951=((1.0)*r20);
CheckValue<IkReal> x12952=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((cj5*r10*x12949))+((x12948*x12950))+(((-1.0)*x12950))+(((-1.0)*r10*x12948*x12951))+((cj5*r11*r20*sj5)))),-1);
if(!x12952.valid){
continue;
}
CheckValue<IkReal> x12953 = IKatan2WithCheck(IkReal((x12949+(((-1.0)*cj5*x12951)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12952.value)))+(x12953.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12954=IKcos(j4);
IkReal x12955=IKsin(j4);
IkReal x12956=(cj5*r00);
IkReal x12957=(cj5*r20);
IkReal x12958=(cj5*r10);
IkReal x12959=((1.0)*x12954);
IkReal x12960=((1.0)*x12955);
IkReal x12961=(sj5*x12954);
IkReal x12962=(sj5*x12955);
evalcond[0]=((((-1.0)*x12957*x12959))+((r22*x12955))+((r21*x12961)));
evalcond[1]=((((-1.0)*x12958*x12959))+((r12*x12955))+((r11*x12961)));
evalcond[2]=((((-1.0)*r22*x12959))+(((-1.0)*x12957*x12960))+((r21*x12962)));
evalcond[3]=(((r01*x12962))+(((-1.0)*r02*x12959))+(((-1.0)*x12956*x12960)));
evalcond[4]=((1.0)+((r01*x12961))+(((-1.0)*x12956*x12959))+((r02*x12955)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12959))+(((-1.0)*x12958*x12960))+((r11*x12962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12963=((1.0)*cj5);
CheckValue<IkReal> x12964 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12963)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12964.valid){
continue;
}
CheckValue<IkReal> x12965=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12963)))),-1);
if(!x12965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12964.value)+(((1.5707963267949)*(x12965.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12966=IKcos(j4);
IkReal x12967=IKsin(j4);
IkReal x12968=(cj5*r00);
IkReal x12969=(cj5*r20);
IkReal x12970=(cj5*r10);
IkReal x12971=((1.0)*x12966);
IkReal x12972=((1.0)*x12967);
IkReal x12973=(sj5*x12966);
IkReal x12974=(sj5*x12967);
evalcond[0]=(((r22*x12967))+((r21*x12973))+(((-1.0)*x12969*x12971)));
evalcond[1]=((((-1.0)*x12970*x12971))+((r11*x12973))+((r12*x12967)));
evalcond[2]=((((-1.0)*r22*x12971))+((r21*x12974))+(((-1.0)*x12969*x12972)));
evalcond[3]=(((r01*x12974))+(((-1.0)*r02*x12971))+(((-1.0)*x12968*x12972)));
evalcond[4]=((1.0)+((r01*x12973))+((r02*x12967))+(((-1.0)*x12968*x12971)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12971))+(((-1.0)*x12970*x12972))+((r11*x12974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12975=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12975.valid){
continue;
}
CheckValue<IkReal> x12976 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12975.value)))+(x12976.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12977=IKcos(j4);
IkReal x12978=IKsin(j4);
IkReal x12979=(cj5*r00);
IkReal x12980=(cj5*r20);
IkReal x12981=(cj5*r10);
IkReal x12982=((1.0)*x12977);
IkReal x12983=((1.0)*x12978);
IkReal x12984=(sj5*x12977);
IkReal x12985=(sj5*x12978);
evalcond[0]=((((-1.0)*x12980*x12982))+((r21*x12984))+((r22*x12978)));
evalcond[1]=(((r11*x12984))+((r12*x12978))+(((-1.0)*x12981*x12982)));
evalcond[2]=((((-1.0)*x12980*x12983))+(((-1.0)*r22*x12982))+((r21*x12985)));
evalcond[3]=(((r01*x12985))+(((-1.0)*r02*x12982))+(((-1.0)*x12979*x12983)));
evalcond[4]=((1.0)+((r02*x12978))+((r01*x12984))+(((-1.0)*x12979*x12982)));
evalcond[5]=((1.0)+((r11*x12985))+(((-1.0)*r12*x12982))+(((-1.0)*x12981*x12983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12986=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12986;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12986);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12987=((1.0)*cj5);
IkReal x12988=((((-1.0)*r21*x12987))+(((-1.0)*r20*sj5)));
j4eval[0]=x12988;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12987))+((r11*sj5))))));
j4eval[2]=IKsign(x12988);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12989=cj5*cj5;
IkReal x12990=(r11*r21);
IkReal x12991=((1.0)*r20);
IkReal x12992=(cj5*sj5);
IkReal x12993=(((r10*r21*x12992))+((x12989*x12990))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12989*x12991))+((r11*r20*x12992))+(((-1.0)*x12990)));
j4eval[0]=x12993;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12991))))));
j4eval[2]=IKsign(x12993);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12994=cj5*cj5;
IkReal x12995=(r21*sj5);
IkReal x12996=(r11*r21);
IkReal x12997=((1.0)*r20);
CheckValue<IkReal> x12998 = IKatan2WithCheck(IkReal((x12995+(((-1.0)*cj5*x12997)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12998.valid){
continue;
}
CheckValue<IkReal> x12999=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12994*x12997))+(((-1.0)*r12*r22))+((x12994*x12996))+((cj5*r10*x12995))+(((-1.0)*x12996))+((cj5*r11*r20*sj5)))),-1);
if(!x12999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12998.value)+(((1.5707963267949)*(x12999.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13000=IKcos(j4);
IkReal x13001=IKsin(j4);
IkReal x13002=(cj5*r00);
IkReal x13003=(cj5*r20);
IkReal x13004=(cj5*r10);
IkReal x13005=((1.0)*x13000);
IkReal x13006=((1.0)*x13001);
IkReal x13007=(sj5*x13000);
IkReal x13008=(sj5*x13001);
evalcond[0]=((((-1.0)*x13003*x13005))+((r22*x13001))+((r21*x13007)));
evalcond[1]=((((-1.0)*x13004*x13005))+((r12*x13001))+((r11*x13007)));
evalcond[2]=((((-1.0)*x13003*x13006))+(((-1.0)*r22*x13005))+((r21*x13008)));
evalcond[3]=((((-1.0)*x13002*x13006))+(((-1.0)*r02*x13005))+((r01*x13008)));
evalcond[4]=((-1.0)+(((-1.0)*x13002*x13005))+((r02*x13001))+((r01*x13007)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13005))+(((-1.0)*x13004*x13006))+((r11*x13008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13009=((1.0)*cj5);
CheckValue<IkReal> x13010=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13009))+(((-1.0)*r20*sj5)))),-1);
if(!x13010.valid){
continue;
}
CheckValue<IkReal> x13011 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x13009)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13010.value)))+(x13011.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13012=IKcos(j4);
IkReal x13013=IKsin(j4);
IkReal x13014=(cj5*r00);
IkReal x13015=(cj5*r20);
IkReal x13016=(cj5*r10);
IkReal x13017=((1.0)*x13012);
IkReal x13018=((1.0)*x13013);
IkReal x13019=(sj5*x13012);
IkReal x13020=(sj5*x13013);
evalcond[0]=(((r21*x13019))+(((-1.0)*x13015*x13017))+((r22*x13013)));
evalcond[1]=((((-1.0)*x13016*x13017))+((r11*x13019))+((r12*x13013)));
evalcond[2]=(((r21*x13020))+(((-1.0)*r22*x13017))+(((-1.0)*x13015*x13018)));
evalcond[3]=(((r01*x13020))+(((-1.0)*x13014*x13018))+(((-1.0)*r02*x13017)));
evalcond[4]=((-1.0)+((r01*x13019))+((r02*x13013))+(((-1.0)*x13014*x13017)));
evalcond[5]=((1.0)+(((-1.0)*x13016*x13018))+((r11*x13020))+(((-1.0)*r12*x13017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13021 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13021.valid){
continue;
}
CheckValue<IkReal> x13022=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13021.value)+(((1.5707963267949)*(x13022.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13023=IKcos(j4);
IkReal x13024=IKsin(j4);
IkReal x13025=(cj5*r00);
IkReal x13026=(cj5*r20);
IkReal x13027=(cj5*r10);
IkReal x13028=((1.0)*x13023);
IkReal x13029=((1.0)*x13024);
IkReal x13030=(sj5*x13023);
IkReal x13031=(sj5*x13024);
evalcond[0]=(((r21*x13030))+((r22*x13024))+(((-1.0)*x13026*x13028)));
evalcond[1]=(((r11*x13030))+(((-1.0)*x13027*x13028))+((r12*x13024)));
evalcond[2]=((((-1.0)*r22*x13028))+((r21*x13031))+(((-1.0)*x13026*x13029)));
evalcond[3]=((((-1.0)*x13025*x13029))+((r01*x13031))+(((-1.0)*r02*x13028)));
evalcond[4]=((-1.0)+((r02*x13024))+(((-1.0)*x13025*x13028))+((r01*x13030)));
evalcond[5]=((1.0)+((r11*x13031))+(((-1.0)*x13027*x13029))+(((-1.0)*r12*x13028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13032=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13032;
j4eval[1]=IKsign(x13032);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13033=((1.0)*cj5);
IkReal x13034=((((-1.0)*r10*sj5))+(((-1.0)*r11*x13033)));
j4eval[0]=x13034;
j4eval[1]=((IKabs(((((-1.0)*r20*x13033))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13034);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13035=cj5*cj5;
IkReal x13036=(r11*r21);
IkReal x13037=((1.0)*r20);
IkReal x13038=(cj5*sj5);
IkReal x13039=((((-1.0)*x13036))+(((-1.0)*r12*r22))+((x13035*x13036))+((r10*r21*x13038))+(((-1.0)*r10*x13035*x13037))+((r11*r20*x13038)));
j4eval[0]=x13039;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13037)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13039);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13040=cj5*cj5;
IkReal x13041=(r21*sj5);
IkReal x13042=(r11*r21);
IkReal x13043=((1.0)*r20);
CheckValue<IkReal> x13044=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13042))+(((-1.0)*r12*r22))+((x13040*x13042))+((cj5*r10*x13041))+(((-1.0)*r10*x13040*x13043))+((cj5*r11*r20*sj5)))),-1);
if(!x13044.valid){
continue;
}
CheckValue<IkReal> x13045 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13043))+x13041)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13044.value)))+(x13045.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13046=IKcos(j4);
IkReal x13047=IKsin(j4);
IkReal x13048=(cj5*r00);
IkReal x13049=(cj5*r20);
IkReal x13050=(cj5*r10);
IkReal x13051=((1.0)*x13046);
IkReal x13052=((1.0)*x13047);
IkReal x13053=(sj5*x13046);
IkReal x13054=(sj5*x13047);
evalcond[0]=((((-1.0)*x13049*x13051))+((r21*x13053))+((r22*x13047)));
evalcond[1]=((((-1.0)*x13050*x13051))+((r12*x13047))+((r11*x13053)));
evalcond[2]=((((-1.0)*x13049*x13052))+((r21*x13054))+(((-1.0)*r22*x13051)));
evalcond[3]=((((-1.0)*x13048*x13052))+(((-1.0)*r02*x13051))+((r01*x13054)));
evalcond[4]=((1.0)+((r02*x13047))+(((-1.0)*x13048*x13051))+((r01*x13053)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13051))+(((-1.0)*x13050*x13052))+((r11*x13054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13055=((1.0)*cj5);
CheckValue<IkReal> x13056 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13055))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13056.valid){
continue;
}
CheckValue<IkReal> x13057=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13055)))),-1);
if(!x13057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13056.value)+(((1.5707963267949)*(x13057.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13058=IKcos(j4);
IkReal x13059=IKsin(j4);
IkReal x13060=(cj5*r00);
IkReal x13061=(cj5*r20);
IkReal x13062=(cj5*r10);
IkReal x13063=((1.0)*x13058);
IkReal x13064=((1.0)*x13059);
IkReal x13065=(sj5*x13058);
IkReal x13066=(sj5*x13059);
evalcond[0]=((((-1.0)*x13061*x13063))+((r22*x13059))+((r21*x13065)));
evalcond[1]=(((r12*x13059))+(((-1.0)*x13062*x13063))+((r11*x13065)));
evalcond[2]=((((-1.0)*x13061*x13064))+((r21*x13066))+(((-1.0)*r22*x13063)));
evalcond[3]=((((-1.0)*x13060*x13064))+(((-1.0)*r02*x13063))+((r01*x13066)));
evalcond[4]=((1.0)+((r02*x13059))+(((-1.0)*x13060*x13063))+((r01*x13065)));
evalcond[5]=((1.0)+(((-1.0)*x13062*x13064))+(((-1.0)*r12*x13063))+((r11*x13066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13067=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13067.valid){
continue;
}
CheckValue<IkReal> x13068 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13067.value)))+(x13068.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13069=IKcos(j4);
IkReal x13070=IKsin(j4);
IkReal x13071=(cj5*r00);
IkReal x13072=(cj5*r20);
IkReal x13073=(cj5*r10);
IkReal x13074=((1.0)*x13069);
IkReal x13075=((1.0)*x13070);
IkReal x13076=(sj5*x13069);
IkReal x13077=(sj5*x13070);
evalcond[0]=(((r21*x13076))+(((-1.0)*x13072*x13074))+((r22*x13070)));
evalcond[1]=(((r11*x13076))+(((-1.0)*x13073*x13074))+((r12*x13070)));
evalcond[2]=(((r21*x13077))+(((-1.0)*x13072*x13075))+(((-1.0)*r22*x13074)));
evalcond[3]=((((-1.0)*r02*x13074))+((r01*x13077))+(((-1.0)*x13071*x13075)));
evalcond[4]=((1.0)+((r01*x13076))+((r02*x13070))+(((-1.0)*x13071*x13074)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13074))+((r11*x13077))+(((-1.0)*x13073*x13075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13078=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13078;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13078);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13079=((1.0)*cj5);
IkReal x13080=((((-1.0)*r21*x13079))+(((-1.0)*r20*sj5)));
j4eval[0]=x13080;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x13079))+((r11*sj5))))));
j4eval[2]=IKsign(x13080);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13081=cj5*cj5;
IkReal x13082=(r11*r21);
IkReal x13083=((1.0)*r20);
IkReal x13084=(cj5*sj5);
IkReal x13085=((((-1.0)*r10*x13081*x13083))+(((-1.0)*r12*r22))+((r11*r20*x13084))+((r10*r21*x13084))+(((-1.0)*x13082))+((x13081*x13082)));
j4eval[0]=x13085;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13083))))));
j4eval[2]=IKsign(x13085);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13086=cj5*cj5;
IkReal x13087=(r21*sj5);
IkReal x13088=(r11*r21);
IkReal x13089=((1.0)*r20);
CheckValue<IkReal> x13090 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13089))+x13087)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13090.valid){
continue;
}
CheckValue<IkReal> x13091=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x13086*x13089))+(((-1.0)*r12*r22))+((x13086*x13088))+(((-1.0)*x13088))+((cj5*r11*r20*sj5))+((cj5*r10*x13087)))),-1);
if(!x13091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13090.value)+(((1.5707963267949)*(x13091.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13092=IKcos(j4);
IkReal x13093=IKsin(j4);
IkReal x13094=(cj5*r00);
IkReal x13095=(cj5*r20);
IkReal x13096=(cj5*r10);
IkReal x13097=((1.0)*x13092);
IkReal x13098=((1.0)*x13093);
IkReal x13099=(sj5*x13092);
IkReal x13100=(sj5*x13093);
evalcond[0]=((((-1.0)*x13095*x13097))+((r22*x13093))+((r21*x13099)));
evalcond[1]=(((r11*x13099))+((r12*x13093))+(((-1.0)*x13096*x13097)));
evalcond[2]=((((-1.0)*x13095*x13098))+(((-1.0)*r22*x13097))+((r21*x13100)));
evalcond[3]=(((r01*x13100))+(((-1.0)*x13094*x13098))+(((-1.0)*r02*x13097)));
evalcond[4]=((-1.0)+((r02*x13093))+(((-1.0)*x13094*x13097))+((r01*x13099)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13097))+(((-1.0)*x13096*x13098))+((r11*x13100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13101=((1.0)*cj5);
CheckValue<IkReal> x13102 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x13101)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13102.valid){
continue;
}
CheckValue<IkReal> x13103=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13101))+(((-1.0)*r20*sj5)))),-1);
if(!x13103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13102.value)+(((1.5707963267949)*(x13103.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13104=IKcos(j4);
IkReal x13105=IKsin(j4);
IkReal x13106=(cj5*r00);
IkReal x13107=(cj5*r20);
IkReal x13108=(cj5*r10);
IkReal x13109=((1.0)*x13104);
IkReal x13110=((1.0)*x13105);
IkReal x13111=(sj5*x13104);
IkReal x13112=(sj5*x13105);
evalcond[0]=((((-1.0)*x13107*x13109))+((r21*x13111))+((r22*x13105)));
evalcond[1]=(((r12*x13105))+(((-1.0)*x13108*x13109))+((r11*x13111)));
evalcond[2]=(((r21*x13112))+(((-1.0)*x13107*x13110))+(((-1.0)*r22*x13109)));
evalcond[3]=((((-1.0)*r02*x13109))+(((-1.0)*x13106*x13110))+((r01*x13112)));
evalcond[4]=((-1.0)+(((-1.0)*x13106*x13109))+((r02*x13105))+((r01*x13111)));
evalcond[5]=((1.0)+(((-1.0)*x13108*x13110))+(((-1.0)*r12*x13109))+((r11*x13112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13113 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13113.valid){
continue;
}
CheckValue<IkReal> x13114=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13113.value)+(((1.5707963267949)*(x13114.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13115=IKcos(j4);
IkReal x13116=IKsin(j4);
IkReal x13117=(cj5*r00);
IkReal x13118=(cj5*r20);
IkReal x13119=(cj5*r10);
IkReal x13120=((1.0)*x13115);
IkReal x13121=((1.0)*x13116);
IkReal x13122=(sj5*x13115);
IkReal x13123=(sj5*x13116);
evalcond[0]=(((r22*x13116))+(((-1.0)*x13118*x13120))+((r21*x13122)));
evalcond[1]=(((r12*x13116))+((r11*x13122))+(((-1.0)*x13119*x13120)));
evalcond[2]=((((-1.0)*x13118*x13121))+(((-1.0)*r22*x13120))+((r21*x13123)));
evalcond[3]=((((-1.0)*r02*x13120))+((r01*x13123))+(((-1.0)*x13117*x13121)));
evalcond[4]=((-1.0)+((r02*x13116))+((r01*x13122))+(((-1.0)*x13117*x13120)));
evalcond[5]=((1.0)+((r11*x13123))+(((-1.0)*r12*x13120))+(((-1.0)*x13119*x13121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13124=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13124);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13124);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13125=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13125);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13125);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13126=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13126)));
j4eval[1]=((((-1.0)*r00*x13126))+((r01*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13127=((1.0)*cj5);
CheckValue<IkReal> x13128=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13127))),-1);
if(!x13128.valid){
continue;
}
CheckValue<IkReal> x13129=IKPowWithIntegerCheck(((((-1.0)*r00*x13127))+((r01*sj5))),-1);
if(!x13129.valid){
continue;
}
if( IKabs(((-1.0)*(x13128.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13129.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13128.value)))+IKsqr(((x13129.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13128.value)), ((x13129.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13130=IKsin(j4);
IkReal x13131=IKcos(j4);
IkReal x13132=((1.0)*cj5);
IkReal x13133=((1.0)*cj2);
IkReal x13134=(sj5*x13131);
IkReal x13135=(sj5*x13130);
evalcond[0]=((-1.0)*r22*x13131);
evalcond[1]=((((-1.0)*cj1*x13133))+((sj1*sj2))+((r22*x13130)));
evalcond[2]=(((r01*x13135))+(((-1.0)*r00*x13130*x13132)));
evalcond[3]=((((-1.0)*r10*x13131*x13132))+((r11*x13134)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13130*x13132))+((r11*x13135)));
evalcond[5]=(((r01*x13134))+(((-1.0)*r00*x13131*x13132))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13136=IKPowWithIntegerCheck(r22,-1);
if(!x13136.valid){
continue;
}
CheckValue<IkReal> x13137=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13137.valid){
continue;
}
if( IKabs(((x13136.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13137.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13136.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13137.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13136.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13137.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13138=IKsin(j4);
IkReal x13139=IKcos(j4);
IkReal x13140=((1.0)*cj5);
IkReal x13141=((1.0)*cj2);
IkReal x13142=(sj5*x13139);
IkReal x13143=(sj5*x13138);
evalcond[0]=((-1.0)*r22*x13139);
evalcond[1]=(((sj1*sj2))+(((-1.0)*cj1*x13141))+((r22*x13138)));
evalcond[2]=((((-1.0)*r00*x13138*x13140))+((r01*x13143)));
evalcond[3]=((((-1.0)*r10*x13139*x13140))+((r11*x13142)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13138*x13140))+((r11*x13143)));
evalcond[5]=((((-1.0)*sj1*x13141))+(((-1.0)*cj1*sj2))+(((-1.0)*r00*x13139*x13140))+((r01*x13142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13144=(sj1*sj2);
IkReal x13145=(cj5*r10);
IkReal x13146=(r11*sj5);
IkReal x13147=(cj1*cj2);
CheckValue<IkReal> x13148=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13148.valid){
continue;
}
CheckValue<IkReal> x13149 = IKatan2WithCheck(IkReal((((x13144*x13146))+((x13145*x13147))+(((-1.0)*x13144*x13145))+(((-1.0)*x13146*x13147)))),IkReal((((r12*x13147))+(((-1.0)*r12*x13144)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13148.value)))+(x13149.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13150=IKcos(j4);
IkReal x13151=IKsin(j4);
IkReal x13152=(cj5*r00);
IkReal x13153=(cj5*r10);
IkReal x13154=(r21*sj5);
IkReal x13155=((1.0)*cj2);
IkReal x13156=(cj5*r20);
IkReal x13157=((1.0)*x13150);
IkReal x13158=((1.0)*x13151);
IkReal x13159=(sj5*x13151);
IkReal x13160=(sj5*x13150);
evalcond[0]=(((r11*x13160))+((r12*x13151))+(((-1.0)*x13153*x13157)));
evalcond[1]=((((-1.0)*x13156*x13158))+((x13151*x13154))+(((-1.0)*r22*x13157)));
evalcond[2]=((((-1.0)*x13152*x13158))+(((-1.0)*r02*x13157))+((r01*x13159)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13157))+((r11*x13159))+(((-1.0)*x13153*x13158)));
evalcond[4]=((((-1.0)*x13156*x13157))+((x13150*x13154))+((sj1*sj2))+(((-1.0)*cj1*x13155))+((r22*x13151)));
evalcond[5]=((((-1.0)*sj1*x13155))+((r02*x13151))+((r01*x13160))+(((-1.0)*x13152*x13157))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13161=((1.0)*cj5);
CheckValue<IkReal> x13162 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13161))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13162.valid){
continue;
}
CheckValue<IkReal> x13163=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13161))+(((-1.0)*r00*sj5)))),-1);
if(!x13163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13162.value)+(((1.5707963267949)*(x13163.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13164=IKcos(j4);
IkReal x13165=IKsin(j4);
IkReal x13166=(cj5*r00);
IkReal x13167=(cj5*r10);
IkReal x13168=(r21*sj5);
IkReal x13169=((1.0)*cj2);
IkReal x13170=(cj5*r20);
IkReal x13171=((1.0)*x13164);
IkReal x13172=((1.0)*x13165);
IkReal x13173=(sj5*x13165);
IkReal x13174=(sj5*x13164);
evalcond[0]=((((-1.0)*x13167*x13171))+((r11*x13174))+((r12*x13165)));
evalcond[1]=(((x13165*x13168))+(((-1.0)*x13170*x13172))+(((-1.0)*r22*x13171)));
evalcond[2]=(((r01*x13173))+(((-1.0)*x13166*x13172))+(((-1.0)*r02*x13171)));
evalcond[3]=((1.0)+(((-1.0)*x13167*x13172))+(((-1.0)*r12*x13171))+((r11*x13173)));
evalcond[4]=((((-1.0)*cj1*x13169))+((r22*x13165))+((sj1*sj2))+(((-1.0)*x13170*x13171))+((x13164*x13168)));
evalcond[5]=(((r01*x13174))+(((-1.0)*sj1*x13169))+(((-1.0)*cj1*sj2))+((r02*x13165))+(((-1.0)*x13166*x13171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13175=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13175.valid){
continue;
}
CheckValue<IkReal> x13176 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13175.value)))+(x13176.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13177=IKcos(j4);
IkReal x13178=IKsin(j4);
IkReal x13179=(cj5*r00);
IkReal x13180=(cj5*r10);
IkReal x13181=(r21*sj5);
IkReal x13182=((1.0)*cj2);
IkReal x13183=(cj5*r20);
IkReal x13184=((1.0)*x13177);
IkReal x13185=((1.0)*x13178);
IkReal x13186=(sj5*x13178);
IkReal x13187=(sj5*x13177);
evalcond[0]=(((r11*x13187))+((r12*x13178))+(((-1.0)*x13180*x13184)));
evalcond[1]=((((-1.0)*x13183*x13185))+(((-1.0)*r22*x13184))+((x13178*x13181)));
evalcond[2]=((((-1.0)*x13179*x13185))+(((-1.0)*r02*x13184))+((r01*x13186)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13184))+((r11*x13186))+(((-1.0)*x13180*x13185)));
evalcond[4]=((((-1.0)*x13183*x13184))+((sj1*sj2))+(((-1.0)*cj1*x13182))+((r22*x13178))+((x13177*x13181)));
evalcond[5]=((((-1.0)*x13179*x13184))+(((-1.0)*cj1*sj2))+((r01*x13187))+((r02*x13178))+(((-1.0)*sj1*x13182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13188=((-1.0)*r00);
IkReal x13190 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13190)==0){
continue;
}
IkReal x13189=pow(x13190,-0.5);
CheckValue<IkReal> x13191 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13188),IKFAST_ATAN2_MAGTHRESH);
if(!x13191.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13191.value));
IkReal gconst19=(r01*x13189);
IkReal gconst20=(x13188*x13189);
CheckValue<IkReal> x13192 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13192.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13192.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13193=((-1.0)*r00);
IkReal x13194=x13189;
CheckValue<IkReal> x13196 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13193),IKFAST_ATAN2_MAGTHRESH);
if(!x13196.valid){
continue;
}
IkReal x13195=((-1.0)*(x13196.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13195;
IkReal gconst18=x13195;
IkReal gconst19=(r01*x13194);
IkReal gconst20=(x13193*x13194);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13197=((-1.0)*r00);
IkReal x13198=x13189;
CheckValue<IkReal> x13200 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13197),IKFAST_ATAN2_MAGTHRESH);
if(!x13200.valid){
continue;
}
IkReal x13199=((-1.0)*(x13200.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13199;
IkReal gconst18=x13199;
IkReal gconst19=(r01*x13198);
IkReal gconst20=(x13197*x13198);
CheckValue<IkReal> x13208=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13208.valid){
continue;
}
IkReal x13201=x13208.value;
IkReal x13202=(sj3*x13201);
IkReal x13203=(r11*x13202);
IkReal x13204=(r21*x13202);
IkReal x13205=(r20*x13202);
IkReal x13206=(r10*x13202);
IkReal x13207=(r00*r01*x13202);
j4eval[0]=IKsign((((r10*x13205*(r00*r00)))+((r21*x13203*(r01*r01)))+((r12*r22*sj3))+((r00*r01*r10*x13204))+((r00*r01*r20*x13203))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13209=gconst19*gconst19;
IkReal x13210=gconst20*gconst20;
IkReal x13211=(gconst20*sj3);
IkReal x13212=((1.0)*cj3);
IkReal x13213=(r10*sj3);
IkReal x13214=(gconst19*r21);
IkReal x13215=(r11*r20);
IkReal x13216=(cj3*gconst20);
IkReal x13217=((1.0)*r10*r20);
IkReal x13218=(r21*x13209);
CheckValue<IkReal> x13219=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x13210*x13212))+((r10*x13214*x13216))+(((-1.0)*r11*x13212*x13218))+(((-1.0)*r12*r22*x13212))+((gconst19*x13215*x13216)))),-1);
if(!x13219.valid){
continue;
}
CheckValue<IkReal> x13220 = IKatan2WithCheck(IkReal((((gconst19*r22*x13213))+((r11*r22*x13211)))),IkReal(((((-1.0)*sj3*x13210*x13215))+(((-1.0)*gconst19*x13211*x13217))+((r11*x13211*x13214))+((x13213*x13218)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13219.value)))+(x13220.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13221=IKsin(j4);
IkReal x13222=IKcos(j4);
IkReal x13223=(sj1*sj2);
IkReal x13224=(gconst20*sj3);
IkReal x13225=(gconst19*r21);
IkReal x13226=(gconst20*r10);
IkReal x13227=(cj3*gconst19);
IkReal x13228=(gconst19*sj3);
IkReal x13229=((1.0)*cj1);
IkReal x13230=(cj3*gconst20);
IkReal x13231=(cj2*sj1);
IkReal x13232=(cj2*x13229);
IkReal x13233=((1.0)*x13222);
IkReal x13234=((1.0)*x13221);
IkReal x13235=(cj3*x13221);
IkReal x13236=(gconst19*x13221);
evalcond[0]=((((-1.0)*gconst20*r20*x13234))+((x13221*x13225))+(((-1.0)*r22*x13233)));
evalcond[1]=(((r01*x13236))+(((-1.0)*r02*x13233))+(((-1.0)*gconst20*r00*x13234)));
evalcond[2]=((1.0)+(((-1.0)*x13226*x13234))+(((-1.0)*r12*x13233))+((r11*x13236)));
evalcond[3]=(((r10*x13228))+((r11*x13224))+(((-1.0)*cj3*x13226*x13233))+((r12*x13235))+((r11*x13222*x13227)));
evalcond[4]=(((r10*x13222*x13224))+((r10*x13227))+((r11*x13230))+(((-1.0)*r12*sj3*x13234))+(((-1.0)*r11*x13228*x13233)));
evalcond[5]=(((r21*x13224))+((cj1*sj2))+((r22*x13235))+x13231+((r20*x13228))+((cj3*x13222*x13225))+(((-1.0)*r20*x13230*x13233)));
evalcond[6]=(((r01*x13222*x13227))+((r02*x13235))+((r00*x13228))+((r01*x13224))+x13223+(((-1.0)*r00*x13230*x13233))+(((-1.0)*x13232)));
evalcond[7]=((((-1.0)*r22*sj3*x13234))+(((-1.0)*sj3*x13225*x13233))+((r21*x13230))+x13223+((r20*x13227))+(((-1.0)*x13232))+((r20*x13222*x13224)));
evalcond[8]=((((-1.0)*r01*x13228*x13233))+((r01*x13230))+((r00*x13222*x13224))+(((-1.0)*sj2*x13229))+((r00*x13227))+(((-1.0)*x13231))+(((-1.0)*r02*sj3*x13234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13237=gconst19*gconst19;
IkReal x13238=gconst20*gconst20;
IkReal x13239=(r21*sj3);
IkReal x13240=(cj3*r11);
IkReal x13241=(gconst19*gconst20);
IkReal x13242=((1.0)*r10);
IkReal x13243=(cj3*r10);
IkReal x13244=(r20*x13238);
CheckValue<IkReal> x13245=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13239*x13241*x13242))+((r12*r22*sj3))+((r11*x13237*x13239))+((r10*sj3*x13244))+(((-1.0)*r11*r20*sj3*x13241)))),-1);
if(!x13245.valid){
continue;
}
CheckValue<IkReal> x13246 = IKatan2WithCheck(IkReal((((gconst19*r22*x13243))+((gconst20*r22*x13240)))),IkReal((((r21*x13237*x13243))+(((-1.0)*x13240*x13244))+((r21*x13240*x13241))+(((-1.0)*cj3*r20*x13241*x13242)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13245.value)))+(x13246.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13247=IKsin(j4);
IkReal x13248=IKcos(j4);
IkReal x13249=(sj1*sj2);
IkReal x13250=(gconst20*sj3);
IkReal x13251=(gconst19*r21);
IkReal x13252=(gconst20*r10);
IkReal x13253=(cj3*gconst19);
IkReal x13254=(gconst19*sj3);
IkReal x13255=((1.0)*cj1);
IkReal x13256=(cj3*gconst20);
IkReal x13257=(cj2*sj1);
IkReal x13258=(cj2*x13255);
IkReal x13259=((1.0)*x13248);
IkReal x13260=((1.0)*x13247);
IkReal x13261=(cj3*x13247);
IkReal x13262=(gconst19*x13247);
evalcond[0]=((((-1.0)*r22*x13259))+(((-1.0)*gconst20*r20*x13260))+((x13247*x13251)));
evalcond[1]=((((-1.0)*gconst20*r00*x13260))+(((-1.0)*r02*x13259))+((r01*x13262)));
evalcond[2]=((1.0)+((r11*x13262))+(((-1.0)*x13252*x13260))+(((-1.0)*r12*x13259)));
evalcond[3]=(((r10*x13254))+((r12*x13261))+((r11*x13250))+((r11*x13248*x13253))+(((-1.0)*cj3*x13252*x13259)));
evalcond[4]=(((r10*x13248*x13250))+(((-1.0)*r11*x13254*x13259))+((r10*x13253))+((r11*x13256))+(((-1.0)*r12*sj3*x13260)));
evalcond[5]=(((r21*x13250))+((cj1*sj2))+((cj3*x13248*x13251))+((r22*x13261))+x13257+(((-1.0)*r20*x13256*x13259))+((r20*x13254)));
evalcond[6]=((((-1.0)*r00*x13256*x13259))+((r01*x13250))+((r00*x13254))+((r02*x13261))+(((-1.0)*x13258))+((r01*x13248*x13253))+x13249);
evalcond[7]=(((r21*x13256))+(((-1.0)*sj3*x13251*x13259))+((r20*x13248*x13250))+(((-1.0)*r22*sj3*x13260))+(((-1.0)*x13258))+x13249+((r20*x13253)));
evalcond[8]=((((-1.0)*x13257))+(((-1.0)*r02*sj3*x13260))+((r00*x13248*x13250))+((r01*x13256))+((r00*x13253))+(((-1.0)*r01*x13254*x13259))+(((-1.0)*sj2*x13255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13263 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13263.valid){
continue;
}
CheckValue<IkReal> x13264=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13264.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13263.value)+(((1.5707963267949)*(x13264.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13265=IKsin(j4);
IkReal x13266=IKcos(j4);
IkReal x13267=(sj1*sj2);
IkReal x13268=(gconst20*sj3);
IkReal x13269=(gconst19*r21);
IkReal x13270=(gconst20*r10);
IkReal x13271=(cj3*gconst19);
IkReal x13272=(gconst19*sj3);
IkReal x13273=((1.0)*cj1);
IkReal x13274=(cj3*gconst20);
IkReal x13275=(cj2*sj1);
IkReal x13276=(cj2*x13273);
IkReal x13277=((1.0)*x13266);
IkReal x13278=((1.0)*x13265);
IkReal x13279=(cj3*x13265);
IkReal x13280=(gconst19*x13265);
evalcond[0]=((((-1.0)*r22*x13277))+(((-1.0)*gconst20*r20*x13278))+((x13265*x13269)));
evalcond[1]=((((-1.0)*gconst20*r00*x13278))+(((-1.0)*r02*x13277))+((r01*x13280)));
evalcond[2]=((1.0)+((r11*x13280))+(((-1.0)*x13270*x13278))+(((-1.0)*r12*x13277)));
evalcond[3]=(((r11*x13268))+((r12*x13279))+((r11*x13266*x13271))+((r10*x13272))+(((-1.0)*cj3*x13270*x13277)));
evalcond[4]=(((r11*x13274))+((r10*x13266*x13268))+((r10*x13271))+(((-1.0)*r11*x13272*x13277))+(((-1.0)*r12*sj3*x13278)));
evalcond[5]=(((r21*x13268))+((r20*x13272))+((cj1*sj2))+((cj3*x13266*x13269))+(((-1.0)*r20*x13274*x13277))+((r22*x13279))+x13275);
evalcond[6]=((((-1.0)*r00*x13274*x13277))+(((-1.0)*x13276))+((r01*x13268))+((r00*x13272))+((r02*x13279))+((r01*x13266*x13271))+x13267);
evalcond[7]=((((-1.0)*x13276))+((r21*x13274))+((r20*x13271))+(((-1.0)*r22*sj3*x13278))+((r20*x13266*x13268))+x13267+(((-1.0)*sj3*x13269*x13277)));
evalcond[8]=((((-1.0)*r01*x13272*x13277))+(((-1.0)*x13275))+((r01*x13274))+(((-1.0)*sj2*x13273))+((r00*x13271))+(((-1.0)*r02*sj3*x13278))+((r00*x13266*x13268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13281=((-1.0)*r01);
IkReal x13283 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13283)==0){
continue;
}
IkReal x13282=pow(x13283,-0.5);
CheckValue<IkReal> x13284 = IKatan2WithCheck(IkReal(x13281),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13284.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13284.value))));
IkReal gconst22=(x13281*x13282);
IkReal gconst23=((1.0)*r00*x13282);
CheckValue<IkReal> x13285 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13285.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13285.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13286=((-1.0)*r01);
CheckValue<IkReal> x13289 = IKatan2WithCheck(IkReal(x13286),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13289.valid){
continue;
}
IkReal x13287=((1.0)*(x13289.value));
IkReal x13288=x13282;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13287)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13287)));
IkReal gconst22=(x13286*x13288);
IkReal gconst23=((1.0)*r00*x13288);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13290=((-1.0)*r01);
CheckValue<IkReal> x13293 = IKatan2WithCheck(IkReal(x13290),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13293.valid){
continue;
}
IkReal x13291=((1.0)*(x13293.value));
IkReal x13292=x13282;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13291)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13291)));
IkReal gconst22=(x13290*x13292);
IkReal gconst23=((1.0)*r00*x13292);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13294=gconst22*gconst22;
IkReal x13295=gconst23*gconst23;
IkReal x13296=(r21*sj3);
IkReal x13297=((1.0)*cj3);
IkReal x13298=(gconst23*r11);
IkReal x13299=(r22*sj3);
IkReal x13300=(gconst22*r10);
IkReal x13301=((1.0)*r20*sj3);
CheckValue<IkReal> x13302=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x13297))+((cj3*gconst23*r21*x13300))+(((-1.0)*r10*r20*x13295*x13297))+((cj3*gconst22*r20*x13298))+(((-1.0)*r11*r21*x13294*x13297)))),-1);
if(!x13302.valid){
continue;
}
CheckValue<IkReal> x13303 = IKatan2WithCheck(IkReal((((x13298*x13299))+((x13299*x13300)))),IkReal((((gconst22*x13296*x13298))+((r10*x13294*x13296))+(((-1.0)*r11*x13295*x13301))+(((-1.0)*gconst23*x13300*x13301)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13302.value)))+(x13303.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13304=IKsin(j4);
IkReal x13305=IKcos(j4);
IkReal x13306=(sj1*sj2);
IkReal x13307=(gconst23*sj3);
IkReal x13308=(gconst22*sj3);
IkReal x13309=(cj2*sj1);
IkReal x13310=((1.0)*cj1);
IkReal x13311=(cj3*gconst23);
IkReal x13312=(cj3*gconst22);
IkReal x13313=(cj2*x13310);
IkReal x13314=((1.0)*x13305);
IkReal x13315=(cj3*x13304);
IkReal x13316=(gconst22*x13304);
IkReal x13317=((1.0)*sj3*x13304);
IkReal x13318=(x13305*x13312);
IkReal x13319=((1.0)*gconst23*x13304);
evalcond[0]=((((-1.0)*r20*x13319))+((r21*x13316))+(((-1.0)*r22*x13314)));
evalcond[1]=(((r01*x13316))+(((-1.0)*r02*x13314))+(((-1.0)*r00*x13319)));
evalcond[2]=((1.0)+((r11*x13316))+(((-1.0)*r10*x13319))+(((-1.0)*r12*x13314)));
evalcond[3]=(((r11*x13318))+((r10*x13308))+(((-1.0)*r10*x13311*x13314))+((r11*x13307))+((r12*x13315)));
evalcond[4]=(((r11*x13311))+((r10*x13312))+((r10*x13305*x13307))+(((-1.0)*r11*x13308*x13314))+(((-1.0)*r12*x13317)));
evalcond[5]=(((r21*x13307))+(((-1.0)*r20*x13311*x13314))+((r20*x13308))+((cj1*sj2))+((r22*x13315))+((r21*x13318))+x13309);
evalcond[6]=((((-1.0)*r00*x13311*x13314))+((r01*x13318))+((r00*x13308))+((r01*x13307))+(((-1.0)*x13313))+x13306+((r02*x13315)));
evalcond[7]=(((r20*x13312))+(((-1.0)*r21*x13308*x13314))+(((-1.0)*x13313))+((r21*x13311))+((r20*x13305*x13307))+x13306+(((-1.0)*r22*x13317)));
evalcond[8]=((((-1.0)*sj2*x13310))+((r01*x13311))+((r00*x13312))+(((-1.0)*r02*x13317))+((r00*x13305*x13307))+(((-1.0)*r01*x13308*x13314))+(((-1.0)*x13309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13320=((1.0)*gconst23);
CheckValue<IkReal> x13321 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst22*r21))+(((-1.0)*r20*x13320)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13321.valid){
continue;
}
CheckValue<IkReal> x13322=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x13320)))),-1);
if(!x13322.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13321.value)+(((1.5707963267949)*(x13322.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13323=IKsin(j4);
IkReal x13324=IKcos(j4);
IkReal x13325=(sj1*sj2);
IkReal x13326=(gconst23*sj3);
IkReal x13327=(gconst22*sj3);
IkReal x13328=(cj2*sj1);
IkReal x13329=((1.0)*cj1);
IkReal x13330=(cj3*gconst23);
IkReal x13331=(cj3*gconst22);
IkReal x13332=(cj2*x13329);
IkReal x13333=((1.0)*x13324);
IkReal x13334=(cj3*x13323);
IkReal x13335=(gconst22*x13323);
IkReal x13336=((1.0)*sj3*x13323);
IkReal x13337=(x13324*x13331);
IkReal x13338=((1.0)*gconst23*x13323);
evalcond[0]=((((-1.0)*r22*x13333))+((r21*x13335))+(((-1.0)*r20*x13338)));
evalcond[1]=((((-1.0)*r00*x13338))+((r01*x13335))+(((-1.0)*r02*x13333)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13333))+(((-1.0)*r10*x13338))+((r11*x13335)));
evalcond[3]=(((r10*x13327))+((r11*x13326))+((r12*x13334))+((r11*x13337))+(((-1.0)*r10*x13330*x13333)));
evalcond[4]=((((-1.0)*r11*x13327*x13333))+((r10*x13331))+((r10*x13324*x13326))+(((-1.0)*r12*x13336))+((r11*x13330)));
evalcond[5]=(((r22*x13334))+((cj1*sj2))+((r20*x13327))+(((-1.0)*r20*x13330*x13333))+((r21*x13337))+((r21*x13326))+x13328);
evalcond[6]=((((-1.0)*x13332))+(((-1.0)*r00*x13330*x13333))+((r02*x13334))+((r01*x13337))+((r00*x13327))+((r01*x13326))+x13325);
evalcond[7]=((((-1.0)*x13332))+(((-1.0)*r22*x13336))+(((-1.0)*r21*x13327*x13333))+((r20*x13324*x13326))+((r20*x13331))+((r21*x13330))+x13325);
evalcond[8]=((((-1.0)*x13328))+((r00*x13331))+((r01*x13330))+((r00*x13324*x13326))+(((-1.0)*r01*x13327*x13333))+(((-1.0)*sj2*x13329))+(((-1.0)*r02*x13336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13339=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13339.valid){
continue;
}
CheckValue<IkReal> x13340 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13339.value)))+(x13340.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13341=IKsin(j4);
IkReal x13342=IKcos(j4);
IkReal x13343=(sj1*sj2);
IkReal x13344=(gconst23*sj3);
IkReal x13345=(gconst22*sj3);
IkReal x13346=(cj2*sj1);
IkReal x13347=((1.0)*cj1);
IkReal x13348=(cj3*gconst23);
IkReal x13349=(cj3*gconst22);
IkReal x13350=(cj2*x13347);
IkReal x13351=((1.0)*x13342);
IkReal x13352=(cj3*x13341);
IkReal x13353=(gconst22*x13341);
IkReal x13354=((1.0)*sj3*x13341);
IkReal x13355=(x13342*x13349);
IkReal x13356=((1.0)*gconst23*x13341);
evalcond[0]=((((-1.0)*r22*x13351))+((r21*x13353))+(((-1.0)*r20*x13356)));
evalcond[1]=((((-1.0)*r02*x13351))+(((-1.0)*r00*x13356))+((r01*x13353)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13351))+((r11*x13353))+(((-1.0)*r10*x13356)));
evalcond[3]=((((-1.0)*r10*x13348*x13351))+((r10*x13345))+((r11*x13344))+((r11*x13355))+((r12*x13352)));
evalcond[4]=((((-1.0)*r12*x13354))+(((-1.0)*r11*x13345*x13351))+((r10*x13349))+((r10*x13342*x13344))+((r11*x13348)));
evalcond[5]=(((r22*x13352))+((cj1*sj2))+((r21*x13344))+(((-1.0)*r20*x13348*x13351))+((r21*x13355))+((r20*x13345))+x13346);
evalcond[6]=(((r02*x13352))+(((-1.0)*r00*x13348*x13351))+((r01*x13355))+((r00*x13345))+((r01*x13344))+(((-1.0)*x13350))+x13343);
evalcond[7]=((((-1.0)*r22*x13354))+((r21*x13348))+((r20*x13342*x13344))+(((-1.0)*r21*x13345*x13351))+(((-1.0)*x13350))+((r20*x13349))+x13343);
evalcond[8]=((((-1.0)*r02*x13354))+(((-1.0)*r01*x13345*x13351))+(((-1.0)*sj2*x13347))+(((-1.0)*x13346))+((r00*x13349))+((r00*x13342*x13344))+((r01*x13348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13358 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13358)==0){
continue;
}
IkReal x13357=pow(x13358,-0.5);
CheckValue<IkReal> x13359 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13359.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13359.value));
IkReal gconst25=((-1.0)*r21*x13357);
IkReal gconst26=(r20*x13357);
CheckValue<IkReal> x13360 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13360.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13360.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13363 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13363.valid){
continue;
}
IkReal x13361=((-1.0)*(x13363.value));
IkReal x13362=x13357;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13361;
IkReal gconst24=x13361;
IkReal gconst25=((-1.0)*r21*x13362);
IkReal gconst26=(r20*x13362);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13366 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13366.valid){
continue;
}
IkReal x13364=((-1.0)*(x13366.value));
IkReal x13365=x13357;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13364;
IkReal gconst24=x13364;
IkReal gconst25=((-1.0)*r21*x13365);
IkReal gconst26=(r20*x13365);
CheckValue<IkReal> x13374=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13374.valid){
continue;
}
IkReal x13367=x13374.value;
IkReal x13368=(sj3*x13367);
IkReal x13369=(r11*x13368);
IkReal x13370=(r00*x13368);
IkReal x13371=(r01*x13368);
IkReal x13372=(r10*x13368);
IkReal x13373=(r20*r21*x13368);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x13369*(r21*r21)))+((r00*r20*r21*x13369))+((r10*r20*r21*x13371))+((r10*x13370*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13375=gconst25*gconst25;
IkReal x13376=gconst26*gconst26;
IkReal x13377=(r00*r11);
IkReal x13378=(r01*r10);
IkReal x13379=(r02*sj3);
IkReal x13380=(gconst25*r10);
IkReal x13381=(gconst26*r11);
IkReal x13382=((1.0)*sj3);
IkReal x13383=((1.0)*cj3);
IkReal x13384=(cj3*gconst25*gconst26);
CheckValue<IkReal> x13385 = IKatan2WithCheck(IkReal((((x13379*x13380))+((x13379*x13381)))),IkReal(((((-1.0)*x13376*x13377*x13382))+(((-1.0)*gconst26*r00*x13380*x13382))+((gconst25*r01*sj3*x13381))+((sj3*x13375*x13378)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13385.valid){
continue;
}
CheckValue<IkReal> x13386=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12*x13383))+(((-1.0)*r01*r11*x13375*x13383))+((x13377*x13384))+(((-1.0)*r00*r10*x13376*x13383))+((x13378*x13384)))),-1);
if(!x13386.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13385.value)+(((1.5707963267949)*(x13386.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13387=IKsin(j4);
IkReal x13388=IKcos(j4);
IkReal x13389=(sj1*sj2);
IkReal x13390=(gconst26*sj3);
IkReal x13391=(gconst25*sj3);
IkReal x13392=(gconst26*r10);
IkReal x13393=(gconst25*r11);
IkReal x13394=(cj3*gconst25);
IkReal x13395=((1.0)*cj2);
IkReal x13396=(cj1*sj2);
IkReal x13397=(gconst26*r00);
IkReal x13398=(gconst26*r20);
IkReal x13399=(cj3*gconst26);
IkReal x13400=(cj1*x13395);
IkReal x13401=((1.0)*x13388);
IkReal x13402=((1.0)*x13387);
IkReal x13403=(cj3*x13387);
IkReal x13404=(gconst25*x13387);
evalcond[0]=(((r21*x13404))+(((-1.0)*r22*x13401))+(((-1.0)*x13398*x13402)));
evalcond[1]=((((-1.0)*r02*x13401))+((r01*x13404))+(((-1.0)*x13397*x13402)));
evalcond[2]=((1.0)+(((-1.0)*x13392*x13402))+((x13387*x13393))+(((-1.0)*r12*x13401)));
evalcond[3]=(((r11*x13390))+((r10*x13391))+((r12*x13403))+((cj3*x13388*x13393))+(((-1.0)*cj3*x13392*x13401)));
evalcond[4]=(((r11*x13399))+((r10*x13394))+((r10*x13388*x13390))+(((-1.0)*r12*sj3*x13402))+(((-1.0)*r11*x13391*x13401)));
evalcond[5]=(((cj2*sj1))+((r21*x13390))+((r20*x13391))+(((-1.0)*cj3*x13398*x13401))+((r21*x13388*x13394))+((r22*x13403))+x13396);
evalcond[6]=(((r01*x13388*x13394))+((r00*x13391))+(((-1.0)*x13400))+((r01*x13390))+((r02*x13403))+(((-1.0)*cj3*x13397*x13401))+x13389);
evalcond[7]=(((r21*x13399))+(((-1.0)*r22*sj3*x13402))+((r20*x13394))+((r20*x13388*x13390))+(((-1.0)*x13400))+(((-1.0)*r21*x13391*x13401))+x13389);
evalcond[8]=((((-1.0)*x13396))+(((-1.0)*r02*sj3*x13402))+((r00*x13394))+((r01*x13399))+((r00*x13388*x13390))+(((-1.0)*r01*x13391*x13401))+(((-1.0)*sj1*x13395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13405=gconst26*gconst26;
IkReal x13406=gconst25*gconst25;
IkReal x13407=(r01*r10);
IkReal x13408=(cj3*r11);
IkReal x13409=(gconst25*gconst26);
IkReal x13410=(cj3*r10);
IkReal x13411=(r00*x13405);
IkReal x13412=((1.0)*sj3*x13409);
CheckValue<IkReal> x13413 = IKatan2WithCheck(IkReal((((gconst25*r02*x13410))+((gconst26*r02*x13408)))),IkReal(((((-1.0)*r00*x13409*x13410))+((cj3*x13406*x13407))+(((-1.0)*x13408*x13411))+((r01*x13408*x13409)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13413.valid){
continue;
}
CheckValue<IkReal> x13414=IKPowWithIntegerCheck(IKsign((((r10*sj3*x13411))+((r02*r12*sj3))+((r01*r11*sj3*x13406))+(((-1.0)*x13407*x13412))+(((-1.0)*r00*r11*x13412)))),-1);
if(!x13414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13413.value)+(((1.5707963267949)*(x13414.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13415=IKsin(j4);
IkReal x13416=IKcos(j4);
IkReal x13417=(sj1*sj2);
IkReal x13418=(gconst26*sj3);
IkReal x13419=(gconst25*sj3);
IkReal x13420=(gconst26*r10);
IkReal x13421=(gconst25*r11);
IkReal x13422=(cj3*gconst25);
IkReal x13423=((1.0)*cj2);
IkReal x13424=(cj1*sj2);
IkReal x13425=(gconst26*r00);
IkReal x13426=(gconst26*r20);
IkReal x13427=(cj3*gconst26);
IkReal x13428=(cj1*x13423);
IkReal x13429=((1.0)*x13416);
IkReal x13430=((1.0)*x13415);
IkReal x13431=(cj3*x13415);
IkReal x13432=(gconst25*x13415);
evalcond[0]=((((-1.0)*x13426*x13430))+(((-1.0)*r22*x13429))+((r21*x13432)));
evalcond[1]=(((r01*x13432))+(((-1.0)*r02*x13429))+(((-1.0)*x13425*x13430)));
evalcond[2]=((1.0)+((x13415*x13421))+(((-1.0)*x13420*x13430))+(((-1.0)*r12*x13429)));
evalcond[3]=(((cj3*x13416*x13421))+(((-1.0)*cj3*x13420*x13429))+((r12*x13431))+((r10*x13419))+((r11*x13418)));
evalcond[4]=(((r10*x13416*x13418))+(((-1.0)*r11*x13419*x13429))+((r11*x13427))+(((-1.0)*r12*sj3*x13430))+((r10*x13422)));
evalcond[5]=(x13424+((cj2*sj1))+(((-1.0)*cj3*x13426*x13429))+((r22*x13431))+((r20*x13419))+((r21*x13416*x13422))+((r21*x13418)));
evalcond[6]=(x13417+((r02*x13431))+(((-1.0)*x13428))+((r01*x13418))+((r00*x13419))+(((-1.0)*cj3*x13425*x13429))+((r01*x13416*x13422)));
evalcond[7]=(x13417+((r20*x13416*x13418))+(((-1.0)*x13428))+((r21*x13427))+(((-1.0)*r21*x13419*x13429))+(((-1.0)*r22*sj3*x13430))+((r20*x13422)));
evalcond[8]=((((-1.0)*x13424))+(((-1.0)*sj1*x13423))+((r00*x13416*x13418))+(((-1.0)*r02*sj3*x13430))+((r00*x13422))+((r01*x13427))+(((-1.0)*r01*x13419*x13429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13433=((1.0)*gconst26);
CheckValue<IkReal> x13434 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13433))+((gconst25*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13434.valid){
continue;
}
CheckValue<IkReal> x13435=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13433))+(((-1.0)*gconst25*r00)))),-1);
if(!x13435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13434.value)+(((1.5707963267949)*(x13435.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13436=IKsin(j4);
IkReal x13437=IKcos(j4);
IkReal x13438=(sj1*sj2);
IkReal x13439=(gconst26*sj3);
IkReal x13440=(gconst25*sj3);
IkReal x13441=(gconst26*r10);
IkReal x13442=(gconst25*r11);
IkReal x13443=(cj3*gconst25);
IkReal x13444=((1.0)*cj2);
IkReal x13445=(cj1*sj2);
IkReal x13446=(gconst26*r00);
IkReal x13447=(gconst26*r20);
IkReal x13448=(cj3*gconst26);
IkReal x13449=(cj1*x13444);
IkReal x13450=((1.0)*x13437);
IkReal x13451=((1.0)*x13436);
IkReal x13452=(cj3*x13436);
IkReal x13453=(gconst25*x13436);
evalcond[0]=((((-1.0)*r22*x13450))+((r21*x13453))+(((-1.0)*x13447*x13451)));
evalcond[1]=((((-1.0)*x13446*x13451))+(((-1.0)*r02*x13450))+((r01*x13453)));
evalcond[2]=((1.0)+((x13436*x13442))+(((-1.0)*r12*x13450))+(((-1.0)*x13441*x13451)));
evalcond[3]=(((r12*x13452))+((cj3*x13437*x13442))+((r11*x13439))+(((-1.0)*cj3*x13441*x13450))+((r10*x13440)));
evalcond[4]=((((-1.0)*r11*x13440*x13450))+(((-1.0)*r12*sj3*x13451))+((r10*x13437*x13439))+((r10*x13443))+((r11*x13448)));
evalcond[5]=(x13445+((cj2*sj1))+((r21*x13437*x13443))+(((-1.0)*cj3*x13447*x13450))+((r21*x13439))+((r20*x13440))+((r22*x13452)));
evalcond[6]=(((r01*x13439))+x13438+(((-1.0)*x13449))+(((-1.0)*cj3*x13446*x13450))+((r00*x13440))+((r01*x13437*x13443))+((r02*x13452)));
evalcond[7]=(x13438+(((-1.0)*r21*x13440*x13450))+(((-1.0)*x13449))+((r20*x13437*x13439))+((r20*x13443))+((r21*x13448))+(((-1.0)*r22*sj3*x13451)));
evalcond[8]=((((-1.0)*r02*sj3*x13451))+(((-1.0)*r01*x13440*x13450))+((r00*x13443))+((r01*x13448))+(((-1.0)*x13445))+((r00*x13437*x13439))+(((-1.0)*sj1*x13444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13455 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13455)==0){
continue;
}
IkReal x13454=pow(x13455,-0.5);
CheckValue<IkReal> x13456 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13456.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13456.value))));
IkReal gconst28=((1.0)*r21*x13454);
IkReal gconst29=((-1.0)*r20*x13454);
CheckValue<IkReal> x13457 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13457.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13457.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13460 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13460.valid){
continue;
}
IkReal x13458=((1.0)*(x13460.value));
IkReal x13459=x13454;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13458)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13458)));
IkReal gconst28=((1.0)*r21*x13459);
IkReal gconst29=((-1.0)*r20*x13459);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13463 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13463.valid){
continue;
}
IkReal x13461=((1.0)*(x13463.value));
IkReal x13462=x13454;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13461)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13461)));
IkReal gconst28=((1.0)*r21*x13462);
IkReal gconst29=((-1.0)*r20*x13462);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13466 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13466.valid){
continue;
}
IkReal x13464=((1.0)*(x13466.value));
IkReal x13465=x13454;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13464)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13464)));
IkReal gconst28=((1.0)*r21*x13465);
IkReal gconst29=((-1.0)*r20*x13465);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13469 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13469.valid){
continue;
}
IkReal x13467=((1.0)*(x13469.value));
IkReal x13468=x13454;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13467)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13467)));
IkReal gconst28=((1.0)*r21*x13468);
IkReal gconst29=((-1.0)*r20*x13468);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13472 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13472.valid){
continue;
}
IkReal x13470=((1.0)*(x13472.value));
IkReal x13471=x13454;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13470)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13470)));
IkReal gconst28=((1.0)*r21*x13471);
IkReal gconst29=((-1.0)*r20*x13471);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13475 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13475.valid){
continue;
}
IkReal x13473=((1.0)*(x13475.value));
IkReal x13474=x13454;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13473)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13473)));
IkReal gconst28=((1.0)*r21*x13474);
IkReal gconst29=((-1.0)*r20*x13474);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13476=(gconst29*r10);
IkReal x13477=(gconst28*r11);
CheckValue<IkReal> x13478=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13477*x13477)+(((-2.0)*x13476*x13477))+(x13476*x13476))),-1);
if(!x13478.valid){
continue;
}
CheckValue<IkReal> x13479 = IKatan2WithCheck(IkReal((x13476+(((-1.0)*x13477)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13478.value)))+(x13479.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13480=IKsin(j4);
IkReal x13481=IKcos(j4);
IkReal x13482=(gconst28*r11);
IkReal x13483=((1.0)*cj2);
IkReal x13484=((1.0)*x13481);
IkReal x13485=(gconst29*x13481);
IkReal x13486=(gconst28*x13480);
IkReal x13487=((1.0)*x13480);
IkReal x13488=(gconst29*x13487);
evalcond[0]=((((-1.0)*r20*x13488))+(((-1.0)*r22*x13484))+((r21*x13486)));
evalcond[1]=((((-1.0)*r00*x13488))+(((-1.0)*r02*x13484))+((r01*x13486)));
evalcond[2]=((((-1.0)*r12*x13487))+(((-1.0)*x13482*x13484))+((r10*x13485)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13484))+(((-1.0)*r10*x13488))+((x13480*x13482)));
evalcond[4]=((((-1.0)*r22*x13487))+((sj1*sj2))+((r20*x13485))+(((-1.0)*cj1*x13483))+(((-1.0)*gconst28*r21*x13484)));
evalcond[5]=((((-1.0)*sj1*x13483))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13487))+((r00*x13485))+(((-1.0)*gconst28*r01*x13484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13489=((1.0)*gconst29);
CheckValue<IkReal> x13490 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13489))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13490.valid){
continue;
}
CheckValue<IkReal> x13491=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13489))+(((-1.0)*gconst28*r00)))),-1);
if(!x13491.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13490.value)+(((1.5707963267949)*(x13491.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13492=IKsin(j4);
IkReal x13493=IKcos(j4);
IkReal x13494=(gconst28*r11);
IkReal x13495=((1.0)*cj2);
IkReal x13496=((1.0)*x13493);
IkReal x13497=(gconst29*x13493);
IkReal x13498=(gconst28*x13492);
IkReal x13499=((1.0)*x13492);
IkReal x13500=(gconst29*x13499);
evalcond[0]=((((-1.0)*r22*x13496))+(((-1.0)*r20*x13500))+((r21*x13498)));
evalcond[1]=((((-1.0)*r02*x13496))+((r01*x13498))+(((-1.0)*r00*x13500)));
evalcond[2]=((((-1.0)*r12*x13499))+(((-1.0)*x13494*x13496))+((r10*x13497)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13496))+(((-1.0)*r10*x13500))+((x13492*x13494)));
evalcond[4]=((((-1.0)*r22*x13499))+((sj1*sj2))+((r20*x13497))+(((-1.0)*gconst28*r21*x13496))+(((-1.0)*cj1*x13495)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r02*x13499))+((r00*x13497))+(((-1.0)*gconst28*r01*x13496))+(((-1.0)*sj1*x13495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13501=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13501.valid){
continue;
}
CheckValue<IkReal> x13502 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13501.value)))+(x13502.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13503=IKsin(j4);
IkReal x13504=IKcos(j4);
IkReal x13505=(gconst28*r11);
IkReal x13506=((1.0)*cj2);
IkReal x13507=((1.0)*x13504);
IkReal x13508=(gconst29*x13504);
IkReal x13509=(gconst28*x13503);
IkReal x13510=((1.0)*x13503);
IkReal x13511=(gconst29*x13510);
evalcond[0]=((((-1.0)*r20*x13511))+((r21*x13509))+(((-1.0)*r22*x13507)));
evalcond[1]=((((-1.0)*r00*x13511))+(((-1.0)*r02*x13507))+((r01*x13509)));
evalcond[2]=(((r10*x13508))+(((-1.0)*r12*x13510))+(((-1.0)*x13505*x13507)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13507))+(((-1.0)*r10*x13511))+((x13503*x13505)));
evalcond[4]=(((r20*x13508))+(((-1.0)*r22*x13510))+((sj1*sj2))+(((-1.0)*cj1*x13506))+(((-1.0)*gconst28*r21*x13507)));
evalcond[5]=((((-1.0)*sj1*x13506))+(((-1.0)*gconst28*r01*x13507))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13510))+((r00*x13508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13514 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13514.valid){
continue;
}
IkReal x13512=((1.0)*(x13514.value));
IkReal x13513=x13454;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13512)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13512)));
IkReal gconst28=((1.0)*r21*x13513);
IkReal gconst29=((-1.0)*r20*x13513);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13517 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13517.valid){
continue;
}
IkReal x13515=((1.0)*(x13517.value));
IkReal x13516=x13454;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13515)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13515)));
IkReal gconst28=((1.0)*r21*x13516);
IkReal gconst29=((-1.0)*r20*x13516);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13520 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13520.valid){
continue;
}
IkReal x13518=((1.0)*(x13520.value));
IkReal x13519=x13454;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13518)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13518)));
IkReal gconst28=((1.0)*r21*x13519);
IkReal gconst29=((-1.0)*r20*x13519);
IkReal x13521=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13525=IKPowWithIntegerCheck(x13521,-1);
if(!x13525.valid){
continue;
}
IkReal x13522=x13525.value;
IkReal x13523=((1.0)*x13522);
IkReal x13524=((((-2.0)*r10*r11*r20*r21*x13522))+(((-1.0)*(r12*r12)))+(((-1.0)*x13523*(r11*r11)*(r21*r21)))+(((-1.0)*x13523*(r10*r10)*(r20*r20))));
j4eval[0]=x13524;
j4eval[1]=r12;
j4eval[2]=x13521;
j4eval[3]=IKsign(x13524);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13526=(gconst28*r11);
IkReal x13527=(gconst29*r10);
CheckValue<IkReal> x13528 = IKatan2WithCheck(IkReal((x13526+(((-1.0)*x13527)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13528.valid){
continue;
}
CheckValue<IkReal> x13529=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13527*x13527)))+(((-1.0)*(r12*r12)))+(((2.0)*x13526*x13527))+(((-1.0)*(x13526*x13526))))),-1);
if(!x13529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13528.value)+(((1.5707963267949)*(x13529.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13530=IKcos(j4);
IkReal x13531=IKsin(j4);
IkReal x13532=(gconst29*r10);
IkReal x13533=(gconst29*r20);
IkReal x13534=(gconst28*r21);
IkReal x13535=((1.0)*cj2);
IkReal x13536=(gconst29*r00);
IkReal x13537=((1.0)*x13530);
IkReal x13538=((1.0)*x13531);
IkReal x13539=(gconst28*x13530);
IkReal x13540=(gconst28*x13531);
evalcond[0]=((((-1.0)*x13532*x13537))+((r12*x13531))+((r11*x13539)));
evalcond[1]=((((-1.0)*r22*x13537))+((x13531*x13534))+(((-1.0)*x13533*x13538)));
evalcond[2]=(((r01*x13540))+(((-1.0)*r02*x13537))+(((-1.0)*x13536*x13538)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13537))+((r11*x13540))+(((-1.0)*x13532*x13538)));
evalcond[4]=(((x13530*x13534))+(((-1.0)*cj1*x13535))+((sj1*sj2))+(((-1.0)*x13533*x13537))+((r22*x13531)));
evalcond[5]=((((-1.0)*sj1*x13535))+((r02*x13531))+(((-1.0)*cj1*sj2))+(((-1.0)*x13536*x13537))+((r01*x13539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13541=((1.0)*gconst29);
CheckValue<IkReal> x13542 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13541)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13542.valid){
continue;
}
CheckValue<IkReal> x13543=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13541))+(((-1.0)*gconst28*r00)))),-1);
if(!x13543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13542.value)+(((1.5707963267949)*(x13543.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13544=IKcos(j4);
IkReal x13545=IKsin(j4);
IkReal x13546=(gconst29*r10);
IkReal x13547=(gconst29*r20);
IkReal x13548=(gconst28*r21);
IkReal x13549=((1.0)*cj2);
IkReal x13550=(gconst29*r00);
IkReal x13551=((1.0)*x13544);
IkReal x13552=((1.0)*x13545);
IkReal x13553=(gconst28*x13544);
IkReal x13554=(gconst28*x13545);
evalcond[0]=(((r12*x13545))+((r11*x13553))+(((-1.0)*x13546*x13551)));
evalcond[1]=((((-1.0)*x13547*x13552))+(((-1.0)*r22*x13551))+((x13545*x13548)));
evalcond[2]=((((-1.0)*x13550*x13552))+((r01*x13554))+(((-1.0)*r02*x13551)));
evalcond[3]=((1.0)+((r11*x13554))+(((-1.0)*x13546*x13552))+(((-1.0)*r12*x13551)));
evalcond[4]=((((-1.0)*x13547*x13551))+((r22*x13545))+((sj1*sj2))+((x13544*x13548))+(((-1.0)*cj1*x13549)));
evalcond[5]=((((-1.0)*x13550*x13551))+((r01*x13553))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13549))+((r02*x13545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13555=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13555.valid){
continue;
}
CheckValue<IkReal> x13556 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13555.value)))+(x13556.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13557=IKcos(j4);
IkReal x13558=IKsin(j4);
IkReal x13559=(gconst29*r10);
IkReal x13560=(gconst29*r20);
IkReal x13561=(gconst28*r21);
IkReal x13562=((1.0)*cj2);
IkReal x13563=(gconst29*r00);
IkReal x13564=((1.0)*x13557);
IkReal x13565=((1.0)*x13558);
IkReal x13566=(gconst28*x13557);
IkReal x13567=(gconst28*x13558);
evalcond[0]=(((r12*x13558))+((r11*x13566))+(((-1.0)*x13559*x13564)));
evalcond[1]=((((-1.0)*x13560*x13565))+((x13558*x13561))+(((-1.0)*r22*x13564)));
evalcond[2]=(((r01*x13567))+(((-1.0)*x13563*x13565))+(((-1.0)*r02*x13564)));
evalcond[3]=((1.0)+((r11*x13567))+(((-1.0)*r12*x13564))+(((-1.0)*x13559*x13565)));
evalcond[4]=(((x13557*x13561))+((r22*x13558))+((sj1*sj2))+(((-1.0)*cj1*x13562))+(((-1.0)*x13560*x13564)));
evalcond[5]=(((r01*x13566))+(((-1.0)*x13563*x13564))+(((-1.0)*sj1*x13562))+(((-1.0)*cj1*sj2))+((r02*x13558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13570 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13570.valid){
continue;
}
IkReal x13568=((1.0)*(x13570.value));
IkReal x13569=x13454;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13568)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13568)));
IkReal gconst28=((1.0)*r21*x13569);
IkReal gconst29=((-1.0)*r20*x13569);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13573 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13573.valid){
continue;
}
IkReal x13571=((1.0)*(x13573.value));
IkReal x13572=x13454;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13571)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13571)));
IkReal gconst28=((1.0)*r21*x13572);
IkReal gconst29=((-1.0)*r20*x13572);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13576 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13576.valid){
continue;
}
IkReal x13574=((1.0)*(x13576.value));
IkReal x13575=x13454;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13574)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13574)));
IkReal gconst28=((1.0)*r21*x13575);
IkReal gconst29=((-1.0)*r20*x13575);
IkReal x13577=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13581=IKPowWithIntegerCheck(x13577,-1);
if(!x13581.valid){
continue;
}
IkReal x13578=x13581.value;
IkReal x13579=((1.0)*x13578);
IkReal x13580=((((-1.0)*x13579*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x13578))+(((-1.0)*(r12*r12)))+(((-1.0)*x13579*(r10*r10)*(r20*r20))));
j4eval[0]=x13580;
j4eval[1]=r12;
j4eval[2]=x13577;
j4eval[3]=IKsign(x13580);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13582=(gconst28*r11);
IkReal x13583=(gconst29*r10);
CheckValue<IkReal> x13584 = IKatan2WithCheck(IkReal((x13582+(((-1.0)*x13583)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13584.valid){
continue;
}
CheckValue<IkReal> x13585=IKPowWithIntegerCheck(IKsign(((((2.0)*x13582*x13583))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13582*x13582)))+(((-1.0)*(x13583*x13583))))),-1);
if(!x13585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13584.value)+(((1.5707963267949)*(x13585.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13586=IKcos(j4);
IkReal x13587=IKsin(j4);
IkReal x13588=(gconst29*r10);
IkReal x13589=(gconst29*r20);
IkReal x13590=(gconst28*r21);
IkReal x13591=(gconst29*r00);
IkReal x13592=((1.0)*x13586);
IkReal x13593=((1.0)*x13587);
IkReal x13594=(gconst28*x13586);
IkReal x13595=(gconst28*x13587);
evalcond[0]=(((r11*x13594))+((r12*x13587))+(((-1.0)*x13588*x13592)));
evalcond[1]=((((-1.0)*x13589*x13593))+((x13587*x13590))+(((-1.0)*r22*x13592)));
evalcond[2]=(((r01*x13595))+(((-1.0)*r02*x13592))+(((-1.0)*x13591*x13593)));
evalcond[3]=((1.0)+((r11*x13595))+(((-1.0)*r12*x13592))+(((-1.0)*x13588*x13593)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13589*x13592))+((cj1*sj2))+((x13586*x13590))+((r22*x13587)));
evalcond[5]=(((r01*x13594))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13587))+(((-1.0)*x13591*x13592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13596=((1.0)*gconst29);
CheckValue<IkReal> x13597 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13596))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13597.valid){
continue;
}
CheckValue<IkReal> x13598=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13596))+(((-1.0)*gconst28*r00)))),-1);
if(!x13598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13597.value)+(((1.5707963267949)*(x13598.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13599=IKcos(j4);
IkReal x13600=IKsin(j4);
IkReal x13601=(gconst29*r10);
IkReal x13602=(gconst29*r20);
IkReal x13603=(gconst28*r21);
IkReal x13604=(gconst29*r00);
IkReal x13605=((1.0)*x13599);
IkReal x13606=((1.0)*x13600);
IkReal x13607=(gconst28*x13599);
IkReal x13608=(gconst28*x13600);
evalcond[0]=(((r11*x13607))+((r12*x13600))+(((-1.0)*x13601*x13605)));
evalcond[1]=(((x13600*x13603))+(((-1.0)*r22*x13605))+(((-1.0)*x13602*x13606)));
evalcond[2]=((((-1.0)*x13604*x13606))+(((-1.0)*r02*x13605))+((r01*x13608)));
evalcond[3]=((1.0)+((r11*x13608))+(((-1.0)*r12*x13605))+(((-1.0)*x13601*x13606)));
evalcond[4]=(((cj2*sj1))+((x13599*x13603))+((cj1*sj2))+((r22*x13600))+(((-1.0)*x13602*x13605)));
evalcond[5]=((((-1.0)*x13604*x13605))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13600))+((r01*x13607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13609=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13609.valid){
continue;
}
CheckValue<IkReal> x13610 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13609.value)))+(x13610.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13611=IKcos(j4);
IkReal x13612=IKsin(j4);
IkReal x13613=(gconst29*r10);
IkReal x13614=(gconst29*r20);
IkReal x13615=(gconst28*r21);
IkReal x13616=(gconst29*r00);
IkReal x13617=((1.0)*x13611);
IkReal x13618=((1.0)*x13612);
IkReal x13619=(gconst28*x13611);
IkReal x13620=(gconst28*x13612);
evalcond[0]=(((r11*x13619))+((r12*x13612))+(((-1.0)*x13613*x13617)));
evalcond[1]=(((x13612*x13615))+(((-1.0)*x13614*x13618))+(((-1.0)*r22*x13617)));
evalcond[2]=((((-1.0)*x13616*x13618))+(((-1.0)*r02*x13617))+((r01*x13620)));
evalcond[3]=((1.0)+((r11*x13620))+(((-1.0)*x13613*x13618))+(((-1.0)*r12*x13617)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13614*x13617))+((x13611*x13615))+((r22*x13612)));
evalcond[5]=((((-1.0)*x13616*x13617))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13619))+((r02*x13612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13623 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13623.valid){
continue;
}
IkReal x13621=((1.0)*(x13623.value));
IkReal x13622=x13454;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13621)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13621)));
IkReal gconst28=((1.0)*r21*x13622);
IkReal gconst29=((-1.0)*r20*x13622);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13626 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13626.valid){
continue;
}
IkReal x13624=((1.0)*(x13626.value));
IkReal x13625=x13454;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13624)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13624)));
IkReal gconst28=((1.0)*r21*x13625);
IkReal gconst29=((-1.0)*r20*x13625);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13629 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13629.valid){
continue;
}
IkReal x13627=((1.0)*(x13629.value));
IkReal x13628=x13454;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13627)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13627)));
IkReal gconst28=((1.0)*r21*x13628);
IkReal gconst29=((-1.0)*r20*x13628);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13630=(gconst29*r10);
IkReal x13631=(gconst28*r11);
CheckValue<IkReal> x13632=IKPowWithIntegerCheck(IKsign(((x13631*x13631)+(x13630*x13630)+(r12*r12)+(((-2.0)*x13630*x13631)))),-1);
if(!x13632.valid){
continue;
}
CheckValue<IkReal> x13633 = IKatan2WithCheck(IkReal(((((-1.0)*x13631))+x13630)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13632.value)))+(x13633.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13634=IKsin(j4);
IkReal x13635=IKcos(j4);
IkReal x13636=(gconst28*r11);
IkReal x13637=((1.0)*x13635);
IkReal x13638=(gconst29*x13635);
IkReal x13639=(gconst28*x13634);
IkReal x13640=((1.0)*x13634);
IkReal x13641=(gconst29*x13640);
evalcond[0]=((((-1.0)*r22*x13637))+((r21*x13639))+(((-1.0)*r20*x13641)));
evalcond[1]=((((-1.0)*r02*x13637))+(((-1.0)*r00*x13641))+((r01*x13639)));
evalcond[2]=((((-1.0)*x13636*x13637))+((r10*x13638))+(((-1.0)*r12*x13640)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13641))+((x13634*x13636))+(((-1.0)*r12*x13637)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13637))+((r20*x13638))+(((-1.0)*r22*x13640)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst28*r01*x13637))+(((-1.0)*r02*x13640))+((r00*x13638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13642=((1.0)*gconst29);
CheckValue<IkReal> x13643=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13642)))),-1);
if(!x13643.valid){
continue;
}
CheckValue<IkReal> x13644 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13642))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13643.value)))+(x13644.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13645=IKsin(j4);
IkReal x13646=IKcos(j4);
IkReal x13647=(gconst28*r11);
IkReal x13648=((1.0)*x13646);
IkReal x13649=(gconst29*x13646);
IkReal x13650=(gconst28*x13645);
IkReal x13651=((1.0)*x13645);
IkReal x13652=(gconst29*x13651);
evalcond[0]=((((-1.0)*r20*x13652))+((r21*x13650))+(((-1.0)*r22*x13648)));
evalcond[1]=((((-1.0)*r00*x13652))+((r01*x13650))+(((-1.0)*r02*x13648)));
evalcond[2]=((((-1.0)*x13647*x13648))+(((-1.0)*r12*x13651))+((r10*x13649)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13648))+(((-1.0)*r10*x13652))+((x13645*x13647)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst28*r21*x13648))+((cj1*sj2))+(((-1.0)*r22*x13651))+((r20*x13649)));
evalcond[5]=((((-1.0)*r02*x13651))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13649))+(((-1.0)*gconst28*r01*x13648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13653=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13653.valid){
continue;
}
CheckValue<IkReal> x13654 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13653.value)))+(x13654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13655=IKsin(j4);
IkReal x13656=IKcos(j4);
IkReal x13657=(gconst28*r11);
IkReal x13658=((1.0)*x13656);
IkReal x13659=(gconst29*x13656);
IkReal x13660=(gconst28*x13655);
IkReal x13661=((1.0)*x13655);
IkReal x13662=(gconst29*x13661);
evalcond[0]=((((-1.0)*r22*x13658))+(((-1.0)*r20*x13662))+((r21*x13660)));
evalcond[1]=((((-1.0)*r02*x13658))+(((-1.0)*r00*x13662))+((r01*x13660)));
evalcond[2]=((((-1.0)*r12*x13661))+((r10*x13659))+(((-1.0)*x13657*x13658)));
evalcond[3]=((1.0)+((x13655*x13657))+(((-1.0)*r12*x13658))+(((-1.0)*r10*x13662)));
evalcond[4]=(((r20*x13659))+(((-1.0)*r22*x13661))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13658)));
evalcond[5]=(((r00*x13659))+(((-1.0)*gconst28*r01*x13658))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x13661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13663=gconst28*gconst28;
IkReal x13664=gconst29*gconst29;
IkReal x13665=(r11*r21);
IkReal x13666=(gconst29*sj3);
IkReal x13667=((1.0)*cj3);
IkReal x13668=(r10*r20);
IkReal x13669=(r10*r21);
IkReal x13670=(r11*r20);
IkReal x13671=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13672 = IKatan2WithCheck(IkReal((((r11*r22*x13666))+((gconst28*r10*r22*sj3)))),IkReal((((gconst28*x13665*x13666))+(((-1.0)*sj3*x13664*x13670))+((sj3*x13663*x13669))+(((-1.0)*gconst28*x13666*x13668)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13672.valid){
continue;
}
CheckValue<IkReal> x13673=IKPowWithIntegerCheck(IKsign((((x13669*x13671))+((x13670*x13671))+(((-1.0)*x13664*x13667*x13668))+(((-1.0)*r12*r22*x13667))+(((-1.0)*x13663*x13665*x13667)))),-1);
if(!x13673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13672.value)+(((1.5707963267949)*(x13673.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13674=IKsin(j4);
IkReal x13675=IKcos(j4);
IkReal x13676=(sj1*sj2);
IkReal x13677=(gconst29*r20);
IkReal x13678=(gconst28*r20);
IkReal x13679=((1.0)*cj2);
IkReal x13680=(r11*sj3);
IkReal x13681=(cj1*sj2);
IkReal x13682=(gconst29*r01);
IkReal x13683=(gconst29*r10);
IkReal x13684=(cj3*gconst28);
IkReal x13685=(cj3*gconst29);
IkReal x13686=(gconst28*sj3);
IkReal x13687=(gconst29*r00);
IkReal x13688=(cj1*x13679);
IkReal x13689=((1.0)*x13675);
IkReal x13690=((1.0)*x13674);
IkReal x13691=(gconst28*x13674);
IkReal x13692=(cj3*x13674);
IkReal x13693=(sj3*x13675);
evalcond[0]=((((-1.0)*r22*x13689))+((r21*x13691))+(((-1.0)*x13677*x13690)));
evalcond[1]=((((-1.0)*x13687*x13690))+((r01*x13691))+(((-1.0)*r02*x13689)));
evalcond[2]=((1.0)+(((-1.0)*x13683*x13690))+(((-1.0)*r12*x13689))+((r11*x13691)));
evalcond[3]=(((gconst29*x13680))+((r11*x13675*x13684))+(((-1.0)*cj3*x13683*x13689))+((r10*x13686))+((r12*x13692)));
evalcond[4]=(((x13683*x13693))+(((-1.0)*gconst28*x13680*x13689))+((r11*x13685))+(((-1.0)*r12*sj3*x13690))+((r10*x13684)));
evalcond[5]=(((cj2*sj1))+x13681+((gconst29*r21*sj3))+((r22*x13692))+((sj3*x13678))+(((-1.0)*cj3*x13677*x13689))+((r21*x13675*x13684)));
evalcond[6]=((((-1.0)*r00*x13685*x13689))+x13676+((r00*x13686))+(((-1.0)*x13688))+((r02*x13692))+((sj3*x13682))+((r01*x13675*x13684)));
evalcond[7]=((((-1.0)*r22*sj3*x13690))+x13676+(((-1.0)*r21*x13686*x13689))+((cj3*x13678))+((x13677*x13693))+(((-1.0)*x13688))+((r21*x13685)));
evalcond[8]=((((-1.0)*r01*x13686*x13689))+(((-1.0)*sj1*x13679))+((cj3*x13682))+(((-1.0)*x13681))+((r00*x13684))+(((-1.0)*r02*sj3*x13690))+((x13687*x13693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13694=((1.0)*gconst29);
CheckValue<IkReal> x13695=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13694)))),-1);
if(!x13695.valid){
continue;
}
CheckValue<IkReal> x13696 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13694))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13695.value)))+(x13696.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13697=IKsin(j4);
IkReal x13698=IKcos(j4);
IkReal x13699=(sj1*sj2);
IkReal x13700=(gconst29*r20);
IkReal x13701=(gconst28*r20);
IkReal x13702=((1.0)*cj2);
IkReal x13703=(r11*sj3);
IkReal x13704=(cj1*sj2);
IkReal x13705=(gconst29*r01);
IkReal x13706=(gconst29*r10);
IkReal x13707=(cj3*gconst28);
IkReal x13708=(cj3*gconst29);
IkReal x13709=(gconst28*sj3);
IkReal x13710=(gconst29*r00);
IkReal x13711=(cj1*x13702);
IkReal x13712=((1.0)*x13698);
IkReal x13713=((1.0)*x13697);
IkReal x13714=(gconst28*x13697);
IkReal x13715=(cj3*x13697);
IkReal x13716=(sj3*x13698);
evalcond[0]=(((r21*x13714))+(((-1.0)*r22*x13712))+(((-1.0)*x13700*x13713)));
evalcond[1]=(((r01*x13714))+(((-1.0)*r02*x13712))+(((-1.0)*x13710*x13713)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13712))+(((-1.0)*x13706*x13713))+((r11*x13714)));
evalcond[3]=(((r12*x13715))+((r11*x13698*x13707))+((gconst29*x13703))+(((-1.0)*cj3*x13706*x13712))+((r10*x13709)));
evalcond[4]=(((x13706*x13716))+(((-1.0)*gconst28*x13703*x13712))+((r10*x13707))+((r11*x13708))+(((-1.0)*r12*sj3*x13713)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+((sj3*x13701))+((r21*x13698*x13707))+x13704+((r22*x13715))+(((-1.0)*cj3*x13700*x13712)));
evalcond[6]=(x13699+((sj3*x13705))+((r00*x13709))+(((-1.0)*r00*x13708*x13712))+((r01*x13698*x13707))+((r02*x13715))+(((-1.0)*x13711)));
evalcond[7]=(((r21*x13708))+x13699+((x13700*x13716))+((cj3*x13701))+(((-1.0)*r22*sj3*x13713))+(((-1.0)*r21*x13709*x13712))+(((-1.0)*x13711)));
evalcond[8]=((((-1.0)*sj1*x13702))+(((-1.0)*x13704))+((x13710*x13716))+(((-1.0)*r01*x13709*x13712))+((cj3*x13705))+((r00*x13707))+(((-1.0)*r02*sj3*x13713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13717=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13717.valid){
continue;
}
CheckValue<IkReal> x13718 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13717.value)))+(x13718.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13719=IKsin(j4);
IkReal x13720=IKcos(j4);
IkReal x13721=(sj1*sj2);
IkReal x13722=(gconst29*r20);
IkReal x13723=(gconst28*r20);
IkReal x13724=((1.0)*cj2);
IkReal x13725=(r11*sj3);
IkReal x13726=(cj1*sj2);
IkReal x13727=(gconst29*r01);
IkReal x13728=(gconst29*r10);
IkReal x13729=(cj3*gconst28);
IkReal x13730=(cj3*gconst29);
IkReal x13731=(gconst28*sj3);
IkReal x13732=(gconst29*r00);
IkReal x13733=(cj1*x13724);
IkReal x13734=((1.0)*x13720);
IkReal x13735=((1.0)*x13719);
IkReal x13736=(gconst28*x13719);
IkReal x13737=(cj3*x13719);
IkReal x13738=(sj3*x13720);
evalcond[0]=((((-1.0)*r22*x13734))+((r21*x13736))+(((-1.0)*x13722*x13735)));
evalcond[1]=((((-1.0)*r02*x13734))+(((-1.0)*x13732*x13735))+((r01*x13736)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13734))+(((-1.0)*x13728*x13735))+((r11*x13736)));
evalcond[3]=(((r10*x13731))+((r11*x13720*x13729))+((r12*x13737))+(((-1.0)*cj3*x13728*x13734))+((gconst29*x13725)));
evalcond[4]=(((x13728*x13738))+((r10*x13729))+(((-1.0)*gconst28*x13725*x13734))+((r11*x13730))+(((-1.0)*r12*sj3*x13735)));
evalcond[5]=((((-1.0)*cj3*x13722*x13734))+((cj2*sj1))+((gconst29*r21*sj3))+((r22*x13737))+x13726+((r21*x13720*x13729))+((sj3*x13723)));
evalcond[6]=(((r00*x13731))+((r01*x13720*x13729))+x13721+(((-1.0)*x13733))+((r02*x13737))+(((-1.0)*r00*x13730*x13734))+((sj3*x13727)));
evalcond[7]=(x13721+(((-1.0)*x13733))+((r21*x13730))+((x13722*x13738))+(((-1.0)*r21*x13731*x13734))+((cj3*x13723))+(((-1.0)*r22*sj3*x13735)));
evalcond[8]=((((-1.0)*r02*sj3*x13735))+((r00*x13729))+(((-1.0)*r01*x13731*x13734))+(((-1.0)*sj1*x13724))+(((-1.0)*x13726))+((x13732*x13738))+((cj3*x13727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13739=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13739);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13739);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13740=(r11*sj5);
IkReal x13741=((1.0)*cj5*r10);
j4eval[0]=(x13740+(((-1.0)*x13741)));
j4eval[1]=((((-1.0)*cj3*x13741))+((cj3*x13740)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13742=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13742);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13742);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13743=(cj5*r10);
IkReal x13744=(r11*sj5);
j4eval[0]=(x13744+(((-1.0)*x13743)));
j4eval[1]=((((-1.0)*sj3*x13744))+((sj3*x13743)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13745=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13745);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13745);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13746=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13746);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13746);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13747=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13747))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13747)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13748=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13748);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13748);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13749=((1.0)*sj1);
CheckValue<IkReal> x13750=IKPowWithIntegerCheck(r22,-1);
if(!x13750.valid){
continue;
}
CheckValue<IkReal> x13751=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13751.valid){
continue;
}
if( IKabs(((x13750.value)*(((((-1.0)*cj2*x13749))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13751.value)*(((((-1.0)*sj2*x13749))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13750.value)*(((((-1.0)*cj2*x13749))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13751.value)*(((((-1.0)*sj2*x13749))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13750.value)*(((((-1.0)*cj2*x13749))+(((-1.0)*cj1*sj2))))), ((x13751.value)*(((((-1.0)*sj2*x13749))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13752=IKsin(j4);
IkReal x13753=IKcos(j4);
IkReal x13754=((1.0)*cj5);
IkReal x13755=(sj5*x13753);
IkReal x13756=(sj5*x13752);
evalcond[0]=((-1.0)*r22*x13753);
evalcond[1]=(((cj2*sj1))+((r22*x13752))+((cj1*sj2)));
evalcond[2]=((((-1.0)*r00*x13752*x13754))+((r01*x13756)));
evalcond[3]=(((r11*x13755))+(((-1.0)*r10*x13753*x13754)));
evalcond[4]=((1.0)+((r11*x13756))+(((-1.0)*r10*x13752*x13754)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13753*x13754))+((r01*x13755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13757=((1.0)*cj5);
CheckValue<IkReal> x13758=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13757))),-1);
if(!x13758.valid){
continue;
}
CheckValue<IkReal> x13759=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13757))),-1);
if(!x13759.valid){
continue;
}
if( IKabs(((-1.0)*(x13758.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13759.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13758.value)))+IKsqr(((x13759.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13758.value)), ((x13759.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13760=IKsin(j4);
IkReal x13761=IKcos(j4);
IkReal x13762=((1.0)*cj5);
IkReal x13763=(sj5*x13761);
IkReal x13764=(sj5*x13760);
evalcond[0]=((-1.0)*r22*x13761);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13760)));
evalcond[2]=(((r01*x13764))+(((-1.0)*r00*x13760*x13762)));
evalcond[3]=(((r11*x13763))+(((-1.0)*r10*x13761*x13762)));
evalcond[4]=((1.0)+((r11*x13764))+(((-1.0)*r10*x13760*x13762)));
evalcond[5]=((((-1.0)*r00*x13761*x13762))+((r01*x13763))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13765=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13765);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13765);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13766=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13766);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13766);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13767=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13767.valid){
continue;
}
CheckValue<IkReal> x13768=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13768.valid){
continue;
}
if( IKabs(((-1.0)*(x13767.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13768.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13767.value)))+IKsqr(((x13768.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13767.value)), ((x13768.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13769=IKsin(j4);
IkReal x13770=IKcos(j4);
IkReal x13771=(cj5*x13770);
IkReal x13772=(sj5*x13769);
IkReal x13773=((1.0)*cj5*x13769);
IkReal x13774=((1.0)*sj5*x13770);
evalcond[0]=((-1.0)*r22*x13770);
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x13769))+((cj1*sj2)));
evalcond[2]=((((-1.0)*r00*x13773))+((r01*x13772)));
evalcond[3]=(((r10*x13771))+(((-1.0)*r11*x13774)));
evalcond[4]=((1.0)+((r11*x13772))+(((-1.0)*r10*x13773)));
evalcond[5]=((((-1.0)*r01*x13774))+((r00*x13771))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13775=IKPowWithIntegerCheck(r22,-1);
if(!x13775.valid){
continue;
}
CheckValue<IkReal> x13776=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13776.valid){
continue;
}
if( IKabs(((x13775.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13776.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13775.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13776.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13775.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13776.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13777=IKsin(j4);
IkReal x13778=IKcos(j4);
IkReal x13779=(cj5*x13778);
IkReal x13780=(sj5*x13777);
IkReal x13781=((1.0)*cj5*x13777);
IkReal x13782=((1.0)*sj5*x13778);
evalcond[0]=((-1.0)*r22*x13778);
evalcond[1]=(((cj2*sj1))+(((-1.0)*r22*x13777))+((cj1*sj2)));
evalcond[2]=(((r01*x13780))+(((-1.0)*r00*x13781)));
evalcond[3]=(((r10*x13779))+(((-1.0)*r11*x13782)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13781))+((r11*x13780)));
evalcond[5]=(((r00*x13779))+(((-1.0)*r01*x13782))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13783=((1.0)*r10);
CheckValue<IkReal> x13784=IKPowWithIntegerCheck(cj3,-1);
if(!x13784.valid){
continue;
}
CheckValue<IkReal> x13785=IKPowWithIntegerCheck(r22,-1);
if(!x13785.valid){
continue;
}
CheckValue<IkReal> x13786=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13783))+((cj3*r11*sj5))),-1);
if(!x13786.valid){
continue;
}
if( IKabs(((x13784.value)*(x13785.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13786.value)*(((((-1.0)*sj3*sj5*x13783))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13784.value)*(x13785.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13786.value)*(((((-1.0)*sj3*sj5*x13783))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13784.value)*(x13785.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13786.value)*(((((-1.0)*sj3*sj5*x13783))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13787=IKsin(j4);
IkReal x13788=IKcos(j4);
IkReal x13789=(sj1*sj2);
IkReal x13790=(r11*sj5);
IkReal x13791=(r00*sj3);
IkReal x13792=(cj5*r01);
IkReal x13793=((1.0)*cj1);
IkReal x13794=(cj3*sj5);
IkReal x13795=(cj5*r11);
IkReal x13796=(r10*sj3);
IkReal x13797=(cj2*sj1);
IkReal x13798=((1.0)*cj5);
IkReal x13799=((1.0)*sj3);
IkReal x13800=(r01*sj5);
IkReal x13801=(cj2*x13793);
IkReal x13802=(cj3*x13788);
IkReal x13803=(r22*x13787);
IkReal x13804=(cj5*x13788);
IkReal x13805=(x13787*x13798);
evalcond[0]=((-1.0)*r22*x13788);
evalcond[1]=(x13797+((cj1*sj2))+((cj3*x13803)));
evalcond[2]=((((-1.0)*r00*x13805))+((x13787*x13800)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13805))+((x13787*x13790)));
evalcond[4]=((((-1.0)*x13801))+x13789+(((-1.0)*x13799*x13803)));
evalcond[5]=(((sj3*x13795))+((x13790*x13802))+((sj5*x13796))+(((-1.0)*r10*x13798*x13802)));
evalcond[6]=((((-1.0)*x13788*x13790*x13799))+((x13796*x13804))+((cj3*x13795))+((r10*x13794)));
evalcond[7]=((((-1.0)*x13801))+x13789+((r01*x13788*x13794))+(((-1.0)*r00*x13798*x13802))+((sj3*x13792))+((sj5*x13791)));
evalcond[8]=(((r00*x13794))+(((-1.0)*sj2*x13793))+(((-1.0)*x13797))+(((-1.0)*x13788*x13799*x13800))+((cj3*x13792))+((x13791*x13804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13806=(cj5*r10);
IkReal x13807=((1.0)*r11);
CheckValue<IkReal> x13808=IKPowWithIntegerCheck(((((-1.0)*x13806))+((r11*sj5))),-1);
if(!x13808.valid){
continue;
}
CheckValue<IkReal> x13809=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13807))+((sj3*x13806))),-1);
if(!x13809.valid){
continue;
}
if( IKabs(((-1.0)*(x13808.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13809.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13807)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13808.value)))+IKsqr(((x13809.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13807))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13808.value)), ((x13809.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13807))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13810=IKsin(j4);
IkReal x13811=IKcos(j4);
IkReal x13812=(sj1*sj2);
IkReal x13813=(r11*sj5);
IkReal x13814=(r00*sj3);
IkReal x13815=(cj5*r01);
IkReal x13816=((1.0)*cj1);
IkReal x13817=(cj3*sj5);
IkReal x13818=(cj5*r11);
IkReal x13819=(r10*sj3);
IkReal x13820=(cj2*sj1);
IkReal x13821=((1.0)*cj5);
IkReal x13822=((1.0)*sj3);
IkReal x13823=(r01*sj5);
IkReal x13824=(cj2*x13816);
IkReal x13825=(cj3*x13811);
IkReal x13826=(r22*x13810);
IkReal x13827=(cj5*x13811);
IkReal x13828=(x13810*x13821);
evalcond[0]=((-1.0)*r22*x13811);
evalcond[1]=(x13820+((cj1*sj2))+((cj3*x13826)));
evalcond[2]=(((x13810*x13823))+(((-1.0)*r00*x13828)));
evalcond[3]=((1.0)+((x13810*x13813))+(((-1.0)*r10*x13828)));
evalcond[4]=((((-1.0)*x13824))+x13812+(((-1.0)*x13822*x13826)));
evalcond[5]=(((sj3*x13818))+(((-1.0)*r10*x13821*x13825))+((sj5*x13819))+((x13813*x13825)));
evalcond[6]=(((r10*x13817))+(((-1.0)*x13811*x13813*x13822))+((x13819*x13827))+((cj3*x13818)));
evalcond[7]=((((-1.0)*x13824))+x13812+(((-1.0)*r00*x13821*x13825))+((r01*x13811*x13817))+((sj3*x13815))+((sj5*x13814)));
evalcond[8]=((((-1.0)*x13811*x13822*x13823))+((r00*x13817))+(((-1.0)*sj2*x13816))+((x13814*x13827))+(((-1.0)*x13820))+((cj3*x13815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13829=((1.0)*sj3);
IkReal x13830=(r11*sj5);
IkReal x13831=((1.0)*cj5*r10);
CheckValue<IkReal> x13832=IKPowWithIntegerCheck(((((-1.0)*x13831))+x13830),-1);
if(!x13832.valid){
continue;
}
CheckValue<IkReal> x13833=IKPowWithIntegerCheck(((((-1.0)*cj3*x13831))+((cj3*x13830))),-1);
if(!x13833.valid){
continue;
}
if( IKabs(((-1.0)*(x13832.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13833.value)*(((((-1.0)*r10*sj5*x13829))+(((-1.0)*cj5*r11*x13829)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13832.value)))+IKsqr(((x13833.value)*(((((-1.0)*r10*sj5*x13829))+(((-1.0)*cj5*r11*x13829))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13832.value)), ((x13833.value)*(((((-1.0)*r10*sj5*x13829))+(((-1.0)*cj5*r11*x13829))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13834=IKsin(j4);
IkReal x13835=IKcos(j4);
IkReal x13836=(sj1*sj2);
IkReal x13837=(r11*sj5);
IkReal x13838=(r00*sj3);
IkReal x13839=(cj5*r01);
IkReal x13840=((1.0)*cj1);
IkReal x13841=(cj3*sj5);
IkReal x13842=(cj5*r11);
IkReal x13843=(r10*sj3);
IkReal x13844=(cj2*sj1);
IkReal x13845=((1.0)*cj5);
IkReal x13846=((1.0)*sj3);
IkReal x13847=(r01*sj5);
IkReal x13848=(cj2*x13840);
IkReal x13849=(cj3*x13835);
IkReal x13850=(r22*x13834);
IkReal x13851=(cj5*x13835);
IkReal x13852=(x13834*x13845);
evalcond[0]=((-1.0)*r22*x13835);
evalcond[1]=(x13844+((cj1*sj2))+((cj3*x13850)));
evalcond[2]=(((x13834*x13847))+(((-1.0)*r00*x13852)));
evalcond[3]=((1.0)+((x13834*x13837))+(((-1.0)*r10*x13852)));
evalcond[4]=((((-1.0)*x13848))+x13836+(((-1.0)*x13846*x13850)));
evalcond[5]=(((x13837*x13849))+(((-1.0)*r10*x13845*x13849))+((sj5*x13843))+((sj3*x13842)));
evalcond[6]=(((x13843*x13851))+((r10*x13841))+(((-1.0)*x13835*x13837*x13846))+((cj3*x13842)));
evalcond[7]=((((-1.0)*x13848))+(((-1.0)*r00*x13845*x13849))+x13836+((sj5*x13838))+((sj3*x13839))+((r01*x13835*x13841)));
evalcond[8]=((((-1.0)*sj2*x13840))+((x13838*x13851))+(((-1.0)*x13835*x13846*x13847))+((cj3*x13839))+(((-1.0)*x13844))+((r00*x13841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13853=cj5*cj5;
IkReal x13854=((1.0)*cj3);
IkReal x13855=(r10*r21);
IkReal x13856=(cj5*sj5);
IkReal x13857=(r11*r21);
IkReal x13858=(r11*r20);
IkReal x13859=(r22*sj3);
IkReal x13860=(r10*r20);
IkReal x13861=((1.0)*sj3*x13853);
CheckValue<IkReal> x13862 = IKatan2WithCheck(IkReal((((r10*sj5*x13859))+((cj5*r11*x13859)))),IkReal((((sj3*x13856*x13857))+(((-1.0)*sj3*x13856*x13860))+(((-1.0)*x13858*x13861))+((sj3*x13855))+(((-1.0)*x13855*x13861)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13862.valid){
continue;
}
CheckValue<IkReal> x13863=IKPowWithIntegerCheck(IKsign((((cj3*x13856*x13858))+((cj3*x13855*x13856))+(((-1.0)*r12*r22*x13854))+(((-1.0)*x13853*x13854*x13860))+((cj3*x13853*x13857))+(((-1.0)*x13854*x13857)))),-1);
if(!x13863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13862.value)+(((1.5707963267949)*(x13863.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13864=IKsin(j4);
IkReal x13865=IKcos(j4);
IkReal x13866=(sj1*sj2);
IkReal x13867=(cj5*sj3);
IkReal x13868=(cj5*r10);
IkReal x13869=(r00*sj5);
IkReal x13870=(r11*sj5);
IkReal x13871=(cj3*cj5);
IkReal x13872=((1.0)*cj1);
IkReal x13873=(cj3*sj5);
IkReal x13874=(r21*sj5);
IkReal x13875=(cj2*sj1);
IkReal x13876=(sj3*sj5);
IkReal x13877=(r01*sj5);
IkReal x13878=(cj2*x13872);
IkReal x13879=((1.0)*x13865);
IkReal x13880=((1.0)*x13864);
IkReal x13881=(cj3*x13864);
IkReal x13882=(cj3*x13865);
evalcond[0]=(((x13864*x13874))+(((-1.0)*r22*x13879))+(((-1.0)*cj5*r20*x13880)));
evalcond[1]=(((x13864*x13877))+(((-1.0)*r02*x13879))+(((-1.0)*cj5*r00*x13880)));
evalcond[2]=((1.0)+((x13864*x13870))+(((-1.0)*x13868*x13880))+(((-1.0)*r12*x13879)));
evalcond[3]=((((-1.0)*cj3*x13868*x13879))+((x13870*x13882))+((r11*x13867))+((r12*x13881))+((r10*x13876)));
evalcond[4]=(((r10*x13865*x13867))+((r11*x13871))+(((-1.0)*sj3*x13870*x13879))+((r10*x13873))+(((-1.0)*r12*sj3*x13880)));
evalcond[5]=(x13875+((cj1*sj2))+((r21*x13865*x13873))+((r21*x13867))+((r20*x13876))+(((-1.0)*r20*x13871*x13879))+((r22*x13881)));
evalcond[6]=(((r01*x13867))+((r01*x13865*x13873))+x13866+(((-1.0)*x13878))+((sj3*x13869))+((r02*x13881))+(((-1.0)*r00*x13871*x13879)));
evalcond[7]=((((-1.0)*sj3*x13874*x13879))+(((-1.0)*r22*sj3*x13880))+x13866+(((-1.0)*x13878))+((r21*x13871))+((r20*x13865*x13867))+((r20*x13873)));
evalcond[8]=((((-1.0)*x13875))+(((-1.0)*r01*x13876*x13879))+((r00*x13865*x13867))+(((-1.0)*sj2*x13872))+((r01*x13871))+(((-1.0)*r02*sj3*x13880))+((cj3*x13869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13883=((1.0)*cj5);
CheckValue<IkReal> x13884 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13883)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13884.valid){
continue;
}
CheckValue<IkReal> x13885=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13883))+(((-1.0)*r00*sj5)))),-1);
if(!x13885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13884.value)+(((1.5707963267949)*(x13885.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13886=IKsin(j4);
IkReal x13887=IKcos(j4);
IkReal x13888=(sj1*sj2);
IkReal x13889=(cj5*sj3);
IkReal x13890=(cj5*r10);
IkReal x13891=(r00*sj5);
IkReal x13892=(r11*sj5);
IkReal x13893=(cj3*cj5);
IkReal x13894=((1.0)*cj1);
IkReal x13895=(cj3*sj5);
IkReal x13896=(r21*sj5);
IkReal x13897=(cj2*sj1);
IkReal x13898=(sj3*sj5);
IkReal x13899=(r01*sj5);
IkReal x13900=(cj2*x13894);
IkReal x13901=((1.0)*x13887);
IkReal x13902=((1.0)*x13886);
IkReal x13903=(cj3*x13886);
IkReal x13904=(cj3*x13887);
evalcond[0]=((((-1.0)*cj5*r20*x13902))+(((-1.0)*r22*x13901))+((x13886*x13896)));
evalcond[1]=((((-1.0)*cj5*r00*x13902))+(((-1.0)*r02*x13901))+((x13886*x13899)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13901))+(((-1.0)*x13890*x13902))+((x13886*x13892)));
evalcond[3]=((((-1.0)*cj3*x13890*x13901))+((r10*x13898))+((r12*x13903))+((x13892*x13904))+((r11*x13889)));
evalcond[4]=(((r10*x13887*x13889))+(((-1.0)*r12*sj3*x13902))+((r10*x13895))+(((-1.0)*sj3*x13892*x13901))+((r11*x13893)));
evalcond[5]=(((r22*x13903))+x13897+((r21*x13887*x13895))+((cj1*sj2))+((r20*x13898))+(((-1.0)*r20*x13893*x13901))+((r21*x13889)));
evalcond[6]=(((r02*x13903))+x13888+((sj3*x13891))+(((-1.0)*r00*x13893*x13901))+((r01*x13887*x13895))+((r01*x13889))+(((-1.0)*x13900)));
evalcond[7]=((((-1.0)*r22*sj3*x13902))+x13888+((r20*x13887*x13889))+((r20*x13895))+((r21*x13893))+(((-1.0)*sj3*x13896*x13901))+(((-1.0)*x13900)));
evalcond[8]=((((-1.0)*sj2*x13894))+((cj3*x13891))+(((-1.0)*r02*sj3*x13902))+(((-1.0)*r01*x13898*x13901))+((r01*x13893))+(((-1.0)*x13897))+((r00*x13887*x13889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13905=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13905.valid){
continue;
}
CheckValue<IkReal> x13906 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13905.value)))+(x13906.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13907=IKsin(j4);
IkReal x13908=IKcos(j4);
IkReal x13909=(sj1*sj2);
IkReal x13910=(cj5*sj3);
IkReal x13911=(cj5*r10);
IkReal x13912=(r00*sj5);
IkReal x13913=(r11*sj5);
IkReal x13914=(cj3*cj5);
IkReal x13915=((1.0)*cj1);
IkReal x13916=(cj3*sj5);
IkReal x13917=(r21*sj5);
IkReal x13918=(cj2*sj1);
IkReal x13919=(sj3*sj5);
IkReal x13920=(r01*sj5);
IkReal x13921=(cj2*x13915);
IkReal x13922=((1.0)*x13908);
IkReal x13923=((1.0)*x13907);
IkReal x13924=(cj3*x13907);
IkReal x13925=(cj3*x13908);
evalcond[0]=((((-1.0)*r22*x13922))+(((-1.0)*cj5*r20*x13923))+((x13907*x13917)));
evalcond[1]=((((-1.0)*cj5*r00*x13923))+((x13907*x13920))+(((-1.0)*r02*x13922)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13922))+((x13907*x13913))+(((-1.0)*x13911*x13923)));
evalcond[3]=(((r10*x13919))+(((-1.0)*cj3*x13911*x13922))+((r11*x13910))+((x13913*x13925))+((r12*x13924)));
evalcond[4]=(((r10*x13916))+(((-1.0)*sj3*x13913*x13922))+((r10*x13908*x13910))+(((-1.0)*r12*sj3*x13923))+((r11*x13914)));
evalcond[5]=(((cj1*sj2))+x13918+(((-1.0)*r20*x13914*x13922))+((r22*x13924))+((r20*x13919))+((r21*x13910))+((r21*x13908*x13916)));
evalcond[6]=((((-1.0)*r00*x13914*x13922))+x13909+((r01*x13908*x13916))+(((-1.0)*x13921))+((sj3*x13912))+((r01*x13910))+((r02*x13924)));
evalcond[7]=((((-1.0)*sj3*x13917*x13922))+x13909+(((-1.0)*x13921))+((r20*x13916))+((r21*x13914))+((r20*x13908*x13910))+(((-1.0)*r22*sj3*x13923)));
evalcond[8]=((((-1.0)*x13918))+(((-1.0)*r01*x13919*x13922))+(((-1.0)*sj2*x13915))+((r00*x13908*x13910))+((cj3*x13912))+((r01*x13914))+(((-1.0)*r02*sj3*x13923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13926=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13926;
j4eval[1]=IKsign(x13926);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13927=((1.0)*cj5);
IkReal x13928=((((-1.0)*r21*x13927))+(((-1.0)*r20*sj5)));
j4eval[0]=x13928;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13927))))));
j4eval[2]=IKsign(x13928);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13929=cj5*cj5;
IkReal x13930=(cj3*r21);
IkReal x13931=(cj5*sj5);
IkReal x13932=((1.0)*cj3);
IkReal x13933=((((-1.0)*r12*r22*x13932))+(((-1.0)*r10*r20*x13929*x13932))+(((-1.0)*r11*x13930))+((cj3*r11*r20*x13931))+((r11*x13929*x13930))+((r10*x13930*x13931)));
j4eval[0]=x13933;
j4eval[1]=IKsign(x13933);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13934=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13934;
j4eval[1]=IKsign(x13934);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13935=((1.0)*cj5);
IkReal x13936=((((-1.0)*r21*x13935))+(((-1.0)*r20*sj5)));
j4eval[0]=x13936;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13935))))));
j4eval[2]=IKsign(x13936);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13937=cj5*cj5;
IkReal x13938=r11*r11;
IkReal x13939=(cj5*r10);
IkReal x13940=(r11*sj5);
IkReal x13941=((((-1.0)*x13937*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x13939*x13940))+(((-1.0)*x13938))+((x13937*x13938)));
j4eval[0]=x13941;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x13940))+x13939))));
j4eval[2]=IKsign(x13941);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13942=cj5*cj5;
IkReal x13943=r11*r11;
IkReal x13944=(cj5*r10);
IkReal x13945=(r11*sj5);
CheckValue<IkReal> x13946 = IKatan2WithCheck(IkReal(((((-1.0)*x13945))+x13944)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13946.valid){
continue;
}
CheckValue<IkReal> x13947=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13943))+(((-1.0)*x13942*(r10*r10)))+(((2.0)*x13944*x13945))+((x13942*x13943))+(((-1.0)*(r12*r12))))),-1);
if(!x13947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13946.value)+(((1.5707963267949)*(x13947.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13948=IKsin(j4);
IkReal x13949=IKcos(j4);
IkReal x13950=(cj5*r10);
IkReal x13951=(r01*sj5);
IkReal x13952=(cj5*r00);
IkReal x13953=(cj5*r20);
IkReal x13954=((1.0)*x13949);
IkReal x13955=((1.0)*x13948);
IkReal x13956=(sj5*x13948);
evalcond[0]=(((r21*x13956))+(((-1.0)*r22*x13954))+(((-1.0)*x13953*x13955)));
evalcond[1]=(((x13948*x13951))+(((-1.0)*x13952*x13955))+(((-1.0)*r02*x13954)));
evalcond[2]=((((-1.0)*r11*sj5*x13954))+(((-1.0)*r12*x13955))+((x13949*x13950)));
evalcond[3]=((-1.0)+((r11*x13956))+(((-1.0)*r12*x13954))+(((-1.0)*x13950*x13955)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x13955))+((x13949*x13952))+(((-1.0)*x13951*x13954)));
evalcond[5]=((((-1.0)*r21*sj5*x13954))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x13955))+((x13949*x13953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13957=((1.0)*cj5);
CheckValue<IkReal> x13958=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13957))+(((-1.0)*r20*sj5)))),-1);
if(!x13958.valid){
continue;
}
CheckValue<IkReal> x13959 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x13957))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13958.value)))+(x13959.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13960=IKsin(j4);
IkReal x13961=IKcos(j4);
IkReal x13962=(cj5*r10);
IkReal x13963=(r01*sj5);
IkReal x13964=(cj5*r00);
IkReal x13965=(cj5*r20);
IkReal x13966=((1.0)*x13961);
IkReal x13967=((1.0)*x13960);
IkReal x13968=(sj5*x13960);
evalcond[0]=((((-1.0)*r22*x13966))+(((-1.0)*x13965*x13967))+((r21*x13968)));
evalcond[1]=((((-1.0)*r02*x13966))+(((-1.0)*x13964*x13967))+((x13960*x13963)));
evalcond[2]=((((-1.0)*r12*x13967))+((x13961*x13962))+(((-1.0)*r11*sj5*x13966)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x13966))+((r11*x13968))+(((-1.0)*x13962*x13967)));
evalcond[4]=((((-1.0)*r02*x13967))+((cj2*sj1))+((cj1*sj2))+((x13961*x13964))+(((-1.0)*x13963*x13966)));
evalcond[5]=((((-1.0)*r22*x13967))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13961*x13965))+(((-1.0)*r21*sj5*x13966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13969 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13969.valid){
continue;
}
CheckValue<IkReal> x13970=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13969.value)+(((1.5707963267949)*(x13970.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13971=IKsin(j4);
IkReal x13972=IKcos(j4);
IkReal x13973=(cj5*r10);
IkReal x13974=(r01*sj5);
IkReal x13975=(cj5*r00);
IkReal x13976=(cj5*r20);
IkReal x13977=((1.0)*x13972);
IkReal x13978=((1.0)*x13971);
IkReal x13979=(sj5*x13971);
evalcond[0]=((((-1.0)*r22*x13977))+(((-1.0)*x13976*x13978))+((r21*x13979)));
evalcond[1]=((((-1.0)*r02*x13977))+((x13971*x13974))+(((-1.0)*x13975*x13978)));
evalcond[2]=((((-1.0)*r12*x13978))+(((-1.0)*r11*sj5*x13977))+((x13972*x13973)));
evalcond[3]=((-1.0)+(((-1.0)*x13973*x13978))+(((-1.0)*r12*x13977))+((r11*x13979)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x13978))+((cj1*sj2))+(((-1.0)*x13974*x13977))+((x13972*x13975)));
evalcond[5]=((((-1.0)*r22*x13978))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13972*x13976))+(((-1.0)*r21*sj5*x13977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13980=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13980;
j4eval[1]=IKsign(x13980);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13981=((1.0)*cj5);
IkReal x13982=((((-1.0)*r21*x13981))+(((-1.0)*r20*sj5)));
j4eval[0]=x13982;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13981))))));
j4eval[2]=IKsign(x13982);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x13983=cj5*cj5;
IkReal x13984=r11*r11;
IkReal x13985=(r11*sj5);
IkReal x13986=(cj5*r10);
IkReal x13987=((r12*r12)+(((-1.0)*x13983*x13984))+x13984+((x13983*(r10*r10)))+(((-2.0)*x13985*x13986)));
j4eval[0]=x13987;
j4eval[1]=IKsign(x13987);
j4eval[2]=((IKabs(r12))+(IKabs((x13985+(((-1.0)*x13986))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13988=cj5*cj5;
IkReal x13989=r11*r11;
IkReal x13990=(cj5*r10);
IkReal x13991=(r11*sj5);
CheckValue<IkReal> x13992 = IKatan2WithCheck(IkReal((x13991+(((-1.0)*x13990)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13992.valid){
continue;
}
CheckValue<IkReal> x13993=IKPowWithIntegerCheck(IKsign(((r12*r12)+x13989+((x13988*(r10*r10)))+(((-1.0)*x13988*x13989))+(((-2.0)*x13990*x13991)))),-1);
if(!x13993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13992.value)+(((1.5707963267949)*(x13993.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13994=IKcos(j4);
IkReal x13995=IKsin(j4);
IkReal x13996=(cj5*r00);
IkReal x13997=(cj5*r10);
IkReal x13998=(r21*sj5);
IkReal x13999=(cj5*r20);
IkReal x14000=((1.0)*x13994);
IkReal x14001=((1.0)*x13995);
IkReal x14002=(sj5*x13995);
IkReal x14003=(sj5*x13994);
evalcond[0]=(((r12*x13995))+((r11*x14003))+(((-1.0)*x13997*x14000)));
evalcond[1]=(((x13995*x13998))+(((-1.0)*x13999*x14001))+(((-1.0)*r22*x14000)));
evalcond[2]=((((-1.0)*r02*x14000))+(((-1.0)*x13996*x14001))+((r01*x14002)));
evalcond[3]=((-1.0)+((r11*x14002))+(((-1.0)*x13997*x14001))+(((-1.0)*r12*x14000)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x13995))+(((-1.0)*x13996*x14000))+((r01*x14003)));
evalcond[5]=(((r22*x13995))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13994*x13998))+(((-1.0)*x13999*x14000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14004=((1.0)*cj5);
CheckValue<IkReal> x14005 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14004))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14005.valid){
continue;
}
CheckValue<IkReal> x14006=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14004))+(((-1.0)*r20*sj5)))),-1);
if(!x14006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14005.value)+(((1.5707963267949)*(x14006.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14007=IKcos(j4);
IkReal x14008=IKsin(j4);
IkReal x14009=(cj5*r00);
IkReal x14010=(cj5*r10);
IkReal x14011=(r21*sj5);
IkReal x14012=(cj5*r20);
IkReal x14013=((1.0)*x14007);
IkReal x14014=((1.0)*x14008);
IkReal x14015=(sj5*x14008);
IkReal x14016=(sj5*x14007);
evalcond[0]=(((r11*x14016))+((r12*x14008))+(((-1.0)*x14010*x14013)));
evalcond[1]=((((-1.0)*x14012*x14014))+((x14008*x14011))+(((-1.0)*r22*x14013)));
evalcond[2]=((((-1.0)*r02*x14013))+(((-1.0)*x14009*x14014))+((r01*x14015)));
evalcond[3]=((-1.0)+((r11*x14015))+(((-1.0)*x14010*x14014))+(((-1.0)*r12*x14013)));
evalcond[4]=(((cj2*sj1))+((r02*x14008))+((cj1*sj2))+(((-1.0)*x14009*x14013))+((r01*x14016)));
evalcond[5]=((((-1.0)*x14012*x14013))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x14008))+((x14007*x14011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14017 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14017.valid){
continue;
}
CheckValue<IkReal> x14018=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14017.value)+(((1.5707963267949)*(x14018.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14019=IKcos(j4);
IkReal x14020=IKsin(j4);
IkReal x14021=(cj5*r00);
IkReal x14022=(cj5*r10);
IkReal x14023=(r21*sj5);
IkReal x14024=(cj5*r20);
IkReal x14025=((1.0)*x14019);
IkReal x14026=((1.0)*x14020);
IkReal x14027=(sj5*x14020);
IkReal x14028=(sj5*x14019);
evalcond[0]=(((r11*x14028))+(((-1.0)*x14022*x14025))+((r12*x14020)));
evalcond[1]=((((-1.0)*x14024*x14026))+((x14020*x14023))+(((-1.0)*r22*x14025)));
evalcond[2]=(((r01*x14027))+(((-1.0)*r02*x14025))+(((-1.0)*x14021*x14026)));
evalcond[3]=((-1.0)+((r11*x14027))+(((-1.0)*r12*x14025))+(((-1.0)*x14022*x14026)));
evalcond[4]=(((cj2*sj1))+((r01*x14028))+((cj1*sj2))+(((-1.0)*x14021*x14025))+((r02*x14020)));
evalcond[5]=(((r22*x14020))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14019*x14023))+(((-1.0)*x14024*x14025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14030 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14030)==0){
continue;
}
IkReal x14029=pow(x14030,-0.5);
CheckValue<IkReal> x14031 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14031.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14031.value));
IkReal gconst37=((-1.0)*r01*x14029);
IkReal gconst38=(r00*x14029);
CheckValue<IkReal> x14032 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14032.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14032.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14035 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14035.valid){
continue;
}
IkReal x14033=((-1.0)*(x14035.value));
IkReal x14034=x14029;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14033;
IkReal gconst36=x14033;
IkReal gconst37=((-1.0)*r01*x14034);
IkReal gconst38=(r00*x14034);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14038 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14038.valid){
continue;
}
IkReal x14036=((-1.0)*(x14038.value));
IkReal x14037=x14029;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14036;
IkReal gconst36=x14036;
IkReal gconst37=((-1.0)*r01*x14037);
IkReal gconst38=(r00*x14037);
CheckValue<IkReal> x14046=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14046.valid){
continue;
}
IkReal x14039=x14046.value;
IkReal x14040=(sj3*x14039);
IkReal x14041=(r11*x14040);
IkReal x14042=(r21*x14040);
IkReal x14043=(r20*x14040);
IkReal x14044=(r10*x14040);
IkReal x14045=(r00*r01*x14040);
j4eval[0]=IKsign((((r21*x14041*(r01*r01)))+((r00*r01*r10*x14042))+((r00*r01*r20*x14041))+((r10*x14043*(r00*r00)))+((r12*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14047=gconst38*gconst38;
IkReal x14048=gconst37*gconst37;
IkReal x14049=((1.0)*cj3);
IkReal x14050=(r11*r20);
IkReal x14051=(r10*sj3);
IkReal x14052=(gconst37*gconst38);
IkReal x14053=(r11*sj3);
IkReal x14054=(r21*x14048);
IkReal x14055=(cj3*x14052);
CheckValue<IkReal> x14056 = IKatan2WithCheck(IkReal((((gconst37*r22*x14051))+((gconst38*r22*x14053)))),IkReal((((x14051*x14054))+(((-1.0)*r20*x14051*x14052))+(((-1.0)*sj3*x14047*x14050))+((r21*x14052*x14053)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14056.valid){
continue;
}
CheckValue<IkReal> x14057=IKPowWithIntegerCheck(IKsign((((r10*r21*x14055))+((x14050*x14055))+(((-1.0)*r12*r22*x14049))+(((-1.0)*r10*r20*x14047*x14049))+(((-1.0)*r11*x14049*x14054)))),-1);
if(!x14057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14056.value)+(((1.5707963267949)*(x14057.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14058=IKsin(j4);
IkReal x14059=IKcos(j4);
IkReal x14060=(cj2*sj1);
IkReal x14061=(cj1*sj2);
IkReal x14062=(gconst38*r21);
IkReal x14063=(cj3*r20);
IkReal x14064=(gconst38*r10);
IkReal x14065=(cj3*gconst37);
IkReal x14066=(sj1*sj2);
IkReal x14067=(gconst38*r00);
IkReal x14068=(cj1*cj2);
IkReal x14069=(gconst37*sj3);
IkReal x14070=(gconst38*r20);
IkReal x14071=(gconst38*r01);
IkReal x14072=(gconst38*r11);
IkReal x14073=((1.0)*x14059);
IkReal x14074=((1.0)*x14058);
IkReal x14075=(cj3*x14058);
IkReal x14076=(sj3*x14059);
IkReal x14077=(gconst37*x14058);
IkReal x14078=(x14060+x14061);
evalcond[0]=((((-1.0)*r22*x14073))+((r21*x14077))+(((-1.0)*x14070*x14074)));
evalcond[1]=(((r01*x14077))+(((-1.0)*x14067*x14074))+(((-1.0)*r02*x14073)));
evalcond[2]=((-1.0)+(((-1.0)*x14064*x14074))+(((-1.0)*r12*x14073))+((r11*x14077)));
evalcond[3]=((((-1.0)*cj3*x14064*x14073))+((sj3*x14072))+((r10*x14069))+((r12*x14075))+((r11*x14059*x14065)));
evalcond[4]=((((-1.0)*r11*x14069*x14073))+((r10*x14065))+(((-1.0)*r12*sj3*x14074))+((x14064*x14076))+((cj3*x14072)));
evalcond[5]=(((r21*x14059*x14065))+(((-1.0)*gconst38*x14063*x14073))+((r22*x14075))+((sj3*x14062))+((r20*x14069))+x14078);
evalcond[6]=(((r02*x14075))+((r01*x14059*x14065))+(((-1.0)*cj3*x14067*x14073))+((sj3*x14071))+((r00*x14069))+(((-1.0)*x14066))+x14068);
evalcond[7]=((((-1.0)*r02*sj3*x14074))+((x14067*x14076))+(((-1.0)*r01*x14069*x14073))+((r00*x14065))+x14078+((cj3*x14071)));
evalcond[8]=(((cj3*x14062))+(((-1.0)*r22*sj3*x14074))+((gconst37*x14063))+(((-1.0)*x14068))+(((-1.0)*r21*x14069*x14073))+x14066+((x14070*x14076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14079=gconst38*gconst38;
IkReal x14080=gconst37*gconst37;
IkReal x14081=(gconst37*r10);
IkReal x14082=(cj3*r22);
IkReal x14083=((1.0)*gconst38);
IkReal x14084=(r21*sj3);
IkReal x14085=(gconst38*r11);
IkReal x14086=(cj3*r20);
IkReal x14087=(cj3*r21);
IkReal x14088=(r20*sj3);
CheckValue<IkReal> x14089=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r11*x14083*x14088))+((r10*x14079*x14088))+(((-1.0)*x14081*x14083*x14084))+((r12*r22*sj3))+((r11*x14080*x14084)))),-1);
if(!x14089.valid){
continue;
}
CheckValue<IkReal> x14090 = IKatan2WithCheck(IkReal((((x14081*x14082))+((x14082*x14085)))),IkReal((((gconst37*x14085*x14087))+((r10*x14080*x14087))+(((-1.0)*r11*x14079*x14086))+(((-1.0)*x14081*x14083*x14086)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14089.value)))+(x14090.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14091=IKsin(j4);
IkReal x14092=IKcos(j4);
IkReal x14093=(cj2*sj1);
IkReal x14094=(cj1*sj2);
IkReal x14095=(gconst38*r21);
IkReal x14096=(cj3*r20);
IkReal x14097=(gconst38*r10);
IkReal x14098=(cj3*gconst37);
IkReal x14099=(sj1*sj2);
IkReal x14100=(gconst38*r00);
IkReal x14101=(cj1*cj2);
IkReal x14102=(gconst37*sj3);
IkReal x14103=(gconst38*r20);
IkReal x14104=(gconst38*r01);
IkReal x14105=(gconst38*r11);
IkReal x14106=((1.0)*x14092);
IkReal x14107=((1.0)*x14091);
IkReal x14108=(cj3*x14091);
IkReal x14109=(sj3*x14092);
IkReal x14110=(gconst37*x14091);
IkReal x14111=(x14094+x14093);
evalcond[0]=((((-1.0)*r22*x14106))+((r21*x14110))+(((-1.0)*x14103*x14107)));
evalcond[1]=(((r01*x14110))+(((-1.0)*x14100*x14107))+(((-1.0)*r02*x14106)));
evalcond[2]=((-1.0)+((r11*x14110))+(((-1.0)*x14097*x14107))+(((-1.0)*r12*x14106)));
evalcond[3]=(((sj3*x14105))+(((-1.0)*cj3*x14097*x14106))+((r11*x14092*x14098))+((r10*x14102))+((r12*x14108)));
evalcond[4]=((((-1.0)*r11*x14102*x14106))+((x14097*x14109))+((cj3*x14105))+((r10*x14098))+(((-1.0)*r12*sj3*x14107)));
evalcond[5]=((((-1.0)*gconst38*x14096*x14106))+((sj3*x14095))+((r22*x14108))+((r21*x14092*x14098))+x14111+((r20*x14102)));
evalcond[6]=(((sj3*x14104))+((r02*x14108))+((r00*x14102))+(((-1.0)*x14099))+((r01*x14092*x14098))+x14101+(((-1.0)*cj3*x14100*x14106)));
evalcond[7]=(((r00*x14098))+(((-1.0)*r02*sj3*x14107))+((cj3*x14104))+x14111+((x14100*x14109))+(((-1.0)*r01*x14102*x14106)));
evalcond[8]=((((-1.0)*r22*sj3*x14107))+((x14103*x14109))+(((-1.0)*x14101))+(((-1.0)*r21*x14102*x14106))+((gconst37*x14096))+((cj3*x14095))+x14099);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14112=((1.0)*gconst38);
CheckValue<IkReal> x14113 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14112))+((gconst37*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14113.valid){
continue;
}
CheckValue<IkReal> x14114=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x14112)))),-1);
if(!x14114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14113.value)+(((1.5707963267949)*(x14114.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14115=IKsin(j4);
IkReal x14116=IKcos(j4);
IkReal x14117=(cj2*sj1);
IkReal x14118=(cj1*sj2);
IkReal x14119=(gconst38*r21);
IkReal x14120=(cj3*r20);
IkReal x14121=(gconst38*r10);
IkReal x14122=(cj3*gconst37);
IkReal x14123=(sj1*sj2);
IkReal x14124=(gconst38*r00);
IkReal x14125=(cj1*cj2);
IkReal x14126=(gconst37*sj3);
IkReal x14127=(gconst38*r20);
IkReal x14128=(gconst38*r01);
IkReal x14129=(gconst38*r11);
IkReal x14130=((1.0)*x14116);
IkReal x14131=((1.0)*x14115);
IkReal x14132=(cj3*x14115);
IkReal x14133=(sj3*x14116);
IkReal x14134=(gconst37*x14115);
IkReal x14135=(x14117+x14118);
evalcond[0]=(((r21*x14134))+(((-1.0)*r22*x14130))+(((-1.0)*x14127*x14131)));
evalcond[1]=((((-1.0)*r02*x14130))+(((-1.0)*x14124*x14131))+((r01*x14134)));
evalcond[2]=((-1.0)+((r11*x14134))+(((-1.0)*r12*x14130))+(((-1.0)*x14121*x14131)));
evalcond[3]=((((-1.0)*cj3*x14121*x14130))+((r11*x14116*x14122))+((r12*x14132))+((r10*x14126))+((sj3*x14129)));
evalcond[4]=((((-1.0)*r11*x14126*x14130))+((cj3*x14129))+(((-1.0)*r12*sj3*x14131))+((r10*x14122))+((x14121*x14133)));
evalcond[5]=(((sj3*x14119))+((r21*x14116*x14122))+(((-1.0)*gconst38*x14120*x14130))+((r20*x14126))+((r22*x14132))+x14135);
evalcond[6]=(((r00*x14126))+((r01*x14116*x14122))+((r02*x14132))+(((-1.0)*x14123))+x14125+(((-1.0)*cj3*x14124*x14130))+((sj3*x14128)));
evalcond[7]=((((-1.0)*r02*sj3*x14131))+((x14124*x14133))+((cj3*x14128))+((r00*x14122))+(((-1.0)*r01*x14126*x14130))+x14135);
evalcond[8]=((((-1.0)*r21*x14126*x14130))+((x14127*x14133))+((cj3*x14119))+(((-1.0)*r22*sj3*x14131))+(((-1.0)*x14125))+x14123+((gconst37*x14120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14137 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14137)==0){
continue;
}
IkReal x14136=pow(x14137,-0.5);
CheckValue<IkReal> x14138 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14138.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14138.value))));
IkReal gconst40=((1.0)*r01*x14136);
IkReal gconst41=((-1.0)*r00*x14136);
CheckValue<IkReal> x14139 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14139.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14139.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14142 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14142.valid){
continue;
}
IkReal x14140=((1.0)*(x14142.value));
IkReal x14141=x14136;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14140)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14140)));
IkReal gconst40=((1.0)*r01*x14141);
IkReal gconst41=((-1.0)*r00*x14141);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14145 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14145.valid){
continue;
}
IkReal x14143=((1.0)*(x14145.value));
IkReal x14144=x14136;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14143)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14143)));
IkReal gconst40=((1.0)*r01*x14144);
IkReal gconst41=((-1.0)*r00*x14144);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14146=gconst41*gconst41;
IkReal x14147=gconst40*gconst40;
IkReal x14148=(gconst40*r10);
IkReal x14149=(r22*sj3);
IkReal x14150=(r11*sj3);
IkReal x14151=((1.0)*cj3);
IkReal x14152=(gconst41*r21);
IkReal x14153=(gconst41*r20);
IkReal x14154=(r21*x14147);
IkReal x14155=((1.0)*r20*x14146);
CheckValue<IkReal> x14156 = IKatan2WithCheck(IkReal((((x14148*x14149))+((gconst41*r11*x14149)))),IkReal(((((-1.0)*sj3*x14148*x14153))+((r10*sj3*x14154))+((gconst40*x14150*x14152))+(((-1.0)*x14150*x14155)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14156.valid){
continue;
}
CheckValue<IkReal> x14157=IKPowWithIntegerCheck(IKsign((((cj3*gconst40*r11*x14153))+(((-1.0)*r12*r22*x14151))+((cj3*x14148*x14152))+(((-1.0)*r10*r20*x14146*x14151))+(((-1.0)*r11*x14151*x14154)))),-1);
if(!x14157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14156.value)+(((1.5707963267949)*(x14157.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14158=IKsin(j4);
IkReal x14159=IKcos(j4);
IkReal x14160=(cj2*sj1);
IkReal x14161=(cj1*sj2);
IkReal x14162=(gconst40*sj3);
IkReal x14163=(gconst41*sj3);
IkReal x14164=(gconst41*r20);
IkReal x14165=(cj3*gconst41);
IkReal x14166=(sj1*sj2);
IkReal x14167=(cj1*cj2);
IkReal x14168=(cj3*gconst40);
IkReal x14169=((1.0)*x14159);
IkReal x14170=((1.0)*x14158);
IkReal x14171=(cj3*x14158);
IkReal x14172=(gconst40*x14158);
IkReal x14173=(x14161+x14160);
IkReal x14174=(x14159*x14168);
evalcond[0]=((((-1.0)*r22*x14169))+((r21*x14172))+(((-1.0)*x14164*x14170)));
evalcond[1]=((((-1.0)*r02*x14169))+((r01*x14172))+(((-1.0)*gconst41*r00*x14170)));
evalcond[2]=((-1.0)+((r11*x14172))+(((-1.0)*r12*x14169))+(((-1.0)*gconst41*r10*x14170)));
evalcond[3]=(((r10*x14162))+((r11*x14174))+((r12*x14171))+((r11*x14163))+(((-1.0)*r10*x14165*x14169)));
evalcond[4]=((((-1.0)*r11*x14162*x14169))+(((-1.0)*r12*sj3*x14170))+((r10*x14168))+((r11*x14165))+((r10*x14159*x14163)));
evalcond[5]=(((r22*x14171))+((r21*x14174))+(((-1.0)*cj3*x14164*x14169))+x14173+((r21*x14163))+((r20*x14162)));
evalcond[6]=(((r01*x14174))+(((-1.0)*r00*x14165*x14169))+((r02*x14171))+((r00*x14162))+((r01*x14163))+x14167+(((-1.0)*x14166)));
evalcond[7]=((((-1.0)*r01*x14162*x14169))+((r00*x14159*x14163))+((r00*x14168))+((r01*x14165))+x14173+(((-1.0)*r02*sj3*x14170)));
evalcond[8]=((((-1.0)*r21*x14162*x14169))+x14166+((r21*x14165))+(((-1.0)*r22*sj3*x14170))+((r20*x14168))+(((-1.0)*x14167))+((r20*x14159*x14163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14175=((1.0)*gconst41);
CheckValue<IkReal> x14176 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14175))+((gconst40*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14176.valid){
continue;
}
CheckValue<IkReal> x14177=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst40*r20))+(((-1.0)*r21*x14175)))),-1);
if(!x14177.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14176.value)+(((1.5707963267949)*(x14177.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14178=IKsin(j4);
IkReal x14179=IKcos(j4);
IkReal x14180=(cj2*sj1);
IkReal x14181=(cj1*sj2);
IkReal x14182=(gconst40*sj3);
IkReal x14183=(gconst41*sj3);
IkReal x14184=(gconst41*r20);
IkReal x14185=(cj3*gconst41);
IkReal x14186=(sj1*sj2);
IkReal x14187=(cj1*cj2);
IkReal x14188=(cj3*gconst40);
IkReal x14189=((1.0)*x14179);
IkReal x14190=((1.0)*x14178);
IkReal x14191=(cj3*x14178);
IkReal x14192=(gconst40*x14178);
IkReal x14193=(x14181+x14180);
IkReal x14194=(x14179*x14188);
evalcond[0]=((((-1.0)*r22*x14189))+(((-1.0)*x14184*x14190))+((r21*x14192)));
evalcond[1]=((((-1.0)*gconst41*r00*x14190))+(((-1.0)*r02*x14189))+((r01*x14192)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14189))+((r11*x14192))+(((-1.0)*gconst41*r10*x14190)));
evalcond[3]=((((-1.0)*r10*x14185*x14189))+((r11*x14194))+((r12*x14191))+((r11*x14183))+((r10*x14182)));
evalcond[4]=((((-1.0)*r12*sj3*x14190))+(((-1.0)*r11*x14182*x14189))+((r11*x14185))+((r10*x14179*x14183))+((r10*x14188)));
evalcond[5]=(((r20*x14182))+((r22*x14191))+((r21*x14183))+x14193+((r21*x14194))+(((-1.0)*cj3*x14184*x14189)));
evalcond[6]=(((r02*x14191))+((r01*x14183))+((r00*x14182))+((r01*x14194))+x14187+(((-1.0)*r00*x14185*x14189))+(((-1.0)*x14186)));
evalcond[7]=((((-1.0)*r01*x14182*x14189))+((r01*x14185))+((r00*x14188))+x14193+(((-1.0)*r02*sj3*x14190))+((r00*x14179*x14183)));
evalcond[8]=((((-1.0)*r22*sj3*x14190))+((r20*x14188))+((r20*x14179*x14183))+((r21*x14185))+x14186+(((-1.0)*r21*x14182*x14189))+(((-1.0)*x14187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14195 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14195.valid){
continue;
}
CheckValue<IkReal> x14196=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14195.value)+(((1.5707963267949)*(x14196.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14197=IKsin(j4);
IkReal x14198=IKcos(j4);
IkReal x14199=(cj2*sj1);
IkReal x14200=(cj1*sj2);
IkReal x14201=(gconst40*sj3);
IkReal x14202=(gconst41*sj3);
IkReal x14203=(gconst41*r20);
IkReal x14204=(cj3*gconst41);
IkReal x14205=(sj1*sj2);
IkReal x14206=(cj1*cj2);
IkReal x14207=(cj3*gconst40);
IkReal x14208=((1.0)*x14198);
IkReal x14209=((1.0)*x14197);
IkReal x14210=(cj3*x14197);
IkReal x14211=(gconst40*x14197);
IkReal x14212=(x14199+x14200);
IkReal x14213=(x14198*x14207);
evalcond[0]=((((-1.0)*x14203*x14209))+((r21*x14211))+(((-1.0)*r22*x14208)));
evalcond[1]=((((-1.0)*gconst41*r00*x14209))+((r01*x14211))+(((-1.0)*r02*x14208)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14209))+((r11*x14211))+(((-1.0)*r12*x14208)));
evalcond[3]=((((-1.0)*r10*x14204*x14208))+((r11*x14213))+((r12*x14210))+((r10*x14201))+((r11*x14202)));
evalcond[4]=((((-1.0)*r11*x14201*x14208))+((r10*x14207))+((r10*x14198*x14202))+(((-1.0)*r12*sj3*x14209))+((r11*x14204)));
evalcond[5]=(((r22*x14210))+((r20*x14201))+((r21*x14202))+(((-1.0)*cj3*x14203*x14208))+((r21*x14213))+x14212);
evalcond[6]=((((-1.0)*r00*x14204*x14208))+((r01*x14213))+((r00*x14201))+((r01*x14202))+(((-1.0)*x14205))+((r02*x14210))+x14206);
evalcond[7]=(((r00*x14198*x14202))+(((-1.0)*r02*sj3*x14209))+((r00*x14207))+((r01*x14204))+(((-1.0)*r01*x14201*x14208))+x14212);
evalcond[8]=((((-1.0)*r21*x14201*x14208))+((r20*x14207))+((r21*x14204))+((r20*x14198*x14202))+(((-1.0)*x14206))+(((-1.0)*r22*sj3*x14209))+x14205);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14214=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14214);
rxp1_1=(px*r21);
rxp1_2=(r11*x14214);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14215=(r11*sj5);
IkReal x14216=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14216))+x14215);
j4eval[1]=((((-1.0)*cj3*x14216))+((cj3*x14215)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14217=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14217);
rxp1_1=(px*r21);
rxp1_2=(r11*x14217);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14218=(cj5*r10);
IkReal x14219=(r11*sj5);
j4eval[0]=((((-1.0)*x14218))+x14219);
j4eval[1]=(((sj3*x14218))+(((-1.0)*sj3*x14219)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14220=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14220);
rxp1_1=(px*r21);
rxp1_2=(r11*x14220);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14221=((1.0)*r10);
CheckValue<IkReal> x14222=IKPowWithIntegerCheck(cj3,-1);
if(!x14222.valid){
continue;
}
CheckValue<IkReal> x14223=IKPowWithIntegerCheck(r02,-1);
if(!x14223.valid){
continue;
}
CheckValue<IkReal> x14224=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x14221))),-1);
if(!x14224.valid){
continue;
}
if( IKabs(((x14222.value)*(x14223.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14224.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14221)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14222.value)*(x14223.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14224.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14221))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14222.value)*(x14223.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14224.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14221))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14225=IKsin(j4);
IkReal x14226=IKcos(j4);
IkReal x14227=(cj2*sj1);
IkReal x14228=(cj1*sj2);
IkReal x14229=(cj5*r10);
IkReal x14230=(sj1*sj2);
IkReal x14231=(cj5*sj3);
IkReal x14232=(r11*sj5);
IkReal x14233=(cj3*sj5);
IkReal x14234=(r21*sj5);
IkReal x14235=(cj1*cj2);
IkReal x14236=(cj3*cj5);
IkReal x14237=(sj3*sj5);
IkReal x14238=((1.0)*x14225);
IkReal x14239=(r20*x14226);
IkReal x14240=(cj3*x14226);
IkReal x14241=(sj3*x14226);
IkReal x14242=(x14227+x14228);
evalcond[0]=((-1.0)*r02*x14226);
evalcond[1]=(((x14225*x14234))+(((-1.0)*cj5*r20*x14238)));
evalcond[2]=((((-1.0)*x14230))+x14235+((cj3*r02*x14225)));
evalcond[3]=((((-1.0)*r02*sj3*x14238))+x14242);
evalcond[4]=((-1.0)+((x14225*x14232))+(((-1.0)*x14229*x14238)));
evalcond[5]=(((r10*x14237))+(((-1.0)*x14229*x14240))+((x14232*x14240))+((r11*x14231)));
evalcond[6]=((((-1.0)*x14232*x14241))+((r10*x14233))+((x14229*x14241))+((r11*x14236)));
evalcond[7]=(((r21*x14226*x14233))+((r20*x14237))+((r21*x14231))+(((-1.0)*x14236*x14239))+x14242);
evalcond[8]=(((x14231*x14239))+((r20*x14233))+((r21*x14236))+(((-1.0)*x14234*x14241))+(((-1.0)*x14235))+x14230);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14243=(cj5*r10);
IkReal x14244=((1.0)*r11);
CheckValue<IkReal> x14245=IKPowWithIntegerCheck(((((-1.0)*x14243))+((r11*sj5))),-1);
if(!x14245.valid){
continue;
}
CheckValue<IkReal> x14246=IKPowWithIntegerCheck((((sj3*x14243))+(((-1.0)*sj3*sj5*x14244))),-1);
if(!x14246.valid){
continue;
}
if( IKabs(x14245.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14246.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14244)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14245.value)+IKsqr(((x14246.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14244))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14245.value, ((x14246.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14244))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14247=IKsin(j4);
IkReal x14248=IKcos(j4);
IkReal x14249=(cj2*sj1);
IkReal x14250=(cj1*sj2);
IkReal x14251=(cj5*r10);
IkReal x14252=(sj1*sj2);
IkReal x14253=(cj5*sj3);
IkReal x14254=(r11*sj5);
IkReal x14255=(cj3*sj5);
IkReal x14256=(r21*sj5);
IkReal x14257=(cj1*cj2);
IkReal x14258=(cj3*cj5);
IkReal x14259=(sj3*sj5);
IkReal x14260=((1.0)*x14247);
IkReal x14261=(r20*x14248);
IkReal x14262=(cj3*x14248);
IkReal x14263=(sj3*x14248);
IkReal x14264=(x14250+x14249);
evalcond[0]=((-1.0)*r02*x14248);
evalcond[1]=(((x14247*x14256))+(((-1.0)*cj5*r20*x14260)));
evalcond[2]=(((cj3*r02*x14247))+x14257+(((-1.0)*x14252)));
evalcond[3]=((((-1.0)*r02*sj3*x14260))+x14264);
evalcond[4]=((-1.0)+((x14247*x14254))+(((-1.0)*x14251*x14260)));
evalcond[5]=((((-1.0)*x14251*x14262))+((r10*x14259))+((r11*x14253))+((x14254*x14262)));
evalcond[6]=(((x14251*x14263))+(((-1.0)*x14254*x14263))+((r10*x14255))+((r11*x14258)));
evalcond[7]=(((r21*x14253))+((r20*x14259))+((r21*x14248*x14255))+(((-1.0)*x14258*x14261))+x14264);
evalcond[8]=(((r21*x14258))+(((-1.0)*x14256*x14263))+((r20*x14255))+((x14253*x14261))+x14252+(((-1.0)*x14257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14265=((1.0)*r10);
IkReal x14266=(r11*sj5);
CheckValue<IkReal> x14267=IKPowWithIntegerCheck(((((-1.0)*cj5*x14265))+x14266),-1);
if(!x14267.valid){
continue;
}
CheckValue<IkReal> x14268=IKPowWithIntegerCheck((((cj3*x14266))+(((-1.0)*cj3*cj5*x14265))),-1);
if(!x14268.valid){
continue;
}
if( IKabs(x14267.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14268.value)*(((((-1.0)*sj3*sj5*x14265))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14267.value)+IKsqr(((x14268.value)*(((((-1.0)*sj3*sj5*x14265))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14267.value, ((x14268.value)*(((((-1.0)*sj3*sj5*x14265))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14269=IKsin(j4);
IkReal x14270=IKcos(j4);
IkReal x14271=(cj2*sj1);
IkReal x14272=(cj1*sj2);
IkReal x14273=(cj5*r10);
IkReal x14274=(sj1*sj2);
IkReal x14275=(cj5*sj3);
IkReal x14276=(r11*sj5);
IkReal x14277=(cj3*sj5);
IkReal x14278=(r21*sj5);
IkReal x14279=(cj1*cj2);
IkReal x14280=(cj3*cj5);
IkReal x14281=(sj3*sj5);
IkReal x14282=((1.0)*x14269);
IkReal x14283=(r20*x14270);
IkReal x14284=(cj3*x14270);
IkReal x14285=(sj3*x14270);
IkReal x14286=(x14271+x14272);
evalcond[0]=((-1.0)*r02*x14270);
evalcond[1]=(((x14269*x14278))+(((-1.0)*cj5*r20*x14282)));
evalcond[2]=((((-1.0)*x14274))+((cj3*r02*x14269))+x14279);
evalcond[3]=((((-1.0)*r02*sj3*x14282))+x14286);
evalcond[4]=((-1.0)+((x14269*x14276))+(((-1.0)*x14273*x14282)));
evalcond[5]=(((x14276*x14284))+(((-1.0)*x14273*x14284))+((r10*x14281))+((r11*x14275)));
evalcond[6]=(((x14273*x14285))+(((-1.0)*x14276*x14285))+((r11*x14280))+((r10*x14277)));
evalcond[7]=(((r21*x14270*x14277))+((r21*x14275))+(((-1.0)*x14280*x14283))+x14286+((r20*x14281)));
evalcond[8]=((((-1.0)*x14279))+((r21*x14280))+((r20*x14277))+((x14275*x14283))+x14274+(((-1.0)*x14278*x14285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14287=cj5*cj5;
IkReal x14288=((1.0)*cj3);
IkReal x14289=(r10*r21);
IkReal x14290=(cj5*sj5);
IkReal x14291=(r11*r21);
IkReal x14292=(r11*r20);
IkReal x14293=(r22*sj3);
IkReal x14294=(r10*r20);
IkReal x14295=((1.0)*sj3*x14287);
CheckValue<IkReal> x14296 = IKatan2WithCheck(IkReal((((r10*sj5*x14293))+((cj5*r11*x14293)))),IkReal((((sj3*x14290*x14291))+(((-1.0)*x14289*x14295))+(((-1.0)*sj3*x14290*x14294))+((sj3*x14289))+(((-1.0)*x14292*x14295)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14296.valid){
continue;
}
CheckValue<IkReal> x14297=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14288*x14291))+((cj3*x14287*x14291))+((cj3*x14290*x14292))+(((-1.0)*x14287*x14288*x14294))+((cj3*x14289*x14290))+(((-1.0)*r12*r22*x14288)))),-1);
if(!x14297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14296.value)+(((1.5707963267949)*(x14297.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14298=IKsin(j4);
IkReal x14299=IKcos(j4);
IkReal x14300=(cj2*sj1);
IkReal x14301=(cj1*sj2);
IkReal x14302=(cj5*sj3);
IkReal x14303=(cj5*r10);
IkReal x14304=(r00*sj5);
IkReal x14305=(sj1*sj2);
IkReal x14306=(r11*sj5);
IkReal x14307=(cj3*cj5);
IkReal x14308=(cj3*sj5);
IkReal x14309=(r21*sj5);
IkReal x14310=(cj1*cj2);
IkReal x14311=(sj3*sj5);
IkReal x14312=(r01*sj5);
IkReal x14313=((1.0)*x14299);
IkReal x14314=((1.0)*x14298);
IkReal x14315=(cj3*x14298);
IkReal x14316=(cj3*x14299);
IkReal x14317=(x14301+x14300);
evalcond[0]=(((x14298*x14309))+(((-1.0)*r22*x14313))+(((-1.0)*cj5*r20*x14314)));
evalcond[1]=((((-1.0)*r02*x14313))+(((-1.0)*cj5*r00*x14314))+((x14298*x14312)));
evalcond[2]=((-1.0)+((x14298*x14306))+(((-1.0)*x14303*x14314))+(((-1.0)*r12*x14313)));
evalcond[3]=((((-1.0)*cj3*x14303*x14313))+((r11*x14302))+((x14306*x14316))+((r12*x14315))+((r10*x14311)));
evalcond[4]=((((-1.0)*sj3*x14306*x14313))+((r11*x14307))+(((-1.0)*r12*sj3*x14314))+((r10*x14299*x14302))+((r10*x14308)));
evalcond[5]=(((r21*x14299*x14308))+(((-1.0)*r20*x14307*x14313))+((r20*x14311))+x14317+((r21*x14302))+((r22*x14315)));
evalcond[6]=(((r02*x14315))+((r01*x14299*x14308))+((r01*x14302))+(((-1.0)*x14305))+x14310+(((-1.0)*r00*x14307*x14313))+((sj3*x14304)));
evalcond[7]=((((-1.0)*r01*x14311*x14313))+((r01*x14307))+(((-1.0)*r02*sj3*x14314))+((r00*x14299*x14302))+x14317+((cj3*x14304)));
evalcond[8]=(((r20*x14308))+(((-1.0)*sj3*x14309*x14313))+(((-1.0)*x14310))+((r20*x14299*x14302))+x14305+((r21*x14307))+(((-1.0)*r22*sj3*x14314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14318=((1.0)*cj5);
CheckValue<IkReal> x14319 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14318)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14319.valid){
continue;
}
CheckValue<IkReal> x14320=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14318))+(((-1.0)*r20*sj5)))),-1);
if(!x14320.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14319.value)+(((1.5707963267949)*(x14320.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14321=IKsin(j4);
IkReal x14322=IKcos(j4);
IkReal x14323=(cj2*sj1);
IkReal x14324=(cj1*sj2);
IkReal x14325=(cj5*sj3);
IkReal x14326=(cj5*r10);
IkReal x14327=(r00*sj5);
IkReal x14328=(sj1*sj2);
IkReal x14329=(r11*sj5);
IkReal x14330=(cj3*cj5);
IkReal x14331=(cj3*sj5);
IkReal x14332=(r21*sj5);
IkReal x14333=(cj1*cj2);
IkReal x14334=(sj3*sj5);
IkReal x14335=(r01*sj5);
IkReal x14336=((1.0)*x14322);
IkReal x14337=((1.0)*x14321);
IkReal x14338=(cj3*x14321);
IkReal x14339=(cj3*x14322);
IkReal x14340=(x14324+x14323);
evalcond[0]=((((-1.0)*r22*x14336))+(((-1.0)*cj5*r20*x14337))+((x14321*x14332)));
evalcond[1]=((((-1.0)*cj5*r00*x14337))+(((-1.0)*r02*x14336))+((x14321*x14335)));
evalcond[2]=((-1.0)+((x14321*x14329))+(((-1.0)*r12*x14336))+(((-1.0)*x14326*x14337)));
evalcond[3]=(((r12*x14338))+((r11*x14325))+((r10*x14334))+((x14329*x14339))+(((-1.0)*cj3*x14326*x14336)));
evalcond[4]=(((r11*x14330))+((r10*x14322*x14325))+(((-1.0)*sj3*x14329*x14336))+((r10*x14331))+(((-1.0)*r12*sj3*x14337)));
evalcond[5]=((((-1.0)*r20*x14330*x14336))+((r20*x14334))+((r21*x14322*x14331))+((r21*x14325))+((r22*x14338))+x14340);
evalcond[6]=(((r02*x14338))+((r01*x14325))+((r01*x14322*x14331))+((sj3*x14327))+(((-1.0)*r00*x14330*x14336))+x14333+(((-1.0)*x14328)));
evalcond[7]=((((-1.0)*r02*sj3*x14337))+((r01*x14330))+((cj3*x14327))+(((-1.0)*r01*x14334*x14336))+((r00*x14322*x14325))+x14340);
evalcond[8]=(((r20*x14322*x14325))+((r20*x14331))+(((-1.0)*r22*sj3*x14337))+(((-1.0)*sj3*x14332*x14336))+(((-1.0)*x14333))+x14328+((r21*x14330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14341 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14341.valid){
continue;
}
CheckValue<IkReal> x14342=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14341.value)+(((1.5707963267949)*(x14342.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14343=IKsin(j4);
IkReal x14344=IKcos(j4);
IkReal x14345=(cj2*sj1);
IkReal x14346=(cj1*sj2);
IkReal x14347=(cj5*sj3);
IkReal x14348=(cj5*r10);
IkReal x14349=(r00*sj5);
IkReal x14350=(sj1*sj2);
IkReal x14351=(r11*sj5);
IkReal x14352=(cj3*cj5);
IkReal x14353=(cj3*sj5);
IkReal x14354=(r21*sj5);
IkReal x14355=(cj1*cj2);
IkReal x14356=(sj3*sj5);
IkReal x14357=(r01*sj5);
IkReal x14358=((1.0)*x14344);
IkReal x14359=((1.0)*x14343);
IkReal x14360=(cj3*x14343);
IkReal x14361=(cj3*x14344);
IkReal x14362=(x14345+x14346);
evalcond[0]=((((-1.0)*cj5*r20*x14359))+(((-1.0)*r22*x14358))+((x14343*x14354)));
evalcond[1]=((((-1.0)*cj5*r00*x14359))+(((-1.0)*r02*x14358))+((x14343*x14357)));
evalcond[2]=((-1.0)+(((-1.0)*x14348*x14359))+(((-1.0)*r12*x14358))+((x14343*x14351)));
evalcond[3]=(((r11*x14347))+((r10*x14356))+(((-1.0)*cj3*x14348*x14358))+((r12*x14360))+((x14351*x14361)));
evalcond[4]=((((-1.0)*sj3*x14351*x14358))+((r11*x14352))+((r10*x14353))+(((-1.0)*r12*sj3*x14359))+((r10*x14344*x14347)));
evalcond[5]=(((r20*x14356))+((r21*x14347))+(((-1.0)*r20*x14352*x14358))+((r21*x14344*x14353))+x14362+((r22*x14360)));
evalcond[6]=(((r02*x14360))+((r01*x14347))+(((-1.0)*x14350))+(((-1.0)*r00*x14352*x14358))+((r01*x14344*x14353))+((sj3*x14349))+x14355);
evalcond[7]=(((r00*x14344*x14347))+(((-1.0)*r01*x14356*x14358))+((cj3*x14349))+((r01*x14352))+x14362+(((-1.0)*r02*sj3*x14359)));
evalcond[8]=(((r20*x14344*x14347))+(((-1.0)*r22*sj3*x14359))+((r20*x14353))+(((-1.0)*x14355))+(((-1.0)*sj3*x14354*x14358))+((r21*x14352))+x14350);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14363=((-1.0)*r00);
IkReal x14365 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14365)==0){
continue;
}
IkReal x14364=pow(x14365,-0.5);
CheckValue<IkReal> x14366 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14363),IKFAST_ATAN2_MAGTHRESH);
if(!x14366.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14366.value));
IkReal gconst13=(r01*x14364);
IkReal gconst14=(x14363*x14364);
CheckValue<IkReal> x14367 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14367.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14367.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14368=((-1.0)*r00);
IkReal x14369=x14364;
CheckValue<IkReal> x14371 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14368),IKFAST_ATAN2_MAGTHRESH);
if(!x14371.valid){
continue;
}
IkReal x14370=((-1.0)*(x14371.value));
sj5=gconst13;
cj5=gconst14;
j5=x14370;
IkReal gconst12=x14370;
IkReal gconst13=(r01*x14369);
IkReal gconst14=(x14368*x14369);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14372=((1.0)*sj0);
IkReal x14373=((1.0)*cj0);
CheckValue<IkReal> x14374 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14372))+(((-1.0)*r02*x14373)))),IkReal((((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r11*x14372))+(((-1.0)*gconst13*r01*x14373)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14374.valid){
continue;
}
CheckValue<IkReal> x14375=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14374.value)+(((1.5707963267949)*(x14375.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14376=IKsin(j4);
IkReal x14377=IKcos(j4);
IkReal x14378=((1.0)*r22);
IkReal x14379=((1.0)*r12);
IkReal x14380=(gconst13*sj3);
IkReal x14381=(gconst13*r01);
IkReal x14382=(sj1*sj2);
IkReal x14383=(gconst14*sj3);
IkReal x14384=(cj2*sj1);
IkReal x14385=((1.0)*sj0);
IkReal x14386=(cj3*gconst13);
IkReal x14387=(cj3*gconst14);
IkReal x14388=((1.0)*cj0);
IkReal x14389=((1.0)*gconst14);
IkReal x14390=(cj1*sj2);
IkReal x14391=(sj3*x14376);
IkReal x14392=((1.0)*cj1*cj2);
IkReal x14393=(cj3*x14377);
IkReal x14394=(cj3*x14376);
IkReal x14395=(gconst13*x14376);
IkReal x14396=((1.0)*x14377);
IkReal x14397=(x14376*x14389);
evalcond[0]=(((r21*x14395))+(((-1.0)*x14377*x14378))+(((-1.0)*r20*x14397)));
evalcond[1]=(cj0+(((-1.0)*x14377*x14379))+((r11*x14395))+(((-1.0)*r10*x14397)));
evalcond[2]=((((-1.0)*x14385))+((x14376*x14381))+(((-1.0)*r00*x14397))+(((-1.0)*r02*x14396)));
evalcond[3]=(((r20*x14380))+((r21*x14377*x14386))+((r21*x14383))+((r22*x14394))+(((-1.0)*r20*x14387*x14396))+x14384+x14390);
evalcond[4]=(((r20*x14386))+((r20*x14377*x14383))+(((-1.0)*r21*x14380*x14396))+((r21*x14387))+x14382+(((-1.0)*x14392))+(((-1.0)*x14378*x14391)));
evalcond[5]=((((-1.0)*r00*x14387*x14396))+((cj0*x14382))+(((-1.0)*cj1*cj2*x14388))+((r00*x14380))+((r01*x14383))+((r02*x14394))+((x14381*x14393)));
evalcond[6]=((((-1.0)*r10*x14387*x14396))+((sj0*x14382))+(((-1.0)*cj1*cj2*x14385))+((r11*x14377*x14386))+((r12*x14394))+((r10*x14380))+((r11*x14383)));
evalcond[7]=((((-1.0)*x14384*x14388))+((r00*x14386))+((r01*x14387))+(((-1.0)*r01*x14380*x14396))+(((-1.0)*x14388*x14390))+(((-1.0)*r02*x14391))+((r00*x14377*x14383)));
evalcond[8]=((((-1.0)*x14384*x14385))+(((-1.0)*x14379*x14391))+(((-1.0)*r11*x14380*x14396))+((r10*x14386))+((r11*x14387))+(((-1.0)*x14385*x14390))+((r10*x14377*x14383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14398=((1.0)*gconst14);
CheckValue<IkReal> x14399=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x14398)))),-1);
if(!x14399.valid){
continue;
}
CheckValue<IkReal> x14400 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst13*r21*sj0))+(((-1.0)*r20*sj0*x14398)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14399.value)))+(x14400.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14401=IKsin(j4);
IkReal x14402=IKcos(j4);
IkReal x14403=((1.0)*r22);
IkReal x14404=((1.0)*r12);
IkReal x14405=(gconst13*sj3);
IkReal x14406=(gconst13*r01);
IkReal x14407=(sj1*sj2);
IkReal x14408=(gconst14*sj3);
IkReal x14409=(cj2*sj1);
IkReal x14410=((1.0)*sj0);
IkReal x14411=(cj3*gconst13);
IkReal x14412=(cj3*gconst14);
IkReal x14413=((1.0)*cj0);
IkReal x14414=((1.0)*gconst14);
IkReal x14415=(cj1*sj2);
IkReal x14416=(sj3*x14401);
IkReal x14417=((1.0)*cj1*cj2);
IkReal x14418=(cj3*x14402);
IkReal x14419=(cj3*x14401);
IkReal x14420=(gconst13*x14401);
IkReal x14421=((1.0)*x14402);
IkReal x14422=(x14401*x14414);
evalcond[0]=((((-1.0)*x14402*x14403))+((r21*x14420))+(((-1.0)*r20*x14422)));
evalcond[1]=((((-1.0)*r10*x14422))+cj0+((r11*x14420))+(((-1.0)*x14402*x14404)));
evalcond[2]=((((-1.0)*x14410))+((x14401*x14406))+(((-1.0)*r02*x14421))+(((-1.0)*r00*x14422)));
evalcond[3]=(((r21*x14408))+((r22*x14419))+x14415+x14409+(((-1.0)*r20*x14412*x14421))+((r21*x14402*x14411))+((r20*x14405)));
evalcond[4]=((((-1.0)*r21*x14405*x14421))+((r21*x14412))+(((-1.0)*x14417))+((r20*x14402*x14408))+(((-1.0)*x14403*x14416))+x14407+((r20*x14411)));
evalcond[5]=((((-1.0)*cj1*cj2*x14413))+((cj0*x14407))+(((-1.0)*r00*x14412*x14421))+((r02*x14419))+((r01*x14408))+((r00*x14405))+((x14406*x14418)));
evalcond[6]=(((r10*x14405))+(((-1.0)*cj1*cj2*x14410))+(((-1.0)*r10*x14412*x14421))+((r12*x14419))+((sj0*x14407))+((r11*x14408))+((r11*x14402*x14411)));
evalcond[7]=(((r00*x14402*x14408))+(((-1.0)*x14413*x14415))+((r00*x14411))+(((-1.0)*r02*x14416))+((r01*x14412))+(((-1.0)*r01*x14405*x14421))+(((-1.0)*x14409*x14413)));
evalcond[8]=(((r11*x14412))+(((-1.0)*x14404*x14416))+((r10*x14402*x14408))+(((-1.0)*r11*x14405*x14421))+(((-1.0)*x14410*x14415))+(((-1.0)*x14409*x14410))+((r10*x14411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14423=((-1.0)*r01);
IkReal x14425 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14425)==0){
continue;
}
IkReal x14424=pow(x14425,-0.5);
CheckValue<IkReal> x14426 = IKatan2WithCheck(IkReal(x14423),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14426.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14426.value))));
IkReal gconst16=(x14423*x14424);
IkReal gconst17=((1.0)*r00*x14424);
CheckValue<IkReal> x14427 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14427.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14427.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14428=((-1.0)*r01);
CheckValue<IkReal> x14431 = IKatan2WithCheck(IkReal(x14428),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14431.valid){
continue;
}
IkReal x14429=((1.0)*(x14431.value));
IkReal x14430=x14424;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14429)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14429)));
IkReal gconst16=(x14428*x14430);
IkReal gconst17=((1.0)*r00*x14430);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14432=((-1.0)*r01);
CheckValue<IkReal> x14435 = IKatan2WithCheck(IkReal(x14432),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14435.valid){
continue;
}
IkReal x14433=((1.0)*(x14435.value));
IkReal x14434=x14424;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14433)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14433)));
IkReal gconst16=(x14432*x14434);
IkReal gconst17=((1.0)*r00*x14434);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14436=((-1.0)*r01);
CheckValue<IkReal> x14439 = IKatan2WithCheck(IkReal(x14436),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14439.valid){
continue;
}
IkReal x14437=((1.0)*(x14439.value));
IkReal x14438=x14424;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14437)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14437)));
IkReal gconst16=(x14436*x14438);
IkReal gconst17=((1.0)*r00*x14438);
IkReal x14440=r02*r02;
IkReal x14441=(r12*sj0);
IkReal x14442=((1.0)*cj0);
IkReal x14443=x14424;
j4eval[0]=((IKabs(((((-1.0)*x14441))+(((-1.0)*r02*x14442)))))+(IKabs(((((-1.0)*x14442*x14443))+((cj0*x14440*x14443))+((r02*x14441*x14443))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14444=((-1.0)*r01);
CheckValue<IkReal> x14447 = IKatan2WithCheck(IkReal(x14444),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14447.valid){
continue;
}
IkReal x14445=((1.0)*(x14447.value));
IkReal x14446=x14424;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14445)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14445)));
IkReal gconst16=(x14444*x14446);
IkReal gconst17=((1.0)*r00*x14446);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14448=((-1.0)*r01);
CheckValue<IkReal> x14451 = IKatan2WithCheck(IkReal(x14448),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14451.valid){
continue;
}
IkReal x14449=((1.0)*(x14451.value));
IkReal x14450=x14424;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14449)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14449)));
IkReal gconst16=(x14448*x14450);
IkReal gconst17=((1.0)*r00*x14450);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14452=gconst16*gconst16;
IkReal x14453=gconst17*gconst17;
IkReal x14454=(r11*sj3);
IkReal x14455=(cj3*r10);
IkReal x14456=((1.0)*cj3);
IkReal x14457=(r10*sj3);
IkReal x14458=(gconst16*gconst17);
IkReal x14459=(r21*x14452);
IkReal x14460=((1.0)*r20*x14453);
CheckValue<IkReal> x14461=IKPowWithIntegerCheck(IKsign((((cj3*r11*r20*x14458))+(((-1.0)*r11*x14456*x14459))+(((-1.0)*x14455*x14460))+((r21*x14455*x14458))+(((-1.0)*r12*r22*x14456)))),-1);
if(!x14461.valid){
continue;
}
CheckValue<IkReal> x14462 = IKatan2WithCheck(IkReal((((gconst16*r22*x14457))+((gconst17*r22*x14454)))),IkReal(((((-1.0)*r20*x14457*x14458))+((x14457*x14459))+(((-1.0)*x14454*x14460))+((r21*x14454*x14458)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14461.value)))+(x14462.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14463=IKsin(j4);
IkReal x14464=IKcos(j4);
IkReal x14465=(cj2*sj1);
IkReal x14466=(cj1*sj2);
IkReal x14467=(gconst16*r21);
IkReal x14468=(cj3*gconst17);
IkReal x14469=(gconst16*r20);
IkReal x14470=(sj1*sj2);
IkReal x14471=(gconst17*r20);
IkReal x14472=(gconst17*sj3);
IkReal x14473=(gconst16*r10);
IkReal x14474=(cj1*cj2);
IkReal x14475=(gconst16*sj3);
IkReal x14476=((1.0)*x14464);
IkReal x14477=((1.0)*x14463);
IkReal x14478=(gconst16*x14463);
IkReal x14479=(cj3*x14464);
IkReal x14480=(cj3*x14463);
IkReal x14481=(x14465+x14466);
evalcond[0]=((((-1.0)*x14471*x14477))+(((-1.0)*r22*x14476))+((x14463*x14467)));
evalcond[1]=((((-1.0)*gconst17*r00*x14477))+((r01*x14478))+(((-1.0)*r02*x14476)));
evalcond[2]=((-1.0)+((r11*x14478))+(((-1.0)*r12*x14476))+(((-1.0)*gconst17*r10*x14477)));
evalcond[3]=(((gconst16*r11*x14479))+((sj3*x14473))+((r12*x14480))+(((-1.0)*r10*x14468*x14476))+((r11*x14472)));
evalcond[4]=((((-1.0)*r11*x14475*x14476))+(((-1.0)*r12*sj3*x14477))+((r10*x14464*x14472))+((r11*x14468))+((cj3*x14473)));
evalcond[5]=(((sj3*x14469))+((r21*x14472))+((r22*x14480))+(((-1.0)*r20*x14468*x14476))+x14481+((x14467*x14479)));
evalcond[6]=(((gconst16*r01*x14479))+((r00*x14475))+((r02*x14480))+((r01*x14472))+(((-1.0)*x14470))+x14474+(((-1.0)*r00*x14468*x14476)));
evalcond[7]=(((r01*x14468))+(((-1.0)*r02*sj3*x14477))+x14481+((r00*x14464*x14472))+((cj3*gconst16*r00))+(((-1.0)*r01*x14475*x14476)));
evalcond[8]=(((cj3*x14469))+(((-1.0)*sj3*x14467*x14476))+((r21*x14468))+(((-1.0)*r22*sj3*x14477))+(((-1.0)*x14474))+((sj3*x14464*x14471))+x14470);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14482=((1.0)*gconst17);
CheckValue<IkReal> x14483 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst16*r01))+(((-1.0)*r00*x14482)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14483.valid){
continue;
}
CheckValue<IkReal> x14484=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x14482)))),-1);
if(!x14484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14483.value)+(((1.5707963267949)*(x14484.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14485=IKsin(j4);
IkReal x14486=IKcos(j4);
IkReal x14487=(cj2*sj1);
IkReal x14488=(cj1*sj2);
IkReal x14489=(gconst16*r21);
IkReal x14490=(cj3*gconst17);
IkReal x14491=(gconst16*r20);
IkReal x14492=(sj1*sj2);
IkReal x14493=(gconst17*r20);
IkReal x14494=(gconst17*sj3);
IkReal x14495=(gconst16*r10);
IkReal x14496=(cj1*cj2);
IkReal x14497=(gconst16*sj3);
IkReal x14498=((1.0)*x14486);
IkReal x14499=((1.0)*x14485);
IkReal x14500=(gconst16*x14485);
IkReal x14501=(cj3*x14486);
IkReal x14502=(cj3*x14485);
IkReal x14503=(x14487+x14488);
evalcond[0]=((((-1.0)*r22*x14498))+((x14485*x14489))+(((-1.0)*x14493*x14499)));
evalcond[1]=((((-1.0)*r02*x14498))+((r01*x14500))+(((-1.0)*gconst17*r00*x14499)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14499))+(((-1.0)*r12*x14498))+((r11*x14500)));
evalcond[3]=(((r11*x14494))+((gconst16*r11*x14501))+((sj3*x14495))+(((-1.0)*r10*x14490*x14498))+((r12*x14502)));
evalcond[4]=(((r11*x14490))+(((-1.0)*r11*x14497*x14498))+((r10*x14486*x14494))+((cj3*x14495))+(((-1.0)*r12*sj3*x14499)));
evalcond[5]=(((r21*x14494))+((sj3*x14491))+((r22*x14502))+((x14489*x14501))+x14503+(((-1.0)*r20*x14490*x14498)));
evalcond[6]=((((-1.0)*x14492))+((r02*x14502))+(((-1.0)*r00*x14490*x14498))+((gconst16*r01*x14501))+x14496+((r00*x14497))+((r01*x14494)));
evalcond[7]=((((-1.0)*r01*x14497*x14498))+(((-1.0)*r02*sj3*x14499))+x14503+((r00*x14486*x14494))+((r01*x14490))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14496))+((r21*x14490))+((sj3*x14486*x14493))+(((-1.0)*sj3*x14489*x14498))+x14492+((cj3*x14491))+(((-1.0)*r22*sj3*x14499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14504=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14504.valid){
continue;
}
CheckValue<IkReal> x14505 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14504.value)))+(x14505.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14506=IKsin(j4);
IkReal x14507=IKcos(j4);
IkReal x14508=(cj2*sj1);
IkReal x14509=(cj1*sj2);
IkReal x14510=(gconst16*r21);
IkReal x14511=(cj3*gconst17);
IkReal x14512=(gconst16*r20);
IkReal x14513=(sj1*sj2);
IkReal x14514=(gconst17*r20);
IkReal x14515=(gconst17*sj3);
IkReal x14516=(gconst16*r10);
IkReal x14517=(cj1*cj2);
IkReal x14518=(gconst16*sj3);
IkReal x14519=((1.0)*x14507);
IkReal x14520=((1.0)*x14506);
IkReal x14521=(gconst16*x14506);
IkReal x14522=(cj3*x14507);
IkReal x14523=(cj3*x14506);
IkReal x14524=(x14509+x14508);
evalcond[0]=((((-1.0)*r22*x14519))+(((-1.0)*x14514*x14520))+((x14506*x14510)));
evalcond[1]=((((-1.0)*gconst17*r00*x14520))+((r01*x14521))+(((-1.0)*r02*x14519)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14520))+((r11*x14521))+(((-1.0)*r12*x14519)));
evalcond[3]=(((sj3*x14516))+(((-1.0)*r10*x14511*x14519))+((r11*x14515))+((r12*x14523))+((gconst16*r11*x14522)));
evalcond[4]=((((-1.0)*r11*x14518*x14519))+(((-1.0)*r12*sj3*x14520))+((r10*x14507*x14515))+((cj3*x14516))+((r11*x14511)));
evalcond[5]=(((r22*x14523))+(((-1.0)*r20*x14511*x14519))+((sj3*x14512))+x14524+((r21*x14515))+((x14510*x14522)));
evalcond[6]=(((gconst16*r01*x14522))+((r00*x14518))+((r01*x14515))+x14517+(((-1.0)*r00*x14511*x14519))+((r02*x14523))+(((-1.0)*x14513)));
evalcond[7]=(((r01*x14511))+(((-1.0)*r01*x14518*x14519))+x14524+(((-1.0)*r02*sj3*x14520))+((cj3*gconst16*r00))+((r00*x14507*x14515)));
evalcond[8]=(((cj3*x14512))+(((-1.0)*sj3*x14510*x14519))+x14513+(((-1.0)*r22*sj3*x14520))+((r21*x14511))+((sj3*x14507*x14514))+(((-1.0)*x14517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14525=((-1.0)*r01);
CheckValue<IkReal> x14528 = IKatan2WithCheck(IkReal(x14525),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14528.valid){
continue;
}
IkReal x14526=((1.0)*(x14528.value));
IkReal x14527=x14424;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14526)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14526)));
IkReal gconst16=(x14525*x14527);
IkReal gconst17=((1.0)*r00*x14527);
IkReal x14529=r02*r02;
IkReal x14530=(r12*sj0);
IkReal x14531=((1.0)*cj0);
IkReal x14532=x14424;
j4eval[0]=((IKabs(((((-1.0)*x14531*x14532))+((r02*x14530*x14532))+((cj0*x14529*x14532)))))+(IKabs(((((-1.0)*x14530))+(((-1.0)*r02*x14531))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14533=((1.0)*r12);
IkReal x14534=(sj1*sj2);
IkReal x14535=(cj1*cj2);
IkReal x14536=((1.0)*sj3);
IkReal x14537=(gconst16*r21);
IkReal x14538=(cj3*gconst16*r20);
IkReal x14539=(gconst17*r20*sj3);
IkReal x14540=(cj3*gconst17*r21);
CheckValue<IkReal> x14541=IKPowWithIntegerCheck(((((-1.0)*r10*r20*x14536*(gconst17*gconst17)))+(((-1.0)*gconst16*r11*x14536*x14537))+((gconst17*r10*sj3*x14537))+((gconst16*r11*x14539))),-1);
if(!x14541.valid){
continue;
}
CheckValue<IkReal> x14542=IKPowWithIntegerCheck((x14539+(((-1.0)*x14536*x14537))),-1);
if(!x14542.valid){
continue;
}
if( IKabs(((x14541.value)*((((cj0*sj3*x14537))+((r12*x14535))+(((-1.0)*cj0*gconst17*r20*x14536))+(((-1.0)*x14533*x14540))+(((-1.0)*x14533*x14538))+(((-1.0)*x14533*x14534)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14542.value)*(((((-1.0)*x14534))+(((-1.0)*x14538))+(((-1.0)*x14540))+x14535)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14541.value)*((((cj0*sj3*x14537))+((r12*x14535))+(((-1.0)*cj0*gconst17*r20*x14536))+(((-1.0)*x14533*x14540))+(((-1.0)*x14533*x14538))+(((-1.0)*x14533*x14534))))))+IKsqr(((x14542.value)*(((((-1.0)*x14534))+(((-1.0)*x14538))+(((-1.0)*x14540))+x14535))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14541.value)*((((cj0*sj3*x14537))+((r12*x14535))+(((-1.0)*cj0*gconst17*r20*x14536))+(((-1.0)*x14533*x14540))+(((-1.0)*x14533*x14538))+(((-1.0)*x14533*x14534))))), ((x14542.value)*(((((-1.0)*x14534))+(((-1.0)*x14538))+(((-1.0)*x14540))+x14535))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14543=IKsin(j4);
IkReal x14544=IKcos(j4);
IkReal x14545=((1.0)*gconst17);
IkReal x14546=(gconst17*sj3);
IkReal x14547=(gconst16*r21);
IkReal x14548=(cj3*gconst17);
IkReal x14549=(sj1*sj2);
IkReal x14550=((1.0)*sj0);
IkReal x14551=(gconst16*sj3);
IkReal x14552=(cj3*gconst16);
IkReal x14553=(cj2*sj1);
IkReal x14554=((1.0)*cj0);
IkReal x14555=((1.0)*sj3);
IkReal x14556=(cj1*sj2);
IkReal x14557=(cj3*x14544);
IkReal x14558=(gconst16*x14543);
IkReal x14559=((1.0)*x14544);
IkReal x14560=((1.0)*cj1*cj2);
IkReal x14561=(r02*x14543);
IkReal x14562=(r12*x14543);
evalcond[0]=((((-1.0)*r20*x14543*x14545))+((x14543*x14547)));
evalcond[1]=(cj0+(((-1.0)*r12*x14559))+((r11*x14558))+(((-1.0)*r10*x14543*x14545)));
evalcond[2]=((((-1.0)*r02*x14559))+(((-1.0)*x14550))+((r01*x14558))+(((-1.0)*r00*x14543*x14545)));
evalcond[3]=(((r20*x14551))+((r21*x14546))+x14553+x14556+(((-1.0)*r20*x14545*x14557))+((x14547*x14557)));
evalcond[4]=(((r20*x14552))+((r21*x14548))+(((-1.0)*x14560))+(((-1.0)*x14544*x14547*x14555))+x14549+((r20*x14544*x14546)));
evalcond[5]=(((r01*x14546))+(((-1.0)*cj1*cj2*x14554))+((cj0*x14549))+((cj3*x14561))+(((-1.0)*r00*x14545*x14557))+((r00*x14551))+((r01*x14544*x14552)));
evalcond[6]=(((sj0*x14549))+((r11*x14546))+(((-1.0)*cj1*cj2*x14550))+((r11*x14544*x14552))+(((-1.0)*r10*x14545*x14557))+((cj3*x14562))+((r10*x14551)));
evalcond[7]=((((-1.0)*x14554*x14556))+(((-1.0)*r01*x14551*x14559))+((r01*x14548))+(((-1.0)*x14553*x14554))+((r00*x14544*x14546))+(((-1.0)*x14555*x14561))+((r00*x14552)));
evalcond[8]=(((r11*x14548))+(((-1.0)*x14550*x14556))+(((-1.0)*x14550*x14553))+((r10*x14544*x14546))+((r10*x14552))+(((-1.0)*r11*x14551*x14559))+(((-1.0)*x14555*x14562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14563=((1.0)*sj0);
IkReal x14564=((1.0)*cj0);
CheckValue<IkReal> x14565=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14565.valid){
continue;
}
CheckValue<IkReal> x14566 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14564))+(((-1.0)*r12*x14563)))),IkReal(((((-1.0)*gconst16*r01*x14564))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14563)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14565.value)))+(x14566.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14567=IKsin(j4);
IkReal x14568=IKcos(j4);
IkReal x14569=((1.0)*gconst17);
IkReal x14570=(gconst17*sj3);
IkReal x14571=(gconst16*r21);
IkReal x14572=(cj3*gconst17);
IkReal x14573=(sj1*sj2);
IkReal x14574=((1.0)*sj0);
IkReal x14575=(gconst16*sj3);
IkReal x14576=(cj3*gconst16);
IkReal x14577=(cj2*sj1);
IkReal x14578=((1.0)*cj0);
IkReal x14579=((1.0)*sj3);
IkReal x14580=(cj1*sj2);
IkReal x14581=(cj3*x14568);
IkReal x14582=(gconst16*x14567);
IkReal x14583=((1.0)*x14568);
IkReal x14584=((1.0)*cj1*cj2);
IkReal x14585=(r02*x14567);
IkReal x14586=(r12*x14567);
evalcond[0]=(((x14567*x14571))+(((-1.0)*r20*x14567*x14569)));
evalcond[1]=(cj0+(((-1.0)*r12*x14583))+(((-1.0)*r10*x14567*x14569))+((r11*x14582)));
evalcond[2]=((((-1.0)*r02*x14583))+(((-1.0)*x14574))+(((-1.0)*r00*x14567*x14569))+((r01*x14582)));
evalcond[3]=(((r21*x14570))+((r20*x14575))+((x14571*x14581))+x14577+x14580+(((-1.0)*r20*x14569*x14581)));
evalcond[4]=(((r21*x14572))+((r20*x14576))+(((-1.0)*x14584))+((r20*x14568*x14570))+x14573+(((-1.0)*x14568*x14571*x14579)));
evalcond[5]=(((cj3*x14585))+((cj0*x14573))+(((-1.0)*r00*x14569*x14581))+(((-1.0)*cj1*cj2*x14578))+((r01*x14568*x14576))+((r01*x14570))+((r00*x14575)));
evalcond[6]=(((cj3*x14586))+(((-1.0)*r10*x14569*x14581))+(((-1.0)*cj1*cj2*x14574))+((r11*x14568*x14576))+((r11*x14570))+((sj0*x14573))+((r10*x14575)));
evalcond[7]=((((-1.0)*x14578*x14580))+(((-1.0)*x14577*x14578))+((r00*x14568*x14570))+(((-1.0)*r01*x14575*x14583))+((r01*x14572))+((r00*x14576))+(((-1.0)*x14579*x14585)));
evalcond[8]=(((r10*x14568*x14570))+(((-1.0)*x14574*x14577))+(((-1.0)*r11*x14575*x14583))+((r11*x14572))+((r10*x14576))+(((-1.0)*x14574*x14580))+(((-1.0)*x14579*x14586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14587=((1.0)*sj0);
IkReal x14588=((1.0)*cj0);
CheckValue<IkReal> x14589=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14589.valid){
continue;
}
CheckValue<IkReal> x14590 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14588))+(((-1.0)*r12*x14587)))),IkReal(((((-1.0)*gconst16*r01*x14588))+(((-1.0)*gconst16*r11*x14587))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14589.value)))+(x14590.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14591=IKsin(j4);
IkReal x14592=IKcos(j4);
IkReal x14593=(cj3*gconst17);
IkReal x14594=(gconst16*r21);
IkReal x14595=(gconst17*sj3);
IkReal x14596=(gconst16*r20);
IkReal x14597=(sj1*sj2);
IkReal x14598=(gconst16*r10);
IkReal x14599=(cj2*sj1);
IkReal x14600=(gconst16*sj3);
IkReal x14601=((1.0)*cj0);
IkReal x14602=((1.0)*sj0);
IkReal x14603=(cj1*sj2);
IkReal x14604=((1.0)*x14592);
IkReal x14605=(gconst16*x14591);
IkReal x14606=(cj3*x14592);
IkReal x14607=(cj3*x14591);
IkReal x14608=((1.0)*cj1*cj2);
IkReal x14609=((1.0)*gconst17*x14591);
IkReal x14610=((1.0)*sj3*x14591);
evalcond[0]=((((-1.0)*r20*x14609))+((x14591*x14594))+(((-1.0)*r22*x14604)));
evalcond[1]=(cj0+(((-1.0)*r10*x14609))+(((-1.0)*r12*x14604))+((r11*x14605)));
evalcond[2]=(((r01*x14605))+(((-1.0)*r00*x14609))+(((-1.0)*r02*x14604))+(((-1.0)*x14602)));
evalcond[3]=((((-1.0)*r20*x14593*x14604))+((x14594*x14606))+((r21*x14595))+x14599+((r22*x14607))+x14603+((sj3*x14596)));
evalcond[4]=(((cj3*x14596))+(((-1.0)*r22*x14610))+((r21*x14593))+x14597+(((-1.0)*sj3*x14594*x14604))+((r20*x14592*x14595))+(((-1.0)*x14608)));
evalcond[5]=(((r02*x14607))+(((-1.0)*r00*x14593*x14604))+((gconst16*r01*x14606))+(((-1.0)*cj1*cj2*x14601))+((r00*x14600))+((r01*x14595))+((cj0*x14597)));
evalcond[6]=(((gconst16*r11*x14606))+((sj0*x14597))+(((-1.0)*cj1*cj2*x14602))+(((-1.0)*r10*x14593*x14604))+((sj3*x14598))+((r11*x14595))+((r12*x14607)));
evalcond[7]=((((-1.0)*x14599*x14601))+((r00*x14592*x14595))+((r01*x14593))+(((-1.0)*r01*x14600*x14604))+(((-1.0)*r02*x14610))+(((-1.0)*x14601*x14603))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14599*x14602))+((cj3*x14598))+((r10*x14592*x14595))+(((-1.0)*r12*x14610))+(((-1.0)*r11*x14600*x14604))+(((-1.0)*x14602*x14603))+((r11*x14593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14611=((1.0)*gconst17);
CheckValue<IkReal> x14612 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x14611)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14612.valid){
continue;
}
CheckValue<IkReal> x14613=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14611)))),-1);
if(!x14613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14612.value)+(((1.5707963267949)*(x14613.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14614=IKsin(j4);
IkReal x14615=IKcos(j4);
IkReal x14616=(cj3*gconst17);
IkReal x14617=(gconst16*r21);
IkReal x14618=(gconst17*sj3);
IkReal x14619=(gconst16*r20);
IkReal x14620=(sj1*sj2);
IkReal x14621=(gconst16*r10);
IkReal x14622=(cj2*sj1);
IkReal x14623=(gconst16*sj3);
IkReal x14624=((1.0)*cj0);
IkReal x14625=((1.0)*sj0);
IkReal x14626=(cj1*sj2);
IkReal x14627=((1.0)*x14615);
IkReal x14628=(gconst16*x14614);
IkReal x14629=(cj3*x14615);
IkReal x14630=(cj3*x14614);
IkReal x14631=((1.0)*cj1*cj2);
IkReal x14632=((1.0)*gconst17*x14614);
IkReal x14633=((1.0)*sj3*x14614);
evalcond[0]=((((-1.0)*r20*x14632))+((x14614*x14617))+(((-1.0)*r22*x14627)));
evalcond[1]=(cj0+((r11*x14628))+(((-1.0)*r12*x14627))+(((-1.0)*r10*x14632)));
evalcond[2]=((((-1.0)*r02*x14627))+(((-1.0)*x14625))+(((-1.0)*r00*x14632))+((r01*x14628)));
evalcond[3]=(((r22*x14630))+(((-1.0)*r20*x14616*x14627))+((r21*x14618))+((x14617*x14629))+x14626+x14622+((sj3*x14619)));
evalcond[4]=((((-1.0)*r22*x14633))+((r20*x14615*x14618))+((r21*x14616))+(((-1.0)*x14631))+((cj3*x14619))+x14620+(((-1.0)*sj3*x14617*x14627)));
evalcond[5]=(((gconst16*r01*x14629))+((r02*x14630))+((r01*x14618))+(((-1.0)*r00*x14616*x14627))+((cj0*x14620))+((r00*x14623))+(((-1.0)*cj1*cj2*x14624)));
evalcond[6]=(((sj3*x14621))+(((-1.0)*r10*x14616*x14627))+((gconst16*r11*x14629))+((r12*x14630))+((r11*x14618))+(((-1.0)*cj1*cj2*x14625))+((sj0*x14620)));
evalcond[7]=((((-1.0)*r01*x14623*x14627))+(((-1.0)*x14622*x14624))+((r01*x14616))+((cj3*gconst16*r00))+(((-1.0)*x14624*x14626))+(((-1.0)*r02*x14633))+((r00*x14615*x14618)));
evalcond[8]=(((cj3*x14621))+((r10*x14615*x14618))+(((-1.0)*x14622*x14625))+(((-1.0)*r11*x14623*x14627))+(((-1.0)*x14625*x14626))+((r11*x14616))+(((-1.0)*r12*x14633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14634=((1.0)*gconst17);
CheckValue<IkReal> x14635=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14634)))),-1);
if(!x14635.valid){
continue;
}
CheckValue<IkReal> x14636 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14634))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14635.value)))+(x14636.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14637=IKsin(j4);
IkReal x14638=IKcos(j4);
IkReal x14639=(cj3*gconst17);
IkReal x14640=(gconst16*r21);
IkReal x14641=(gconst17*sj3);
IkReal x14642=(gconst16*r20);
IkReal x14643=(sj1*sj2);
IkReal x14644=(gconst16*r10);
IkReal x14645=(cj2*sj1);
IkReal x14646=(gconst16*sj3);
IkReal x14647=((1.0)*cj0);
IkReal x14648=((1.0)*sj0);
IkReal x14649=(cj1*sj2);
IkReal x14650=((1.0)*x14638);
IkReal x14651=(gconst16*x14637);
IkReal x14652=(cj3*x14638);
IkReal x14653=(cj3*x14637);
IkReal x14654=((1.0)*cj1*cj2);
IkReal x14655=((1.0)*gconst17*x14637);
IkReal x14656=((1.0)*sj3*x14637);
evalcond[0]=((((-1.0)*r22*x14650))+(((-1.0)*r20*x14655))+((x14637*x14640)));
evalcond[1]=(cj0+(((-1.0)*r12*x14650))+(((-1.0)*r10*x14655))+((r11*x14651)));
evalcond[2]=(((r01*x14651))+(((-1.0)*r02*x14650))+(((-1.0)*x14648))+(((-1.0)*r00*x14655)));
evalcond[3]=((((-1.0)*r20*x14639*x14650))+((r22*x14653))+((x14640*x14652))+((sj3*x14642))+((r21*x14641))+x14645+x14649);
evalcond[4]=(((r20*x14638*x14641))+(((-1.0)*r22*x14656))+x14643+(((-1.0)*x14654))+(((-1.0)*sj3*x14640*x14650))+((r21*x14639))+((cj3*x14642)));
evalcond[5]=(((gconst16*r01*x14652))+((cj0*x14643))+(((-1.0)*r00*x14639*x14650))+((r01*x14641))+((r00*x14646))+(((-1.0)*cj1*cj2*x14647))+((r02*x14653)));
evalcond[6]=(((r11*x14641))+((r12*x14653))+((sj0*x14643))+(((-1.0)*r10*x14639*x14650))+(((-1.0)*cj1*cj2*x14648))+((sj3*x14644))+((gconst16*r11*x14652)));
evalcond[7]=((((-1.0)*r01*x14646*x14650))+(((-1.0)*r02*x14656))+((r01*x14639))+((r00*x14638*x14641))+(((-1.0)*x14645*x14647))+((cj3*gconst16*r00))+(((-1.0)*x14647*x14649)));
evalcond[8]=(((r10*x14638*x14641))+(((-1.0)*r11*x14646*x14650))+(((-1.0)*r12*x14656))+((r11*x14639))+(((-1.0)*x14645*x14648))+(((-1.0)*x14648*x14649))+((cj3*x14644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14657=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14657;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14657);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14658=((1.0)*cj5);
IkReal x14659=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14658)));
j4eval[0]=x14659;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14658)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14659);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14660=cj5*cj5;
IkReal x14661=(cj3*r01);
IkReal x14662=(cj5*sj5);
IkReal x14663=((1.0)*cj3);
IkReal x14664=((((-1.0)*r00*r20*x14660*x14663))+((cj3*r00*r21*x14662))+(((-1.0)*r21*x14661))+((r21*x14660*x14661))+((r20*x14661*x14662))+(((-1.0)*r02*r22*x14663)));
j4eval[0]=x14664;
j4eval[1]=IKsign(x14664);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14665=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14665;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14665);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14666=((1.0)*cj5);
IkReal x14667=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14666)));
j4eval[0]=x14667;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14666)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14667);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14668=cj5*cj5;
IkReal x14669=r01*r01;
IkReal x14670=(r01*sj5);
IkReal x14671=(cj5*r00);
IkReal x14672=((((-1.0)*x14668*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x14669))+((x14668*x14669))+(((2.0)*x14670*x14671)));
j4eval[0]=x14672;
j4eval[1]=IKsign(x14672);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14670))+x14671))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14673=cj5*cj5;
IkReal x14674=r01*r01;
IkReal x14675=(r01*sj5);
IkReal x14676=(cj5*r00);
CheckValue<IkReal> x14677 = IKatan2WithCheck(IkReal(((((-1.0)*x14675))+x14676)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14677.valid){
continue;
}
CheckValue<IkReal> x14678=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x14674))+(((2.0)*x14675*x14676))+((x14673*x14674))+(((-1.0)*x14673*(r00*r00))))),-1);
if(!x14678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14677.value)+(((1.5707963267949)*(x14678.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14679=IKsin(j4);
IkReal x14680=IKcos(j4);
IkReal x14681=(cj5*r10);
IkReal x14682=(r01*sj5);
IkReal x14683=((1.0)*cj2);
IkReal x14684=(cj5*r00);
IkReal x14685=(cj5*r20);
IkReal x14686=((1.0)*x14680);
IkReal x14687=((1.0)*x14679);
IkReal x14688=(sj5*x14679);
evalcond[0]=((((-1.0)*x14685*x14687))+(((-1.0)*r22*x14686))+((r21*x14688)));
evalcond[1]=(((r11*x14688))+(((-1.0)*x14681*x14687))+(((-1.0)*r12*x14686)));
evalcond[2]=(((x14680*x14684))+(((-1.0)*x14682*x14686))+(((-1.0)*r02*x14687)));
evalcond[3]=((-1.0)+(((-1.0)*x14684*x14687))+((x14679*x14682))+(((-1.0)*r02*x14686)));
evalcond[4]=((((-1.0)*cj1*x14683))+(((-1.0)*r21*sj5*x14686))+((x14680*x14685))+((sj1*sj2))+(((-1.0)*r22*x14687)));
evalcond[5]=(((x14680*x14681))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14683))+(((-1.0)*r11*sj5*x14686))+(((-1.0)*r12*x14687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14689=((1.0)*cj5);
CheckValue<IkReal> x14690=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14689)))),-1);
if(!x14690.valid){
continue;
}
CheckValue<IkReal> x14691 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14689)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14690.value)))+(x14691.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14692=IKsin(j4);
IkReal x14693=IKcos(j4);
IkReal x14694=(cj5*r10);
IkReal x14695=(r01*sj5);
IkReal x14696=((1.0)*cj2);
IkReal x14697=(cj5*r00);
IkReal x14698=(cj5*r20);
IkReal x14699=((1.0)*x14693);
IkReal x14700=((1.0)*x14692);
IkReal x14701=(sj5*x14692);
evalcond[0]=((((-1.0)*x14698*x14700))+((r21*x14701))+(((-1.0)*r22*x14699)));
evalcond[1]=((((-1.0)*x14694*x14700))+((r11*x14701))+(((-1.0)*r12*x14699)));
evalcond[2]=(((x14693*x14697))+(((-1.0)*x14695*x14699))+(((-1.0)*r02*x14700)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14699))+(((-1.0)*x14697*x14700))+((x14692*x14695)));
evalcond[4]=((((-1.0)*r21*sj5*x14699))+(((-1.0)*cj1*x14696))+((x14693*x14698))+((sj1*sj2))+(((-1.0)*r22*x14700)));
evalcond[5]=(((x14693*x14694))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x14700))+(((-1.0)*r11*sj5*x14699))+(((-1.0)*sj1*x14696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14702=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14702.valid){
continue;
}
CheckValue<IkReal> x14703 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14702.value)))+(x14703.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14704=IKsin(j4);
IkReal x14705=IKcos(j4);
IkReal x14706=(cj5*r10);
IkReal x14707=(r01*sj5);
IkReal x14708=((1.0)*cj2);
IkReal x14709=(cj5*r00);
IkReal x14710=(cj5*r20);
IkReal x14711=((1.0)*x14705);
IkReal x14712=((1.0)*x14704);
IkReal x14713=(sj5*x14704);
evalcond[0]=(((r21*x14713))+(((-1.0)*r22*x14711))+(((-1.0)*x14710*x14712)));
evalcond[1]=(((r11*x14713))+(((-1.0)*x14706*x14712))+(((-1.0)*r12*x14711)));
evalcond[2]=(((x14705*x14709))+(((-1.0)*x14707*x14711))+(((-1.0)*r02*x14712)));
evalcond[3]=((-1.0)+((x14704*x14707))+(((-1.0)*r02*x14711))+(((-1.0)*x14709*x14712)));
evalcond[4]=((((-1.0)*r22*x14712))+((sj1*sj2))+(((-1.0)*cj1*x14708))+((x14705*x14710))+(((-1.0)*r21*sj5*x14711)));
evalcond[5]=(((x14705*x14706))+(((-1.0)*r11*sj5*x14711))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14708))+(((-1.0)*r12*x14712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14714=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14714;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14714);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14715=((1.0)*cj5);
IkReal x14716=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14715)));
j4eval[0]=x14716;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14715)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14716);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14717=cj5*cj5;
IkReal x14718=r01*r01;
IkReal x14719=(cj5*r00);
IkReal x14720=(r01*sj5);
IkReal x14721=((((-2.0)*x14719*x14720))+((x14717*(r00*r00)))+x14718+(r02*r02)+(((-1.0)*x14717*x14718)));
j4eval[0]=x14721;
j4eval[1]=IKsign(x14721);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14719))+x14720))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14722=cj5*cj5;
IkReal x14723=r01*r01;
IkReal x14724=(r01*sj5);
IkReal x14725=(cj5*r00);
CheckValue<IkReal> x14726=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14722*x14723))+((x14722*(r00*r00)))+x14723+(r02*r02)+(((-2.0)*x14724*x14725)))),-1);
if(!x14726.valid){
continue;
}
CheckValue<IkReal> x14727 = IKatan2WithCheck(IkReal(((((-1.0)*x14725))+x14724)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14726.value)))+(x14727.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14728=IKcos(j4);
IkReal x14729=IKsin(j4);
IkReal x14730=(cj5*r00);
IkReal x14731=(cj5*r10);
IkReal x14732=(r21*sj5);
IkReal x14733=((1.0)*cj2);
IkReal x14734=(cj5*r20);
IkReal x14735=((1.0)*x14728);
IkReal x14736=((1.0)*x14729);
IkReal x14737=(sj5*x14729);
IkReal x14738=(sj5*x14728);
evalcond[0]=(((r01*x14738))+((r02*x14729))+(((-1.0)*x14730*x14735)));
evalcond[1]=((((-1.0)*r22*x14735))+(((-1.0)*x14734*x14736))+((x14729*x14732)));
evalcond[2]=((((-1.0)*r12*x14735))+((r11*x14737))+(((-1.0)*x14731*x14736)));
evalcond[3]=((-1.0)+((r01*x14737))+(((-1.0)*r02*x14735))+(((-1.0)*x14730*x14736)));
evalcond[4]=(((x14728*x14732))+((sj1*sj2))+((r22*x14729))+(((-1.0)*cj1*x14733))+(((-1.0)*x14734*x14735)));
evalcond[5]=((((-1.0)*sj1*x14733))+(((-1.0)*cj1*sj2))+((r11*x14738))+(((-1.0)*x14731*x14735))+((r12*x14729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14739=((1.0)*cj5);
CheckValue<IkReal> x14740=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14739))+(((-1.0)*r10*sj5)))),-1);
if(!x14740.valid){
continue;
}
CheckValue<IkReal> x14741 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14739))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14740.value)))+(x14741.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14742=IKcos(j4);
IkReal x14743=IKsin(j4);
IkReal x14744=(cj5*r00);
IkReal x14745=(cj5*r10);
IkReal x14746=(r21*sj5);
IkReal x14747=((1.0)*cj2);
IkReal x14748=(cj5*r20);
IkReal x14749=((1.0)*x14742);
IkReal x14750=((1.0)*x14743);
IkReal x14751=(sj5*x14743);
IkReal x14752=(sj5*x14742);
evalcond[0]=((((-1.0)*x14744*x14749))+((r01*x14752))+((r02*x14743)));
evalcond[1]=(((x14743*x14746))+(((-1.0)*r22*x14749))+(((-1.0)*x14748*x14750)));
evalcond[2]=((((-1.0)*x14745*x14750))+(((-1.0)*r12*x14749))+((r11*x14751)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14749))+(((-1.0)*x14744*x14750))+((r01*x14751)));
evalcond[4]=(((r22*x14743))+((x14742*x14746))+((sj1*sj2))+(((-1.0)*x14748*x14749))+(((-1.0)*cj1*x14747)));
evalcond[5]=(((r12*x14743))+(((-1.0)*cj1*sj2))+(((-1.0)*x14745*x14749))+(((-1.0)*sj1*x14747))+((r11*x14752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14753=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14753.valid){
continue;
}
CheckValue<IkReal> x14754 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14753.value)))+(x14754.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14755=IKcos(j4);
IkReal x14756=IKsin(j4);
IkReal x14757=(cj5*r00);
IkReal x14758=(cj5*r10);
IkReal x14759=(r21*sj5);
IkReal x14760=((1.0)*cj2);
IkReal x14761=(cj5*r20);
IkReal x14762=((1.0)*x14755);
IkReal x14763=((1.0)*x14756);
IkReal x14764=(sj5*x14756);
IkReal x14765=(sj5*x14755);
evalcond[0]=((((-1.0)*x14757*x14762))+((r01*x14765))+((r02*x14756)));
evalcond[1]=(((x14756*x14759))+(((-1.0)*r22*x14762))+(((-1.0)*x14761*x14763)));
evalcond[2]=((((-1.0)*x14758*x14763))+(((-1.0)*r12*x14762))+((r11*x14764)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14762))+(((-1.0)*x14757*x14763))+((r01*x14764)));
evalcond[4]=(((x14755*x14759))+((sj1*sj2))+(((-1.0)*cj1*x14760))+((r22*x14756))+(((-1.0)*x14761*x14762)));
evalcond[5]=((((-1.0)*x14758*x14762))+(((-1.0)*sj1*x14760))+(((-1.0)*cj1*sj2))+((r11*x14765))+((r12*x14756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14767 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14767)==0){
continue;
}
IkReal x14766=pow(x14767,-0.5);
CheckValue<IkReal> x14768 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14768.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14768.value));
IkReal gconst49=((-1.0)*r21*x14766);
IkReal gconst50=(r20*x14766);
CheckValue<IkReal> x14769 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14769.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14769.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14772 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14772.valid){
continue;
}
IkReal x14770=((-1.0)*(x14772.value));
IkReal x14771=x14766;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14770;
IkReal gconst48=x14770;
IkReal gconst49=((-1.0)*r21*x14771);
IkReal gconst50=(r20*x14771);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14775 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14775.valid){
continue;
}
IkReal x14773=((-1.0)*(x14775.value));
IkReal x14774=x14766;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14773;
IkReal gconst48=x14773;
IkReal gconst49=((-1.0)*r21*x14774);
IkReal gconst50=(r20*x14774);
CheckValue<IkReal> x14783=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14783.valid){
continue;
}
IkReal x14776=x14783.value;
IkReal x14777=(sj3*x14776);
IkReal x14778=(r11*x14777);
IkReal x14779=(r00*x14777);
IkReal x14780=(r01*x14777);
IkReal x14781=(r10*x14777);
IkReal x14782=(r20*r21*x14777);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x14778))+((r10*x14779*(r20*r20)))+((r01*x14778*(r21*r21)))+((r10*r20*r21*x14780))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14784=gconst49*gconst49;
IkReal x14785=gconst50*gconst50;
IkReal x14786=((1.0)*cj3);
IkReal x14787=(gconst50*r01);
IkReal x14788=(gconst49*r10);
IkReal x14789=(r12*sj3);
IkReal x14790=(gconst49*r00);
IkReal x14791=(r00*sj3);
IkReal x14792=(r11*x14784);
IkReal x14793=(r10*x14785);
CheckValue<IkReal> x14794 = IKatan2WithCheck(IkReal((((x14787*x14789))+((x14789*x14790)))),IkReal((((gconst49*r11*sj3*x14787))+(((-1.0)*gconst50*x14788*x14791))+(((-1.0)*r01*sj3*x14793))+((x14791*x14792)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14794.valid){
continue;
}
CheckValue<IkReal> x14795=IKPowWithIntegerCheck(IKsign((((cj3*gconst50*r11*x14790))+(((-1.0)*r00*x14786*x14793))+(((-1.0)*r02*r12*x14786))+(((-1.0)*r01*x14786*x14792))+((cj3*x14787*x14788)))),-1);
if(!x14795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14794.value)+(((1.5707963267949)*(x14795.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14796=IKsin(j4);
IkReal x14797=IKcos(j4);
IkReal x14798=(sj1*sj2);
IkReal x14799=(gconst50*r20);
IkReal x14800=(gconst50*sj3);
IkReal x14801=(cj3*r01);
IkReal x14802=(gconst50*r10);
IkReal x14803=(gconst49*sj3);
IkReal x14804=((1.0)*cj2);
IkReal x14805=(cj1*sj2);
IkReal x14806=(cj3*r11);
IkReal x14807=(gconst50*r00);
IkReal x14808=(cj3*r21);
IkReal x14809=(cj3*gconst49);
IkReal x14810=(cj1*x14804);
IkReal x14811=((1.0)*x14797);
IkReal x14812=((1.0)*x14796);
IkReal x14813=(gconst49*x14796);
IkReal x14814=(gconst49*x14797);
IkReal x14815=(cj3*x14796);
evalcond[0]=((((-1.0)*r22*x14811))+(((-1.0)*x14799*x14812))+((r21*x14813)));
evalcond[1]=((((-1.0)*x14802*x14812))+(((-1.0)*r12*x14811))+((r11*x14813)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14811))+(((-1.0)*x14807*x14812))+((r01*x14813)));
evalcond[3]=(((r01*x14800))+((r00*x14803))+(((-1.0)*cj3*x14807*x14811))+((x14801*x14814))+((r02*x14815)));
evalcond[4]=((((-1.0)*r02*sj3*x14812))+((r00*x14809))+(((-1.0)*r01*x14803*x14811))+((r00*x14797*x14800))+((gconst50*x14801)));
evalcond[5]=(((cj2*sj1))+((x14808*x14814))+((r21*x14800))+x14805+((r22*x14815))+((r20*x14803))+(((-1.0)*cj3*x14799*x14811)));
evalcond[6]=(((r10*x14803))+(((-1.0)*cj3*x14802*x14811))+((x14806*x14814))+(((-1.0)*x14810))+x14798+((r11*x14800))+((r12*x14815)));
evalcond[7]=((((-1.0)*x14810))+((sj3*x14797*x14799))+x14798+(((-1.0)*r22*sj3*x14812))+((r20*x14809))+(((-1.0)*r21*x14803*x14811))+((gconst50*x14808)));
evalcond[8]=((((-1.0)*r11*x14803*x14811))+((r10*x14809))+(((-1.0)*r12*sj3*x14812))+((r10*x14797*x14800))+(((-1.0)*x14805))+(((-1.0)*sj1*x14804))+((gconst50*x14806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14816=gconst49*gconst49;
IkReal x14817=gconst50*gconst50;
IkReal x14818=(cj3*r12);
IkReal x14819=(gconst49*r00);
IkReal x14820=(r01*r11);
IkReal x14821=(r00*r11);
IkReal x14822=(cj3*gconst50);
IkReal x14823=((1.0)*r01*r10);
IkReal x14824=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14825 = IKatan2WithCheck(IkReal((((gconst50*r01*x14818))+((x14818*x14819)))),IkReal(((((-1.0)*cj3*x14817*x14823))+((cj3*x14816*x14821))+(((-1.0)*r10*x14819*x14822))+((gconst49*x14820*x14822)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14825.valid){
continue;
}
CheckValue<IkReal> x14826=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x14823*x14824))+((r00*r10*sj3*x14817))+(((-1.0)*gconst50*r11*sj3*x14819))+((sj3*x14816*x14820)))),-1);
if(!x14826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14825.value)+(((1.5707963267949)*(x14826.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14827=IKsin(j4);
IkReal x14828=IKcos(j4);
IkReal x14829=(sj1*sj2);
IkReal x14830=(gconst50*r20);
IkReal x14831=(gconst50*sj3);
IkReal x14832=(cj3*r01);
IkReal x14833=(gconst50*r10);
IkReal x14834=(gconst49*sj3);
IkReal x14835=((1.0)*cj2);
IkReal x14836=(cj1*sj2);
IkReal x14837=(cj3*r11);
IkReal x14838=(gconst50*r00);
IkReal x14839=(cj3*r21);
IkReal x14840=(cj3*gconst49);
IkReal x14841=(cj1*x14835);
IkReal x14842=((1.0)*x14828);
IkReal x14843=((1.0)*x14827);
IkReal x14844=(gconst49*x14827);
IkReal x14845=(gconst49*x14828);
IkReal x14846=(cj3*x14827);
evalcond[0]=((((-1.0)*x14830*x14843))+(((-1.0)*r22*x14842))+((r21*x14844)));
evalcond[1]=((((-1.0)*x14833*x14843))+((r11*x14844))+(((-1.0)*r12*x14842)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14842))+(((-1.0)*x14838*x14843))+((r01*x14844)));
evalcond[3]=(((r02*x14846))+((x14832*x14845))+(((-1.0)*cj3*x14838*x14842))+((r01*x14831))+((r00*x14834)));
evalcond[4]=(((gconst50*x14832))+(((-1.0)*r02*sj3*x14843))+(((-1.0)*r01*x14834*x14842))+((r00*x14840))+((r00*x14828*x14831)));
evalcond[5]=(((cj2*sj1))+x14836+((r20*x14834))+((r21*x14831))+(((-1.0)*cj3*x14830*x14842))+((r22*x14846))+((x14839*x14845)));
evalcond[6]=(((x14837*x14845))+x14829+((r11*x14831))+(((-1.0)*cj3*x14833*x14842))+((r12*x14846))+(((-1.0)*x14841))+((r10*x14834)));
evalcond[7]=(((r20*x14840))+((gconst50*x14839))+((sj3*x14828*x14830))+(((-1.0)*r21*x14834*x14842))+x14829+(((-1.0)*x14841))+(((-1.0)*r22*sj3*x14843)));
evalcond[8]=((((-1.0)*x14836))+((gconst50*x14837))+(((-1.0)*sj1*x14835))+((r10*x14840))+(((-1.0)*r11*x14834*x14842))+((r10*x14828*x14831))+(((-1.0)*r12*sj3*x14843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14847=((1.0)*gconst50);
CheckValue<IkReal> x14848=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14847)))),-1);
if(!x14848.valid){
continue;
}
CheckValue<IkReal> x14849 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14847)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14848.value)))+(x14849.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14850=IKsin(j4);
IkReal x14851=IKcos(j4);
IkReal x14852=(sj1*sj2);
IkReal x14853=(gconst50*r20);
IkReal x14854=(gconst50*sj3);
IkReal x14855=(cj3*r01);
IkReal x14856=(gconst50*r10);
IkReal x14857=(gconst49*sj3);
IkReal x14858=((1.0)*cj2);
IkReal x14859=(cj1*sj2);
IkReal x14860=(cj3*r11);
IkReal x14861=(gconst50*r00);
IkReal x14862=(cj3*r21);
IkReal x14863=(cj3*gconst49);
IkReal x14864=(cj1*x14858);
IkReal x14865=((1.0)*x14851);
IkReal x14866=((1.0)*x14850);
IkReal x14867=(gconst49*x14850);
IkReal x14868=(gconst49*x14851);
IkReal x14869=(cj3*x14850);
evalcond[0]=(((r21*x14867))+(((-1.0)*x14853*x14866))+(((-1.0)*r22*x14865)));
evalcond[1]=((((-1.0)*x14856*x14866))+((r11*x14867))+(((-1.0)*r12*x14865)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14865))+(((-1.0)*x14861*x14866))+((r01*x14867)));
evalcond[3]=(((x14855*x14868))+((r02*x14869))+(((-1.0)*cj3*x14861*x14865))+((r00*x14857))+((r01*x14854)));
evalcond[4]=((((-1.0)*r02*sj3*x14866))+(((-1.0)*r01*x14857*x14865))+((r00*x14851*x14854))+((gconst50*x14855))+((r00*x14863)));
evalcond[5]=(((r21*x14854))+((cj2*sj1))+(((-1.0)*cj3*x14853*x14865))+((r20*x14857))+x14859+((r22*x14869))+((x14862*x14868)));
evalcond[6]=(x14852+((r11*x14854))+((r12*x14869))+((x14860*x14868))+(((-1.0)*cj3*x14856*x14865))+((r10*x14857))+(((-1.0)*x14864)));
evalcond[7]=(((r20*x14863))+x14852+(((-1.0)*r21*x14857*x14865))+((gconst50*x14862))+(((-1.0)*x14864))+((sj3*x14851*x14853))+(((-1.0)*r22*sj3*x14866)));
evalcond[8]=((((-1.0)*sj1*x14858))+((gconst50*x14860))+((r10*x14863))+(((-1.0)*r12*sj3*x14866))+((r10*x14851*x14854))+(((-1.0)*r11*x14857*x14865))+(((-1.0)*x14859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14871 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14871)==0){
continue;
}
IkReal x14870=pow(x14871,-0.5);
CheckValue<IkReal> x14872 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14872.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14872.value))));
IkReal gconst52=((1.0)*r21*x14870);
IkReal gconst53=((-1.0)*r20*x14870);
CheckValue<IkReal> x14873 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14873.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14873.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14876 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14876.valid){
continue;
}
IkReal x14874=((1.0)*(x14876.value));
IkReal x14875=x14870;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14874)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14874)));
IkReal gconst52=((1.0)*r21*x14875);
IkReal gconst53=((-1.0)*r20*x14875);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14879 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14879.valid){
continue;
}
IkReal x14877=((1.0)*(x14879.value));
IkReal x14878=x14870;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14877)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14877)));
IkReal gconst52=((1.0)*r21*x14878);
IkReal gconst53=((-1.0)*r20*x14878);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14882 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14882.valid){
continue;
}
IkReal x14880=((1.0)*(x14882.value));
IkReal x14881=x14870;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14880)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14880)));
IkReal gconst52=((1.0)*r21*x14881);
IkReal gconst53=((-1.0)*r20*x14881);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14883=gconst52*gconst52;
IkReal x14884=gconst53*gconst53;
IkReal x14885=(gconst53*r01);
IkReal x14886=(cj3*r20);
IkReal x14887=(r22*sj3);
IkReal x14888=((1.0)*cj3);
IkReal x14889=(gconst52*sj3);
IkReal x14890=((1.0)*r00);
IkReal x14891=(gconst52*r00);
IkReal x14892=(r21*x14883);
CheckValue<IkReal> x14893=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14888*x14892))+((gconst52*x14885*x14886))+((cj3*gconst53*r21*x14891))+(((-1.0)*x14884*x14886*x14890))+(((-1.0)*r02*r22*x14888)))),-1);
if(!x14893.valid){
continue;
}
CheckValue<IkReal> x14894 = IKatan2WithCheck(IkReal((((x14885*x14887))+((x14887*x14891)))),IkReal(((((-1.0)*gconst53*r20*x14889*x14890))+((r00*sj3*x14892))+((r21*x14885*x14889))+(((-1.0)*r01*r20*sj3*x14884)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14893.value)))+(x14894.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14895=IKsin(j4);
IkReal x14896=IKcos(j4);
IkReal x14897=(sj1*sj2);
IkReal x14898=((1.0)*cj1);
IkReal x14899=(cj3*gconst52);
IkReal x14900=(gconst53*sj3);
IkReal x14901=(cj3*gconst53);
IkReal x14902=(cj2*sj1);
IkReal x14903=(gconst52*sj3);
IkReal x14904=(cj2*x14898);
IkReal x14905=((1.0)*x14896);
IkReal x14906=((1.0)*x14895);
IkReal x14907=(gconst52*x14895);
IkReal x14908=(cj3*x14895);
evalcond[0]=(((r21*x14907))+(((-1.0)*r22*x14905))+(((-1.0)*gconst53*r20*x14906)));
evalcond[1]=((((-1.0)*r12*x14905))+((r11*x14907))+(((-1.0)*gconst53*r10*x14906)));
evalcond[2]=((-1.0)+((r01*x14907))+(((-1.0)*r02*x14905))+(((-1.0)*gconst53*r00*x14906)));
evalcond[3]=((((-1.0)*r00*x14901*x14905))+((r00*x14903))+((r01*x14900))+((r02*x14908))+((r01*x14896*x14899)));
evalcond[4]=((((-1.0)*r01*x14903*x14905))+((r01*x14901))+((r00*x14899))+(((-1.0)*r02*sj3*x14906))+((r00*x14896*x14900)));
evalcond[5]=(((r22*x14908))+((r21*x14900))+(((-1.0)*r20*x14901*x14905))+((r21*x14896*x14899))+x14902+((cj1*sj2))+((r20*x14903)));
evalcond[6]=(((r11*x14896*x14899))+((r11*x14900))+(((-1.0)*x14904))+x14897+((r12*x14908))+(((-1.0)*r10*x14901*x14905))+((r10*x14903)));
evalcond[7]=(((r21*x14901))+(((-1.0)*r21*x14903*x14905))+(((-1.0)*x14904))+((r20*x14896*x14900))+x14897+(((-1.0)*r22*sj3*x14906))+((r20*x14899)));
evalcond[8]=(((r10*x14899))+(((-1.0)*sj2*x14898))+((r11*x14901))+(((-1.0)*x14902))+(((-1.0)*r11*x14903*x14905))+((r10*x14896*x14900))+(((-1.0)*r12*sj3*x14906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14909=((1.0)*gconst53);
CheckValue<IkReal> x14910=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14909))+(((-1.0)*gconst52*r10)))),-1);
if(!x14910.valid){
continue;
}
CheckValue<IkReal> x14911 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst52*r21))+(((-1.0)*r20*x14909)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14910.value)))+(x14911.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14912=IKsin(j4);
IkReal x14913=IKcos(j4);
IkReal x14914=(sj1*sj2);
IkReal x14915=((1.0)*cj1);
IkReal x14916=(cj3*gconst52);
IkReal x14917=(gconst53*sj3);
IkReal x14918=(cj3*gconst53);
IkReal x14919=(cj2*sj1);
IkReal x14920=(gconst52*sj3);
IkReal x14921=(cj2*x14915);
IkReal x14922=((1.0)*x14913);
IkReal x14923=((1.0)*x14912);
IkReal x14924=(gconst52*x14912);
IkReal x14925=(cj3*x14912);
evalcond[0]=(((r21*x14924))+(((-1.0)*r22*x14922))+(((-1.0)*gconst53*r20*x14923)));
evalcond[1]=((((-1.0)*r12*x14922))+((r11*x14924))+(((-1.0)*gconst53*r10*x14923)));
evalcond[2]=((-1.0)+((r01*x14924))+(((-1.0)*gconst53*r00*x14923))+(((-1.0)*r02*x14922)));
evalcond[3]=(((r01*x14917))+(((-1.0)*r00*x14918*x14922))+((r00*x14920))+((r01*x14913*x14916))+((r02*x14925)));
evalcond[4]=(((r01*x14918))+((r00*x14916))+(((-1.0)*r02*sj3*x14923))+(((-1.0)*r01*x14920*x14922))+((r00*x14913*x14917)));
evalcond[5]=(((r21*x14917))+x14919+((cj1*sj2))+((r21*x14913*x14916))+(((-1.0)*r20*x14918*x14922))+((r22*x14925))+((r20*x14920)));
evalcond[6]=((((-1.0)*r10*x14918*x14922))+x14914+((r11*x14917))+((r10*x14920))+((r11*x14913*x14916))+(((-1.0)*x14921))+((r12*x14925)));
evalcond[7]=(((r21*x14918))+(((-1.0)*r21*x14920*x14922))+((r20*x14913*x14917))+x14914+(((-1.0)*r22*sj3*x14923))+(((-1.0)*x14921))+((r20*x14916)));
evalcond[8]=(((r10*x14916))+(((-1.0)*sj2*x14915))+((r10*x14913*x14917))+(((-1.0)*r12*sj3*x14923))+((r11*x14918))+(((-1.0)*x14919))+(((-1.0)*r11*x14920*x14922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14926 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14926.valid){
continue;
}
CheckValue<IkReal> x14927=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14926.value)+(((1.5707963267949)*(x14927.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14928=IKsin(j4);
IkReal x14929=IKcos(j4);
IkReal x14930=(sj1*sj2);
IkReal x14931=((1.0)*cj1);
IkReal x14932=(cj3*gconst52);
IkReal x14933=(gconst53*sj3);
IkReal x14934=(cj3*gconst53);
IkReal x14935=(cj2*sj1);
IkReal x14936=(gconst52*sj3);
IkReal x14937=(cj2*x14931);
IkReal x14938=((1.0)*x14929);
IkReal x14939=((1.0)*x14928);
IkReal x14940=(gconst52*x14928);
IkReal x14941=(cj3*x14928);
evalcond[0]=((((-1.0)*r22*x14938))+(((-1.0)*gconst53*r20*x14939))+((r21*x14940)));
evalcond[1]=((((-1.0)*r12*x14938))+(((-1.0)*gconst53*r10*x14939))+((r11*x14940)));
evalcond[2]=((-1.0)+((r01*x14940))+(((-1.0)*gconst53*r00*x14939))+(((-1.0)*r02*x14938)));
evalcond[3]=(((r01*x14929*x14932))+((r01*x14933))+((r00*x14936))+((r02*x14941))+(((-1.0)*r00*x14934*x14938)));
evalcond[4]=((((-1.0)*r01*x14936*x14938))+(((-1.0)*r02*sj3*x14939))+((r01*x14934))+((r00*x14932))+((r00*x14929*x14933)));
evalcond[5]=((((-1.0)*r20*x14934*x14938))+x14935+((r22*x14941))+((cj1*sj2))+((r21*x14933))+((r20*x14936))+((r21*x14929*x14932)));
evalcond[6]=(((r12*x14941))+x14930+((r10*x14936))+((r11*x14929*x14932))+(((-1.0)*x14937))+((r11*x14933))+(((-1.0)*r10*x14934*x14938)));
evalcond[7]=((((-1.0)*r21*x14936*x14938))+((r20*x14929*x14933))+x14930+(((-1.0)*r22*sj3*x14939))+((r21*x14934))+(((-1.0)*x14937))+((r20*x14932)));
evalcond[8]=((((-1.0)*x14935))+(((-1.0)*r11*x14936*x14938))+(((-1.0)*r12*sj3*x14939))+((r10*x14932))+((r10*x14929*x14933))+(((-1.0)*sj2*x14931))+((r11*x14934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14942=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14942);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14942);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14943=(r01*sj5);
IkReal x14944=((1.0)*cj5*r00);
j4eval[0]=(x14943+(((-1.0)*x14944)));
j4eval[1]=((((-1.0)*cj3*x14944))+((cj3*x14943)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14945=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14945);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14945);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14946=(cj5*r00);
IkReal x14947=(r01*sj5);
j4eval[0]=(x14947+(((-1.0)*x14946)));
j4eval[1]=(((sj3*x14946))+(((-1.0)*sj3*x14947)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14948=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14948);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14948);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14949=((1.0)*r00);
CheckValue<IkReal> x14950=IKPowWithIntegerCheck(cj3,-1);
if(!x14950.valid){
continue;
}
CheckValue<IkReal> x14951=IKPowWithIntegerCheck(r22,-1);
if(!x14951.valid){
continue;
}
CheckValue<IkReal> x14952=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14949))),-1);
if(!x14952.valid){
continue;
}
if( IKabs(((x14950.value)*(x14951.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14952.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14949)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14950.value)*(x14951.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14952.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14949))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14950.value)*(x14951.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14952.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14949))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14953=IKsin(j4);
IkReal x14954=IKcos(j4);
IkReal x14955=(sj1*sj2);
IkReal x14956=(cj5*sj3);
IkReal x14957=(r11*sj5);
IkReal x14958=(cj3*cj5);
IkReal x14959=((1.0)*cj1);
IkReal x14960=(cj3*sj5);
IkReal x14961=(sj3*sj5);
IkReal x14962=(cj2*sj1);
IkReal x14963=(r01*sj5);
IkReal x14964=((1.0)*sj3);
IkReal x14965=(cj2*x14959);
IkReal x14966=(r10*x14954);
IkReal x14967=(r22*x14953);
IkReal x14968=(cj3*x14954);
IkReal x14969=((1.0)*cj5*x14953);
evalcond[0]=((-1.0)*r22*x14954);
evalcond[1]=(((cj3*x14967))+x14962+((cj1*sj2)));
evalcond[2]=((((-1.0)*r10*x14969))+((x14953*x14957)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x14969))+((x14953*x14963)));
evalcond[4]=(x14955+(((-1.0)*x14965))+(((-1.0)*x14964*x14967)));
evalcond[5]=(((r01*x14956))+(((-1.0)*r00*x14954*x14958))+((r01*x14954*x14960))+((r00*x14961)));
evalcond[6]=((((-1.0)*r01*x14954*x14961))+((r01*x14958))+((r00*x14960))+((r00*x14954*x14956)));
evalcond[7]=((((-1.0)*x14958*x14966))+((x14957*x14968))+x14955+(((-1.0)*x14965))+((r10*x14961))+((r11*x14956)));
evalcond[8]=((((-1.0)*x14954*x14957*x14964))+(((-1.0)*x14962))+(((-1.0)*sj2*x14959))+((x14956*x14966))+((r10*x14960))+((r11*x14958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14970=((1.0)*cj3);
IkReal x14971=(cj5*r00);
IkReal x14972=(r01*sj5);
CheckValue<IkReal> x14973=IKPowWithIntegerCheck(((((-1.0)*x14971))+x14972),-1);
if(!x14973.valid){
continue;
}
CheckValue<IkReal> x14974=IKPowWithIntegerCheck(((((-1.0)*sj3*x14972))+((sj3*x14971))),-1);
if(!x14974.valid){
continue;
}
if( IKabs(x14973.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14974.value)*(((((-1.0)*cj5*r01*x14970))+(((-1.0)*r00*sj5*x14970)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14973.value)+IKsqr(((x14974.value)*(((((-1.0)*cj5*r01*x14970))+(((-1.0)*r00*sj5*x14970))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14973.value, ((x14974.value)*(((((-1.0)*cj5*r01*x14970))+(((-1.0)*r00*sj5*x14970))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14975=IKsin(j4);
IkReal x14976=IKcos(j4);
IkReal x14977=(sj1*sj2);
IkReal x14978=(cj5*sj3);
IkReal x14979=(r11*sj5);
IkReal x14980=(cj3*cj5);
IkReal x14981=((1.0)*cj1);
IkReal x14982=(cj3*sj5);
IkReal x14983=(sj3*sj5);
IkReal x14984=(cj2*sj1);
IkReal x14985=(r01*sj5);
IkReal x14986=((1.0)*sj3);
IkReal x14987=(cj2*x14981);
IkReal x14988=(r10*x14976);
IkReal x14989=(r22*x14975);
IkReal x14990=(cj3*x14976);
IkReal x14991=((1.0)*cj5*x14975);
evalcond[0]=((-1.0)*r22*x14976);
evalcond[1]=(x14984+((cj1*sj2))+((cj3*x14989)));
evalcond[2]=(((x14975*x14979))+(((-1.0)*r10*x14991)));
evalcond[3]=((-1.0)+((x14975*x14985))+(((-1.0)*r00*x14991)));
evalcond[4]=(x14977+(((-1.0)*x14986*x14989))+(((-1.0)*x14987)));
evalcond[5]=((((-1.0)*r00*x14976*x14980))+((r01*x14976*x14982))+((r00*x14983))+((r01*x14978)));
evalcond[6]=(((r00*x14976*x14978))+((r00*x14982))+((r01*x14980))+(((-1.0)*r01*x14976*x14983)));
evalcond[7]=(((x14979*x14990))+x14977+((r10*x14983))+((r11*x14978))+(((-1.0)*x14987))+(((-1.0)*x14980*x14988)));
evalcond[8]=((((-1.0)*x14976*x14979*x14986))+(((-1.0)*sj2*x14981))+((r10*x14982))+((r11*x14980))+(((-1.0)*x14984))+((x14978*x14988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14992=((1.0)*sj3);
IkReal x14993=(r01*sj5);
IkReal x14994=((1.0)*cj5*r00);
CheckValue<IkReal> x14995=IKPowWithIntegerCheck(((((-1.0)*x14994))+x14993),-1);
if(!x14995.valid){
continue;
}
CheckValue<IkReal> x14996=IKPowWithIntegerCheck(((((-1.0)*cj3*x14994))+((cj3*x14993))),-1);
if(!x14996.valid){
continue;
}
if( IKabs(x14995.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14996.value)*(((((-1.0)*cj5*r01*x14992))+(((-1.0)*r00*sj5*x14992)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14995.value)+IKsqr(((x14996.value)*(((((-1.0)*cj5*r01*x14992))+(((-1.0)*r00*sj5*x14992))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14995.value, ((x14996.value)*(((((-1.0)*cj5*r01*x14992))+(((-1.0)*r00*sj5*x14992))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14997=IKsin(j4);
IkReal x14998=IKcos(j4);
IkReal x14999=(sj1*sj2);
IkReal x15000=(cj5*sj3);
IkReal x15001=(r11*sj5);
IkReal x15002=(cj3*cj5);
IkReal x15003=((1.0)*cj1);
IkReal x15004=(cj3*sj5);
IkReal x15005=(sj3*sj5);
IkReal x15006=(cj2*sj1);
IkReal x15007=(r01*sj5);
IkReal x15008=((1.0)*sj3);
IkReal x15009=(cj2*x15003);
IkReal x15010=(r10*x14998);
IkReal x15011=(r22*x14997);
IkReal x15012=(cj3*x14998);
IkReal x15013=((1.0)*cj5*x14997);
evalcond[0]=((-1.0)*r22*x14998);
evalcond[1]=(((cj3*x15011))+((cj1*sj2))+x15006);
evalcond[2]=((((-1.0)*r10*x15013))+((x14997*x15001)));
evalcond[3]=((-1.0)+((x14997*x15007))+(((-1.0)*r00*x15013)));
evalcond[4]=(x14999+(((-1.0)*x15008*x15011))+(((-1.0)*x15009)));
evalcond[5]=(((r01*x15000))+((r00*x15005))+(((-1.0)*r00*x14998*x15002))+((r01*x14998*x15004)));
evalcond[6]=(((r00*x14998*x15000))+((r01*x15002))+((r00*x15004))+(((-1.0)*r01*x14998*x15005)));
evalcond[7]=(x14999+(((-1.0)*x15002*x15010))+((r10*x15005))+((r11*x15000))+((x15001*x15012))+(((-1.0)*x15009)));
evalcond[8]=((((-1.0)*sj2*x15003))+(((-1.0)*x15006))+(((-1.0)*x14998*x15001*x15008))+((r10*x15004))+((x15000*x15010))+((r11*x15002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15014=cj5*cj5;
IkReal x15015=(cj3*r20);
IkReal x15016=(r21*sj3);
IkReal x15017=((1.0)*cj3);
IkReal x15018=(r01*r21);
IkReal x15019=(r01*sj3);
IkReal x15020=(r00*sj5);
IkReal x15021=(cj5*r01*sj5);
IkReal x15022=((1.0)*x15014);
CheckValue<IkReal> x15023=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x15017))+(((-1.0)*r00*x15015*x15022))+((cj3*cj5*r21*x15020))+((x15015*x15021))+(((-1.0)*x15017*x15018))+((cj3*x15014*x15018)))),-1);
if(!x15023.valid){
continue;
}
CheckValue<IkReal> x15024 = IKatan2WithCheck(IkReal((((cj5*r22*x15019))+((r22*sj3*x15020)))),IkReal((((x15016*x15021))+(((-1.0)*r20*x15019*x15022))+(((-1.0)*r00*x15016*x15022))+(((-1.0)*cj5*r20*sj3*x15020))+((r00*x15016)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15024.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15023.value)))+(x15024.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15025=IKsin(j4);
IkReal x15026=IKcos(j4);
IkReal x15027=(sj1*sj2);
IkReal x15028=(r11*sj5);
IkReal x15029=(cj5*r10);
IkReal x15030=(cj5*r01);
IkReal x15031=(cj5*r00);
IkReal x15032=((1.0)*cj1);
IkReal x15033=(cj3*sj5);
IkReal x15034=(r21*sj5);
IkReal x15035=(cj5*sj3);
IkReal x15036=(sj3*sj5);
IkReal x15037=(cj2*sj1);
IkReal x15038=(r01*sj5);
IkReal x15039=(cj3*cj5);
IkReal x15040=(cj5*r20);
IkReal x15041=(cj2*x15032);
IkReal x15042=((1.0)*x15026);
IkReal x15043=((1.0)*x15025);
IkReal x15044=(cj3*x15026);
IkReal x15045=(sj3*x15026);
IkReal x15046=(cj3*x15025);
evalcond[0]=(((x15025*x15034))+(((-1.0)*r22*x15042))+(((-1.0)*x15040*x15043)));
evalcond[1]=(((x15025*x15028))+(((-1.0)*x15029*x15043))+(((-1.0)*r12*x15042)));
evalcond[2]=((-1.0)+((x15025*x15038))+(((-1.0)*x15031*x15043))+(((-1.0)*r02*x15042)));
evalcond[3]=(((r02*x15046))+((r00*x15036))+((sj3*x15030))+(((-1.0)*cj3*x15031*x15042))+((r01*x15026*x15033)));
evalcond[4]=(((r00*x15033))+(((-1.0)*r01*x15036*x15042))+((x15031*x15045))+((cj3*x15030))+(((-1.0)*r02*sj3*x15043)));
evalcond[5]=(((r21*x15035))+((r22*x15046))+((cj1*sj2))+x15037+((r20*x15036))+(((-1.0)*r20*x15039*x15042))+((r21*x15026*x15033)));
evalcond[6]=((((-1.0)*x15041))+((x15028*x15044))+((r12*x15046))+x15027+((r10*x15036))+((r11*x15035))+(((-1.0)*cj3*x15029*x15042)));
evalcond[7]=((((-1.0)*x15041))+(((-1.0)*sj3*x15034*x15042))+((r21*x15039))+(((-1.0)*r22*sj3*x15043))+x15027+((r20*x15033))+((r20*x15026*x15035)));
evalcond[8]=((((-1.0)*sj2*x15032))+((x15029*x15045))+(((-1.0)*r12*sj3*x15043))+(((-1.0)*x15037))+((r10*x15033))+((r11*x15039))+(((-1.0)*sj3*x15028*x15042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15047=((1.0)*cj5);
CheckValue<IkReal> x15048 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x15047))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15048.valid){
continue;
}
CheckValue<IkReal> x15049=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15047)))),-1);
if(!x15049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15048.value)+(((1.5707963267949)*(x15049.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15050=IKsin(j4);
IkReal x15051=IKcos(j4);
IkReal x15052=(sj1*sj2);
IkReal x15053=(r11*sj5);
IkReal x15054=(cj5*r10);
IkReal x15055=(cj5*r01);
IkReal x15056=(cj5*r00);
IkReal x15057=((1.0)*cj1);
IkReal x15058=(cj3*sj5);
IkReal x15059=(r21*sj5);
IkReal x15060=(cj5*sj3);
IkReal x15061=(sj3*sj5);
IkReal x15062=(cj2*sj1);
IkReal x15063=(r01*sj5);
IkReal x15064=(cj3*cj5);
IkReal x15065=(cj5*r20);
IkReal x15066=(cj2*x15057);
IkReal x15067=((1.0)*x15051);
IkReal x15068=((1.0)*x15050);
IkReal x15069=(cj3*x15051);
IkReal x15070=(sj3*x15051);
IkReal x15071=(cj3*x15050);
evalcond[0]=(((x15050*x15059))+(((-1.0)*x15065*x15068))+(((-1.0)*r22*x15067)));
evalcond[1]=(((x15050*x15053))+(((-1.0)*r12*x15067))+(((-1.0)*x15054*x15068)));
evalcond[2]=((-1.0)+((x15050*x15063))+(((-1.0)*r02*x15067))+(((-1.0)*x15056*x15068)));
evalcond[3]=(((r02*x15071))+((r00*x15061))+((r01*x15051*x15058))+(((-1.0)*cj3*x15056*x15067))+((sj3*x15055)));
evalcond[4]=(((x15056*x15070))+(((-1.0)*r02*sj3*x15068))+((cj3*x15055))+(((-1.0)*r01*x15061*x15067))+((r00*x15058)));
evalcond[5]=(((r21*x15060))+((r20*x15061))+((r22*x15071))+((cj1*sj2))+x15062+((r21*x15051*x15058))+(((-1.0)*r20*x15064*x15067)));
evalcond[6]=(((r12*x15071))+((x15053*x15069))+x15052+((r11*x15060))+((r10*x15061))+(((-1.0)*x15066))+(((-1.0)*cj3*x15054*x15067)));
evalcond[7]=(((r20*x15058))+((r21*x15064))+x15052+(((-1.0)*sj3*x15059*x15067))+((r20*x15051*x15060))+(((-1.0)*x15066))+(((-1.0)*r22*sj3*x15068)));
evalcond[8]=((((-1.0)*sj3*x15053*x15067))+((x15054*x15070))+((r10*x15058))+(((-1.0)*r12*sj3*x15068))+(((-1.0)*x15062))+((r11*x15064))+(((-1.0)*sj2*x15057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15072=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15072.valid){
continue;
}
CheckValue<IkReal> x15073 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15072.value)))+(x15073.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15074=IKsin(j4);
IkReal x15075=IKcos(j4);
IkReal x15076=(sj1*sj2);
IkReal x15077=(r11*sj5);
IkReal x15078=(cj5*r10);
IkReal x15079=(cj5*r01);
IkReal x15080=(cj5*r00);
IkReal x15081=((1.0)*cj1);
IkReal x15082=(cj3*sj5);
IkReal x15083=(r21*sj5);
IkReal x15084=(cj5*sj3);
IkReal x15085=(sj3*sj5);
IkReal x15086=(cj2*sj1);
IkReal x15087=(r01*sj5);
IkReal x15088=(cj3*cj5);
IkReal x15089=(cj5*r20);
IkReal x15090=(cj2*x15081);
IkReal x15091=((1.0)*x15075);
IkReal x15092=((1.0)*x15074);
IkReal x15093=(cj3*x15075);
IkReal x15094=(sj3*x15075);
IkReal x15095=(cj3*x15074);
evalcond[0]=((((-1.0)*r22*x15091))+((x15074*x15083))+(((-1.0)*x15089*x15092)));
evalcond[1]=((((-1.0)*r12*x15091))+(((-1.0)*x15078*x15092))+((x15074*x15077)));
evalcond[2]=((-1.0)+(((-1.0)*x15080*x15092))+(((-1.0)*r02*x15091))+((x15074*x15087)));
evalcond[3]=(((r01*x15075*x15082))+((sj3*x15079))+((r02*x15095))+((r00*x15085))+(((-1.0)*cj3*x15080*x15091)));
evalcond[4]=((((-1.0)*r02*sj3*x15092))+((cj3*x15079))+(((-1.0)*r01*x15085*x15091))+((x15080*x15094))+((r00*x15082)));
evalcond[5]=(((cj1*sj2))+(((-1.0)*r20*x15088*x15091))+x15086+((r21*x15084))+((r21*x15075*x15082))+((r20*x15085))+((r22*x15095)));
evalcond[6]=((((-1.0)*cj3*x15078*x15091))+x15076+((x15077*x15093))+((r12*x15095))+((r11*x15084))+(((-1.0)*x15090))+((r10*x15085)));
evalcond[7]=((((-1.0)*r22*sj3*x15092))+((r20*x15075*x15084))+(((-1.0)*sj3*x15083*x15091))+x15076+((r21*x15088))+((r20*x15082))+(((-1.0)*x15090)));
evalcond[8]=(((x15078*x15094))+(((-1.0)*r12*sj3*x15092))+(((-1.0)*sj2*x15081))+(((-1.0)*sj3*x15077*x15091))+((r11*x15088))+(((-1.0)*x15086))+((r10*x15082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15096=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15096;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15096);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15097=((1.0)*cj5);
IkReal x15098=((((-1.0)*r21*x15097))+(((-1.0)*r20*sj5)));
j4eval[0]=x15098;
j4eval[1]=((IKabs(((((-1.0)*r10*x15097))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15098);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15099=cj5*cj5;
IkReal x15100=(cj3*r01);
IkReal x15101=(cj5*sj5);
IkReal x15102=((1.0)*cj3);
IkReal x15103=(((r21*x15099*x15100))+(((-1.0)*r02*r22*x15102))+(((-1.0)*r21*x15100))+((cj3*r00*r21*x15101))+((r20*x15100*x15101))+(((-1.0)*r00*r20*x15099*x15102)));
j4eval[0]=x15103;
j4eval[1]=IKsign(x15103);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15104=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15104;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15104);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15105=((1.0)*cj5);
IkReal x15106=((((-1.0)*r21*x15105))+(((-1.0)*r20*sj5)));
j4eval[0]=x15106;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15105))+((r11*sj5))))));
j4eval[2]=IKsign(x15106);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15107=cj5*cj5;
IkReal x15108=r01*r01;
IkReal x15109=(cj5*r00);
IkReal x15110=(r01*sj5);
IkReal x15111=(((x15107*(r00*r00)))+x15108+(((-1.0)*x15107*x15108))+(((-2.0)*x15109*x15110))+(r02*r02));
j4eval[0]=x15111;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x15110))+x15109))));
j4eval[2]=IKsign(x15111);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15112=cj5*cj5;
IkReal x15113=r01*r01;
IkReal x15114=(r01*sj5);
IkReal x15115=(cj5*r00);
CheckValue<IkReal> x15116=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15112*x15113))+x15113+(r02*r02)+(((-2.0)*x15114*x15115))+((x15112*(r00*r00))))),-1);
if(!x15116.valid){
continue;
}
CheckValue<IkReal> x15117 = IKatan2WithCheck(IkReal(((((-1.0)*x15114))+x15115)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15116.value)))+(x15117.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15118=IKsin(j4);
IkReal x15119=IKcos(j4);
IkReal x15120=(cj5*r10);
IkReal x15121=(r01*sj5);
IkReal x15122=(cj5*r00);
IkReal x15123=(cj5*r20);
IkReal x15124=((1.0)*x15119);
IkReal x15125=((1.0)*x15118);
IkReal x15126=(sj5*x15118);
evalcond[0]=((((-1.0)*x15123*x15125))+((r21*x15126))+(((-1.0)*r22*x15124)));
evalcond[1]=((((-1.0)*r12*x15124))+((r11*x15126))+(((-1.0)*x15120*x15125)));
evalcond[2]=((((-1.0)*r02*x15125))+(((-1.0)*x15121*x15124))+((x15119*x15122)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15124))+((x15118*x15121))+(((-1.0)*x15122*x15125)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x15125))+((x15119*x15120))+(((-1.0)*r11*sj5*x15124)));
evalcond[5]=((((-1.0)*r21*sj5*x15124))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15125))+((x15119*x15123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15127=((1.0)*cj5);
CheckValue<IkReal> x15128 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15127))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15128.valid){
continue;
}
CheckValue<IkReal> x15129=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15127))+(((-1.0)*r20*sj5)))),-1);
if(!x15129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15128.value)+(((1.5707963267949)*(x15129.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15130=IKsin(j4);
IkReal x15131=IKcos(j4);
IkReal x15132=(cj5*r10);
IkReal x15133=(r01*sj5);
IkReal x15134=(cj5*r00);
IkReal x15135=(cj5*r20);
IkReal x15136=((1.0)*x15131);
IkReal x15137=((1.0)*x15130);
IkReal x15138=(sj5*x15130);
evalcond[0]=((((-1.0)*x15135*x15137))+((r21*x15138))+(((-1.0)*r22*x15136)));
evalcond[1]=((((-1.0)*x15132*x15137))+(((-1.0)*r12*x15136))+((r11*x15138)));
evalcond[2]=((((-1.0)*r02*x15137))+(((-1.0)*x15133*x15136))+((x15131*x15134)));
evalcond[3]=((1.0)+((x15130*x15133))+(((-1.0)*r02*x15136))+(((-1.0)*x15134*x15137)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x15137))+(((-1.0)*r11*sj5*x15136))+((x15131*x15132)));
evalcond[5]=((((-1.0)*r21*sj5*x15136))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15137))+((x15131*x15135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15139 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15139.valid){
continue;
}
CheckValue<IkReal> x15140=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15139.value)+(((1.5707963267949)*(x15140.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15141=IKsin(j4);
IkReal x15142=IKcos(j4);
IkReal x15143=(cj5*r10);
IkReal x15144=(r01*sj5);
IkReal x15145=(cj5*r00);
IkReal x15146=(cj5*r20);
IkReal x15147=((1.0)*x15142);
IkReal x15148=((1.0)*x15141);
IkReal x15149=(sj5*x15141);
evalcond[0]=(((r21*x15149))+(((-1.0)*x15146*x15148))+(((-1.0)*r22*x15147)));
evalcond[1]=(((r11*x15149))+(((-1.0)*x15143*x15148))+(((-1.0)*r12*x15147)));
evalcond[2]=((((-1.0)*r02*x15148))+(((-1.0)*x15144*x15147))+((x15142*x15145)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15147))+(((-1.0)*x15145*x15148))+((x15141*x15144)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x15142*x15143))+(((-1.0)*r11*sj5*x15147))+(((-1.0)*r12*x15148)));
evalcond[5]=((((-1.0)*r21*sj5*x15147))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15142*x15146))+(((-1.0)*r22*x15148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15150=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15150;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15150);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15151=((1.0)*cj5);
IkReal x15152=((((-1.0)*r21*x15151))+(((-1.0)*r20*sj5)));
j4eval[0]=x15152;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15151))+((r11*sj5))))));
j4eval[2]=IKsign(x15152);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15153=cj5*cj5;
IkReal x15154=r01*r01;
IkReal x15155=(r01*sj5);
IkReal x15156=(cj5*r00);
IkReal x15157=(((x15153*x15154))+(((-1.0)*(r02*r02)))+(((2.0)*x15155*x15156))+(((-1.0)*x15154))+(((-1.0)*x15153*(r00*r00))));
j4eval[0]=x15157;
j4eval[1]=IKsign(x15157);
j4eval[2]=((IKabs(r02))+(IKabs((x15155+(((-1.0)*x15156))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15158=cj5*cj5;
IkReal x15159=r01*r01;
IkReal x15160=(r01*sj5);
IkReal x15161=(cj5*r00);
CheckValue<IkReal> x15162=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x15158*(r00*r00)))+(((2.0)*x15160*x15161))+((x15158*x15159))+(((-1.0)*x15159)))),-1);
if(!x15162.valid){
continue;
}
CheckValue<IkReal> x15163 = IKatan2WithCheck(IkReal(((((-1.0)*x15161))+x15160)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15162.value)))+(x15163.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15164=IKcos(j4);
IkReal x15165=IKsin(j4);
IkReal x15166=(cj5*r00);
IkReal x15167=(cj5*r10);
IkReal x15168=(r21*sj5);
IkReal x15169=(cj5*r20);
IkReal x15170=((1.0)*x15164);
IkReal x15171=((1.0)*x15165);
IkReal x15172=(sj5*x15165);
IkReal x15173=(sj5*x15164);
evalcond[0]=(((r02*x15165))+(((-1.0)*x15166*x15170))+((r01*x15173)));
evalcond[1]=(((x15165*x15168))+(((-1.0)*r22*x15170))+(((-1.0)*x15169*x15171)));
evalcond[2]=(((r11*x15172))+(((-1.0)*r12*x15170))+(((-1.0)*x15167*x15171)));
evalcond[3]=((1.0)+(((-1.0)*x15166*x15171))+(((-1.0)*r02*x15170))+((r01*x15172)));
evalcond[4]=(((cj2*sj1))+((r11*x15173))+((cj1*sj2))+((r12*x15165))+(((-1.0)*x15167*x15170)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x15164*x15168))+(((-1.0)*x15169*x15170))+((r22*x15165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15174=((1.0)*cj5);
CheckValue<IkReal> x15175 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15174)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15175.valid){
continue;
}
CheckValue<IkReal> x15176=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15174))+(((-1.0)*r20*sj5)))),-1);
if(!x15176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15175.value)+(((1.5707963267949)*(x15176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15177=IKcos(j4);
IkReal x15178=IKsin(j4);
IkReal x15179=(cj5*r00);
IkReal x15180=(cj5*r10);
IkReal x15181=(r21*sj5);
IkReal x15182=(cj5*r20);
IkReal x15183=((1.0)*x15177);
IkReal x15184=((1.0)*x15178);
IkReal x15185=(sj5*x15178);
IkReal x15186=(sj5*x15177);
evalcond[0]=(((r02*x15178))+((r01*x15186))+(((-1.0)*x15179*x15183)));
evalcond[1]=(((x15178*x15181))+(((-1.0)*x15182*x15184))+(((-1.0)*r22*x15183)));
evalcond[2]=((((-1.0)*x15180*x15184))+((r11*x15185))+(((-1.0)*r12*x15183)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15183))+((r01*x15185))+(((-1.0)*x15179*x15184)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x15178))+(((-1.0)*x15180*x15183))+((r11*x15186)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15182*x15183))+((x15177*x15181))+((r22*x15178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15187 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15187.valid){
continue;
}
CheckValue<IkReal> x15188=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15187.value)+(((1.5707963267949)*(x15188.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15189=IKcos(j4);
IkReal x15190=IKsin(j4);
IkReal x15191=(cj5*r00);
IkReal x15192=(cj5*r10);
IkReal x15193=(r21*sj5);
IkReal x15194=(cj5*r20);
IkReal x15195=((1.0)*x15189);
IkReal x15196=((1.0)*x15190);
IkReal x15197=(sj5*x15190);
IkReal x15198=(sj5*x15189);
evalcond[0]=((((-1.0)*x15191*x15195))+((r02*x15190))+((r01*x15198)));
evalcond[1]=((((-1.0)*x15194*x15196))+((x15190*x15193))+(((-1.0)*r22*x15195)));
evalcond[2]=(((r11*x15197))+(((-1.0)*r12*x15195))+(((-1.0)*x15192*x15196)));
evalcond[3]=((1.0)+(((-1.0)*x15191*x15196))+(((-1.0)*r02*x15195))+((r01*x15197)));
evalcond[4]=(((cj2*sj1))+((r11*x15198))+((cj1*sj2))+(((-1.0)*x15192*x15195))+((r12*x15190)));
evalcond[5]=((((-1.0)*x15194*x15195))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15190))+((x15189*x15193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15200 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15200)==0){
continue;
}
IkReal x15199=pow(x15200,-0.5);
CheckValue<IkReal> x15201 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15201.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15201.value));
IkReal gconst61=((-1.0)*r11*x15199);
IkReal gconst62=(r10*x15199);
CheckValue<IkReal> x15202 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15202.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15202.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15205 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15205.valid){
continue;
}
IkReal x15203=((-1.0)*(x15205.value));
IkReal x15204=x15199;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15203;
IkReal gconst60=x15203;
IkReal gconst61=((-1.0)*r11*x15204);
IkReal gconst62=(r10*x15204);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15208 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15208.valid){
continue;
}
IkReal x15206=((-1.0)*(x15208.value));
IkReal x15207=x15199;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15206;
IkReal gconst60=x15206;
IkReal gconst61=((-1.0)*r11*x15207);
IkReal gconst62=(r10*x15207);
CheckValue<IkReal> x15216=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15216.valid){
continue;
}
IkReal x15209=x15216.value;
IkReal x15210=(sj3*x15209);
IkReal x15211=(r20*x15210);
IkReal x15212=(r00*x15210);
IkReal x15213=(r01*x15210);
IkReal x15214=(r21*x15210);
IkReal x15215=(r10*r11*x15210);
j4eval[0]=IKsign((((r10*r11*r21*x15212))+((r01*r10*r11*x15211))+((r21*x15213*(r11*r11)))+((r02*r22*sj3))+((r00*x15211*(r10*r10)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15217=gconst61*gconst61;
IkReal x15218=gconst62*gconst62;
IkReal x15219=(cj3*r01);
IkReal x15220=(r22*sj3);
IkReal x15221=(gconst61*r00);
IkReal x15222=((1.0)*cj3);
IkReal x15223=(gconst62*r01);
IkReal x15224=((1.0)*sj3);
IkReal x15225=(gconst61*gconst62*r20);
IkReal x15226=(r21*x15217);
IkReal x15227=(r20*x15218);
CheckValue<IkReal> x15228 = IKatan2WithCheck(IkReal((((x15220*x15223))+((x15220*x15221)))),IkReal(((((-1.0)*r01*x15224*x15227))+((gconst61*r21*sj3*x15223))+((r00*sj3*x15226))+(((-1.0)*gconst62*r20*x15221*x15224)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15228.valid){
continue;
}
CheckValue<IkReal> x15229=IKPowWithIntegerCheck(IKsign((((cj3*gconst62*r21*x15221))+(((-1.0)*r02*r22*x15222))+(((-1.0)*r00*x15222*x15227))+(((-1.0)*x15219*x15226))+((x15219*x15225)))),-1);
if(!x15229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15228.value)+(((1.5707963267949)*(x15229.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15230=IKsin(j4);
IkReal x15231=IKcos(j4);
IkReal x15232=(cj2*sj1);
IkReal x15233=(cj1*sj2);
IkReal x15234=(gconst61*sj3);
IkReal x15235=(cj3*gconst61);
IkReal x15236=(cj3*gconst62);
IkReal x15237=(sj1*sj2);
IkReal x15238=(gconst62*sj3);
IkReal x15239=(cj1*cj2);
IkReal x15240=((1.0)*x15231);
IkReal x15241=((1.0)*x15230);
IkReal x15242=(gconst61*x15230);
IkReal x15243=(cj3*x15230);
IkReal x15244=(x15232+x15233);
evalcond[0]=((((-1.0)*gconst62*r20*x15241))+((r21*x15242))+(((-1.0)*r22*x15240)));
evalcond[1]=((((-1.0)*gconst62*r10*x15241))+(((-1.0)*r12*x15240))+((r11*x15242)));
evalcond[2]=((1.0)+((r01*x15242))+(((-1.0)*r02*x15240))+(((-1.0)*gconst62*r00*x15241)));
evalcond[3]=(((r00*x15234))+((r01*x15238))+(((-1.0)*r00*x15236*x15240))+((r01*x15231*x15235))+((r02*x15243)));
evalcond[4]=(((r00*x15235))+((r01*x15236))+(((-1.0)*r01*x15234*x15240))+(((-1.0)*r02*sj3*x15241))+((r00*x15231*x15238)));
evalcond[5]=((((-1.0)*r20*x15236*x15240))+x15244+((r21*x15231*x15235))+((r21*x15238))+((r22*x15243))+((r20*x15234)));
evalcond[6]=((((-1.0)*x15237))+x15239+((r10*x15234))+((r12*x15243))+(((-1.0)*r10*x15236*x15240))+((r11*x15238))+((r11*x15231*x15235)));
evalcond[7]=((((-1.0)*r12*sj3*x15241))+(((-1.0)*r11*x15234*x15240))+x15244+((r10*x15235))+((r11*x15236))+((r10*x15231*x15238)));
evalcond[8]=((((-1.0)*x15239))+(((-1.0)*r21*x15234*x15240))+x15237+((r21*x15236))+(((-1.0)*r22*sj3*x15241))+((r20*x15231*x15238))+((r20*x15235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15245=gconst61*gconst61;
IkReal x15246=gconst62*gconst62;
IkReal x15247=(cj3*r22);
IkReal x15248=(gconst62*r01);
IkReal x15249=(gconst61*r00);
IkReal x15250=((1.0)*r20);
IkReal x15251=(cj3*r21);
IkReal x15252=(r21*sj3);
CheckValue<IkReal> x15253 = IKatan2WithCheck(IkReal((((x15247*x15249))+((x15247*x15248)))),IkReal((((r00*x15245*x15251))+((gconst61*x15248*x15251))+(((-1.0)*cj3*r01*x15246*x15250))+(((-1.0)*cj3*gconst62*x15249*x15250)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15253.valid){
continue;
}
CheckValue<IkReal> x15254=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst62*x15249*x15252))+((r01*x15245*x15252))+((r00*r20*sj3*x15246))+(((-1.0)*gconst61*sj3*x15248*x15250))+((r02*r22*sj3)))),-1);
if(!x15254.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15253.value)+(((1.5707963267949)*(x15254.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15255=IKsin(j4);
IkReal x15256=IKcos(j4);
IkReal x15257=(cj2*sj1);
IkReal x15258=(cj1*sj2);
IkReal x15259=(gconst61*sj3);
IkReal x15260=(cj3*gconst61);
IkReal x15261=(cj3*gconst62);
IkReal x15262=(sj1*sj2);
IkReal x15263=(gconst62*sj3);
IkReal x15264=(cj1*cj2);
IkReal x15265=((1.0)*x15256);
IkReal x15266=((1.0)*x15255);
IkReal x15267=(gconst61*x15255);
IkReal x15268=(cj3*x15255);
IkReal x15269=(x15258+x15257);
evalcond[0]=((((-1.0)*gconst62*r20*x15266))+(((-1.0)*r22*x15265))+((r21*x15267)));
evalcond[1]=((((-1.0)*gconst62*r10*x15266))+(((-1.0)*r12*x15265))+((r11*x15267)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15265))+((r01*x15267))+(((-1.0)*gconst62*r00*x15266)));
evalcond[3]=(((r00*x15259))+((r01*x15256*x15260))+(((-1.0)*r00*x15261*x15265))+((r01*x15263))+((r02*x15268)));
evalcond[4]=((((-1.0)*r01*x15259*x15265))+((r00*x15256*x15263))+((r01*x15261))+((r00*x15260))+(((-1.0)*r02*sj3*x15266)));
evalcond[5]=(x15269+((r22*x15268))+((r21*x15256*x15260))+((r20*x15259))+((r21*x15263))+(((-1.0)*r20*x15261*x15265)));
evalcond[6]=(((r12*x15268))+x15264+(((-1.0)*r10*x15261*x15265))+((r10*x15259))+((r11*x15256*x15260))+(((-1.0)*x15262))+((r11*x15263)));
evalcond[7]=((((-1.0)*r12*sj3*x15266))+(((-1.0)*r11*x15259*x15265))+x15269+((r10*x15256*x15263))+((r10*x15260))+((r11*x15261)));
evalcond[8]=(((r20*x15260))+((r20*x15256*x15263))+x15262+(((-1.0)*r22*sj3*x15266))+(((-1.0)*x15264))+(((-1.0)*r21*x15259*x15265))+((r21*x15261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15270=((1.0)*gconst62);
CheckValue<IkReal> x15271=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15270))+(((-1.0)*gconst61*r20)))),-1);
if(!x15271.valid){
continue;
}
CheckValue<IkReal> x15272 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15270))+((gconst61*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15271.value)))+(x15272.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15273=IKsin(j4);
IkReal x15274=IKcos(j4);
IkReal x15275=(cj2*sj1);
IkReal x15276=(cj1*sj2);
IkReal x15277=(gconst61*sj3);
IkReal x15278=(cj3*gconst61);
IkReal x15279=(cj3*gconst62);
IkReal x15280=(sj1*sj2);
IkReal x15281=(gconst62*sj3);
IkReal x15282=(cj1*cj2);
IkReal x15283=((1.0)*x15274);
IkReal x15284=((1.0)*x15273);
IkReal x15285=(gconst61*x15273);
IkReal x15286=(cj3*x15273);
IkReal x15287=(x15276+x15275);
evalcond[0]=((((-1.0)*gconst62*r20*x15284))+(((-1.0)*r22*x15283))+((r21*x15285)));
evalcond[1]=((((-1.0)*r12*x15283))+((r11*x15285))+(((-1.0)*gconst62*r10*x15284)));
evalcond[2]=((1.0)+((r01*x15285))+(((-1.0)*gconst62*r00*x15284))+(((-1.0)*r02*x15283)));
evalcond[3]=(((r01*x15281))+((r01*x15274*x15278))+(((-1.0)*r00*x15279*x15283))+((r02*x15286))+((r00*x15277)));
evalcond[4]=((((-1.0)*r01*x15277*x15283))+(((-1.0)*r02*sj3*x15284))+((r00*x15274*x15281))+((r01*x15279))+((r00*x15278)));
evalcond[5]=(((r22*x15286))+x15287+((r20*x15277))+(((-1.0)*r20*x15279*x15283))+((r21*x15274*x15278))+((r21*x15281)));
evalcond[6]=(x15282+(((-1.0)*r10*x15279*x15283))+((r10*x15277))+((r11*x15274*x15278))+((r11*x15281))+((r12*x15286))+(((-1.0)*x15280)));
evalcond[7]=((((-1.0)*r11*x15277*x15283))+((r11*x15279))+(((-1.0)*r12*sj3*x15284))+x15287+((r10*x15278))+((r10*x15274*x15281)));
evalcond[8]=(((r20*x15274*x15281))+(((-1.0)*r22*sj3*x15284))+x15280+((r20*x15278))+((r21*x15279))+(((-1.0)*r21*x15277*x15283))+(((-1.0)*x15282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15289 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15289)==0){
continue;
}
IkReal x15288=pow(x15289,-0.5);
CheckValue<IkReal> x15290 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15290.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15290.value))));
IkReal gconst64=((1.0)*r11*x15288);
IkReal gconst65=((-1.0)*r10*x15288);
CheckValue<IkReal> x15291 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15291.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15291.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15294 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15294.valid){
continue;
}
IkReal x15292=((1.0)*(x15294.value));
IkReal x15293=x15288;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15292)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15292)));
IkReal gconst64=((1.0)*r11*x15293);
IkReal gconst65=((-1.0)*r10*x15293);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15295=gconst64*gconst64;
IkReal x15296=gconst65*gconst65;
IkReal x15297=(gconst65*r01);
IkReal x15298=(cj3*r22);
IkReal x15299=(gconst64*r00);
IkReal x15300=(cj3*r21);
IkReal x15301=((1.0)*gconst64*sj3);
IkReal x15302=((1.0)*cj3*r20);
CheckValue<IkReal> x15303=IKPowWithIntegerCheck(IKsign((((r00*r20*sj3*x15296))+(((-1.0)*gconst65*r21*sj3*x15299))+((r02*r22*sj3))+((r01*r21*sj3*x15295))+(((-1.0)*r20*x15297*x15301)))),-1);
if(!x15303.valid){
continue;
}
CheckValue<IkReal> x15304 = IKatan2WithCheck(IkReal((((x15298*x15299))+((x15297*x15298)))),IkReal(((((-1.0)*gconst65*x15299*x15302))+(((-1.0)*r01*x15296*x15302))+((gconst64*x15297*x15300))+((r00*x15295*x15300)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15303.value)))+(x15304.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15305=IKsin(j4);
IkReal x15306=IKcos(j4);
IkReal x15307=(cj2*sj1);
IkReal x15308=(cj1*sj2);
IkReal x15309=(cj3*gconst64);
IkReal x15310=(gconst65*r21);
IkReal x15311=(sj1*sj2);
IkReal x15312=(gconst65*sj3);
IkReal x15313=(gconst64*sj3);
IkReal x15314=(cj3*gconst65);
IkReal x15315=(cj1*cj2);
IkReal x15316=((1.0)*x15306);
IkReal x15317=((1.0)*x15305);
IkReal x15318=(cj3*x15305);
IkReal x15319=(gconst64*x15305);
IkReal x15320=(x15308+x15307);
evalcond[0]=((((-1.0)*gconst65*r20*x15317))+((r21*x15319))+(((-1.0)*r22*x15316)));
evalcond[1]=(((r11*x15319))+(((-1.0)*gconst65*r10*x15317))+(((-1.0)*r12*x15316)));
evalcond[2]=((1.0)+((r01*x15319))+(((-1.0)*gconst65*r00*x15317))+(((-1.0)*r02*x15316)));
evalcond[3]=(((r01*x15312))+((r00*x15313))+(((-1.0)*r00*x15314*x15316))+((r02*x15318))+((r01*x15306*x15309)));
evalcond[4]=(((r01*x15314))+((r00*x15309))+((r00*x15306*x15312))+(((-1.0)*r01*x15313*x15316))+(((-1.0)*r02*sj3*x15317)));
evalcond[5]=(((sj3*x15310))+(((-1.0)*r20*x15314*x15316))+x15320+((r22*x15318))+((r21*x15306*x15309))+((r20*x15313)));
evalcond[6]=(((r11*x15312))+(((-1.0)*x15311))+((r12*x15318))+x15315+((r10*x15313))+((r11*x15306*x15309))+(((-1.0)*r10*x15314*x15316)));
evalcond[7]=((((-1.0)*r11*x15313*x15316))+((r11*x15314))+x15320+(((-1.0)*r12*sj3*x15317))+((r10*x15309))+((r10*x15306*x15312)));
evalcond[8]=((((-1.0)*x15315))+((r20*x15309))+(((-1.0)*r21*x15313*x15316))+x15311+((r20*x15306*x15312))+(((-1.0)*r22*sj3*x15317))+((cj3*x15310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15321=((1.0)*gconst65);
CheckValue<IkReal> x15322 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst64*r11))+(((-1.0)*r10*x15321)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15322.valid){
continue;
}
CheckValue<IkReal> x15323=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15321))+(((-1.0)*gconst64*r20)))),-1);
if(!x15323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15322.value)+(((1.5707963267949)*(x15323.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15324=IKsin(j4);
IkReal x15325=IKcos(j4);
IkReal x15326=(cj2*sj1);
IkReal x15327=(cj1*sj2);
IkReal x15328=(cj3*gconst64);
IkReal x15329=(gconst65*r21);
IkReal x15330=(sj1*sj2);
IkReal x15331=(gconst65*sj3);
IkReal x15332=(gconst64*sj3);
IkReal x15333=(cj3*gconst65);
IkReal x15334=(cj1*cj2);
IkReal x15335=((1.0)*x15325);
IkReal x15336=((1.0)*x15324);
IkReal x15337=(cj3*x15324);
IkReal x15338=(gconst64*x15324);
IkReal x15339=(x15326+x15327);
evalcond[0]=(((r21*x15338))+(((-1.0)*gconst65*r20*x15336))+(((-1.0)*r22*x15335)));
evalcond[1]=(((r11*x15338))+(((-1.0)*r12*x15335))+(((-1.0)*gconst65*r10*x15336)));
evalcond[2]=((1.0)+((r01*x15338))+(((-1.0)*gconst65*r00*x15336))+(((-1.0)*r02*x15335)));
evalcond[3]=((((-1.0)*r00*x15333*x15335))+((r01*x15331))+((r01*x15325*x15328))+((r00*x15332))+((r02*x15337)));
evalcond[4]=(((r01*x15333))+((r00*x15328))+(((-1.0)*r01*x15332*x15335))+(((-1.0)*r02*sj3*x15336))+((r00*x15325*x15331)));
evalcond[5]=(((r20*x15332))+x15339+(((-1.0)*r20*x15333*x15335))+((r22*x15337))+((r21*x15325*x15328))+((sj3*x15329)));
evalcond[6]=((((-1.0)*x15330))+((r12*x15337))+((r11*x15331))+x15334+((r10*x15332))+((r11*x15325*x15328))+(((-1.0)*r10*x15333*x15335)));
evalcond[7]=(((r10*x15325*x15331))+(((-1.0)*r11*x15332*x15335))+((r11*x15333))+(((-1.0)*r12*sj3*x15336))+x15339+((r10*x15328)));
evalcond[8]=((((-1.0)*x15334))+((r20*x15325*x15331))+x15330+(((-1.0)*r22*sj3*x15336))+(((-1.0)*r21*x15332*x15335))+((cj3*x15329))+((r20*x15328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15340=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15340);
rxp0_2=(py*r00);
rxp1_0=(r21*x15340);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15341=(r01*sj5);
IkReal x15342=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*x15342))+x15341);
j4eval[1]=(((cj3*x15341))+(((-1.0)*cj3*x15342)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15343=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15343);
rxp0_2=(py*r00);
rxp1_0=(r21*x15343);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15344=(cj5*r00);
IkReal x15345=(r01*sj5);
j4eval[0]=(x15345+(((-1.0)*x15344)));
j4eval[1]=(((sj3*x15344))+(((-1.0)*sj3*x15345)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15346=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15346);
rxp0_2=(py*r00);
rxp1_0=(r21*x15346);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15347=((1.0)*r00);
CheckValue<IkReal> x15348=IKPowWithIntegerCheck(cj3,-1);
if(!x15348.valid){
continue;
}
CheckValue<IkReal> x15349=IKPowWithIntegerCheck(r12,-1);
if(!x15349.valid){
continue;
}
CheckValue<IkReal> x15350=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15347))),-1);
if(!x15350.valid){
continue;
}
if( IKabs(((x15348.value)*(x15349.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15350.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15347)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15348.value)*(x15349.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15350.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15347))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15348.value)*(x15349.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15350.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15347))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15351=IKsin(j4);
IkReal x15352=IKcos(j4);
IkReal x15353=(cj2*sj1);
IkReal x15354=(cj1*sj2);
IkReal x15355=(sj1*sj2);
IkReal x15356=(cj5*sj3);
IkReal x15357=(cj3*cj5);
IkReal x15358=(r21*sj5);
IkReal x15359=(cj1*cj2);
IkReal x15360=(r00*sj5);
IkReal x15361=(r01*sj5);
IkReal x15362=(r20*sj5);
IkReal x15363=((1.0)*x15351);
IkReal x15364=(r20*x15352);
IkReal x15365=(r00*x15352);
IkReal x15366=(cj3*x15352);
IkReal x15367=(x15354+x15353);
IkReal x15368=((1.0)*sj3*x15352);
evalcond[0]=((-1.0)*r12*x15352);
evalcond[1]=((((-1.0)*cj5*r20*x15363))+((x15351*x15358)));
evalcond[2]=(x15359+(((-1.0)*x15355))+((cj3*r12*x15351)));
evalcond[3]=((((-1.0)*r12*sj3*x15363))+x15367);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15363))+((x15351*x15361)));
evalcond[5]=((((-1.0)*x15357*x15365))+((x15361*x15366))+((sj3*x15360))+((r01*x15356)));
evalcond[6]=(((cj3*x15360))+(((-1.0)*x15361*x15368))+((x15356*x15365))+((r01*x15357)));
evalcond[7]=((((-1.0)*x15357*x15364))+x15367+((x15358*x15366))+((sj3*x15362))+((r21*x15356)));
evalcond[8]=(((cj3*x15362))+x15355+((x15356*x15364))+(((-1.0)*x15359))+((r21*x15357))+(((-1.0)*x15358*x15368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15369=((1.0)*r01);
IkReal x15370=(cj5*r00);
CheckValue<IkReal> x15371=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*x15370))),-1);
if(!x15371.valid){
continue;
}
CheckValue<IkReal> x15372=IKPowWithIntegerCheck((((sj3*x15370))+(((-1.0)*sj3*sj5*x15369))),-1);
if(!x15372.valid){
continue;
}
if( IKabs(((-1.0)*(x15371.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15372.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15369)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15371.value)))+IKsqr(((x15372.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15369))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15371.value)), ((x15372.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15369))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15373=IKsin(j4);
IkReal x15374=IKcos(j4);
IkReal x15375=(cj2*sj1);
IkReal x15376=(cj1*sj2);
IkReal x15377=(sj1*sj2);
IkReal x15378=(cj5*sj3);
IkReal x15379=(cj3*cj5);
IkReal x15380=(r21*sj5);
IkReal x15381=(cj1*cj2);
IkReal x15382=(r00*sj5);
IkReal x15383=(r01*sj5);
IkReal x15384=(r20*sj5);
IkReal x15385=((1.0)*x15373);
IkReal x15386=(r20*x15374);
IkReal x15387=(r00*x15374);
IkReal x15388=(cj3*x15374);
IkReal x15389=(x15376+x15375);
IkReal x15390=((1.0)*sj3*x15374);
evalcond[0]=((-1.0)*r12*x15374);
evalcond[1]=((((-1.0)*cj5*r20*x15385))+((x15373*x15380)));
evalcond[2]=((((-1.0)*x15377))+((cj3*r12*x15373))+x15381);
evalcond[3]=((((-1.0)*r12*sj3*x15385))+x15389);
evalcond[4]=((1.0)+((x15373*x15383))+(((-1.0)*cj5*r00*x15385)));
evalcond[5]=((((-1.0)*x15379*x15387))+((r01*x15378))+((x15383*x15388))+((sj3*x15382)));
evalcond[6]=((((-1.0)*x15383*x15390))+((x15378*x15387))+((r01*x15379))+((cj3*x15382)));
evalcond[7]=((((-1.0)*x15379*x15386))+((r21*x15378))+x15389+((x15380*x15388))+((sj3*x15384)));
evalcond[8]=((((-1.0)*x15380*x15390))+((x15378*x15386))+((r21*x15379))+((cj3*x15384))+x15377+(((-1.0)*x15381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15391=((1.0)*r00);
IkReal x15392=(r01*sj5);
CheckValue<IkReal> x15393=IKPowWithIntegerCheck(((((-1.0)*cj5*x15391))+x15392),-1);
if(!x15393.valid){
continue;
}
CheckValue<IkReal> x15394=IKPowWithIntegerCheck((((cj3*x15392))+(((-1.0)*cj3*cj5*x15391))),-1);
if(!x15394.valid){
continue;
}
if( IKabs(((-1.0)*(x15393.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15394.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15391)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15393.value)))+IKsqr(((x15394.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15391))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15393.value)), ((x15394.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15391))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15395=IKsin(j4);
IkReal x15396=IKcos(j4);
IkReal x15397=(cj2*sj1);
IkReal x15398=(cj1*sj2);
IkReal x15399=(sj1*sj2);
IkReal x15400=(cj5*sj3);
IkReal x15401=(cj3*cj5);
IkReal x15402=(r21*sj5);
IkReal x15403=(cj1*cj2);
IkReal x15404=(r00*sj5);
IkReal x15405=(r01*sj5);
IkReal x15406=(r20*sj5);
IkReal x15407=((1.0)*x15395);
IkReal x15408=(r20*x15396);
IkReal x15409=(r00*x15396);
IkReal x15410=(cj3*x15396);
IkReal x15411=(x15398+x15397);
IkReal x15412=((1.0)*sj3*x15396);
evalcond[0]=((-1.0)*r12*x15396);
evalcond[1]=(((x15395*x15402))+(((-1.0)*cj5*r20*x15407)));
evalcond[2]=(x15403+(((-1.0)*x15399))+((cj3*r12*x15395)));
evalcond[3]=(x15411+(((-1.0)*r12*sj3*x15407)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15407))+((x15395*x15405)));
evalcond[5]=((((-1.0)*x15401*x15409))+((sj3*x15404))+((r01*x15400))+((x15405*x15410)));
evalcond[6]=(((x15400*x15409))+(((-1.0)*x15405*x15412))+((r01*x15401))+((cj3*x15404)));
evalcond[7]=((((-1.0)*x15401*x15408))+((sj3*x15406))+((x15402*x15410))+x15411+((r21*x15400)));
evalcond[8]=(((x15400*x15408))+(((-1.0)*x15403))+(((-1.0)*x15402*x15412))+x15399+((r21*x15401))+((cj3*x15406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15413=cj5*cj5;
IkReal x15414=(cj3*r20);
IkReal x15415=(r21*sj3);
IkReal x15416=((1.0)*cj3);
IkReal x15417=(r01*r21);
IkReal x15418=(r01*sj3);
IkReal x15419=(r00*sj5);
IkReal x15420=(cj5*r01*sj5);
IkReal x15421=((1.0)*x15413);
CheckValue<IkReal> x15422=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15414*x15421))+(((-1.0)*r02*r22*x15416))+((cj3*x15413*x15417))+((x15414*x15420))+(((-1.0)*x15416*x15417))+((cj3*cj5*r21*x15419)))),-1);
if(!x15422.valid){
continue;
}
CheckValue<IkReal> x15423 = IKatan2WithCheck(IkReal((((cj5*r22*x15418))+((r22*sj3*x15419)))),IkReal(((((-1.0)*r00*x15415*x15421))+(((-1.0)*r20*x15418*x15421))+((x15415*x15420))+((r00*x15415))+(((-1.0)*cj5*r20*sj3*x15419)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15422.value)))+(x15423.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15424=IKsin(j4);
IkReal x15425=IKcos(j4);
IkReal x15426=(cj2*sj1);
IkReal x15427=(cj1*sj2);
IkReal x15428=(r11*sj5);
IkReal x15429=(cj5*r10);
IkReal x15430=(sj1*sj2);
IkReal x15431=(cj5*r01);
IkReal x15432=(cj5*r00);
IkReal x15433=(cj3*sj5);
IkReal x15434=(r21*sj5);
IkReal x15435=(cj1*cj2);
IkReal x15436=(cj5*sj3);
IkReal x15437=(sj3*sj5);
IkReal x15438=(r01*sj5);
IkReal x15439=(cj3*cj5);
IkReal x15440=(cj5*r20);
IkReal x15441=((1.0)*x15425);
IkReal x15442=((1.0)*x15424);
IkReal x15443=(cj3*x15425);
IkReal x15444=(sj3*x15425);
IkReal x15445=(cj3*x15424);
IkReal x15446=(x15427+x15426);
evalcond[0]=((((-1.0)*r22*x15441))+(((-1.0)*x15440*x15442))+((x15424*x15434)));
evalcond[1]=(((x15424*x15428))+(((-1.0)*r12*x15441))+(((-1.0)*x15429*x15442)));
evalcond[2]=((1.0)+(((-1.0)*x15432*x15442))+(((-1.0)*r02*x15441))+((x15424*x15438)));
evalcond[3]=(((sj3*x15431))+((r01*x15425*x15433))+(((-1.0)*cj3*x15432*x15441))+((r02*x15445))+((r00*x15437)));
evalcond[4]=(((x15432*x15444))+(((-1.0)*r02*sj3*x15442))+((cj3*x15431))+(((-1.0)*r01*x15437*x15441))+((r00*x15433)));
evalcond[5]=(((r21*x15436))+(((-1.0)*r20*x15439*x15441))+((r21*x15425*x15433))+((r22*x15445))+x15446+((r20*x15437)));
evalcond[6]=(((r10*x15437))+((r12*x15445))+(((-1.0)*x15430))+((r11*x15436))+x15435+((x15428*x15443))+(((-1.0)*cj3*x15429*x15441)));
evalcond[7]=(((r10*x15433))+((r11*x15439))+(((-1.0)*sj3*x15428*x15441))+x15446+((x15429*x15444))+(((-1.0)*r12*sj3*x15442)));
evalcond[8]=(((r21*x15439))+(((-1.0)*r22*sj3*x15442))+(((-1.0)*sj3*x15434*x15441))+(((-1.0)*x15435))+x15430+((r20*x15425*x15436))+((r20*x15433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15447=((1.0)*cj5);
CheckValue<IkReal> x15448 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15447)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15448.valid){
continue;
}
CheckValue<IkReal> x15449=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15447))+(((-1.0)*r20*sj5)))),-1);
if(!x15449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15448.value)+(((1.5707963267949)*(x15449.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15450=IKsin(j4);
IkReal x15451=IKcos(j4);
IkReal x15452=(cj2*sj1);
IkReal x15453=(cj1*sj2);
IkReal x15454=(r11*sj5);
IkReal x15455=(cj5*r10);
IkReal x15456=(sj1*sj2);
IkReal x15457=(cj5*r01);
IkReal x15458=(cj5*r00);
IkReal x15459=(cj3*sj5);
IkReal x15460=(r21*sj5);
IkReal x15461=(cj1*cj2);
IkReal x15462=(cj5*sj3);
IkReal x15463=(sj3*sj5);
IkReal x15464=(r01*sj5);
IkReal x15465=(cj3*cj5);
IkReal x15466=(cj5*r20);
IkReal x15467=((1.0)*x15451);
IkReal x15468=((1.0)*x15450);
IkReal x15469=(cj3*x15451);
IkReal x15470=(sj3*x15451);
IkReal x15471=(cj3*x15450);
IkReal x15472=(x15452+x15453);
evalcond[0]=(((x15450*x15460))+(((-1.0)*r22*x15467))+(((-1.0)*x15466*x15468)));
evalcond[1]=(((x15450*x15454))+(((-1.0)*x15455*x15468))+(((-1.0)*r12*x15467)));
evalcond[2]=((1.0)+((x15450*x15464))+(((-1.0)*x15458*x15468))+(((-1.0)*r02*x15467)));
evalcond[3]=(((r01*x15451*x15459))+((r02*x15471))+((sj3*x15457))+(((-1.0)*cj3*x15458*x15467))+((r00*x15463)));
evalcond[4]=(((cj3*x15457))+((x15458*x15470))+((r00*x15459))+(((-1.0)*r01*x15463*x15467))+(((-1.0)*r02*sj3*x15468)));
evalcond[5]=((((-1.0)*r20*x15465*x15467))+((r22*x15471))+((r21*x15462))+((r21*x15451*x15459))+x15472+((r20*x15463)));
evalcond[6]=(((x15454*x15469))+((r12*x15471))+x15461+((r11*x15462))+((r10*x15463))+(((-1.0)*cj3*x15455*x15467))+(((-1.0)*x15456)));
evalcond[7]=(((x15455*x15470))+((r10*x15459))+(((-1.0)*sj3*x15454*x15467))+x15472+((r11*x15465))+(((-1.0)*r12*sj3*x15468)));
evalcond[8]=(((r20*x15459))+(((-1.0)*sj3*x15460*x15467))+(((-1.0)*x15461))+((r21*x15465))+x15456+((r20*x15451*x15462))+(((-1.0)*r22*sj3*x15468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15473 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15473.valid){
continue;
}
CheckValue<IkReal> x15474=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15473.value)+(((1.5707963267949)*(x15474.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15475=IKsin(j4);
IkReal x15476=IKcos(j4);
IkReal x15477=(cj2*sj1);
IkReal x15478=(cj1*sj2);
IkReal x15479=(r11*sj5);
IkReal x15480=(cj5*r10);
IkReal x15481=(sj1*sj2);
IkReal x15482=(cj5*r01);
IkReal x15483=(cj5*r00);
IkReal x15484=(cj3*sj5);
IkReal x15485=(r21*sj5);
IkReal x15486=(cj1*cj2);
IkReal x15487=(cj5*sj3);
IkReal x15488=(sj3*sj5);
IkReal x15489=(r01*sj5);
IkReal x15490=(cj3*cj5);
IkReal x15491=(cj5*r20);
IkReal x15492=((1.0)*x15476);
IkReal x15493=((1.0)*x15475);
IkReal x15494=(cj3*x15476);
IkReal x15495=(sj3*x15476);
IkReal x15496=(cj3*x15475);
IkReal x15497=(x15478+x15477);
evalcond[0]=(((x15475*x15485))+(((-1.0)*r22*x15492))+(((-1.0)*x15491*x15493)));
evalcond[1]=(((x15475*x15479))+(((-1.0)*x15480*x15493))+(((-1.0)*r12*x15492)));
evalcond[2]=((1.0)+(((-1.0)*x15483*x15493))+((x15475*x15489))+(((-1.0)*r02*x15492)));
evalcond[3]=(((sj3*x15482))+((r01*x15476*x15484))+((r02*x15496))+(((-1.0)*cj3*x15483*x15492))+((r00*x15488)));
evalcond[4]=((((-1.0)*r02*sj3*x15493))+(((-1.0)*r01*x15488*x15492))+((cj3*x15482))+((x15483*x15495))+((r00*x15484)));
evalcond[5]=((((-1.0)*r20*x15490*x15492))+((r21*x15487))+((r21*x15476*x15484))+x15497+((r22*x15496))+((r20*x15488)));
evalcond[6]=(((x15479*x15494))+((r12*x15496))+((r10*x15488))+((r11*x15487))+x15486+(((-1.0)*x15481))+(((-1.0)*cj3*x15480*x15492)));
evalcond[7]=(((r10*x15484))+((r11*x15490))+(((-1.0)*sj3*x15479*x15492))+(((-1.0)*r12*sj3*x15493))+x15497+((x15480*x15495)));
evalcond[8]=((((-1.0)*r22*sj3*x15493))+x15481+(((-1.0)*x15486))+((r20*x15476*x15487))+((r21*x15490))+((r20*x15484))+(((-1.0)*sj3*x15485*x15492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15498=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15498);
rxp1_1=(px*r21);
rxp1_2=(r11*x15498);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15499=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15499);
rxp1_1=(px*r21);
rxp1_2=(r11*x15499);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15500=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x15500)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15500)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15501=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15501);
rxp1_1=(px*r21);
rxp1_2=(r11*x15501);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15502=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15502);
rxp1_1=(px*r21);
rxp1_2=(r11*x15502);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15503=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15503);
rxp1_1=(px*r21);
rxp1_2=(r11*x15503);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15504=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15504);
rxp1_1=(px*r21);
rxp1_2=(r11*x15504);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15507=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15507.valid){
continue;
}
IkReal x15505=x15507.value;
IkReal x15506=(sj0*x15505);
cj4array[0]=(((cj1*sj2*x15506))+((cj2*sj1*x15506)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15508=IKsin(j4);
IkReal x15509=IKcos(j4);
IkReal x15510=(cj5*r20);
IkReal x15511=(r21*sj5);
IkReal x15512=((1.0)*x15508);
IkReal x15513=((1.0)*x15509);
evalcond[0]=((-1.0)*r02*x15508);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15513)));
evalcond[2]=(((x15508*x15511))+(((-1.0)*x15510*x15512)));
evalcond[3]=(((r11*sj5*x15508))+(((-1.0)*cj5*r10*x15512)));
evalcond[4]=(((x15509*x15510))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15511*x15513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15515=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15515.valid){
continue;
}
IkReal x15514=x15515.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15514))+((cj1*cj2*x15514)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15516=IKsin(j4);
IkReal x15517=IKcos(j4);
IkReal x15518=(r11*sj5);
IkReal x15519=((1.0)*sj0);
IkReal x15520=((1.0)*x15517);
IkReal x15521=((1.0)*cj5*x15516);
evalcond[0]=((-1.0)*r02*x15516);
evalcond[1]=((((-1.0)*r02*x15520))+(((-1.0)*x15519)));
evalcond[2]=((((-1.0)*r20*x15521))+((r21*sj5*x15516)));
evalcond[3]=(((x15516*x15518))+(((-1.0)*r10*x15521)));
evalcond[4]=((((-1.0)*x15518*x15520))+(((-1.0)*cj1*sj2*x15519))+((cj5*r10*x15517))+(((-1.0)*cj2*sj1*x15519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15522=IKPowWithIntegerCheck(r02,-1);
if(!x15522.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15522.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15523=IKsin(j4);
IkReal x15524=IKcos(j4);
IkReal x15525=((1.0)*sj0);
IkReal x15526=(cj5*x15524);
IkReal x15527=(sj5*x15523);
IkReal x15528=((1.0)*sj5*x15524);
IkReal x15529=((1.0)*cj5*x15523);
evalcond[0]=((-1.0)*r02*x15523);
evalcond[1]=((((-1.0)*r20*x15529))+((r21*x15527)));
evalcond[2]=((((-1.0)*r10*x15529))+((r11*x15527)));
evalcond[3]=((((-1.0)*r21*x15528))+((r20*x15526))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*r11*x15528))+((r10*x15526))+(((-1.0)*cj2*sj1*x15525))+(((-1.0)*cj1*sj2*x15525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15530=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15530);
rxp1_1=(px*r21);
rxp1_2=(r11*x15530);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15531=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15531);
rxp1_1=(px*r21);
rxp1_2=(r11*x15531);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15532=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15532);
rxp1_1=(px*r21);
rxp1_2=(r11*x15532);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15535=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15535.valid){
continue;
}
IkReal x15533=x15535.value;
IkReal x15534=(sj0*x15533);
cj4array[0]=(((cj1*sj2*x15534))+((cj2*sj1*x15534)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15536=IKsin(j4);
IkReal x15537=IKcos(j4);
IkReal x15538=(r21*sj5);
IkReal x15539=((1.0)*cj5*r20);
evalcond[0]=(r02*x15536);
evalcond[1]=((((-1.0)*r02*x15537))+(((-1.0)*sj0)));
evalcond[2]=(((x15536*x15538))+(((-1.0)*x15536*x15539)));
evalcond[3]=(((r11*sj5*x15536))+(((-1.0)*cj5*r10*x15536)));
evalcond[4]=(((x15537*x15538))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15537*x15539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15541=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15541.valid){
continue;
}
IkReal x15540=x15541.value;
cj4array[0]=(((cj1*cj2*x15540))+(((-1.0)*sj1*sj2*x15540)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15542=IKsin(j4);
IkReal x15543=IKcos(j4);
IkReal x15544=((1.0)*sj0);
IkReal x15545=((1.0)*cj5);
IkReal x15546=(sj5*x15542);
evalcond[0]=(r02*x15542);
evalcond[1]=((((-1.0)*x15544))+(((-1.0)*r02*x15543)));
evalcond[2]=((((-1.0)*r20*x15542*x15545))+((r21*x15546)));
evalcond[3]=((((-1.0)*r10*x15542*x15545))+((r11*x15546)));
evalcond[4]=((((-1.0)*cj1*sj2*x15544))+(((-1.0)*r10*x15543*x15545))+(((-1.0)*cj2*sj1*x15544))+((r11*sj5*x15543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15547=IKPowWithIntegerCheck(r02,-1);
if(!x15547.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15547.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15548=IKsin(j4);
IkReal x15549=IKcos(j4);
IkReal x15550=((1.0)*cj1);
IkReal x15551=(r21*sj5);
IkReal x15552=((1.0)*cj5);
IkReal x15553=(r11*sj5);
evalcond[0]=(r02*x15548);
evalcond[1]=((((-1.0)*r20*x15548*x15552))+((x15548*x15551)));
evalcond[2]=((((-1.0)*r10*x15548*x15552))+((x15548*x15553)));
evalcond[3]=((((-1.0)*r20*x15549*x15552))+(((-1.0)*cj2*x15550))+((sj1*sj2))+((x15549*x15551)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x15550))+(((-1.0)*r10*x15549*x15552))+((x15549*x15553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15554 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15554.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15554.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15555 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15555.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15555.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15556=((-1.0)*r10);
CheckValue<IkReal> x15558 = IKatan2WithCheck(IkReal(x15556),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15558.valid){
continue;
}
IkReal x15557=((-1.0)*(x15558.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15556);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15557;
IkReal gconst66=x15557;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15559=((-1.0)*r10);
CheckValue<IkReal> x15561 = IKatan2WithCheck(IkReal(x15559),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15561.valid){
continue;
}
IkReal x15560=((-1.0)*(x15561.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15559);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15560;
IkReal gconst66=x15560;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15562=((-1.0)*r10);
CheckValue<IkReal> x15564 = IKatan2WithCheck(IkReal(x15562),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15564.valid){
continue;
}
IkReal x15563=((-1.0)*(x15564.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15562);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15563;
IkReal gconst66=x15563;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15565=((1.0)*gconst67);
IkReal x15566=(cj1*cj2);
IkReal x15567=((1.0)*sj1*sj2);
CheckValue<IkReal> x15568=IKPowWithIntegerCheck(cj3,-1);
if(!x15568.valid){
continue;
}
CheckValue<IkReal> x15569=IKPowWithIntegerCheck(r02,-1);
if(!x15569.valid){
continue;
}
CheckValue<IkReal> x15570=IKPowWithIntegerCheck((((gconst68*r20*sj3))+(((-1.0)*r21*sj3*x15565))),-1);
if(!x15570.valid){
continue;
}
if( IKabs(((x15568.value)*(x15569.value)*((((cj0*x15566))+(((-1.0)*cj0*x15567)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15570.value)*(((((-1.0)*cj3*r20*x15565))+x15566+(((-1.0)*x15567))+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15568.value)*(x15569.value)*((((cj0*x15566))+(((-1.0)*cj0*x15567))))))+IKsqr(((x15570.value)*(((((-1.0)*cj3*r20*x15565))+x15566+(((-1.0)*x15567))+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15568.value)*(x15569.value)*((((cj0*x15566))+(((-1.0)*cj0*x15567))))), ((x15570.value)*(((((-1.0)*cj3*r20*x15565))+x15566+(((-1.0)*x15567))+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15571=IKsin(j4);
IkReal x15572=IKcos(j4);
IkReal x15573=(sj1*sj2);
IkReal x15574=(gconst68*sj3);
IkReal x15575=(gconst67*r11);
IkReal x15576=(gconst67*sj3);
IkReal x15577=((1.0)*gconst68);
IkReal x15578=(cj2*sj1);
IkReal x15579=((1.0)*cj0);
IkReal x15580=((1.0)*sj0);
IkReal x15581=(cj3*gconst67);
IkReal x15582=(cj3*gconst68);
IkReal x15583=(cj1*sj2);
IkReal x15584=(gconst67*r21);
IkReal x15585=((1.0)*cj1*cj2);
IkReal x15586=(cj3*x15572);
IkReal x15587=((1.0)*x15572);
IkReal x15588=(r02*x15571);
evalcond[0]=((((-1.0)*x15580))+(((-1.0)*r02*x15587)));
evalcond[1]=((((-1.0)*r20*x15571*x15577))+((x15571*x15584)));
evalcond[2]=(cj0+(((-1.0)*r10*x15571*x15577))+((x15571*x15575)));
evalcond[3]=(((cj0*x15573))+(((-1.0)*cj1*cj2*x15579))+((cj3*x15588)));
evalcond[4]=((((-1.0)*x15579*x15583))+(((-1.0)*sj3*x15588))+(((-1.0)*x15578*x15579)));
evalcond[5]=(((r21*x15574))+((r20*x15576))+(((-1.0)*r20*x15577*x15586))+x15578+x15583+((r21*x15572*x15581)));
evalcond[6]=((((-1.0)*x15585))+(((-1.0)*r21*x15576*x15587))+x15573+((r20*x15581))+((r20*x15572*x15574))+((r21*x15582)));
evalcond[7]=(((sj0*x15573))+((r10*x15576))+(((-1.0)*cj1*cj2*x15580))+((r11*x15574))+((x15575*x15586))+(((-1.0)*r10*x15577*x15586)));
evalcond[8]=((((-1.0)*sj3*x15575*x15587))+((r11*x15582))+((r10*x15581))+(((-1.0)*x15580*x15583))+(((-1.0)*x15578*x15580))+((r10*x15572*x15574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15591=IKPowWithIntegerCheck(r02,-1);
if(!x15591.valid){
continue;
}
IkReal x15589=x15591.value;
IkReal x15590=((1.0)*cj0);
CheckValue<IkReal> x15592=IKPowWithIntegerCheck(sj3,-1);
if(!x15592.valid){
continue;
}
if( IKabs((x15589*(x15592.value)*(((((-1.0)*cj1*sj2*x15590))+(((-1.0)*cj2*sj1*x15590)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15589)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15589*(x15592.value)*(((((-1.0)*cj1*sj2*x15590))+(((-1.0)*cj2*sj1*x15590))))))+IKsqr(((-1.0)*sj0*x15589))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15589*(x15592.value)*(((((-1.0)*cj1*sj2*x15590))+(((-1.0)*cj2*sj1*x15590))))), ((-1.0)*sj0*x15589));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15593=IKsin(j4);
IkReal x15594=IKcos(j4);
IkReal x15595=(sj1*sj2);
IkReal x15596=(gconst68*sj3);
IkReal x15597=(gconst67*r11);
IkReal x15598=(gconst67*sj3);
IkReal x15599=((1.0)*gconst68);
IkReal x15600=(cj2*sj1);
IkReal x15601=((1.0)*cj0);
IkReal x15602=((1.0)*sj0);
IkReal x15603=(cj3*gconst67);
IkReal x15604=(cj3*gconst68);
IkReal x15605=(cj1*sj2);
IkReal x15606=(gconst67*r21);
IkReal x15607=((1.0)*cj1*cj2);
IkReal x15608=(cj3*x15594);
IkReal x15609=((1.0)*x15594);
IkReal x15610=(r02*x15593);
evalcond[0]=((((-1.0)*r02*x15609))+(((-1.0)*x15602)));
evalcond[1]=(((x15593*x15606))+(((-1.0)*r20*x15593*x15599)));
evalcond[2]=((((-1.0)*r10*x15593*x15599))+cj0+((x15593*x15597)));
evalcond[3]=(((cj0*x15595))+((cj3*x15610))+(((-1.0)*cj1*cj2*x15601)));
evalcond[4]=((((-1.0)*x15600*x15601))+(((-1.0)*x15601*x15605))+(((-1.0)*sj3*x15610)));
evalcond[5]=(((r21*x15596))+((r20*x15598))+x15600+x15605+(((-1.0)*r20*x15599*x15608))+((r21*x15594*x15603)));
evalcond[6]=((((-1.0)*x15607))+(((-1.0)*r21*x15598*x15609))+((r20*x15594*x15596))+((r20*x15603))+x15595+((r21*x15604)));
evalcond[7]=(((sj0*x15595))+((r11*x15596))+((r10*x15598))+(((-1.0)*cj1*cj2*x15602))+(((-1.0)*r10*x15599*x15608))+((x15597*x15608)));
evalcond[8]=(((r10*x15594*x15596))+(((-1.0)*x15602*x15605))+(((-1.0)*x15600*x15602))+((r10*x15603))+(((-1.0)*sj3*x15597*x15609))+((r11*x15604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15612=IKPowWithIntegerCheck(r02,-1);
if(!x15612.valid){
continue;
}
IkReal x15611=x15612.value;
CheckValue<IkReal> x15613=IKPowWithIntegerCheck(cj3,-1);
if(!x15613.valid){
continue;
}
if( IKabs((x15611*(x15613.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15611)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15611*(x15613.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15611))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15611*(x15613.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15611));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15614=IKsin(j4);
IkReal x15615=IKcos(j4);
IkReal x15616=(sj1*sj2);
IkReal x15617=(gconst68*sj3);
IkReal x15618=(gconst67*r11);
IkReal x15619=(gconst67*sj3);
IkReal x15620=((1.0)*gconst68);
IkReal x15621=(cj2*sj1);
IkReal x15622=((1.0)*cj0);
IkReal x15623=((1.0)*sj0);
IkReal x15624=(cj3*gconst67);
IkReal x15625=(cj3*gconst68);
IkReal x15626=(cj1*sj2);
IkReal x15627=(gconst67*r21);
IkReal x15628=((1.0)*cj1*cj2);
IkReal x15629=(cj3*x15615);
IkReal x15630=((1.0)*x15615);
IkReal x15631=(r02*x15614);
evalcond[0]=((((-1.0)*x15623))+(((-1.0)*r02*x15630)));
evalcond[1]=(((x15614*x15627))+(((-1.0)*r20*x15614*x15620)));
evalcond[2]=((((-1.0)*r10*x15614*x15620))+((x15614*x15618))+cj0);
evalcond[3]=(((cj3*x15631))+((cj0*x15616))+(((-1.0)*cj1*cj2*x15622)));
evalcond[4]=((((-1.0)*sj3*x15631))+(((-1.0)*x15622*x15626))+(((-1.0)*x15621*x15622)));
evalcond[5]=(((r21*x15617))+((r21*x15615*x15624))+x15626+x15621+((r20*x15619))+(((-1.0)*r20*x15620*x15629)));
evalcond[6]=(((r21*x15625))+(((-1.0)*x15628))+x15616+((r20*x15624))+(((-1.0)*r21*x15619*x15630))+((r20*x15615*x15617)));
evalcond[7]=(((sj0*x15616))+(((-1.0)*r10*x15620*x15629))+((x15618*x15629))+((r11*x15617))+((r10*x15619))+(((-1.0)*cj1*cj2*x15623)));
evalcond[8]=((((-1.0)*sj3*x15618*x15630))+(((-1.0)*x15623*x15626))+(((-1.0)*x15621*x15623))+((r10*x15615*x15617))+((r11*x15625))+((r10*x15624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15632=((-1.0)*r10);
CheckValue<IkReal> x15633 = IKatan2WithCheck(IkReal(x15632),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15633.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15633.value))));
IkReal gconst70=x15632;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15634 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15634.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15634.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15635=((-1.0)*r10);
IkReal x15636=((-1.0)*r11);
CheckValue<IkReal> x15638 = IKatan2WithCheck(IkReal(x15635),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15638.valid){
continue;
}
IkReal x15637=((1.0)*(x15638.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15635);
rxp1_1=(px*r21);
rxp1_2=(px*x15636);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15637)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15637)));
IkReal gconst70=x15635;
IkReal gconst71=x15636;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15639=((-1.0)*r10);
IkReal x15640=((-1.0)*r11);
CheckValue<IkReal> x15642 = IKatan2WithCheck(IkReal(x15639),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15642.valid){
continue;
}
IkReal x15641=((1.0)*(x15642.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15639);
rxp1_1=(px*r21);
rxp1_2=(px*x15640);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15641)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15641)));
IkReal gconst70=x15639;
IkReal gconst71=x15640;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15643=((-1.0)*r10);
IkReal x15644=((-1.0)*r11);
CheckValue<IkReal> x15646 = IKatan2WithCheck(IkReal(x15643),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15646.valid){
continue;
}
IkReal x15645=((1.0)*(x15646.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15643);
rxp1_1=(px*r21);
rxp1_2=(px*x15644);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15645)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15645)));
IkReal gconst70=x15643;
IkReal gconst71=x15644;
IkReal x15647=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r10*r21*x15647))+(((-1.0)*r11*r20*x15647)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15648=((1.0)*r21);
IkReal x15649=(cj1*cj2);
IkReal x15650=((1.0)*sj1*sj2);
CheckValue<IkReal> x15651=IKPowWithIntegerCheck(cj3,-1);
if(!x15651.valid){
continue;
}
CheckValue<IkReal> x15652=IKPowWithIntegerCheck(r02,-1);
if(!x15652.valid){
continue;
}
CheckValue<IkReal> x15653=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x15648))+((gconst71*r20*sj3))),-1);
if(!x15653.valid){
continue;
}
if( IKabs(((x15651.value)*(x15652.value)*(((((-1.0)*cj0*x15650))+((cj0*x15649)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15653.value)*((x15649+(((-1.0)*x15650))+(((-1.0)*cj3*gconst70*r20))+(((-1.0)*cj3*gconst71*x15648)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15651.value)*(x15652.value)*(((((-1.0)*cj0*x15650))+((cj0*x15649))))))+IKsqr(((x15653.value)*((x15649+(((-1.0)*x15650))+(((-1.0)*cj3*gconst70*r20))+(((-1.0)*cj3*gconst71*x15648))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15651.value)*(x15652.value)*(((((-1.0)*cj0*x15650))+((cj0*x15649))))), ((x15653.value)*((x15649+(((-1.0)*x15650))+(((-1.0)*cj3*gconst70*r20))+(((-1.0)*cj3*gconst71*x15648))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15654=IKsin(j4);
IkReal x15655=IKcos(j4);
IkReal x15656=(cj3*gconst70);
IkReal x15657=(sj1*sj2);
IkReal x15658=((1.0)*gconst71);
IkReal x15659=(gconst71*sj3);
IkReal x15660=(cj2*sj1);
IkReal x15661=((1.0)*sj0);
IkReal x15662=(gconst70*r11);
IkReal x15663=(gconst70*sj3);
IkReal x15664=((1.0)*cj0);
IkReal x15665=(cj3*gconst71);
IkReal x15666=(cj1*sj2);
IkReal x15667=((1.0)*cj1*cj2);
IkReal x15668=(r21*x15655);
IkReal x15669=(r10*x15655);
IkReal x15670=((1.0)*x15655);
IkReal x15671=(r02*x15654);
IkReal x15672=(r20*x15655);
evalcond[0]=((((-1.0)*x15661))+(((-1.0)*r02*x15670)));
evalcond[1]=(((gconst70*r21*x15654))+(((-1.0)*r20*x15654*x15658)));
evalcond[2]=(cj0+((x15654*x15662))+(((-1.0)*r10*x15654*x15658)));
evalcond[3]=(((cj3*x15671))+(((-1.0)*cj1*cj2*x15664))+((cj0*x15657)));
evalcond[4]=((((-1.0)*x15664*x15666))+(((-1.0)*sj3*x15671))+(((-1.0)*x15660*x15664)));
evalcond[5]=(((r20*x15663))+x15660+x15666+(((-1.0)*cj3*x15658*x15672))+((x15656*x15668))+((r21*x15659)));
evalcond[6]=((((-1.0)*x15667))+x15657+((x15659*x15672))+((r21*x15665))+((r20*x15656))+(((-1.0)*x15663*x15668)));
evalcond[7]=(((r11*x15655*x15656))+((r10*x15663))+((r11*x15659))+(((-1.0)*cj1*cj2*x15661))+(((-1.0)*cj3*x15658*x15669))+((sj0*x15657)));
evalcond[8]=(((r10*x15656))+(((-1.0)*sj3*x15662*x15670))+((r11*x15665))+(((-1.0)*x15661*x15666))+((x15659*x15669))+(((-1.0)*x15660*x15661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15675=IKPowWithIntegerCheck(r02,-1);
if(!x15675.valid){
continue;
}
IkReal x15673=x15675.value;
IkReal x15674=((1.0)*cj0);
CheckValue<IkReal> x15676=IKPowWithIntegerCheck(sj3,-1);
if(!x15676.valid){
continue;
}
if( IKabs((x15673*(x15676.value)*(((((-1.0)*cj1*sj2*x15674))+(((-1.0)*cj2*sj1*x15674)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15673)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15673*(x15676.value)*(((((-1.0)*cj1*sj2*x15674))+(((-1.0)*cj2*sj1*x15674))))))+IKsqr(((-1.0)*sj0*x15673))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15673*(x15676.value)*(((((-1.0)*cj1*sj2*x15674))+(((-1.0)*cj2*sj1*x15674))))), ((-1.0)*sj0*x15673));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15677=IKsin(j4);
IkReal x15678=IKcos(j4);
IkReal x15679=(cj3*gconst70);
IkReal x15680=(sj1*sj2);
IkReal x15681=((1.0)*gconst71);
IkReal x15682=(gconst71*sj3);
IkReal x15683=(cj2*sj1);
IkReal x15684=((1.0)*sj0);
IkReal x15685=(gconst70*r11);
IkReal x15686=(gconst70*sj3);
IkReal x15687=((1.0)*cj0);
IkReal x15688=(cj3*gconst71);
IkReal x15689=(cj1*sj2);
IkReal x15690=((1.0)*cj1*cj2);
IkReal x15691=(r21*x15678);
IkReal x15692=(r10*x15678);
IkReal x15693=((1.0)*x15678);
IkReal x15694=(r02*x15677);
IkReal x15695=(r20*x15678);
evalcond[0]=((((-1.0)*r02*x15693))+(((-1.0)*x15684)));
evalcond[1]=((((-1.0)*r20*x15677*x15681))+((gconst70*r21*x15677)));
evalcond[2]=(cj0+((x15677*x15685))+(((-1.0)*r10*x15677*x15681)));
evalcond[3]=(((cj3*x15694))+((cj0*x15680))+(((-1.0)*cj1*cj2*x15687)));
evalcond[4]=((((-1.0)*x15683*x15687))+(((-1.0)*x15687*x15689))+(((-1.0)*sj3*x15694)));
evalcond[5]=(((r20*x15686))+(((-1.0)*cj3*x15681*x15695))+x15689+x15683+((x15679*x15691))+((r21*x15682)));
evalcond[6]=((((-1.0)*x15690))+((r20*x15679))+((x15682*x15695))+x15680+(((-1.0)*x15686*x15691))+((r21*x15688)));
evalcond[7]=(((r11*x15678*x15679))+((r10*x15686))+(((-1.0)*cj3*x15681*x15692))+((r11*x15682))+((sj0*x15680))+(((-1.0)*cj1*cj2*x15684)));
evalcond[8]=(((r10*x15679))+(((-1.0)*x15684*x15689))+(((-1.0)*x15683*x15684))+((x15682*x15692))+((r11*x15688))+(((-1.0)*sj3*x15685*x15693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15697=IKPowWithIntegerCheck(r02,-1);
if(!x15697.valid){
continue;
}
IkReal x15696=x15697.value;
CheckValue<IkReal> x15698=IKPowWithIntegerCheck(cj3,-1);
if(!x15698.valid){
continue;
}
if( IKabs((x15696*(x15698.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15696)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15696*(x15698.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15696))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15696*(x15698.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15696));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15699=IKsin(j4);
IkReal x15700=IKcos(j4);
IkReal x15701=(cj3*gconst70);
IkReal x15702=(sj1*sj2);
IkReal x15703=((1.0)*gconst71);
IkReal x15704=(gconst71*sj3);
IkReal x15705=(cj2*sj1);
IkReal x15706=((1.0)*sj0);
IkReal x15707=(gconst70*r11);
IkReal x15708=(gconst70*sj3);
IkReal x15709=((1.0)*cj0);
IkReal x15710=(cj3*gconst71);
IkReal x15711=(cj1*sj2);
IkReal x15712=((1.0)*cj1*cj2);
IkReal x15713=(r21*x15700);
IkReal x15714=(r10*x15700);
IkReal x15715=((1.0)*x15700);
IkReal x15716=(r02*x15699);
IkReal x15717=(r20*x15700);
evalcond[0]=((((-1.0)*x15706))+(((-1.0)*r02*x15715)));
evalcond[1]=((((-1.0)*r20*x15699*x15703))+((gconst70*r21*x15699)));
evalcond[2]=(cj0+(((-1.0)*r10*x15699*x15703))+((x15699*x15707)));
evalcond[3]=(((cj0*x15702))+(((-1.0)*cj1*cj2*x15709))+((cj3*x15716)));
evalcond[4]=((((-1.0)*x15705*x15709))+(((-1.0)*sj3*x15716))+(((-1.0)*x15709*x15711)));
evalcond[5]=(((r20*x15708))+x15705+x15711+((r21*x15704))+(((-1.0)*cj3*x15703*x15717))+((x15701*x15713)));
evalcond[6]=((((-1.0)*x15712))+((x15704*x15717))+((r20*x15701))+((r21*x15710))+x15702+(((-1.0)*x15708*x15713)));
evalcond[7]=(((r11*x15704))+((sj0*x15702))+(((-1.0)*cj1*cj2*x15706))+((r10*x15708))+((r11*x15700*x15701))+(((-1.0)*cj3*x15703*x15714)));
evalcond[8]=((((-1.0)*x15706*x15711))+(((-1.0)*x15705*x15706))+(((-1.0)*sj3*x15707*x15715))+((x15704*x15714))+((r10*x15701))+((r11*x15710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15719=IKPowWithIntegerCheck(r02,-1);
if(!x15719.valid){
continue;
}
IkReal x15718=x15719.value;
CheckValue<IkReal> x15720=IKPowWithIntegerCheck(cj3,-1);
if(!x15720.valid){
continue;
}
if( IKabs((x15718*(x15720.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15718)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15718*(x15720.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15718))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15718*(x15720.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15718));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15721=IKsin(j4);
IkReal x15722=IKcos(j4);
IkReal x15723=(cj5*r10);
IkReal x15724=(sj1*sj2);
IkReal x15725=(cj5*sj3);
IkReal x15726=(r11*sj5);
IkReal x15727=(cj3*cj5);
IkReal x15728=(cj3*sj5);
IkReal x15729=(r21*sj5);
IkReal x15730=(cj2*sj1);
IkReal x15731=((1.0)*sj0);
IkReal x15732=((1.0)*cj0);
IkReal x15733=(sj3*sj5);
IkReal x15734=(cj1*sj2);
IkReal x15735=((1.0)*cj1*cj2);
IkReal x15736=((1.0)*x15721);
IkReal x15737=(r20*x15722);
IkReal x15738=(cj3*x15722);
IkReal x15739=(sj3*x15722);
evalcond[0]=((((-1.0)*r02*x15722))+(((-1.0)*x15731)));
evalcond[1]=(((x15721*x15729))+(((-1.0)*cj5*r20*x15736)));
evalcond[2]=(cj0+(((-1.0)*x15723*x15736))+((x15721*x15726)));
evalcond[3]=(((cj3*r02*x15721))+((cj0*x15724))+(((-1.0)*cj1*cj2*x15732)));
evalcond[4]=((((-1.0)*x15732*x15734))+(((-1.0)*x15730*x15732))+(((-1.0)*r02*sj3*x15736)));
evalcond[5]=((((-1.0)*x15727*x15737))+((r20*x15733))+((r21*x15725))+x15730+x15734+((r21*x15722*x15728)));
evalcond[6]=((((-1.0)*x15735))+((r20*x15728))+((r21*x15727))+x15724+((x15725*x15737))+(((-1.0)*x15729*x15739)));
evalcond[7]=((((-1.0)*x15723*x15738))+((r11*x15725))+(((-1.0)*cj1*cj2*x15731))+((sj0*x15724))+((x15726*x15738))+((r10*x15733)));
evalcond[8]=(((x15723*x15739))+((r11*x15727))+(((-1.0)*x15731*x15734))+(((-1.0)*x15730*x15731))+(((-1.0)*x15726*x15739))+((r10*x15728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15740=((1.0)*sj3);
IkReal x15741=((1.0)*cj5);
CheckValue<IkReal> x15742=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x15741))),-1);
if(!x15742.valid){
continue;
}
CheckValue<IkReal> x15743=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x15741))+((cj3*r21*sj5))),-1);
if(!x15743.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15742.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15743.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15740))+(((-1.0)*cj5*r21*x15740)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15742.value)))+IKsqr(((x15743.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15740))+(((-1.0)*cj5*r21*x15740))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15742.value)), ((x15743.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15740))+(((-1.0)*cj5*r21*x15740))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15744=IKsin(j4);
IkReal x15745=IKcos(j4);
IkReal x15746=(cj5*r10);
IkReal x15747=(sj1*sj2);
IkReal x15748=(cj5*sj3);
IkReal x15749=(r11*sj5);
IkReal x15750=(cj3*cj5);
IkReal x15751=(cj3*sj5);
IkReal x15752=(r21*sj5);
IkReal x15753=(cj2*sj1);
IkReal x15754=((1.0)*sj0);
IkReal x15755=((1.0)*cj0);
IkReal x15756=(sj3*sj5);
IkReal x15757=(cj1*sj2);
IkReal x15758=((1.0)*cj1*cj2);
IkReal x15759=((1.0)*x15744);
IkReal x15760=(r20*x15745);
IkReal x15761=(cj3*x15745);
IkReal x15762=(sj3*x15745);
evalcond[0]=((((-1.0)*r02*x15745))+(((-1.0)*x15754)));
evalcond[1]=((((-1.0)*cj5*r20*x15759))+((x15744*x15752)));
evalcond[2]=((((-1.0)*x15746*x15759))+cj0+((x15744*x15749)));
evalcond[3]=(((cj3*r02*x15744))+((cj0*x15747))+(((-1.0)*cj1*cj2*x15755)));
evalcond[4]=((((-1.0)*x15753*x15755))+(((-1.0)*r02*sj3*x15759))+(((-1.0)*x15755*x15757)));
evalcond[5]=((((-1.0)*x15750*x15760))+((r21*x15745*x15751))+((r20*x15756))+((r21*x15748))+x15753+x15757);
evalcond[6]=((((-1.0)*x15758))+((r21*x15750))+((r20*x15751))+x15747+(((-1.0)*x15752*x15762))+((x15748*x15760)));
evalcond[7]=(((r10*x15756))+((x15749*x15761))+((r11*x15748))+((sj0*x15747))+(((-1.0)*cj1*cj2*x15754))+(((-1.0)*x15746*x15761)));
evalcond[8]=(((r10*x15751))+(((-1.0)*x15753*x15754))+(((-1.0)*x15754*x15757))+((r11*x15750))+(((-1.0)*x15749*x15762))+((x15746*x15762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15763=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15763.valid){
continue;
}
CheckValue<IkReal> x15764=IKPowWithIntegerCheck(r02,-1);
if(!x15764.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15763.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15764.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15763.value)))+IKsqr(((-1.0)*sj0*(x15764.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15763.value)), ((-1.0)*sj0*(x15764.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15765=IKsin(j4);
IkReal x15766=IKcos(j4);
IkReal x15767=(cj5*r10);
IkReal x15768=(sj1*sj2);
IkReal x15769=(cj5*sj3);
IkReal x15770=(r11*sj5);
IkReal x15771=(cj3*cj5);
IkReal x15772=(cj3*sj5);
IkReal x15773=(r21*sj5);
IkReal x15774=(cj2*sj1);
IkReal x15775=((1.0)*sj0);
IkReal x15776=((1.0)*cj0);
IkReal x15777=(sj3*sj5);
IkReal x15778=(cj1*sj2);
IkReal x15779=((1.0)*cj1*cj2);
IkReal x15780=((1.0)*x15765);
IkReal x15781=(r20*x15766);
IkReal x15782=(cj3*x15766);
IkReal x15783=(sj3*x15766);
evalcond[0]=((((-1.0)*r02*x15766))+(((-1.0)*x15775)));
evalcond[1]=(((x15765*x15773))+(((-1.0)*cj5*r20*x15780)));
evalcond[2]=(((x15765*x15770))+cj0+(((-1.0)*x15767*x15780)));
evalcond[3]=(((cj0*x15768))+(((-1.0)*cj1*cj2*x15776))+((cj3*r02*x15765)));
evalcond[4]=((((-1.0)*x15776*x15778))+(((-1.0)*r02*sj3*x15780))+(((-1.0)*x15774*x15776)));
evalcond[5]=(((r21*x15769))+((r21*x15766*x15772))+((r20*x15777))+x15778+x15774+(((-1.0)*x15771*x15781)));
evalcond[6]=(((x15769*x15781))+((r21*x15771))+(((-1.0)*x15779))+((r20*x15772))+x15768+(((-1.0)*x15773*x15783)));
evalcond[7]=(((r10*x15777))+(((-1.0)*x15767*x15782))+((sj0*x15768))+(((-1.0)*cj1*cj2*x15775))+((x15770*x15782))+((r11*x15769)));
evalcond[8]=(((r10*x15772))+((x15767*x15783))+(((-1.0)*x15775*x15778))+(((-1.0)*x15770*x15783))+((r11*x15771))+(((-1.0)*x15774*x15775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15784=((1.0)*sj0);
IkReal x15785=((1.0)*cj0);
CheckValue<IkReal> x15786 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x15785))+(((-1.0)*r12*x15784)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r11*sj5*x15784))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x15785)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15786.valid){
continue;
}
CheckValue<IkReal> x15787=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15786.value)+(((1.5707963267949)*(x15787.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15788=IKsin(j4);
IkReal x15789=IKcos(j4);
IkReal x15790=(r11*sj5);
IkReal x15791=(cj5*r10);
IkReal x15792=(sj1*sj2);
IkReal x15793=(cj5*sj3);
IkReal x15794=((1.0)*sj0);
IkReal x15795=(cj3*cj5);
IkReal x15796=(cj3*sj5);
IkReal x15797=(r21*sj5);
IkReal x15798=(cj2*sj1);
IkReal x15799=(sj3*sj5);
IkReal x15800=(r01*sj5);
IkReal x15801=((1.0)*cj0);
IkReal x15802=(cj1*sj2);
IkReal x15803=((1.0)*x15789);
IkReal x15804=((1.0)*x15788);
IkReal x15805=(cj3*x15789);
IkReal x15806=((1.0)*cj1*cj2);
IkReal x15807=(cj3*x15788);
evalcond[0]=((((-1.0)*cj5*r20*x15804))+((x15788*x15797))+(((-1.0)*r22*x15803)));
evalcond[1]=((((-1.0)*r12*x15803))+cj0+((x15788*x15790))+(((-1.0)*x15791*x15804)));
evalcond[2]=((((-1.0)*cj5*r00*x15804))+((x15788*x15800))+(((-1.0)*x15794))+(((-1.0)*r02*x15803)));
evalcond[3]=(((r20*x15799))+((r21*x15793))+x15798+(((-1.0)*r20*x15795*x15803))+((r22*x15807))+x15802+((r21*x15789*x15796)));
evalcond[4]=((((-1.0)*x15806))+(((-1.0)*sj3*x15797*x15803))+((r20*x15796))+((r21*x15795))+x15792+(((-1.0)*r22*sj3*x15804))+((r20*x15789*x15793)));
evalcond[5]=(((r01*x15789*x15796))+((cj0*x15792))+(((-1.0)*r00*x15795*x15803))+((r01*x15793))+((r02*x15807))+((r00*x15799))+(((-1.0)*cj1*cj2*x15801)));
evalcond[6]=(((r12*x15807))+((r11*x15793))+(((-1.0)*cj1*cj2*x15794))+((x15790*x15805))+((r10*x15799))+(((-1.0)*cj3*x15791*x15803))+((sj0*x15792)));
evalcond[7]=((((-1.0)*x15798*x15801))+((r00*x15789*x15793))+(((-1.0)*r02*sj3*x15804))+((r01*x15795))+((r00*x15796))+(((-1.0)*r01*x15799*x15803))+(((-1.0)*x15801*x15802)));
evalcond[8]=(((r11*x15795))+(((-1.0)*x15794*x15798))+((r10*x15796))+((sj3*x15789*x15791))+(((-1.0)*sj3*x15790*x15803))+(((-1.0)*x15794*x15802))+(((-1.0)*r12*sj3*x15804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15808=((1.0)*cj5);
CheckValue<IkReal> x15809 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x15808)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15809.valid){
continue;
}
CheckValue<IkReal> x15810=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x15808))+(((-1.0)*r10*sj5)))),-1);
if(!x15810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15809.value)+(((1.5707963267949)*(x15810.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15811=IKsin(j4);
IkReal x15812=IKcos(j4);
IkReal x15813=(r11*sj5);
IkReal x15814=(cj5*r10);
IkReal x15815=(sj1*sj2);
IkReal x15816=(cj5*sj3);
IkReal x15817=((1.0)*sj0);
IkReal x15818=(cj3*cj5);
IkReal x15819=(cj3*sj5);
IkReal x15820=(r21*sj5);
IkReal x15821=(cj2*sj1);
IkReal x15822=(sj3*sj5);
IkReal x15823=(r01*sj5);
IkReal x15824=((1.0)*cj0);
IkReal x15825=(cj1*sj2);
IkReal x15826=((1.0)*x15812);
IkReal x15827=((1.0)*x15811);
IkReal x15828=(cj3*x15812);
IkReal x15829=((1.0)*cj1*cj2);
IkReal x15830=(cj3*x15811);
evalcond[0]=((((-1.0)*cj5*r20*x15827))+(((-1.0)*r22*x15826))+((x15811*x15820)));
evalcond[1]=((((-1.0)*x15814*x15827))+cj0+(((-1.0)*r12*x15826))+((x15811*x15813)));
evalcond[2]=((((-1.0)*r02*x15826))+(((-1.0)*x15817))+((x15811*x15823))+(((-1.0)*cj5*r00*x15827)));
evalcond[3]=(((r20*x15822))+((r22*x15830))+((r21*x15812*x15819))+(((-1.0)*r20*x15818*x15826))+((r21*x15816))+x15821+x15825);
evalcond[4]=((((-1.0)*sj3*x15820*x15826))+((r20*x15812*x15816))+(((-1.0)*x15829))+(((-1.0)*r22*sj3*x15827))+((r21*x15818))+((r20*x15819))+x15815);
evalcond[5]=(((r02*x15830))+(((-1.0)*r00*x15818*x15826))+((r00*x15822))+((cj0*x15815))+(((-1.0)*cj1*cj2*x15824))+((r01*x15812*x15819))+((r01*x15816)));
evalcond[6]=(((r11*x15816))+(((-1.0)*cj1*cj2*x15817))+((sj0*x15815))+((x15813*x15828))+((r12*x15830))+((r10*x15822))+(((-1.0)*cj3*x15814*x15826)));
evalcond[7]=(((r00*x15812*x15816))+(((-1.0)*x15824*x15825))+(((-1.0)*r02*sj3*x15827))+(((-1.0)*x15821*x15824))+((r00*x15819))+((r01*x15818))+(((-1.0)*r01*x15822*x15826)));
evalcond[8]=(((r11*x15818))+((r10*x15819))+(((-1.0)*sj3*x15813*x15826))+(((-1.0)*x15817*x15821))+(((-1.0)*x15817*x15825))+(((-1.0)*r12*sj3*x15827))+((sj3*x15812*x15814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15831=((1.0)*cj5);
CheckValue<IkReal> x15832=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15831)))),-1);
if(!x15832.valid){
continue;
}
CheckValue<IkReal> x15833 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x15831)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15832.value)))+(x15833.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15834=IKsin(j4);
IkReal x15835=IKcos(j4);
IkReal x15836=(r11*sj5);
IkReal x15837=(cj5*r10);
IkReal x15838=(sj1*sj2);
IkReal x15839=(cj5*sj3);
IkReal x15840=((1.0)*sj0);
IkReal x15841=(cj3*cj5);
IkReal x15842=(cj3*sj5);
IkReal x15843=(r21*sj5);
IkReal x15844=(cj2*sj1);
IkReal x15845=(sj3*sj5);
IkReal x15846=(r01*sj5);
IkReal x15847=((1.0)*cj0);
IkReal x15848=(cj1*sj2);
IkReal x15849=((1.0)*x15835);
IkReal x15850=((1.0)*x15834);
IkReal x15851=(cj3*x15835);
IkReal x15852=((1.0)*cj1*cj2);
IkReal x15853=(cj3*x15834);
evalcond[0]=((((-1.0)*cj5*r20*x15850))+(((-1.0)*r22*x15849))+((x15834*x15843)));
evalcond[1]=(cj0+((x15834*x15836))+(((-1.0)*r12*x15849))+(((-1.0)*x15837*x15850)));
evalcond[2]=((((-1.0)*x15840))+((x15834*x15846))+(((-1.0)*r02*x15849))+(((-1.0)*cj5*r00*x15850)));
evalcond[3]=(((r20*x15845))+(((-1.0)*r20*x15841*x15849))+((r22*x15853))+((r21*x15835*x15842))+x15848+x15844+((r21*x15839)));
evalcond[4]=(((r20*x15842))+((r21*x15841))+((r20*x15835*x15839))+(((-1.0)*x15852))+(((-1.0)*r22*sj3*x15850))+x15838+(((-1.0)*sj3*x15843*x15849)));
evalcond[5]=(((r00*x15845))+(((-1.0)*r00*x15841*x15849))+((cj0*x15838))+(((-1.0)*cj1*cj2*x15847))+((r02*x15853))+((r01*x15835*x15842))+((r01*x15839)));
evalcond[6]=(((r12*x15853))+(((-1.0)*cj3*x15837*x15849))+((sj0*x15838))+((r11*x15839))+(((-1.0)*cj1*cj2*x15840))+((r10*x15845))+((x15836*x15851)));
evalcond[7]=(((r01*x15841))+((r00*x15842))+(((-1.0)*r02*sj3*x15850))+(((-1.0)*x15844*x15847))+(((-1.0)*x15847*x15848))+((r00*x15835*x15839))+(((-1.0)*r01*x15845*x15849)));
evalcond[8]=(((r11*x15841))+(((-1.0)*sj3*x15836*x15849))+((r10*x15842))+(((-1.0)*r12*sj3*x15850))+((sj3*x15835*x15837))+(((-1.0)*x15840*x15848))+(((-1.0)*x15840*x15844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15854=cj5*cj5;
IkReal x15855=r21*r21;
IkReal x15856=r20*r20;
IkReal x15857=(r20*r21);
IkReal x15858=((1.0)*cj3);
IkReal x15859=((1.0)*cj5);
IkReal x15860=(cj1*sj2);
IkReal x15861=(cj5*sj5);
IkReal x15862=(sj3*sj5);
IkReal x15863=(cj2*sj1);
IkReal x15864=(r21*sj5);
CheckValue<IkReal> x15865 = IKatan2WithCheck(IkReal((((r22*x15863))+((r22*x15860))+((cj5*r21*r22*sj3))+((r20*r22*x15862)))),IkReal((((sj3*x15855*x15861))+(((-1.0)*x15856*x15859*x15862))+(((-2.0)*sj3*x15854*x15857))+((x15860*x15864))+((sj3*x15857))+(((-1.0)*r20*x15859*x15860))+(((-1.0)*r20*x15859*x15863))+((x15863*x15864)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15865.valid){
continue;
}
CheckValue<IkReal> x15866=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15858*(r22*r22)))+(((2.0)*cj3*x15857*x15861))+(((-1.0)*x15855*x15858))+((cj3*x15854*x15855))+(((-1.0)*x15854*x15856*x15858)))),-1);
if(!x15866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15865.value)+(((1.5707963267949)*(x15866.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15867=IKsin(j4);
IkReal x15868=IKcos(j4);
IkReal x15869=(cj3*r21);
IkReal x15870=(r21*sj5);
IkReal x15871=(r20*sj5);
IkReal x15872=(cj5*r20);
IkReal x15873=((1.0)*x15868);
IkReal x15874=((1.0)*x15867);
evalcond[0]=((((-1.0)*x15872*x15874))+(((-1.0)*r22*x15873))+((x15867*x15870)));
evalcond[1]=((((-1.0)*cj3*x15872*x15873))+((cj2*sj1))+((sj5*x15868*x15869))+((cj3*r22*x15867))+((cj5*r21*sj3))+((cj1*sj2))+((sj3*x15871)));
evalcond[2]=(((cj5*x15869))+((cj3*x15871))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*x15874))+(((-1.0)*sj3*x15870*x15873))+((sj3*x15868*x15872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15875=(cj5*sj4);
IkReal x15876=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x15875))+(((-1.0)*cj4*r02))+((r01*x15876)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15875))+(((-1.0)*r11*x15876))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x15875))+(((-1.0)*cj4*r02))+((r01*x15876))))+IKsqr((((r10*x15875))+(((-1.0)*r11*x15876))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x15875))+(((-1.0)*cj4*r02))+((r01*x15876))), (((r10*x15875))+(((-1.0)*r11*x15876))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15877=IKcos(j0);
IkReal x15878=IKsin(j0);
IkReal x15879=(r02*sj4);
IkReal x15880=((0.1)*sj5);
IkReal x15881=(cj5*r11);
IkReal x15882=((1.0)*sj3);
IkReal x15883=(r12*sj4);
IkReal x15884=((1.0)*cj3);
IkReal x15885=(r11*sj5);
IkReal x15886=(cj3*cj4);
IkReal x15887=((1.0)*sj2);
IkReal x15888=(cj5*r01);
IkReal x15889=(r01*sj5);
IkReal x15890=(sj1*sj2);
IkReal x15891=(cj1*cj2);
IkReal x15892=(r00*sj5);
IkReal x15893=((1.0)*cj2);
IkReal x15894=(r10*sj5);
IkReal x15895=((1.0)*cj4);
IkReal x15896=(cj4*cj5*r00);
IkReal x15897=(cj1*x15877);
IkReal x15898=(cj4*cj5*r10);
IkReal x15899=((0.392)*x15878);
IkReal x15900=((1.0)*x15878);
IkReal x15901=(cj1*x15878);
IkReal x15902=((1.0)*cj5*sj4);
evalcond[0]=(((sj4*x15885))+(((-1.0)*r10*x15902))+(((-1.0)*r12*x15895))+x15877);
evalcond[1]=((((-1.0)*r00*x15902))+(((-1.0)*r02*x15895))+((sj4*x15889))+(((-1.0)*x15900)));
evalcond[2]=((((0.392)*x15877*x15891))+(((-0.134)*x15878))+(((-0.1)*x15888))+(((-1.0)*px))+(((-1.0)*r00*x15880))+(((0.425)*x15897))+(((-0.392)*x15877*x15890)));
evalcond[3]=((((0.134)*x15877))+(((-0.1)*x15881))+(((-1.0)*py))+(((-1.0)*r10*x15880))+((x15891*x15899))+(((0.425)*x15901))+(((-1.0)*x15890*x15899)));
evalcond[4]=(((x15877*x15890))+((cj3*x15879))+((x15886*x15889))+(((-1.0)*x15877*x15891))+((sj3*x15888))+(((-1.0)*x15884*x15896))+((sj3*x15892)));
evalcond[5]=(((cj3*x15883))+(((-1.0)*x15891*x15900))+((sj3*x15881))+(((-1.0)*x15884*x15898))+((sj3*x15894))+((x15878*x15890))+((x15885*x15886)));
evalcond[6]=(((cj3*x15888))+((cj3*x15892))+(((-1.0)*sj1*x15877*x15893))+(((-1.0)*cj4*x15882*x15889))+(((-1.0)*x15887*x15897))+((sj3*x15896))+(((-1.0)*x15879*x15882)));
evalcond[7]=((((-1.0)*x15882*x15883))+((cj3*x15881))+((cj3*x15894))+(((-1.0)*sj1*x15878*x15893))+(((-1.0)*cj4*x15882*x15885))+(((-1.0)*x15887*x15901))+((sj3*x15898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15903=cj5*cj5;
IkReal x15904=r21*r21;
IkReal x15905=r20*r20;
IkReal x15906=(r20*r21);
IkReal x15907=(sj1*sj2);
IkReal x15908=(r21*sj5);
IkReal x15909=(cj1*cj2);
IkReal x15910=(cj5*r20);
IkReal x15911=(cj5*sj5);
IkReal x15912=(cj3*r22);
IkReal x15913=(sj3*x15904);
CheckValue<IkReal> x15914 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15909))+((r22*x15907))+((r20*sj5*x15912))+((cj5*r21*x15912)))),IkReal((((x15907*x15908))+((x15909*x15910))+(((-2.0)*cj3*x15903*x15906))+((cj3*x15904*x15911))+(((-1.0)*x15907*x15910))+((cj3*x15906))+(((-1.0)*x15908*x15909))+(((-1.0)*cj3*x15905*x15911)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15914.valid){
continue;
}
CheckValue<IkReal> x15915=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x15906*x15911))+((sj3*x15903*x15905))+(((-1.0)*x15903*x15913))+x15913)),-1);
if(!x15915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15914.value)+(((1.5707963267949)*(x15915.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15916=IKsin(j4);
IkReal x15917=IKcos(j4);
IkReal x15918=(cj3*r21);
IkReal x15919=(r21*sj5);
IkReal x15920=(r20*sj5);
IkReal x15921=(cj5*r20);
IkReal x15922=((1.0)*x15917);
IkReal x15923=((1.0)*x15916);
evalcond[0]=((((-1.0)*x15921*x15923))+((x15916*x15919))+(((-1.0)*r22*x15922)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+(((-1.0)*cj3*x15921*x15922))+((cj3*r22*x15916))+((cj1*sj2))+((sj3*x15920))+((sj5*x15917*x15918)));
evalcond[2]=(((cj5*x15918))+((sj3*x15917*x15921))+(((-1.0)*cj1*cj2))+((cj3*x15920))+((sj1*sj2))+(((-1.0)*sj3*x15919*x15922))+(((-1.0)*r22*sj3*x15923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15924=(cj5*sj4);
IkReal x15925=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15925))+(((-1.0)*r00*x15924)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15924))+(((-1.0)*r11*x15925))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15925))+(((-1.0)*r00*x15924))))+IKsqr((((r10*x15924))+(((-1.0)*r11*x15925))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15925))+(((-1.0)*r00*x15924))), (((r10*x15924))+(((-1.0)*r11*x15925))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15926=IKcos(j0);
IkReal x15927=IKsin(j0);
IkReal x15928=(r02*sj4);
IkReal x15929=((0.1)*sj5);
IkReal x15930=(cj5*r11);
IkReal x15931=((1.0)*sj3);
IkReal x15932=(r12*sj4);
IkReal x15933=((1.0)*cj3);
IkReal x15934=(r11*sj5);
IkReal x15935=(cj3*cj4);
IkReal x15936=((1.0)*sj2);
IkReal x15937=(cj5*r01);
IkReal x15938=(r01*sj5);
IkReal x15939=(sj1*sj2);
IkReal x15940=(cj1*cj2);
IkReal x15941=(r00*sj5);
IkReal x15942=((1.0)*cj2);
IkReal x15943=(r10*sj5);
IkReal x15944=((1.0)*cj4);
IkReal x15945=(cj4*cj5*r00);
IkReal x15946=(cj1*x15926);
IkReal x15947=(cj4*cj5*r10);
IkReal x15948=((0.392)*x15927);
IkReal x15949=((1.0)*x15927);
IkReal x15950=(cj1*x15927);
IkReal x15951=((1.0)*cj5*sj4);
evalcond[0]=((((-1.0)*r12*x15944))+((sj4*x15934))+(((-1.0)*r10*x15951))+x15926);
evalcond[1]=((((-1.0)*r02*x15944))+(((-1.0)*r00*x15951))+(((-1.0)*x15949))+((sj4*x15938)));
evalcond[2]=((((-0.134)*x15927))+(((0.392)*x15926*x15940))+(((-0.1)*x15937))+(((-1.0)*px))+(((0.425)*x15946))+(((-0.392)*x15926*x15939))+(((-1.0)*r00*x15929)));
evalcond[3]=(((x15940*x15948))+(((-1.0)*r10*x15929))+(((-0.1)*x15930))+(((0.134)*x15926))+(((-1.0)*py))+(((0.425)*x15950))+(((-1.0)*x15939*x15948)));
evalcond[4]=((((-1.0)*x15933*x15945))+((x15926*x15939))+((cj3*x15928))+((x15935*x15938))+((sj3*x15941))+((sj3*x15937))+(((-1.0)*x15926*x15940)));
evalcond[5]=((((-1.0)*x15933*x15947))+((x15927*x15939))+((cj3*x15932))+(((-1.0)*x15940*x15949))+((sj3*x15943))+((sj3*x15930))+((x15934*x15935)));
evalcond[6]=(((cj3*x15941))+(((-1.0)*cj4*x15931*x15938))+(((-1.0)*x15936*x15946))+((cj3*x15937))+(((-1.0)*x15928*x15931))+((sj3*x15945))+(((-1.0)*sj1*x15926*x15942)));
evalcond[7]=((((-1.0)*sj1*x15927*x15942))+((cj3*x15943))+(((-1.0)*cj4*x15931*x15934))+(((-1.0)*x15931*x15932))+((cj3*x15930))+(((-1.0)*x15936*x15950))+((sj3*x15947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5e (5f561981e0e5d0632f1bb3734b78f46f)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
